
blink411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d68  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08008f08  08008f08  00009f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009164  08009164  0000b0b8  2**0
                  CONTENTS
  4 .ARM          00000008  08009164  08009164  0000a164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800916c  0800916c  0000b0b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800916c  0800916c  0000a16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009170  08009170  0000a170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b8  20000000  08009174  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005024  200000b8  0800922c  0000b0b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050dc  0800922c  0000b0dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bcb9  00000000  00000000  0000b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c20  00000000  00000000  00026da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  0002a9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000127d  00000000  00000000  0002c190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e7c  00000000  00000000  0002d40d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a66d  00000000  00000000  00032289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d5d6  00000000  00000000  0004c8f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9ecc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d88  00000000  00000000  000e9f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000031  00000000  00000000  000f0c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b8 	.word	0x200000b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ef0 	.word	0x08008ef0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000bc 	.word	0x200000bc
 80001dc:	08008ef0 	.word	0x08008ef0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f001 fd7e 	bl	8002084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f82a 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f91a 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f000 f8f0 	bl	8000774 <MX_DMA_Init>
  MX_SPI1_Init();
 8000594:	f000 f88e 	bl	80006b4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000598:	f000 f8c2 	bl	8000720 <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059c:	f004 fd6e 	bl	800507c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskADC */
  TaskADCHandle = osThreadNew(StartTaskADC, NULL, &TaskADC_attributes);
 80005a0:	4a09      	ldr	r2, [pc, #36]	@ (80005c8 <main+0x48>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4809      	ldr	r0, [pc, #36]	@ (80005cc <main+0x4c>)
 80005a6:	f004 fdb3 	bl	8005110 <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a08      	ldr	r2, [pc, #32]	@ (80005d0 <main+0x50>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* creation of TaskCAN */
  //TaskCANHandle = osThreadNew(StartTaskCAN, NULL, &TaskCAN_attributes);

  /* creation of TaskSPI */
  TaskSPIHandle = osThreadNew(StartTaskSPI, NULL, &TaskSPI_attributes);
 80005b0:	4a08      	ldr	r2, [pc, #32]	@ (80005d4 <main+0x54>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <main+0x58>)
 80005b6:	f004 fdab 	bl	8005110 <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <main+0x5c>)
 80005be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c0:	f004 fd80 	bl	80050c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <main+0x44>
 80005c8:	080090c8 	.word	0x080090c8
 80005cc:	08000a95 	.word	0x08000a95
 80005d0:	20000234 	.word	0x20000234
 80005d4:	080090ec 	.word	0x080090ec
 80005d8:	08000bdd 	.word	0x08000bdd
 80005dc:	20000238 	.word	0x20000238

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	@ 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 fc59 	bl	8007ea6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b28      	ldr	r3, [pc, #160]	@ (80006ac <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	4a27      	ldr	r2, [pc, #156]	@ (80006ac <SystemClock_Config+0xcc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	@ 0x40
 8000614:	4b25      	ldr	r3, [pc, #148]	@ (80006ac <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a21      	ldr	r2, [pc, #132]	@ (80006b0 <SystemClock_Config+0xd0>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000650:	2310      	movs	r3, #16
 8000652:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000654:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065a:	2304      	movs	r3, #4
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065e:	2304      	movs	r3, #4
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fb9e 	bl	8002da8 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000672:	f000 fb9d 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000682:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2102      	movs	r1, #2
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fdff 	bl	8003298 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a0:	f000 fb86 	bl	8000db0 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	@ 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b8:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006ba:	4a18      	ldr	r2, [pc, #96]	@ (800071c <MX_SPI1_Init+0x68>)
 80006bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006be:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006e8:	2220      	movs	r2, #32
 80006ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <MX_SPI1_Init+0x64>)
 8000700:	220a      	movs	r2, #10
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <MX_SPI1_Init+0x64>)
 8000706:	f002 ffd9 	bl	80036bc <HAL_SPI_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 fb4e 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000d4 	.word	0x200000d4
 800071c:	40013000 	.word	0x40013000

08000720 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_USART1_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_USART1_UART_Init+0x4c>)
 8000758:	f004 f840 	bl	80047dc <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 fb25 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  
  /* USER CODE END USART1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200001ec 	.word	0x200001ec
 8000770:	40011000 	.word	0x40011000

08000774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_DMA_Init+0x4c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a0f      	ldr	r2, [pc, #60]	@ (80007c0 <MX_DMA_Init+0x4c>)
 8000784:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b0d      	ldr	r3, [pc, #52]	@ (80007c0 <MX_DMA_Init+0x4c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2101      	movs	r1, #1
 800079a:	2038      	movs	r0, #56	@ 0x38
 800079c:	f001 fd90 	bl	80022c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007a0:	2038      	movs	r0, #56	@ 0x38
 80007a2:	f001 fda9 	bl	80022f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2101      	movs	r1, #1
 80007aa:	203a      	movs	r0, #58	@ 0x3a
 80007ac:	f001 fd88 	bl	80022c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007b0:	203a      	movs	r0, #58	@ 0x3a
 80007b2:	f001 fda1 	bl	80022f8 <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b31      	ldr	r3, [pc, #196]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a30      	ldr	r2, [pc, #192]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b2e      	ldr	r3, [pc, #184]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b2a      	ldr	r3, [pc, #168]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a29      	ldr	r2, [pc, #164]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b27      	ldr	r3, [pc, #156]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b23      	ldr	r3, [pc, #140]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a22      	ldr	r2, [pc, #136]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b20      	ldr	r3, [pc, #128]	@ (80008a4 <MX_GPIO_Init+0xe0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedOnBoard_GPIO_Port, LedOnBoard_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000834:	481c      	ldr	r0, [pc, #112]	@ (80008a8 <MX_GPIO_Init+0xe4>)
 8000836:	f002 fa79 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000840:	481a      	ldr	r0, [pc, #104]	@ (80008ac <MX_GPIO_Init+0xe8>)
 8000842:	f002 fa73 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedOnBoard_Pin */
  GPIO_InitStruct.Pin = LedOnBoard_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800084a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LedOnBoard_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	4812      	ldr	r0, [pc, #72]	@ (80008a8 <MX_GPIO_Init+0xe4>)
 8000860:	f002 f8c8 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	480b      	ldr	r0, [pc, #44]	@ (80008ac <MX_GPIO_Init+0xe8>)
 800087e:	f002 f8b9 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_INT_Pin */
  GPIO_InitStruct.Pin = MCP2515_INT_Pin;
 8000882:	2340      	movs	r3, #64	@ 0x40
 8000884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000886:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800088c:	2301      	movs	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MCP2515_INT_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	4619      	mov	r1, r3
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_GPIO_Init+0xe8>)
 8000898:	f002 f8ac 	bl	80029f4 <HAL_GPIO_Init>
  //HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
  //HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020400 	.word	0x40020400

080008b0 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
    // Verifica che questo callback sia per il tuo hspi
    if (hspi == &hspi1) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <HAL_SPI_TxCpltCallback+0x24>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d102      	bne.n	80008c6 <HAL_SPI_TxCpltCallback+0x16>
        //MCP2515_SetTransmissionComplete(&mcp2515_1, 1);
    	mcp2515_1.transmissionComplete = true;
 80008c0:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <HAL_SPI_TxCpltCallback+0x28>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	731a      	strb	r2, [r3, #12]
        //BaseType_t xHigherPriorityTaskWoken = pdFALSE;
        //vTaskNotifyGiveFromISR(xTaskHandleSPI, &xHigherPriorityTaskWoken);
        //portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    }
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	200000d4 	.word	0x200000d4
 80008d8:	2000023c 	.word	0x2000023c

080008dc <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <HAL_SPI_RxCpltCallback+0x24>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d102      	bne.n	80008f2 <HAL_SPI_RxCpltCallback+0x16>
    	//MCP2515_SetTransmissionComplete(&mcp2515_1, 1);
    	mcp2515_1.transmissionComplete = true;
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_SPI_RxCpltCallback+0x28>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	731a      	strb	r2, [r3, #12]
    }
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	200000d4 	.word	0x200000d4
 8000904:	2000023c 	.word	0x2000023c

08000908 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4a06      	ldr	r2, [pc, #24]	@ (800092c <HAL_SPI_TxRxCpltCallback+0x24>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d102      	bne.n	800091e <HAL_SPI_TxRxCpltCallback+0x16>
    	//MCP2515_SetTransmissionComplete(&mcp2515_1, 1);
    	mcp2515_1.transmissionComplete = true;
 8000918:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <HAL_SPI_TxRxCpltCallback+0x28>)
 800091a:	2201      	movs	r2, #1
 800091c:	731a      	strb	r2, [r3, #12]
    }
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	200000d4 	.word	0x200000d4
 8000930:	2000023c 	.word	0x2000023c

08000934 <__io_putchar>:
        HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);*/
    //}
//}


int __io_putchar(int ch) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    // Invia il carattere tramite USART (ad esempio huart1)
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800093c:	1d39      	adds	r1, r7, #4
 800093e:	f04f 33ff 	mov.w	r3, #4294967295
 8000942:	2201      	movs	r2, #1
 8000944:	4803      	ldr	r0, [pc, #12]	@ (8000954 <__io_putchar+0x20>)
 8000946:	f003 ff99 	bl	800487c <HAL_UART_Transmit>
    return ch;
 800094a:	687b      	ldr	r3, [r7, #4]
  }
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200001ec 	.word	0x200001ec

08000958 <_write>:

  int _write(int file, char *ptr, int len) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
      for (int i = 0; i < len; i++) {
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	e009      	b.n	800097e <_write+0x26>
          __io_putchar(*ptr++);
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	1c5a      	adds	r2, r3, #1
 800096e:	60ba      	str	r2, [r7, #8]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ffde 	bl	8000934 <__io_putchar>
      for (int i = 0; i < len; i++) {
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	3301      	adds	r3, #1
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	429a      	cmp	r2, r3
 8000984:	dbf1      	blt.n	800096a <_write+0x12>
      }
      return len;
 8000986:	687b      	ldr	r3, [r7, #4]
  }
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <canMsgTx>:

    /* uso
    int arraySize = sizeof(writeMessage) / sizeof(writeMessage[0]);
    printByteArray(writeMessage, arraySize);*/
}
void canMsgTx(uint8_t* dataToSend, uint32_t* msgID, uint8_t extendedFormat, uint8_t dlc){
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	4611      	mov	r1, r2
 800099c:	461a      	mov	r2, r3
 800099e:	460b      	mov	r3, r1
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	4613      	mov	r3, r2
 80009a4:	71bb      	strb	r3, [r7, #6]
	static uint8_t indexTx = 0;
	uint8_t msgId_bf[4];

	if (extendedFormat){
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d025      	beq.n	80009f8 <canMsgTx+0x68>
		  msgId_bf[0] = (*msgID >> 3) & 0xFF;  // Estrai il byte alto (MSB)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	753b      	strb	r3, [r7, #20]
		  msgId_bf[1] = (*msgID << 5) & 0xE0;         // Estrai il byte basso (LSB)
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	015b      	lsls	r3, r3, #5
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	757b      	strb	r3, [r7, #21]
		  msgId_bf[1] = msgId_bf[1] | 8;
 80009c2:	7d7b      	ldrb	r3, [r7, #21]
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	757b      	strb	r3, [r7, #21]
		  msgId_bf[1] = msgId_bf[1] | ((*msgID >> 28) & 0x02);
 80009cc:	7d7a      	ldrb	r2, [r7, #21]
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	0f1b      	lsrs	r3, r3, #28
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	4313      	orrs	r3, r2
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	757b      	strb	r3, [r7, #21]
		  msgId_bf[2] = (*msgID >> 19) & 0xFF;
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	0cdb      	lsrs	r3, r3, #19
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	75bb      	strb	r3, [r7, #22]
		  msgId_bf[3] = (*msgID >> 11) & 0xFF;
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	0adb      	lsrs	r3, r3, #11
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	75fb      	strb	r3, [r7, #23]
 80009f6:	e00a      	b.n	8000a0e <canMsgTx+0x7e>

	  } else{

		msgId_bf[0] = (*msgID >> 3) & 0xFF;  // Estrai il byte alto (MSB)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	08db      	lsrs	r3, r3, #3
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	753b      	strb	r3, [r7, #20]
		msgId_bf[1] = (*msgID << 5) & 0xE0;         // Estrai il byte basso (LSB)
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	015b      	lsls	r3, r3, #5
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	757b      	strb	r3, [r7, #21]
	  }


	  memcpy(canMessageTx[indexTx].msgID, msgId_bf, sizeof(msgId_bf));
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <canMsgTx+0xfc>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	461a      	mov	r2, r3
 8000a14:	4613      	mov	r3, r2
 8000a16:	011b      	lsls	r3, r3, #4
 8000a18:	1a9b      	subs	r3, r3, r2
 8000a1a:	3308      	adds	r3, #8
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <canMsgTx+0x100>)
 8000a1e:	4413      	add	r3, r2
 8000a20:	697a      	ldr	r2, [r7, #20]
 8000a22:	601a      	str	r2, [r3, #0]
	  memcpy(canMessageTx[indexTx].msgData, dataToSend, dlc);
 8000a24:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <canMsgTx+0xfc>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	011b      	lsls	r3, r3, #4
 8000a2e:	1a9b      	subs	r3, r3, r2
 8000a30:	4a17      	ldr	r2, [pc, #92]	@ (8000a90 <canMsgTx+0x100>)
 8000a32:	4413      	add	r3, r2
 8000a34:	79ba      	ldrb	r2, [r7, #6]
 8000a36:	68f9      	ldr	r1, [r7, #12]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f007 fb06 	bl	800804a <memcpy>
	  canMessageTx[indexTx].dlc = dlc;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <canMsgTx+0xfc>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4619      	mov	r1, r3
 8000a44:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <canMsgTx+0x100>)
 8000a46:	460b      	mov	r3, r1
 8000a48:	011b      	lsls	r3, r3, #4
 8000a4a:	1a5b      	subs	r3, r3, r1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	330c      	adds	r3, #12
 8000a50:	79ba      	ldrb	r2, [r7, #6]
 8000a52:	701a      	strb	r2, [r3, #0]
	  canMessageTx[indexTx].newMsg = true;
 8000a54:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <canMsgTx+0xfc>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000a90 <canMsgTx+0x100>)
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	4413      	add	r3, r2
 8000a64:	330d      	adds	r3, #13
 8000a66:	2201      	movs	r2, #1
 8000a68:	701a      	strb	r2, [r3, #0]

	  indexTx++;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <canMsgTx+0xfc>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <canMsgTx+0xfc>)
 8000a74:	701a      	strb	r2, [r3, #0]
	  if (indexTx >= BUFFER_TX_SPI) {
 8000a76:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <canMsgTx+0xfc>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b31      	cmp	r3, #49	@ 0x31
 8000a7c:	d902      	bls.n	8000a84 <canMsgTx+0xf4>
		  indexTx = 0;
 8000a7e:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <canMsgTx+0xfc>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
	  }

}
 8000a84:	bf00      	nop
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2000053a 	.word	0x2000053a
 8000a90:	2000024c 	.word	0x2000024c

08000a94 <StartTaskADC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void *argument)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b092      	sub	sp, #72	@ 0x48
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000a9c:	f005 fd06 	bl	80064ac <xTaskGetTickCount>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	const TickType_t xFrequency = 5;
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	647b      	str	r3, [r7, #68]	@ 0x44
	static uint8_t dataToSend10[8] = {0x7E, 0xD4, 0x11, 0x89, 0xB5, 0x23, 0x6A, 0xFC};
	static uint8_t dataToSend11[8] = {0x4B, 0xC3, 0x9F, 0x02, 0x71, 0xD8, 0xA6, 0x5D};
	static uint8_t dataToSend12[8] = {0x99, 0x28, 0x73, 0xC4, 0xF6, 0x13, 0xB1, 0x2E};
	static uint8_t dataToSend13[8] = {0xEF, 0x5A, 0x64, 0x92, 0x3B, 0x87, 0xD3, 0x41};
	static uint8_t dataToSend14[8] = {0xAA, 0x38, 0x5C, 0x72, 0x49, 0xF1, 0xBE, 0x6D};
	uint32_t msgId1 = 0x200;
 8000aa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aac:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t msgId2 = 0x210;
 8000aae:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t msgId3 = 0x220;
 8000ab4:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000ab8:	623b      	str	r3, [r7, #32]
	uint32_t msgId4 = 0x230;
 8000aba:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8000abe:	61fb      	str	r3, [r7, #28]
	uint32_t msgId5 = 0x240;
 8000ac0:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ac4:	61bb      	str	r3, [r7, #24]
	uint32_t msgId6 = 0x250;
 8000ac6:	f44f 7314 	mov.w	r3, #592	@ 0x250
 8000aca:	617b      	str	r3, [r7, #20]
	uint32_t msgId7 = 0x260;
 8000acc:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8000ad0:	613b      	str	r3, [r7, #16]
	uint32_t msgId8 = 0x270;
 8000ad2:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8000ad6:	60fb      	str	r3, [r7, #12]
	uint32_t msgId9 = 0x280;
 8000ad8:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000adc:	60bb      	str	r3, [r7, #8]
	uint32_t msgId10 = 0x281;
 8000ade:	f240 2381 	movw	r3, #641	@ 0x281
 8000ae2:	643b      	str	r3, [r7, #64]	@ 0x40
	uint32_t msgId11 = 0x282;
 8000ae4:	f240 2382 	movw	r3, #642	@ 0x282
 8000ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t msgId12 = 0x283;
 8000aea:	f240 2383 	movw	r3, #643	@ 0x283
 8000aee:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t msgId13 = 0x284;
 8000af0:	f44f 7321 	mov.w	r3, #644	@ 0x284
 8000af4:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t msgId14 = 0x285;
 8000af6:	f240 2385 	movw	r3, #645	@ 0x285
 8000afa:	633b      	str	r3, [r7, #48]	@ 0x30
	// start_time = HAL_GetTick();

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000afc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000b02:	4618      	mov	r0, r3
 8000b04:	f005 fb36 	bl	8006174 <vTaskDelayUntil>


	  //start_time = HAL_GetTick();  // Usa SysTick per ottenere il tempo attuale

	  if (result_mcp2515Init == MCP2515_OK){
 8000b08:	4b2a      	ldr	r3, [pc, #168]	@ (8000bb4 <StartTaskADC+0x120>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1f5      	bne.n	8000afc <StartTaskADC+0x68>

		  // Incrementa il contatore
		  dataToSend1[0]++;
 8000b10:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <StartTaskADC+0x124>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <StartTaskADC+0x124>)
 8000b1a:	701a      	strb	r2, [r3, #0]
		  dataToSend2[0]--;
 8000b1c:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <StartTaskADC+0x128>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b25      	ldr	r3, [pc, #148]	@ (8000bbc <StartTaskADC+0x128>)
 8000b26:	701a      	strb	r2, [r3, #0]
		  dataToSend3[0]+=2;
 8000b28:	4b25      	ldr	r3, [pc, #148]	@ (8000bc0 <StartTaskADC+0x12c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <StartTaskADC+0x12c>)
 8000b32:	701a      	strb	r2, [r3, #0]

		  canMsgTx(dataToSend1, &msgId1, false, 8);
 8000b34:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000b38:	2308      	movs	r3, #8
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	481e      	ldr	r0, [pc, #120]	@ (8000bb8 <StartTaskADC+0x124>)
 8000b3e:	f7ff ff27 	bl	8000990 <canMsgTx>
		  canMsgTx(dataToSend2, &msgId2, false, 8);
 8000b42:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000b46:	2308      	movs	r3, #8
 8000b48:	2200      	movs	r2, #0
 8000b4a:	481c      	ldr	r0, [pc, #112]	@ (8000bbc <StartTaskADC+0x128>)
 8000b4c:	f7ff ff20 	bl	8000990 <canMsgTx>
		  canMsgTx(dataToSend3, &msgId3, false, 8);
 8000b50:	f107 0120 	add.w	r1, r7, #32
 8000b54:	2308      	movs	r3, #8
 8000b56:	2200      	movs	r2, #0
 8000b58:	4819      	ldr	r0, [pc, #100]	@ (8000bc0 <StartTaskADC+0x12c>)
 8000b5a:	f7ff ff19 	bl	8000990 <canMsgTx>
		  canMsgTx(dataToSend4, &msgId4, false, 8);
 8000b5e:	f107 011c 	add.w	r1, r7, #28
 8000b62:	2308      	movs	r3, #8
 8000b64:	2200      	movs	r2, #0
 8000b66:	4817      	ldr	r0, [pc, #92]	@ (8000bc4 <StartTaskADC+0x130>)
 8000b68:	f7ff ff12 	bl	8000990 <canMsgTx>
		  canMsgTx(dataToSend5, &msgId5, false, 8);
 8000b6c:	f107 0118 	add.w	r1, r7, #24
 8000b70:	2308      	movs	r3, #8
 8000b72:	2200      	movs	r2, #0
 8000b74:	4814      	ldr	r0, [pc, #80]	@ (8000bc8 <StartTaskADC+0x134>)
 8000b76:	f7ff ff0b 	bl	8000990 <canMsgTx>
		  canMsgTx(dataToSend6, &msgId6, false, 8);
 8000b7a:	f107 0114 	add.w	r1, r7, #20
 8000b7e:	2308      	movs	r3, #8
 8000b80:	2200      	movs	r2, #0
 8000b82:	4812      	ldr	r0, [pc, #72]	@ (8000bcc <StartTaskADC+0x138>)
 8000b84:	f7ff ff04 	bl	8000990 <canMsgTx>
		  canMsgTx(dataToSend7, &msgId7, false, 8);
 8000b88:	f107 0110 	add.w	r1, r7, #16
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	2200      	movs	r2, #0
 8000b90:	480f      	ldr	r0, [pc, #60]	@ (8000bd0 <StartTaskADC+0x13c>)
 8000b92:	f7ff fefd 	bl	8000990 <canMsgTx>
		  canMsgTx(dataToSend8, &msgId8, false, 8);
 8000b96:	f107 010c 	add.w	r1, r7, #12
 8000b9a:	2308      	movs	r3, #8
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <StartTaskADC+0x140>)
 8000ba0:	f7ff fef6 	bl	8000990 <canMsgTx>
		  canMsgTx(dataToSend9, &msgId9, false, 8);
 8000ba4:	f107 0108 	add.w	r1, r7, #8
 8000ba8:	2308      	movs	r3, #8
 8000baa:	2200      	movs	r2, #0
 8000bac:	480a      	ldr	r0, [pc, #40]	@ (8000bd8 <StartTaskADC+0x144>)
 8000bae:	f7ff feef 	bl	8000990 <canMsgTx>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000bb2:	e7a3      	b.n	8000afc <StartTaskADC+0x68>
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000004 	.word	0x20000004
 8000bbc:	2000000c 	.word	0x2000000c
 8000bc0:	20000014 	.word	0x20000014
 8000bc4:	2000001c 	.word	0x2000001c
 8000bc8:	20000024 	.word	0x20000024
 8000bcc:	2000002c 	.word	0x2000002c
 8000bd0:	20000034 	.word	0x20000034
 8000bd4:	2000003c 	.word	0x2000003c
 8000bd8:	20000044 	.word	0x20000044

08000bdc <StartTaskSPI>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSPI */
void StartTaskSPI(void *argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b098      	sub	sp, #96	@ 0x60
 8000be0:	af02      	add	r7, sp, #8
 8000be2:	6078      	str	r0, [r7, #4]
	MCP2515_MessageBuffer canMsg_buffer;


	// Inizializzazione del dispositivo MCP2515
	  //HAL_Delay(500);
	  initBuffer(&canMsg_buffer);
 8000be4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 ff77 	bl	8001adc <initBuffer>


	  uint8_t dummyData = 0x00;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	  HAL_SPI_Transmit(&hspi1, &dummyData, 1, HAL_MAX_DELAY); // Trasmissione dummy
 8000bf4:	f107 013b 	add.w	r1, r7, #59	@ 0x3b
 8000bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	4851      	ldr	r0, [pc, #324]	@ (8000d44 <StartTaskSPI+0x168>)
 8000c00:	f002 fde5 	bl	80037ce <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);  // CS alto
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c0a:	484f      	ldr	r0, [pc, #316]	@ (8000d48 <StartTaskSPI+0x16c>)
 8000c0c:	f002 f88e 	bl	8002d2c <HAL_GPIO_WritePin>


	  const char* resMcp2515_msg;
	  result_mcp2515Init = MCP2515_Init(&mcp2515_1, GPIOB, GPIO_PIN_13, &hspi1, CAN0_BAUDRATE, true);
 8000c10:	2301      	movs	r3, #1
 8000c12:	9301      	str	r3, [sp, #4]
 8000c14:	2302      	movs	r3, #2
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	4b4a      	ldr	r3, [pc, #296]	@ (8000d44 <StartTaskSPI+0x168>)
 8000c1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c1e:	494a      	ldr	r1, [pc, #296]	@ (8000d48 <StartTaskSPI+0x16c>)
 8000c20:	484a      	ldr	r0, [pc, #296]	@ (8000d4c <StartTaskSPI+0x170>)
 8000c22:	f000 f8cb 	bl	8000dbc <MCP2515_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b49      	ldr	r3, [pc, #292]	@ (8000d50 <StartTaskSPI+0x174>)
 8000c2c:	701a      	strb	r2, [r3, #0]
	  switch ( result_mcp2515Init){
 8000c2e:	4b48      	ldr	r3, [pc, #288]	@ (8000d50 <StartTaskSPI+0x174>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b09      	cmp	r3, #9
 8000c34:	d834      	bhi.n	8000ca0 <StartTaskSPI+0xc4>
 8000c36:	a201      	add	r2, pc, #4	@ (adr r2, 8000c3c <StartTaskSPI+0x60>)
 8000c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3c:	08000c65 	.word	0x08000c65
 8000c40:	08000c6b 	.word	0x08000c6b
 8000c44:	08000c71 	.word	0x08000c71
 8000c48:	08000c77 	.word	0x08000c77
 8000c4c:	08000c7d 	.word	0x08000c7d
 8000c50:	08000c83 	.word	0x08000c83
 8000c54:	08000c89 	.word	0x08000c89
 8000c58:	08000c8f 	.word	0x08000c8f
 8000c5c:	08000c95 	.word	0x08000c95
 8000c60:	08000c9b 	.word	0x08000c9b

	    case MCP2515_OK:
	      resMcp2515_msg = "Inizializzazione mcp2515 ok\n";
 8000c64:	4b3b      	ldr	r3, [pc, #236]	@ (8000d54 <StartTaskSPI+0x178>)
 8000c66:	657b      	str	r3, [r7, #84]	@ 0x54
	      break;
 8000c68:	e01d      	b.n	8000ca6 <StartTaskSPI+0xca>

	    case MCP2515_FAIL:
	      resMcp2515_msg = "Inizializzazione mcp2515 fallita\n";
 8000c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d58 <StartTaskSPI+0x17c>)
 8000c6c:	657b      	str	r3, [r7, #84]	@ 0x54
	      break;
 8000c6e:	e01a      	b.n	8000ca6 <StartTaskSPI+0xca>

	    case MCP2515_RESET_FAIL:
	      resMcp2515_msg = "Reset mcp2515 fallito\n";
 8000c70:	4b3a      	ldr	r3, [pc, #232]	@ (8000d5c <StartTaskSPI+0x180>)
 8000c72:	657b      	str	r3, [r7, #84]	@ 0x54
	      break;
 8000c74:	e017      	b.n	8000ca6 <StartTaskSPI+0xca>

	    case MCP2515_SET_BAUDRATE_FAIL:
	      resMcp2515_msg = "Set baudrate mcp2515 fallito\n";
 8000c76:	4b3a      	ldr	r3, [pc, #232]	@ (8000d60 <StartTaskSPI+0x184>)
 8000c78:	657b      	str	r3, [r7, #84]	@ 0x54
	      break;
 8000c7a:	e014      	b.n	8000ca6 <StartTaskSPI+0xca>

	    case MCP2515_SET_MODE_FAIL:
	      resMcp2515_msg = "Set modalita operativa mcp2515 fallita\n";
 8000c7c:	4b39      	ldr	r3, [pc, #228]	@ (8000d64 <StartTaskSPI+0x188>)
 8000c7e:	657b      	str	r3, [r7, #84]	@ 0x54
	      break;
 8000c80:	e011      	b.n	8000ca6 <StartTaskSPI+0xca>

	    case MCP2515_RESET_TIMEOUT:
	      resMcp2515_msg = "MCP2515_RESET_TIMEOUT\n";
 8000c82:	4b39      	ldr	r3, [pc, #228]	@ (8000d68 <StartTaskSPI+0x18c>)
 8000c84:	657b      	str	r3, [r7, #84]	@ 0x54
	      break;
 8000c86:	e00e      	b.n	8000ca6 <StartTaskSPI+0xca>

	    case MCP2515_READ_TIMEOUT_1:
	      resMcp2515_msg = "MCP2515_READ_TIMEOUT_1\n";
 8000c88:	4b38      	ldr	r3, [pc, #224]	@ (8000d6c <StartTaskSPI+0x190>)
 8000c8a:	657b      	str	r3, [r7, #84]	@ 0x54
	      break;
 8000c8c:	e00b      	b.n	8000ca6 <StartTaskSPI+0xca>

	    case MCP2515_READ_TIMEOUT_2:
	      resMcp2515_msg = "MCP2515_READ_TIMEOUT_2\n";
 8000c8e:	4b38      	ldr	r3, [pc, #224]	@ (8000d70 <StartTaskSPI+0x194>)
 8000c90:	657b      	str	r3, [r7, #84]	@ 0x54
	      break;
 8000c92:	e008      	b.n	8000ca6 <StartTaskSPI+0xca>

	    case MCP2515_BAUDRATE_READ_FAIL:
	      resMcp2515_msg = "MCP2515_BAUDRATE_READ_FAIL\n";
 8000c94:	4b37      	ldr	r3, [pc, #220]	@ (8000d74 <StartTaskSPI+0x198>)
 8000c96:	657b      	str	r3, [r7, #84]	@ 0x54
	      break;
 8000c98:	e005      	b.n	8000ca6 <StartTaskSPI+0xca>

	    case MCP2515_BAUDRATE_NOT_OK:
	      resMcp2515_msg = "MCP2515_BAUDRATE_NOT_OK\n";
 8000c9a:	4b37      	ldr	r3, [pc, #220]	@ (8000d78 <StartTaskSPI+0x19c>)
 8000c9c:	657b      	str	r3, [r7, #84]	@ 0x54
	      break;
 8000c9e:	e002      	b.n	8000ca6 <StartTaskSPI+0xca>

	    default:
	      resMcp2515_msg = "Errore non riconosciuto mcp2515\n";
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <StartTaskSPI+0x1a0>)
 8000ca2:	657b      	str	r3, [r7, #84]	@ 0x54
	      break;
 8000ca4:	bf00      	nop
	  }

	  HAL_UART_Transmit(&huart1, (uint8_t*)resMcp2515_msg, strlen(resMcp2515_msg), HAL_MAX_DELAY);
 8000ca6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000ca8:	f7ff fa9a 	bl	80001e0 <strlen>
 8000cac:	4603      	mov	r3, r0
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000cb6:	4832      	ldr	r0, [pc, #200]	@ (8000d80 <StartTaskSPI+0x1a4>)
 8000cb8:	f003 fde0 	bl	800487c <HAL_UART_Transmit>

	  uint8_t resultHandler = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	  uint8_t resultSend = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	  uint8_t result = 10;
 8000cc8:	230a      	movs	r3, #10
 8000cca:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
  /* Infinite loop */
  for(;;)
  {

	  //ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
	  if (result_mcp2515Init == MCP2515_OK){
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <StartTaskSPI+0x174>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1fb      	bne.n	8000cce <StartTaskSPI+0xf2>
		}*/




		  mcp2515IntState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8000cd6:	2140      	movs	r1, #64	@ 0x40
 8000cd8:	481b      	ldr	r0, [pc, #108]	@ (8000d48 <StartTaskSPI+0x16c>)
 8000cda:	f002 f80f 	bl	8002cfc <HAL_GPIO_ReadPin>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

		  resultHandler = MCP2515_InterruptHandler(&mcp2515_1, mcp2515IntState, &canMsg_buffer);
 8000ce4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000ce8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000cec:	4619      	mov	r1, r3
 8000cee:	4817      	ldr	r0, [pc, #92]	@ (8000d4c <StartTaskSPI+0x170>)
 8000cf0:	f000 fe08 	bl	8001904 <MCP2515_InterruptHandler>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		  		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
		  	  }*/



		  	resultSend = MCP2515_SendMessage(&mcp2515_1, &canMsg_buffer, canMessageTx);
 8000cfa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000cfe:	4a21      	ldr	r2, [pc, #132]	@ (8000d84 <StartTaskSPI+0x1a8>)
 8000d00:	4619      	mov	r1, r3
 8000d02:	4812      	ldr	r0, [pc, #72]	@ (8000d4c <StartTaskSPI+0x170>)
 8000d04:	f000 fd44 	bl	8001790 <MCP2515_SendMessage>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
		  	if (resultSend != 0){
 8000d0e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0db      	beq.n	8000cce <StartTaskSPI+0xf2>

			 // Converte l'intero in una stringa
			  sprintf(message, "ResultSend: %d\r\n", resultSend);
 8000d16:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	491a      	ldr	r1, [pc, #104]	@ (8000d88 <StartTaskSPI+0x1ac>)
 8000d20:	4618      	mov	r0, r3
 8000d22:	f007 f85d 	bl	8007de0 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fa58 	bl	80001e0 <strlen>
 8000d30:	4603      	mov	r3, r0
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	f107 0108 	add.w	r1, r7, #8
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	4810      	ldr	r0, [pc, #64]	@ (8000d80 <StartTaskSPI+0x1a4>)
 8000d3e:	f003 fd9d 	bl	800487c <HAL_UART_Transmit>
	  if (result_mcp2515Init == MCP2515_OK){
 8000d42:	e7c4      	b.n	8000cce <StartTaskSPI+0xf2>
 8000d44:	200000d4 	.word	0x200000d4
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	2000023c 	.word	0x2000023c
 8000d50:	20000000 	.word	0x20000000
 8000d54:	08008f30 	.word	0x08008f30
 8000d58:	08008f50 	.word	0x08008f50
 8000d5c:	08008f74 	.word	0x08008f74
 8000d60:	08008f8c 	.word	0x08008f8c
 8000d64:	08008fac 	.word	0x08008fac
 8000d68:	08008fd4 	.word	0x08008fd4
 8000d6c:	08008fec 	.word	0x08008fec
 8000d70:	08009004 	.word	0x08009004
 8000d74:	0800901c 	.word	0x0800901c
 8000d78:	08009038 	.word	0x08009038
 8000d7c:	08009054 	.word	0x08009054
 8000d80:	200001ec 	.word	0x200001ec
 8000d84:	2000024c 	.word	0x2000024c
 8000d88:	08009078 	.word	0x08009078

08000d8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9e:	f001 f993 	bl	80020c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40010000 	.word	0x40010000

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <Error_Handler+0x8>

08000dbc <MCP2515_Init>:
uint8_t idDataEmpty[4] = {0x0, 0x0, 0x0, 0x0};
uint8_t dataEmpty[8] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,0x0};
static uint8_t writeMessage[4];

// Costruttore
uint8_t MCP2515_Init(MCP2515_HandleTypeDef* hdev, GPIO_TypeDef* csPort,  uint16_t csPin, SPI_HandleTypeDef* hspi, uint8_t baudrate,uint8_t intTxEnable ) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	80fb      	strh	r3, [r7, #6]
    hdev->csPin = csPin;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	88fa      	ldrh	r2, [r7, #6]
 8000dd0:	809a      	strh	r2, [r3, #4]
    hdev->csPort = csPort;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	601a      	str	r2, [r3, #0]
    hdev->hspi = hspi;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	683a      	ldr	r2, [r7, #0]
 8000ddc:	609a      	str	r2, [r3, #8]
    hdev->emptyTXBuffer[0] = true;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2201      	movs	r2, #1
 8000de2:	735a      	strb	r2, [r3, #13]
    hdev->emptyTXBuffer[1] = true;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2201      	movs	r2, #1
 8000de8:	739a      	strb	r2, [r3, #14]
    hdev->emptyTXBuffer[2] = true;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2201      	movs	r2, #1
 8000dee:	73da      	strb	r2, [r3, #15]
    
    uint8_t result = MCP2515_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	75fb      	strb	r3, [r7, #23]
    result = MCP2515_deviceInit(hdev, baudrate, intTxEnable);
 8000df4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000df8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	f000 f807 	bl	8000e12 <MCP2515_deviceInit>
 8000e04:	4603      	mov	r3, r0
 8000e06:	75fb      	strb	r3, [r7, #23]
    
    return result;
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
       

}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <MCP2515_deviceInit>:

uint8_t MCP2515_deviceInit(MCP2515_HandleTypeDef* hdev, uint8_t baudrate, uint8_t intTxEnable) {
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	70fb      	strb	r3, [r7, #3]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	70bb      	strb	r3, [r7, #2]

    HAL_Delay(100);
 8000e22:	2064      	movs	r0, #100	@ 0x64
 8000e24:	f001 f970 	bl	8002108 <HAL_Delay>

    // Resetta il MCP2515
    uint8_t resultReset;
    //MCP2515_Reset(hdev);
    resultReset = MCP2515_Reset(hdev);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f83a 	bl	8000ea2 <MCP2515_Reset>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	73fb      	strb	r3, [r7, #15]
    if (resultReset != MCP2515_OK) {
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MCP2515_deviceInit+0x2a>
        return resultReset;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	e02e      	b.n	8000e9a <MCP2515_deviceInit+0x88>
    }

    // Imposta il baudrate
    uint8_t resultBaudrate;
    resultBaudrate = MCP2515_SetBaudrate(hdev, baudrate);
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f88d 	bl	8000f60 <MCP2515_SetBaudrate>
 8000e46:	4603      	mov	r3, r0
 8000e48:	73bb      	strb	r3, [r7, #14]
    if (resultBaudrate != MCP2515_OK) {
 8000e4a:	7bbb      	ldrb	r3, [r7, #14]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MCP2515_deviceInit+0x42>
        return resultBaudrate;
 8000e50:	7bbb      	ldrb	r3, [r7, #14]
 8000e52:	e022      	b.n	8000e9a <MCP2515_deviceInit+0x88>
    }
    
    // Imposta la modalità operativa
    uint8_t resultRun;
    resultRun = MCP2515_SetMode(hdev, MCP2515_NORMAL_MODE);
 8000e54:	2100      	movs	r1, #0
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 fa28 	bl	80012ac <MCP2515_SetMode>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	737b      	strb	r3, [r7, #13]
    if (resultRun != MCP2515_OK) {
 8000e60:	7b7b      	ldrb	r3, [r7, #13]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MCP2515_deviceInit+0x58>
        return MCP2515_SET_MODE_FAIL;
 8000e66:	2304      	movs	r3, #4
 8000e68:	e017      	b.n	8000e9a <MCP2515_deviceInit+0x88>
    }
    
    uint8_t resultResetInt;
    resultResetInt = MCP2515_ResetInt(hdev);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fa65 	bl	800133a <MCP2515_ResetInt>
 8000e70:	4603      	mov	r3, r0
 8000e72:	733b      	strb	r3, [r7, #12]
    if (resultResetInt != MCP2515_OK) {
 8000e74:	7b3b      	ldrb	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MCP2515_deviceInit+0x6c>
        return MCP2515_FAIL;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00d      	b.n	8000e9a <MCP2515_deviceInit+0x88>
    }
    // Imposta l'interrupt sui tx'
    if (intTxEnable){
 8000e7e:	78bb      	ldrb	r3, [r7, #2]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d009      	beq.n	8000e98 <MCP2515_deviceInit+0x86>
        uint8_t resultIntTx;
        resultIntTx = MCP2515_SetIntTx(hdev);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f000 fa6e 	bl	8001366 <MCP2515_SetIntTx>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	72fb      	strb	r3, [r7, #11]
        if (resultIntTx != MCP2515_OK) {
 8000e8e:	7afb      	ldrb	r3, [r7, #11]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MCP2515_deviceInit+0x86>
            return MCP2515_FAIL;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e000      	b.n	8000e9a <MCP2515_deviceInit+0x88>
            printf("Errore nell'enable interrupt tx\n");
        }
    }


    return MCP2515_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <MCP2515_Reset>:

uint8_t MCP2515_Reset(MCP2515_HandleTypeDef* hdev) {
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
    uint8_t resetCommand = MCP2515_RESET;
 8000eaa:	23c0      	movs	r3, #192	@ 0xc0
 8000eac:	737b      	strb	r3, [r7, #13]
    const uint32_t timeout = 10; // Timeout di 10 ms
 8000eae:	230a      	movs	r3, #10
 8000eb0:	617b      	str	r3, [r7, #20]
    

    hdev->transmissionComplete = 0;  // Resetta lo stato
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	731a      	strb	r2, [r3, #12]
    
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	889b      	ldrh	r3, [r3, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f001 ff32 	bl	8002d2c <HAL_GPIO_WritePin>
    //HAL_Delay(2);
    HAL_SPI_Transmit_DMA(hdev->hspi, &resetCommand, 1); // Invia il comando di reset
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f107 010d 	add.w	r1, r7, #13
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f002 fdbe 	bl	8003a54 <HAL_SPI_Transmit_DMA>
    uint32_t startTime = HAL_GetTick();
 8000ed8:	f001 f90a 	bl	80020f0 <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]
    // Attendi il completamento della trasmissione
    while (!hdev->transmissionComplete) {
 8000ede:	e011      	b.n	8000f04 <MCP2515_Reset+0x62>
        if ((HAL_GetTick() - startTime) > timeout) {
 8000ee0:	f001 f906 	bl	80020f0 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d209      	bcs.n	8000f04 <MCP2515_Reset+0x62>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	889b      	ldrh	r3, [r3, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4619      	mov	r1, r3
 8000efc:	f001 ff16 	bl	8002d2c <HAL_GPIO_WritePin>
            return MCP2515_RESET_TIMEOUT; // Esci dalla funzione, indicando un errore o fallimento
 8000f00:	2305      	movs	r3, #5
 8000f02:	e029      	b.n	8000f58 <MCP2515_Reset+0xb6>
    while (!hdev->transmissionComplete) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7b1b      	ldrb	r3, [r3, #12]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d0e8      	beq.n	8000ee0 <MCP2515_Reset+0x3e>
        }
    }
    hdev->transmissionComplete = 0;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	731a      	strb	r2, [r3, #12]
    HAL_Delay(10);  // Attendi che il reset venga completato (10 ms è un valore standard)
 8000f14:	200a      	movs	r0, #10
 8000f16:	f001 f8f7 	bl	8002108 <HAL_Delay>
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	889b      	ldrh	r3, [r3, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	4619      	mov	r1, r3
 8000f26:	f001 ff01 	bl	8002d2c <HAL_GPIO_WritePin>

    

    uint8_t status_data;
    uint8_t resultRead;
    resultRead = MCP2515_ReadRegister(hdev,MCP2515_CANSTAT_MSG, &status_data);
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	461a      	mov	r2, r3
 8000f30:	210e      	movs	r1, #14
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 f942 	bl	80011bc <MCP2515_ReadRegister>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73fb      	strb	r3, [r7, #15]
    if (resultRead != MCP2515_OK)
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MCP2515_Reset+0xa4>
        return resultRead;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	e008      	b.n	8000f58 <MCP2515_Reset+0xb6>
    // Verifica se il modo è stato impostato correttamente
    uint8_t currentMode = (status_data >> 5) & 0x07;
 8000f46:	7b3b      	ldrb	r3, [r7, #12]
 8000f48:	095b      	lsrs	r3, r3, #5
 8000f4a:	73bb      	strb	r3, [r7, #14]
    if (currentMode != MCP2515_CONFIGURATION_MODE) {
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d001      	beq.n	8000f56 <MCP2515_Reset+0xb4>
            return MCP2515_RESET_FAIL; }
 8000f52:	2302      	movs	r3, #2
 8000f54:	e000      	b.n	8000f58 <MCP2515_Reset+0xb6>


    return MCP2515_OK;  // Restituisci un codice di successo
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <MCP2515_SetBaudrate>:
void MCP2515_SetTransmissionComplete(MCP2515_HandleTypeDef* hdev, uint8_t transmissionComplete) {
    hdev->transmissionComplete = transmissionComplete;
}


uint8_t MCP2515_SetBaudrate(MCP2515_HandleTypeDef* hdev, uint8_t baudrate) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
    const uint32_t timeout = 10; // Timeout di 10 ms
 8000f6c:	230a      	movs	r3, #10
 8000f6e:	613b      	str	r3, [r7, #16]
    uint8_t CNF1, CNF2, CNF3;

    // composizione messaggi
    switch (baudrate) {
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d826      	bhi.n	8000fc4 <MCP2515_SetBaudrate+0x64>
 8000f76:	a201      	add	r2, pc, #4	@ (adr r2, 8000f7c <MCP2515_SetBaudrate+0x1c>)
 8000f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7c:	08000f8d 	.word	0x08000f8d
 8000f80:	08000f9b 	.word	0x08000f9b
 8000f84:	08000fa9 	.word	0x08000fa9
 8000f88:	08000fb7 	.word	0x08000fb7
        case CAN_BAUDRATE_125kbps:  // 125 kbps
            CNF1 = (MCP2515_SJW_DATA_125kbps << 6) | MCP2515_BRP_DATA_125kbps;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	75fb      	strb	r3, [r7, #23]
            CNF2 = (MCP2515_BTLMODE_DATA_125kbps << 7) | (MCP2515_SAM_DATA_125kbps << 6) | (MCP2515_PHSEG1_DATA_125kbps << 3) | MCP2515_PRSEG_DATA_125kbps;
 8000f90:	23f0      	movs	r3, #240	@ 0xf0
 8000f92:	75bb      	strb	r3, [r7, #22]
            CNF3 = (MCP2515_SOF_DATA_125kbps << 7) | (MCP2515_WAKFIL_DATA_125kbps << 6) | MCP2515_PHSEG2_DATA_125kbps;
 8000f94:	2386      	movs	r3, #134	@ 0x86
 8000f96:	757b      	strb	r3, [r7, #21]
            break;
 8000f98:	e016      	b.n	8000fc8 <MCP2515_SetBaudrate+0x68>

        case CAN_BAUDRATE_250kbps:  // 250 kbps
            CNF1 = (MCP2515_SJW_DATA_250kbps << 6) | MCP2515_BRP_DATA_250kbps;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	75fb      	strb	r3, [r7, #23]
            CNF2 = (MCP2515_BTLMODE_DATA_250kbps << 7) | (MCP2515_SAM_DATA_250kbps << 6) | (MCP2515_PHSEG1_DATA_250kbps << 3) | MCP2515_PRSEG_DATA_250kbps;
 8000f9e:	23d5      	movs	r3, #213	@ 0xd5
 8000fa0:	75bb      	strb	r3, [r7, #22]
            CNF3 = (MCP2515_SOF_DATA_250kbps << 7) | (MCP2515_WAKFIL_DATA_250kbps << 6) | MCP2515_PHSEG2_DATA_250kbps;
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	757b      	strb	r3, [r7, #21]
            break;
 8000fa6:	e00f      	b.n	8000fc8 <MCP2515_SetBaudrate+0x68>

        case CAN_BAUDRATE_500kbps:  // 500 kbps
            CNF1 = (MCP2515_SJW_DATA_500kbps << 6) | MCP2515_BRP_DATA_500kbps;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	75fb      	strb	r3, [r7, #23]
            CNF2 = (MCP2515_BTLMODE_DATA_500kbps << 7) | (MCP2515_SAM_DATA_500kbps << 6) | (MCP2515_PHSEG1_DATA_500kbps << 3) | MCP2515_PRSEG_DATA_500kbps;
 8000fac:	238a      	movs	r3, #138	@ 0x8a
 8000fae:	75bb      	strb	r3, [r7, #22]
            CNF3 = (MCP2515_SOF_DATA_500kbps << 7) | (MCP2515_WAKFIL_DATA_500kbps << 6) | MCP2515_PHSEG2_DATA_500kbps;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	757b      	strb	r3, [r7, #21]
            break;
 8000fb4:	e008      	b.n	8000fc8 <MCP2515_SetBaudrate+0x68>

        case CAN_BAUDRATE_1Mbps:  // 1 Mbps
            CNF1 = (MCP2515_SJW_DATA_1Mbps << 6) | MCP2515_BRP_DATA_1Mbps;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	75fb      	strb	r3, [r7, #23]
            CNF2 = (MCP2515_BTLMODE_DATA_1Mbps << 7) | (MCP2515_SAM_DATA_1Mbps << 6) | (MCP2515_PHSEG1_DATA_1Mbps << 3) | MCP2515_PRSEG_DATA_1Mbps;
 8000fba:	23d8      	movs	r3, #216	@ 0xd8
 8000fbc:	75bb      	strb	r3, [r7, #22]
            CNF3 = (MCP2515_SOF_DATA_1Mbps << 7) | (MCP2515_WAKFIL_DATA_1Mbps << 6) | MCP2515_PHSEG2_DATA_1Mbps;
 8000fbe:	2380      	movs	r3, #128	@ 0x80
 8000fc0:	757b      	strb	r3, [r7, #21]
            break;
 8000fc2:	e001      	b.n	8000fc8 <MCP2515_SetBaudrate+0x68>

        default:
            return MCP2515_SET_BAUDRATE_FAIL;  // Baud rate non supportato
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e055      	b.n	8001074 <MCP2515_SetBaudrate+0x114>

    //printf("CNF1: 0x%02X, CNF2: 0x%02X, CNF3: 0x%02X\n", CNF1, CNF2, CNF3);


    // Scrivi i registri e attendi la conferma
    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CNF1_MSG, CNF1, timeout) != MCP2515_OK)
 8000fc8:	7dfa      	ldrb	r2, [r7, #23]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	212a      	movs	r1, #42	@ 0x2a
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f854 	bl	800107c <MCP2515_WriteRegisterWithTimeout>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MCP2515_SetBaudrate+0x7e>
        return MCP2515_SET_BAUDRATE_FAIL;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e04a      	b.n	8001074 <MCP2515_SetBaudrate+0x114>

    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CNF2_MSG, CNF2, timeout) != MCP2515_OK)
 8000fde:	7dba      	ldrb	r2, [r7, #22]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	2129      	movs	r1, #41	@ 0x29
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f849 	bl	800107c <MCP2515_WriteRegisterWithTimeout>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MCP2515_SetBaudrate+0x94>
        return MCP2515_SET_BAUDRATE_FAIL;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e03f      	b.n	8001074 <MCP2515_SetBaudrate+0x114>

    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CNF3_MSG, CNF3, timeout) != MCP2515_OK)
 8000ff4:	7d7a      	ldrb	r2, [r7, #21]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2128      	movs	r1, #40	@ 0x28
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f83e 	bl	800107c <MCP2515_WriteRegisterWithTimeout>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MCP2515_SetBaudrate+0xaa>
        return MCP2515_SET_BAUDRATE_FAIL;
 8001006:	2303      	movs	r3, #3
 8001008:	e034      	b.n	8001074 <MCP2515_SetBaudrate+0x114>

    // verifica scrittura
    uint8_t result_read_cnf1, result_read_cnf2, result_read_cnf3;
    uint8_t read_cnf1, read_cnf2, read_cnf3;
    // Leggi i registri CNF1, CNF2, CNF3
    result_read_cnf1 = MCP2515_ReadRegister(hdev,MCP2515_CNF1_MSG, &read_cnf1);
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	461a      	mov	r2, r3
 8001010:	212a      	movs	r1, #42	@ 0x2a
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f8d2 	bl	80011bc <MCP2515_ReadRegister>
 8001018:	4603      	mov	r3, r0
 800101a:	73fb      	strb	r3, [r7, #15]
    result_read_cnf2 = MCP2515_ReadRegister(hdev,MCP2515_CNF2_MSG, &read_cnf2);
 800101c:	f107 030b 	add.w	r3, r7, #11
 8001020:	461a      	mov	r2, r3
 8001022:	2129      	movs	r1, #41	@ 0x29
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f8c9 	bl	80011bc <MCP2515_ReadRegister>
 800102a:	4603      	mov	r3, r0
 800102c:	73bb      	strb	r3, [r7, #14]
    result_read_cnf3 = MCP2515_ReadRegister(hdev,MCP2515_CNF3_MSG, &read_cnf3);
 800102e:	f107 030a 	add.w	r3, r7, #10
 8001032:	461a      	mov	r2, r3
 8001034:	2128      	movs	r1, #40	@ 0x28
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f8c0 	bl	80011bc <MCP2515_ReadRegister>
 800103c:	4603      	mov	r3, r0
 800103e:	737b      	strb	r3, [r7, #13]

    if (result_read_cnf1 != MCP2515_OK ||
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d105      	bne.n	8001052 <MCP2515_SetBaudrate+0xf2>
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <MCP2515_SetBaudrate+0xf2>
        result_read_cnf2 != MCP2515_OK ||
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MCP2515_SetBaudrate+0xf6>
        result_read_cnf3 != MCP2515_OK) {
            return MCP2515_BAUDRATE_READ_FAIL;
 8001052:	2308      	movs	r3, #8
 8001054:	e00e      	b.n	8001074 <MCP2515_SetBaudrate+0x114>

        }

    // Confronta con i valori attesi
    if (read_cnf1 != CNF1 || 
 8001056:	7b3b      	ldrb	r3, [r7, #12]
 8001058:	7dfa      	ldrb	r2, [r7, #23]
 800105a:	429a      	cmp	r2, r3
 800105c:	d107      	bne.n	800106e <MCP2515_SetBaudrate+0x10e>
        read_cnf2 != CNF2 || 
 800105e:	7afb      	ldrb	r3, [r7, #11]
    if (read_cnf1 != CNF1 || 
 8001060:	7dba      	ldrb	r2, [r7, #22]
 8001062:	429a      	cmp	r2, r3
 8001064:	d103      	bne.n	800106e <MCP2515_SetBaudrate+0x10e>
        read_cnf3 != CNF3) {
 8001066:	7abb      	ldrb	r3, [r7, #10]
        read_cnf2 != CNF2 || 
 8001068:	7d7a      	ldrb	r2, [r7, #21]
 800106a:	429a      	cmp	r2, r3
 800106c:	d001      	beq.n	8001072 <MCP2515_SetBaudrate+0x112>
            return MCP2515_BAUDRATE_NOT_OK;
 800106e:	2309      	movs	r3, #9
 8001070:	e000      	b.n	8001074 <MCP2515_SetBaudrate+0x114>
    }

    return MCP2515_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <MCP2515_WriteRegisterWithTimeout>:

uint8_t MCP2515_WriteRegisterWithTimeout(MCP2515_HandleTypeDef* hdev, uint8_t address, uint8_t value, uint32_t timeout){
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	72fb      	strb	r3, [r7, #11]
 800108a:	4613      	mov	r3, r2
 800108c:	72bb      	strb	r3, [r7, #10]
    uint32_t startTime;
    
    uint8_t writeMessage[3];
    writeMessage[0] = MCP2515_WRITE;
 800108e:	2302      	movs	r3, #2
 8001090:	743b      	strb	r3, [r7, #16]
    writeMessage[1] = address;
 8001092:	7afb      	ldrb	r3, [r7, #11]
 8001094:	747b      	strb	r3, [r7, #17]
    writeMessage[2] = value;
 8001096:	7abb      	ldrb	r3, [r7, #10]
 8001098:	74bb      	strb	r3, [r7, #18]
    /*printf("value: 0x%02X\n", value);
    int arraySize = sizeof(writeMessage) / sizeof(writeMessage[0]);
    printByteArray(writeMessage, arraySize);*/

    
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	889b      	ldrh	r3, [r3, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	f001 fe41 	bl	8002d2c <HAL_GPIO_WritePin>
    hdev->transmissionComplete = 0;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	731a      	strb	r2, [r3, #12]
    HAL_SPI_Transmit_DMA(hdev->hspi, writeMessage, 3);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f107 0110 	add.w	r1, r7, #16
 80010b8:	2203      	movs	r2, #3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 fcca 	bl	8003a54 <HAL_SPI_Transmit_DMA>

    startTime = HAL_GetTick();
 80010c0:	f001 f816 	bl	80020f0 <HAL_GetTick>
 80010c4:	6178      	str	r0, [r7, #20]
    while (!hdev->transmissionComplete) {
 80010c6:	e011      	b.n	80010ec <MCP2515_WriteRegisterWithTimeout+0x70>
        if ((HAL_GetTick() - startTime) > timeout) {
 80010c8:	f001 f812 	bl	80020f0 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d209      	bcs.n	80010ec <MCP2515_WriteRegisterWithTimeout+0x70>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	6818      	ldr	r0, [r3, #0]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	889b      	ldrh	r3, [r3, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	f001 fe22 	bl	8002d2c <HAL_GPIO_WritePin>
            return MCP2515_FAIL; // Timeout raggiunto
 80010e8:	2301      	movs	r3, #1
 80010ea:	e010      	b.n	800110e <MCP2515_WriteRegisterWithTimeout+0x92>
    while (!hdev->transmissionComplete) {
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	7b1b      	ldrb	r3, [r3, #12]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0e8      	beq.n	80010c8 <MCP2515_WriteRegisterWithTimeout+0x4c>
        }
    }
    hdev->transmissionComplete = 0;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	731a      	strb	r2, [r3, #12]
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	889b      	ldrh	r3, [r3, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f001 fe10 	bl	8002d2c <HAL_GPIO_WritePin>
    
    return MCP2515_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <MCP2515_WriteBitWithTimeout>:

uint8_t MCP2515_WriteBitWithTimeout(MCP2515_HandleTypeDef* hdev, uint8_t address, uint8_t mask, uint8_t value, uint32_t timeout){
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	4608      	mov	r0, r1
 8001120:	4611      	mov	r1, r2
 8001122:	461a      	mov	r2, r3
 8001124:	4603      	mov	r3, r0
 8001126:	70fb      	strb	r3, [r7, #3]
 8001128:	460b      	mov	r3, r1
 800112a:	70bb      	strb	r3, [r7, #2]
 800112c:	4613      	mov	r3, r2
 800112e:	707b      	strb	r3, [r7, #1]
    uint32_t startTime;

    uint8_t writeMessage[3];
    writeMessage[0] = MCP2515_BIT_MODIFY;
 8001130:	2305      	movs	r3, #5
 8001132:	723b      	strb	r3, [r7, #8]
    writeMessage[1] = address;
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	727b      	strb	r3, [r7, #9]
    writeMessage[2] = mask;
 8001138:	78bb      	ldrb	r3, [r7, #2]
 800113a:	72bb      	strb	r3, [r7, #10]
    writeMessage[3] = value;
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	72fb      	strb	r3, [r7, #11]
    /*printf("value: 0x%02X\n", value);
    int arraySize = sizeof(writeMessage) / sizeof(writeMessage[0]);
    printByteArray(writeMessage, arraySize);*/


    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	889b      	ldrh	r3, [r3, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	f001 fdee 	bl	8002d2c <HAL_GPIO_WritePin>
    hdev->transmissionComplete = 0;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	731a      	strb	r2, [r3, #12]
    HAL_SPI_Transmit_DMA(hdev->hspi, writeMessage, 4);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f107 0108 	add.w	r1, r7, #8
 800115e:	2204      	movs	r2, #4
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fc77 	bl	8003a54 <HAL_SPI_Transmit_DMA>

    startTime = HAL_GetTick();
 8001166:	f000 ffc3 	bl	80020f0 <HAL_GetTick>
 800116a:	60f8      	str	r0, [r7, #12]
    while (!hdev->transmissionComplete) {
 800116c:	e011      	b.n	8001192 <MCP2515_WriteBitWithTimeout+0x7c>
        if ((HAL_GetTick() - startTime) > timeout) {
 800116e:	f000 ffbf 	bl	80020f0 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	429a      	cmp	r2, r3
 800117c:	d209      	bcs.n	8001192 <MCP2515_WriteBitWithTimeout+0x7c>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	889b      	ldrh	r3, [r3, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	4619      	mov	r1, r3
 800118a:	f001 fdcf 	bl	8002d2c <HAL_GPIO_WritePin>
            return MCP2515_FAIL; // Timeout raggiunto
 800118e:	2301      	movs	r3, #1
 8001190:	e010      	b.n	80011b4 <MCP2515_WriteBitWithTimeout+0x9e>
    while (!hdev->transmissionComplete) {
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7b1b      	ldrb	r3, [r3, #12]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0e8      	beq.n	800116e <MCP2515_WriteBitWithTimeout+0x58>
        }
    }
    hdev->transmissionComplete = 0;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	731a      	strb	r2, [r3, #12]
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	889b      	ldrh	r3, [r3, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	4619      	mov	r1, r3
 80011ae:	f001 fdbd 	bl	8002d2c <HAL_GPIO_WritePin>

    return MCP2515_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <MCP2515_ReadRegister>:


uint8_t MCP2515_ReadRegister(MCP2515_HandleTypeDef* hdev, uint8_t address, uint8_t* data){
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	460b      	mov	r3, r1
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	72fb      	strb	r3, [r7, #11]
    uint32_t startTime;
    const uint32_t timeout = 10; // Timeout di 10 ms
 80011ca:	230a      	movs	r3, #10
 80011cc:	61fb      	str	r3, [r7, #28]
    uint8_t readMessage[2];
    readMessage[0] = MCP2515_READ;
 80011ce:	2303      	movs	r3, #3
 80011d0:	753b      	strb	r3, [r7, #20]
    readMessage[1] = address;
 80011d2:	7afb      	ldrb	r3, [r7, #11]
 80011d4:	757b      	strb	r3, [r7, #21]

    uint8_t dummyData = 0x00;  // Dato dummy per generare i clock necessari
 80011d6:	2300      	movs	r3, #0
 80011d8:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6818      	ldr	r0, [r3, #0]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	889b      	ldrh	r3, [r3, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	f001 fda1 	bl	8002d2c <HAL_GPIO_WritePin>
    hdev->transmissionComplete = 0;  // Resetta lo stato
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	731a      	strb	r2, [r3, #12]
    // Trasmetti il comando di lettura e l'indirizzo
    HAL_SPI_Transmit_DMA(hdev->hspi, readMessage, 2);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f107 0114 	add.w	r1, r7, #20
 80011f8:	2202      	movs	r2, #2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fc2a 	bl	8003a54 <HAL_SPI_Transmit_DMA>
    startTime = HAL_GetTick();
 8001200:	f000 ff76 	bl	80020f0 <HAL_GetTick>
 8001204:	61b8      	str	r0, [r7, #24]
    // Attendi che la trasmissione sia completata
    while (!hdev->transmissionComplete) {
 8001206:	e014      	b.n	8001232 <MCP2515_ReadRegister+0x76>
        if ((HAL_GetTick() - startTime) > timeout) {
 8001208:	f000 ff72 	bl	80020f0 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	429a      	cmp	r2, r3
 8001216:	d20c      	bcs.n	8001232 <MCP2515_ReadRegister+0x76>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	889b      	ldrh	r3, [r3, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	4619      	mov	r1, r3
 8001224:	f001 fd82 	bl	8002d2c <HAL_GPIO_WritePin>
            printf("Timeout trasmission read");
 8001228:	481f      	ldr	r0, [pc, #124]	@ (80012a8 <MCP2515_ReadRegister+0xec>)
 800122a:	f006 fdc7 	bl	8007dbc <iprintf>
            return MCP2515_READ_TIMEOUT_1; // Timeout raggiunto
 800122e:	2306      	movs	r3, #6
 8001230:	e036      	b.n	80012a0 <MCP2515_ReadRegister+0xe4>
    while (!hdev->transmissionComplete) {
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	7b1b      	ldrb	r3, [r3, #12]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0e5      	beq.n	8001208 <MCP2515_ReadRegister+0x4c>
        }
    }
    hdev->transmissionComplete = 0;  // Resetta lo stato
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2200      	movs	r2, #0
 8001240:	731a      	strb	r2, [r3, #12]
    // Ricevi il dato dal registro
    HAL_SPI_TransmitReceive_DMA(hdev->hspi, &dummyData, data, 1);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6898      	ldr	r0, [r3, #8]
 8001246:	f107 0113 	add.w	r1, r7, #19
 800124a:	2301      	movs	r3, #1
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	f002 fcb3 	bl	8003bb8 <HAL_SPI_TransmitReceive_DMA>
    startTime = HAL_GetTick();
 8001252:	f000 ff4d 	bl	80020f0 <HAL_GetTick>
 8001256:	61b8      	str	r0, [r7, #24]
    // Attendi che la ricezione sia completata
    while (!hdev->transmissionComplete) {
 8001258:	e011      	b.n	800127e <MCP2515_ReadRegister+0xc2>
        if ((HAL_GetTick() - startTime) > timeout) {
 800125a:	f000 ff49 	bl	80020f0 <HAL_GetTick>
 800125e:	4602      	mov	r2, r0
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	429a      	cmp	r2, r3
 8001268:	d209      	bcs.n	800127e <MCP2515_ReadRegister+0xc2>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6818      	ldr	r0, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	889b      	ldrh	r3, [r3, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	4619      	mov	r1, r3
 8001276:	f001 fd59 	bl	8002d2c <HAL_GPIO_WritePin>
            return MCP2515_READ_TIMEOUT_2; // Timeout raggiunto
 800127a:	2307      	movs	r3, #7
 800127c:	e010      	b.n	80012a0 <MCP2515_ReadRegister+0xe4>
    while (!hdev->transmissionComplete) {
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	7b1b      	ldrb	r3, [r3, #12]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0e8      	beq.n	800125a <MCP2515_ReadRegister+0x9e>
        }
    }
    hdev->transmissionComplete = 0;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2200      	movs	r2, #0
 800128c:	731a      	strb	r2, [r3, #12]
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6818      	ldr	r0, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	889b      	ldrh	r3, [r3, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	f001 fd47 	bl	8002d2c <HAL_GPIO_WritePin>
    return MCP2515_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	0800908c 	.word	0x0800908c

080012ac <MCP2515_SetMode>:


uint8_t MCP2515_SetMode(MCP2515_HandleTypeDef* hdev, uint8_t mode) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	70fb      	strb	r3, [r7, #3]
    const uint32_t timeout = 10; // Timeout di 10 ms
 80012b8:	230a      	movs	r3, #10
 80012ba:	60fb      	str	r3, [r7, #12]
    uint8_t status_data;
    uint8_t canctrl_data;
    uint8_t valueToSend;

    // Leggi il valore corrente per preservare gli altri bit
    if (MCP2515_ReadRegister(hdev, MCP2515_CANCTRL_MSG, &canctrl_data) != MCP2515_OK)
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	461a      	mov	r2, r3
 80012c2:	210f      	movs	r1, #15
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff79 	bl	80011bc <MCP2515_ReadRegister>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MCP2515_SetMode+0x28>
        return MCP2515_FAIL;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e02e      	b.n	8001332 <MCP2515_SetMode+0x86>

    // Preserva gli altri bit e imposta quelli relativi alla trasmissione
    valueToSend = canctrl_data;
 80012d4:	7a3b      	ldrb	r3, [r7, #8]
 80012d6:	72fb      	strb	r3, [r7, #11]
    valueToSend &= ~(0x7 << 5);
 80012d8:	7afb      	ldrb	r3, [r7, #11]
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	72fb      	strb	r3, [r7, #11]
    valueToSend |= (mode << 5);
 80012e0:	78fb      	ldrb	r3, [r7, #3]
 80012e2:	015b      	lsls	r3, r3, #5
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	72fb      	strb	r3, [r7, #11]

    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CANCTRL_MSG, valueToSend, timeout) != MCP2515_OK)
 80012f0:	7afa      	ldrb	r2, [r7, #11]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	210f      	movs	r1, #15
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fec0 	bl	800107c <MCP2515_WriteRegisterWithTimeout>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MCP2515_SetMode+0x5a>
        return MCP2515_FAIL;
 8001302:	2301      	movs	r3, #1
 8001304:	e015      	b.n	8001332 <MCP2515_SetMode+0x86>

    if (MCP2515_ReadRegister(hdev,MCP2515_CANSTAT_MSG, &status_data) != MCP2515_OK)
 8001306:	f107 0309 	add.w	r3, r7, #9
 800130a:	461a      	mov	r2, r3
 800130c:	210e      	movs	r1, #14
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff54 	bl	80011bc <MCP2515_ReadRegister>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MCP2515_SetMode+0x72>
        return MCP2515_FAIL;
 800131a:	2301      	movs	r3, #1
 800131c:	e009      	b.n	8001332 <MCP2515_SetMode+0x86>
    // Verifica se il modo è stato impostato correttamente
    uint8_t currentMode = (status_data >> 5) & 0x07;
 800131e:	7a7b      	ldrb	r3, [r7, #9]
 8001320:	095b      	lsrs	r3, r3, #5
 8001322:	72bb      	strb	r3, [r7, #10]
    if (currentMode == mode) {
 8001324:	7aba      	ldrb	r2, [r7, #10]
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	429a      	cmp	r2, r3
 800132a:	d101      	bne.n	8001330 <MCP2515_SetMode+0x84>
        return MCP2515_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	e000      	b.n	8001332 <MCP2515_SetMode+0x86>
    }else
        return MCP2515_FAIL; 
 8001330:	2301      	movs	r3, #1
    
    return 
    MCP2515_FAIL;
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <MCP2515_ResetInt>:

uint8_t MCP2515_ResetInt(MCP2515_HandleTypeDef* hdev) {
 800133a:	b580      	push	{r7, lr}
 800133c:	b084      	sub	sp, #16
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
	const uint32_t timeout = 5; // Timeout di 10 ms
 8001342:	2305      	movs	r3, #5
 8001344:	60fb      	str	r3, [r7, #12]
	if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CANINTE_MSG, 0x0, timeout) != MCP2515_OK) // rivedere se si vogliono attivare altri enable
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	212b      	movs	r1, #43	@ 0x2b
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff fe95 	bl	800107c <MCP2515_WriteRegisterWithTimeout>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MCP2515_ResetInt+0x22>
	   return MCP2515_FAIL;
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <MCP2515_ResetInt+0x24>
	return MCP2515_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <MCP2515_SetIntTx>:





uint8_t MCP2515_SetIntTx(MCP2515_HandleTypeDef* hdev) {
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
    const uint32_t timeout = 5; // Timeout di 10 ms
 800136e:	2305      	movs	r3, #5
 8001370:	60fb      	str	r3, [r7, #12]
    uint8_t caninte_data;
    uint8_t intTx_value = 0x1C;
 8001372:	231c      	movs	r3, #28
 8001374:	72fb      	strb	r3, [r7, #11]
    
    // Leggi il valore corrente di CANINTE per preservare gli altri bit
    if (MCP2515_ReadRegister(hdev, MCP2515_CANINTE_MSG, &caninte_data) != MCP2515_OK)
 8001376:	f107 0309 	add.w	r3, r7, #9
 800137a:	461a      	mov	r2, r3
 800137c:	212b      	movs	r1, #43	@ 0x2b
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff1c 	bl	80011bc <MCP2515_ReadRegister>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MCP2515_SetIntTx+0x28>
        return MCP2515_FAIL;
 800138a:	2301      	movs	r3, #1
 800138c:	e024      	b.n	80013d8 <MCP2515_SetIntTx+0x72>

    // Preserva gli altri bit e imposta quelli relativi alla trasmissione
    uint8_t valueToSend = caninte_data | intTx_value;
 800138e:	7a7a      	ldrb	r2, [r7, #9]
 8001390:	7afb      	ldrb	r3, [r7, #11]
 8001392:	4313      	orrs	r3, r2
 8001394:	72bb      	strb	r3, [r7, #10]

    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CANINTE_MSG, valueToSend, timeout) != MCP2515_OK) // rivedere se si vogliono attivare altri enable
 8001396:	7aba      	ldrb	r2, [r7, #10]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	212b      	movs	r1, #43	@ 0x2b
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff fe6d 	bl	800107c <MCP2515_WriteRegisterWithTimeout>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MCP2515_SetIntTx+0x46>
        return MCP2515_FAIL;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e015      	b.n	80013d8 <MCP2515_SetIntTx+0x72>

    if (MCP2515_ReadRegister(hdev,MCP2515_CANINTE_MSG, &caninte_data) != MCP2515_OK)
 80013ac:	f107 0309 	add.w	r3, r7, #9
 80013b0:	461a      	mov	r2, r3
 80013b2:	212b      	movs	r1, #43	@ 0x2b
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ff01 	bl	80011bc <MCP2515_ReadRegister>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MCP2515_SetIntTx+0x5e>
        return MCP2515_FAIL;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e009      	b.n	80013d8 <MCP2515_SetIntTx+0x72>

    // Controlla se i bit desiderati sono stati impostati
    if ((caninte_data & intTx_value) == intTx_value) {
 80013c4:	7a7a      	ldrb	r2, [r7, #9]
 80013c6:	7afb      	ldrb	r3, [r7, #11]
 80013c8:	4013      	ands	r3, r2
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	7afa      	ldrb	r2, [r7, #11]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d101      	bne.n	80013d6 <MCP2515_SetIntTx+0x70>
        return MCP2515_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <MCP2515_SetIntTx+0x72>
    }else
        return MCP2515_FAIL; 
 80013d6:	2301      	movs	r3, #1

    return MCP2515_FAIL;
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <MCP2515_LoadTXBuffer>:

uint8_t MCP2515_LoadTXBuffer(MCP2515_HandleTypeDef* hdev, MCP2515_MessageBuffer* msgBuffer, uint8_t start) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	4613      	mov	r3, r2
 80013ec:	71fb      	strb	r3, [r7, #7]

	static uint32_t start_time, timeWait;
	static uint8_t status_old;

	timeWait = HAL_GetTick() - start_time;
 80013ee:	f000 fe7f 	bl	80020f0 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	4b99      	ldr	r3, [pc, #612]	@ (800165c <MCP2515_LoadTXBuffer+0x27c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	4a99      	ldr	r2, [pc, #612]	@ (8001660 <MCP2515_LoadTXBuffer+0x280>)
 80013fc:	6013      	str	r3, [r2, #0]
	switch (msgBuffer->status){
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	7c5b      	ldrb	r3, [r3, #17]
 8001402:	2b0a      	cmp	r3, #10
 8001404:	f200 8197 	bhi.w	8001736 <MCP2515_LoadTXBuffer+0x356>
 8001408:	a201      	add	r2, pc, #4	@ (adr r2, 8001410 <MCP2515_LoadTXBuffer+0x30>)
 800140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140e:	bf00      	nop
 8001410:	0800143d 	.word	0x0800143d
 8001414:	08001461 	.word	0x08001461
 8001418:	080014d5 	.word	0x080014d5
 800141c:	08001503 	.word	0x08001503
 8001420:	0800153f 	.word	0x0800153f
 8001424:	0800157b 	.word	0x0800157b
 8001428:	080015c9 	.word	0x080015c9
 800142c:	08001649 	.word	0x08001649
 8001430:	080016c9 	.word	0x080016c9
 8001434:	08001703 	.word	0x08001703
 8001438:	0800170b 	.word	0x0800170b

        case TRANSMISSION_IDLE:
            if (start == 1){
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b01      	cmp	r3, #1
 8001440:	f040 817d 	bne.w	800173e <MCP2515_LoadTXBuffer+0x35e>
                msgBuffer->status = TRANSMISSION_SET_VALUE;
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	2201      	movs	r2, #1
 8001448:	745a      	strb	r2, [r3, #17]
                hdev->transmissionComplete = 0;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	731a      	strb	r2, [r3, #12]
                hdev->emptyTXBuffer[msgBuffer->buffer] = false;
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4413      	add	r3, r2
 800145a:	2200      	movs	r2, #0
 800145c:	735a      	strb	r2, [r3, #13]
            }
            
            break;
 800145e:	e16e      	b.n	800173e <MCP2515_LoadTXBuffer+0x35e>

        case TRANSMISSION_SET_VALUE:
            switch (msgBuffer->buffer){
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d020      	beq.n	80014aa <MCP2515_LoadTXBuffer+0xca>
 8001468:	2b02      	cmp	r3, #2
 800146a:	dc2b      	bgt.n	80014c4 <MCP2515_LoadTXBuffer+0xe4>
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <MCP2515_LoadTXBuffer+0x96>
 8001470:	2b01      	cmp	r3, #1
 8001472:	d00d      	beq.n	8001490 <MCP2515_LoadTXBuffer+0xb0>
                    msgBuffer->txTXREQAddress = MCP2515_TXB2CTRL;
                    //printf("buffer2\n");
                    break;

                default:
                    break;
 8001474:	e026      	b.n	80014c4 <MCP2515_LoadTXBuffer+0xe4>
                    msgBuffer->loadIDCmd = MCP2515_LOAD_TX_ID_0;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2240      	movs	r2, #64	@ 0x40
 800147a:	735a      	strb	r2, [r3, #13]
                    msgBuffer->loadDataCmd = MCP2515_LOAD_TX_DATA_0;
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	2241      	movs	r2, #65	@ 0x41
 8001480:	739a      	strb	r2, [r3, #14]
                    msgBuffer->txDLCAddress = MCP2515_TXB0DLC;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2235      	movs	r2, #53	@ 0x35
 8001486:	73da      	strb	r2, [r3, #15]
                    msgBuffer->txTXREQAddress = MCP2515_TXB0CTRL;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2230      	movs	r2, #48	@ 0x30
 800148c:	741a      	strb	r2, [r3, #16]
                    break;
 800148e:	e01a      	b.n	80014c6 <MCP2515_LoadTXBuffer+0xe6>
                    msgBuffer->loadIDCmd = MCP2515_LOAD_TX_ID_1;
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	2242      	movs	r2, #66	@ 0x42
 8001494:	735a      	strb	r2, [r3, #13]
                    msgBuffer->loadDataCmd = MCP2515_LOAD_TX_DATA_1;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2243      	movs	r2, #67	@ 0x43
 800149a:	739a      	strb	r2, [r3, #14]
                    msgBuffer->txDLCAddress = MCP2515_TXB1DLC;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2245      	movs	r2, #69	@ 0x45
 80014a0:	73da      	strb	r2, [r3, #15]
                    msgBuffer->txTXREQAddress = MCP2515_TXB1CTRL;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2240      	movs	r2, #64	@ 0x40
 80014a6:	741a      	strb	r2, [r3, #16]
                    break;
 80014a8:	e00d      	b.n	80014c6 <MCP2515_LoadTXBuffer+0xe6>
                    msgBuffer->loadIDCmd = MCP2515_LOAD_TX_ID_2;
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2244      	movs	r2, #68	@ 0x44
 80014ae:	735a      	strb	r2, [r3, #13]
                    msgBuffer->loadDataCmd = MCP2515_LOAD_TX_DATA_2;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2245      	movs	r2, #69	@ 0x45
 80014b4:	739a      	strb	r2, [r3, #14]
                    msgBuffer->txDLCAddress = MCP2515_TXB2DLC;
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2255      	movs	r2, #85	@ 0x55
 80014ba:	73da      	strb	r2, [r3, #15]
                    msgBuffer->txTXREQAddress = MCP2515_TXB2CTRL;
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2250      	movs	r2, #80	@ 0x50
 80014c0:	741a      	strb	r2, [r3, #16]
                    break;
 80014c2:	e000      	b.n	80014c6 <MCP2515_LoadTXBuffer+0xe6>
                    break;
 80014c4:	bf00      	nop
            }

            msgBuffer->status = TRANSMISSION_ID_CMD;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2202      	movs	r2, #2
 80014ca:	745a      	strb	r2, [r3, #17]
            hdev->transmissionComplete = 0;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2200      	movs	r2, #0
 80014d0:	731a      	strb	r2, [r3, #12]
            break;
 80014d2:	e141      	b.n	8001758 <MCP2515_LoadTXBuffer+0x378>

        case TRANSMISSION_ID_CMD:
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	889b      	ldrh	r3, [r3, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	4619      	mov	r1, r3
 80014e0:	f001 fc24 	bl	8002d2c <HAL_GPIO_WritePin>
            hdev->transmissionComplete = 0;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2200      	movs	r2, #0
 80014e8:	731a      	strb	r2, [r3, #12]
            //printf("ID_ADDR: 0x%02X"\n, msgBuffer->loadIDCmd);
            HAL_SPI_Transmit_DMA(hdev->hspi, &msgBuffer->loadIDCmd, 1);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6898      	ldr	r0, [r3, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	330d      	adds	r3, #13
 80014f2:	2201      	movs	r2, #1
 80014f4:	4619      	mov	r1, r3
 80014f6:	f002 faad 	bl	8003a54 <HAL_SPI_Transmit_DMA>
            msgBuffer->status = TRANSMISSION_ID_VALUE;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2203      	movs	r2, #3
 80014fe:	745a      	strb	r2, [r3, #17]
            
            break;
 8001500:	e12a      	b.n	8001758 <MCP2515_LoadTXBuffer+0x378>

        case TRANSMISSION_ID_VALUE:

        	if (timeWait>=1){
 8001502:	4b57      	ldr	r3, [pc, #348]	@ (8001660 <MCP2515_LoadTXBuffer+0x280>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d004      	beq.n	8001514 <MCP2515_LoadTXBuffer+0x134>
        		msgBuffer->status = TRANSMISSION_ERROR;
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	220a      	movs	r2, #10
 800150e:	745a      	strb	r2, [r3, #17]
        		return 100;
 8001510:	2364      	movs	r3, #100	@ 0x64
 8001512:	e131      	b.n	8001778 <MCP2515_LoadTXBuffer+0x398>
        	}
            
             if (hdev->transmissionComplete == 1) {
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	7b1b      	ldrb	r3, [r3, #12]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b01      	cmp	r3, #1
 800151c:	f040 8111 	bne.w	8001742 <MCP2515_LoadTXBuffer+0x362>
            	 // HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
                hdev->transmissionComplete = 0;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	731a      	strb	r2, [r3, #12]
                //HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
                HAL_SPI_Transmit_DMA(hdev->hspi, msgBuffer->idData, 4);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6898      	ldr	r0, [r3, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2204      	movs	r2, #4
 8001530:	4619      	mov	r1, r3
 8001532:	f002 fa8f 	bl	8003a54 <HAL_SPI_Transmit_DMA>
                msgBuffer->status = TRANSMISSION_DATA_CMD;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	2204      	movs	r2, #4
 800153a:	745a      	strb	r2, [r3, #17]
            }
            

            break;
 800153c:	e101      	b.n	8001742 <MCP2515_LoadTXBuffer+0x362>

        case TRANSMISSION_DATA_CMD:
        	if (timeWait>=1){
 800153e:	4b48      	ldr	r3, [pc, #288]	@ (8001660 <MCP2515_LoadTXBuffer+0x280>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d004      	beq.n	8001550 <MCP2515_LoadTXBuffer+0x170>
        	        		msgBuffer->status = TRANSMISSION_ERROR;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	220a      	movs	r2, #10
 800154a:	745a      	strb	r2, [r3, #17]
        	        		return 101;
 800154c:	2365      	movs	r3, #101	@ 0x65
 800154e:	e113      	b.n	8001778 <MCP2515_LoadTXBuffer+0x398>
        	        	}
            
             if (hdev->transmissionComplete == 1) {
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	7b1b      	ldrb	r3, [r3, #12]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b01      	cmp	r3, #1
 8001558:	f040 80f5 	bne.w	8001746 <MCP2515_LoadTXBuffer+0x366>
            	// HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
                hdev->transmissionComplete = 0;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	731a      	strb	r2, [r3, #12]
                //HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
                HAL_SPI_Transmit_DMA(hdev->hspi, &msgBuffer->loadDataCmd, 1);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6898      	ldr	r0, [r3, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	330e      	adds	r3, #14
 800156a:	2201      	movs	r2, #1
 800156c:	4619      	mov	r1, r3
 800156e:	f002 fa71 	bl	8003a54 <HAL_SPI_Transmit_DMA>
                msgBuffer->status = TRANSMISSION_DATA_VALUE;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2205      	movs	r2, #5
 8001576:	745a      	strb	r2, [r3, #17]
            }
            
            break;
 8001578:	e0e5      	b.n	8001746 <MCP2515_LoadTXBuffer+0x366>

        case TRANSMISSION_DATA_VALUE:
        	if (timeWait>=1){
 800157a:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <MCP2515_LoadTXBuffer+0x280>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d004      	beq.n	800158c <MCP2515_LoadTXBuffer+0x1ac>
        	        		msgBuffer->status = TRANSMISSION_ERROR;
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	220a      	movs	r2, #10
 8001586:	745a      	strb	r2, [r3, #17]
        	        		return 102;
 8001588:	2366      	movs	r3, #102	@ 0x66
 800158a:	e0f5      	b.n	8001778 <MCP2515_LoadTXBuffer+0x398>
        	        	}

             if (hdev->transmissionComplete == 1) {
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	7b1b      	ldrb	r3, [r3, #12]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b01      	cmp	r3, #1
 8001594:	f040 80d9 	bne.w	800174a <MCP2515_LoadTXBuffer+0x36a>
            	// HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
                hdev->transmissionComplete = 0;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2200      	movs	r2, #0
 800159c:	731a      	strb	r2, [r3, #12]
                /*uint8_t lenghtMsg = msgBuffer->length;
                if (lenghtMsg == 0){
                	lenghtMsg = 1;
                }*/

                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	889b      	ldrh	r3, [r3, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	f001 fbbf 	bl	8002d2c <HAL_GPIO_WritePin>

                HAL_SPI_Transmit_DMA(hdev->hspi, msgBuffer->data, msgBuffer->length);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6898      	ldr	r0, [r3, #8]
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	6899      	ldr	r1, [r3, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	7b1b      	ldrb	r3, [r3, #12]
 80015ba:	461a      	mov	r2, r3
 80015bc:	f002 fa4a 	bl	8003a54 <HAL_SPI_Transmit_DMA>
                msgBuffer->status = TRANSMISSION_DLC;
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2206      	movs	r2, #6
 80015c4:	745a      	strb	r2, [r3, #17]
            }
            
            break;
 80015c6:	e0c0      	b.n	800174a <MCP2515_LoadTXBuffer+0x36a>

        case TRANSMISSION_DLC:
        	if (timeWait>=1){
 80015c8:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <MCP2515_LoadTXBuffer+0x280>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <MCP2515_LoadTXBuffer+0x1fa>
        	        		msgBuffer->status = TRANSMISSION_ERROR;
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	220a      	movs	r2, #10
 80015d4:	745a      	strb	r2, [r3, #17]
        	        		return 103;
 80015d6:	2367      	movs	r3, #103	@ 0x67
 80015d8:	e0ce      	b.n	8001778 <MCP2515_LoadTXBuffer+0x398>
        	        	}
            
             if (hdev->transmissionComplete == 1) {
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	7b1b      	ldrb	r3, [r3, #12]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	f040 80b4 	bne.w	800174e <MCP2515_LoadTXBuffer+0x36e>
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6818      	ldr	r0, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	889b      	ldrh	r3, [r3, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	4619      	mov	r1, r3
 80015f2:	f001 fb9b 	bl	8002d2c <HAL_GPIO_WritePin>
                writeMessage[0] = MCP2515_WRITE;
 80015f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <MCP2515_LoadTXBuffer+0x284>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	701a      	strb	r2, [r3, #0]
                writeMessage[1] = msgBuffer->txDLCAddress;
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	7bda      	ldrb	r2, [r3, #15]
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <MCP2515_LoadTXBuffer+0x284>)
 8001602:	705a      	strb	r2, [r3, #1]
                if (msgBuffer->length <= 8)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	7b1b      	ldrb	r3, [r3, #12]
 8001608:	2b08      	cmp	r3, #8
 800160a:	d804      	bhi.n	8001616 <MCP2515_LoadTXBuffer+0x236>
                    writeMessage[2] = msgBuffer->length;
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	7b1a      	ldrb	r2, [r3, #12]
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <MCP2515_LoadTXBuffer+0x284>)
 8001612:	709a      	strb	r2, [r3, #2]
 8001614:	e002      	b.n	800161c <MCP2515_LoadTXBuffer+0x23c>
                else 
                    writeMessage[2] = 8;
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <MCP2515_LoadTXBuffer+0x284>)
 8001618:	2208      	movs	r2, #8
 800161a:	709a      	strb	r2, [r3, #2]
                //printf("0: 0x%02X, 1: 0x%02X, 2: 0x%02X\n", writeMessage[0], writeMessage[1], writeMessage[2]);
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	889b      	ldrh	r3, [r3, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	f001 fb80 	bl	8002d2c <HAL_GPIO_WritePin>
                hdev->transmissionComplete = 0;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	731a      	strb	r2, [r3, #12]
                HAL_SPI_Transmit_DMA(hdev->hspi, writeMessage, 3);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2203      	movs	r2, #3
 8001638:	490a      	ldr	r1, [pc, #40]	@ (8001664 <MCP2515_LoadTXBuffer+0x284>)
 800163a:	4618      	mov	r0, r3
 800163c:	f002 fa0a 	bl	8003a54 <HAL_SPI_Transmit_DMA>
                msgBuffer->status = TRANSMISSION_TXREQ;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2207      	movs	r2, #7
 8001644:	745a      	strb	r2, [r3, #17]
            }
            
            break;
 8001646:	e082      	b.n	800174e <MCP2515_LoadTXBuffer+0x36e>

        case TRANSMISSION_TXREQ:
            
        	if (timeWait>=1){
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <MCP2515_LoadTXBuffer+0x280>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d00b      	beq.n	8001668 <MCP2515_LoadTXBuffer+0x288>
        	        		msgBuffer->status = TRANSMISSION_ERROR;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	220a      	movs	r2, #10
 8001654:	745a      	strb	r2, [r3, #17]
        	        		return 104;
 8001656:	2368      	movs	r3, #104	@ 0x68
 8001658:	e08e      	b.n	8001778 <MCP2515_LoadTXBuffer+0x398>
 800165a:	bf00      	nop
 800165c:	2000054c 	.word	0x2000054c
 8001660:	20000550 	.word	0x20000550
 8001664:	20000548 	.word	0x20000548
        	        	}
            
            if (hdev->transmissionComplete == 1) {
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	7b1b      	ldrb	r3, [r3, #12]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d16f      	bne.n	8001752 <MCP2515_LoadTXBuffer+0x372>
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	889b      	ldrh	r3, [r3, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	4619      	mov	r1, r3
 800167e:	f001 fb55 	bl	8002d2c <HAL_GPIO_WritePin>
                writeMessage[0] = MCP2515_BIT_MODIFY;
 8001682:	4b3f      	ldr	r3, [pc, #252]	@ (8001780 <MCP2515_LoadTXBuffer+0x3a0>)
 8001684:	2205      	movs	r2, #5
 8001686:	701a      	strb	r2, [r3, #0]
                writeMessage[1] = msgBuffer->txTXREQAddress;
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	7c1a      	ldrb	r2, [r3, #16]
 800168c:	4b3c      	ldr	r3, [pc, #240]	@ (8001780 <MCP2515_LoadTXBuffer+0x3a0>)
 800168e:	705a      	strb	r2, [r3, #1]
                writeMessage[2] = MCP2515_TXREQ_MASK;
 8001690:	4b3b      	ldr	r3, [pc, #236]	@ (8001780 <MCP2515_LoadTXBuffer+0x3a0>)
 8001692:	2208      	movs	r2, #8
 8001694:	709a      	strb	r2, [r3, #2]
                writeMessage[3] = MCP2515_TXREQ_SET;
 8001696:	4b3a      	ldr	r3, [pc, #232]	@ (8001780 <MCP2515_LoadTXBuffer+0x3a0>)
 8001698:	2208      	movs	r2, #8
 800169a:	70da      	strb	r2, [r3, #3]

                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	889b      	ldrh	r3, [r3, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	4619      	mov	r1, r3
 80016a8:	f001 fb40 	bl	8002d2c <HAL_GPIO_WritePin>
                hdev->transmissionComplete = 0;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	731a      	strb	r2, [r3, #12]
                HAL_SPI_Transmit_DMA(hdev->hspi, writeMessage, 4);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2204      	movs	r2, #4
 80016b8:	4931      	ldr	r1, [pc, #196]	@ (8001780 <MCP2515_LoadTXBuffer+0x3a0>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f002 f9ca 	bl	8003a54 <HAL_SPI_Transmit_DMA>

                msgBuffer->status = TRANSMISSION_END;
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2208      	movs	r2, #8
 80016c4:	745a      	strb	r2, [r3, #17]
                
            }
            
            break;
 80016c6:	e044      	b.n	8001752 <MCP2515_LoadTXBuffer+0x372>

        case TRANSMISSION_END:
        	if (timeWait>=1){
 80016c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001784 <MCP2515_LoadTXBuffer+0x3a4>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <MCP2515_LoadTXBuffer+0x2fa>
        	        		msgBuffer->status = TRANSMISSION_ERROR;
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	220a      	movs	r2, #10
 80016d4:	745a      	strb	r2, [r3, #17]
        	        		return 105;
 80016d6:	2369      	movs	r3, #105	@ 0x69
 80016d8:	e04e      	b.n	8001778 <MCP2515_LoadTXBuffer+0x398>
        	        	}
            if (hdev->transmissionComplete == 1) {
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	7b1b      	ldrb	r3, [r3, #12]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d138      	bne.n	8001756 <MCP2515_LoadTXBuffer+0x376>
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	889b      	ldrh	r3, [r3, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	4619      	mov	r1, r3
 80016f0:	f001 fb1c 	bl	8002d2c <HAL_GPIO_WritePin>
                hdev->transmissionComplete = 0;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	731a      	strb	r2, [r3, #12]
                //MCP2515_ReadRegister(hdev,0x2b, &data);
                //MCP2515_ReadRegister(hdev,0x2c, &data);
                //MCP2515_ReadRegister(hdev,MCP2515_TXB0CTRL, &data);
                //printf("Value: 0x%02X\n",data );*/

                msgBuffer->status = TRANSMISSION_RESET;
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2209      	movs	r2, #9
 80016fe:	745a      	strb	r2, [r3, #17]


            }
            break;
 8001700:	e029      	b.n	8001756 <MCP2515_LoadTXBuffer+0x376>

        case TRANSMISSION_RESET:
        	msgBuffer->status = TRANSMISSION_IDLE;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2200      	movs	r2, #0
 8001706:	745a      	strb	r2, [r3, #17]
        	break;
 8001708:	e026      	b.n	8001758 <MCP2515_LoadTXBuffer+0x378>

        case TRANSMISSION_ERROR:
            //printf("Errore trasmissione");
        	HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6818      	ldr	r0, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	889b      	ldrh	r3, [r3, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	4619      	mov	r1, r3
 8001716:	f001 fb09 	bl	8002d2c <HAL_GPIO_WritePin>
        	hdev->transmissionComplete = 0;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	731a      	strb	r2, [r3, #12]
        	hdev->emptyTXBuffer[msgBuffer->buffer] = true;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4413      	add	r3, r2
 800172a:	2201      	movs	r2, #1
 800172c:	735a      	strb	r2, [r3, #13]
            msgBuffer->status = TRANSMISSION_IDLE;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	2200      	movs	r2, #0
 8001732:	745a      	strb	r2, [r3, #17]
            
            break;
 8001734:	e010      	b.n	8001758 <MCP2515_LoadTXBuffer+0x378>

        default:
            msgBuffer->status = TRANSMISSION_IDLE;  
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2200      	movs	r2, #0
 800173a:	745a      	strb	r2, [r3, #17]
            break;
 800173c:	e00c      	b.n	8001758 <MCP2515_LoadTXBuffer+0x378>
            break;
 800173e:	bf00      	nop
 8001740:	e00a      	b.n	8001758 <MCP2515_LoadTXBuffer+0x378>
            break;
 8001742:	bf00      	nop
 8001744:	e008      	b.n	8001758 <MCP2515_LoadTXBuffer+0x378>
            break;
 8001746:	bf00      	nop
 8001748:	e006      	b.n	8001758 <MCP2515_LoadTXBuffer+0x378>
            break;
 800174a:	bf00      	nop
 800174c:	e004      	b.n	8001758 <MCP2515_LoadTXBuffer+0x378>
            break;
 800174e:	bf00      	nop
 8001750:	e002      	b.n	8001758 <MCP2515_LoadTXBuffer+0x378>
            break;
 8001752:	bf00      	nop
 8001754:	e000      	b.n	8001758 <MCP2515_LoadTXBuffer+0x378>
            break;
 8001756:	bf00      	nop
        
    }

	if (msgBuffer->status != status_old){
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	7c5a      	ldrb	r2, [r3, #17]
 800175c:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <MCP2515_LoadTXBuffer+0x3a8>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d008      	beq.n	8001776 <MCP2515_LoadTXBuffer+0x396>
			status_old = msgBuffer->status;
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	7c5a      	ldrb	r2, [r3, #17]
 8001768:	4b07      	ldr	r3, [pc, #28]	@ (8001788 <MCP2515_LoadTXBuffer+0x3a8>)
 800176a:	701a      	strb	r2, [r3, #0]
			start_time = HAL_GetTick();
 800176c:	f000 fcc0 	bl	80020f0 <HAL_GetTick>
 8001770:	4603      	mov	r3, r0
 8001772:	4a06      	ldr	r2, [pc, #24]	@ (800178c <MCP2515_LoadTXBuffer+0x3ac>)
 8001774:	6013      	str	r3, [r2, #0]
		}
    return 0;
 8001776:	2300      	movs	r3, #0

}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000548 	.word	0x20000548
 8001784:	20000550 	.word	0x20000550
 8001788:	20000554 	.word	0x20000554
 800178c:	2000054c 	.word	0x2000054c

08001790 <MCP2515_SendMessage>:

uint8_t MCP2515_SendMessage(MCP2515_HandleTypeDef* hdev, MCP2515_MessageBuffer* msgBuffer, MCP2515_canMessage* canMessageTx){
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
	static uint8_t indexMsg = 0;
	uint8_t readyToSend = false;
 800179c:	2300      	movs	r3, #0
 800179e:	75fb      	strb	r3, [r7, #23]
	uint8_t result = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	75bb      	strb	r3, [r7, #22]

    if (hdev->emptyTXBuffer[MCP2515_TX_BUFFER_0] ||
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	7b5b      	ldrb	r3, [r3, #13]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d107      	bne.n	80017bc <MCP2515_SendMessage+0x2c>
    		hdev->emptyTXBuffer[MCP2515_TX_BUFFER_1] ||
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	7b9b      	ldrb	r3, [r3, #14]
    if (hdev->emptyTXBuffer[MCP2515_TX_BUFFER_0] ||
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d103      	bne.n	80017bc <MCP2515_SendMessage+0x2c>
			hdev->emptyTXBuffer[MCP2515_TX_BUFFER_2]){
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	7bdb      	ldrb	r3, [r3, #15]
    		hdev->emptyTXBuffer[MCP2515_TX_BUFFER_1] ||
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MCP2515_SendMessage+0x30>
        readyToSend = true;
 80017bc:	2301      	movs	r3, #1
 80017be:	75fb      	strb	r3, [r7, #23]
    }



    if (msgBuffer->status ==  TRANSMISSION_RESET ||
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	7c5b      	ldrb	r3, [r3, #17]
 80017c4:	2b09      	cmp	r3, #9
 80017c6:	d003      	beq.n	80017d0 <MCP2515_SendMessage+0x40>
    		msgBuffer->status ==  TRANSMISSION_ERROR	){
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	7c5b      	ldrb	r3, [r3, #17]
    if (msgBuffer->status ==  TRANSMISSION_RESET ||
 80017cc:	2b0a      	cmp	r3, #10
 80017ce:	d120      	bne.n	8001812 <MCP2515_SendMessage+0x82>
    	canMessageTx[indexMsg].sending = false;
 80017d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001900 <MCP2515_SendMessage+0x170>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4613      	mov	r3, r2
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	2200      	movs	r2, #0
 80017e2:	739a      	strb	r2, [r3, #14]
    	canMessageTx[indexMsg].newMsg = false;
 80017e4:	4b46      	ldr	r3, [pc, #280]	@ (8001900 <MCP2515_SendMessage+0x170>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4613      	mov	r3, r2
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	1a9b      	subs	r3, r3, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	2200      	movs	r2, #0
 80017f6:	735a      	strb	r2, [r3, #13]
    	indexMsg ++;
 80017f8:	4b41      	ldr	r3, [pc, #260]	@ (8001900 <MCP2515_SendMessage+0x170>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b3f      	ldr	r3, [pc, #252]	@ (8001900 <MCP2515_SendMessage+0x170>)
 8001802:	701a      	strb	r2, [r3, #0]
    	if (indexMsg >= BUFFER_TX_SPI){
 8001804:	4b3e      	ldr	r3, [pc, #248]	@ (8001900 <MCP2515_SendMessage+0x170>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b31      	cmp	r3, #49	@ 0x31
 800180a:	d902      	bls.n	8001812 <MCP2515_SendMessage+0x82>
    		indexMsg = 0;}
 800180c:	4b3c      	ldr	r3, [pc, #240]	@ (8001900 <MCP2515_SendMessage+0x170>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
    }

    if (readyToSend && 
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d066      	beq.n	80018e6 <MCP2515_SendMessage+0x156>
        hdev->hspi->State == HAL_SPI_STATE_READY &&
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001820:	b2db      	uxtb	r3, r3
    if (readyToSend && 
 8001822:	2b01      	cmp	r3, #1
 8001824:	d15f      	bne.n	80018e6 <MCP2515_SendMessage+0x156>
		msgBuffer->status ==  TRANSMISSION_IDLE &&
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	7c5b      	ldrb	r3, [r3, #17]
        hdev->hspi->State == HAL_SPI_STATE_READY &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d15b      	bne.n	80018e6 <MCP2515_SendMessage+0x156>
		canMessageTx[indexMsg].newMsg) {
 800182e:	4b34      	ldr	r3, [pc, #208]	@ (8001900 <MCP2515_SendMessage+0x170>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	4613      	mov	r3, r2
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	7b5b      	ldrb	r3, [r3, #13]
		msgBuffer->status ==  TRANSMISSION_IDLE &&
 8001840:	2b00      	cmp	r3, #0
 8001842:	d050      	beq.n	80018e6 <MCP2515_SendMessage+0x156>

    	if (hdev->emptyTXBuffer[MCP2515_TX_BUFFER_0]){
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	7b5b      	ldrb	r3, [r3, #13]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <MCP2515_SendMessage+0xc4>
    		msgBuffer->buffer = MCP2515_TX_BUFFER_0;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e012      	b.n	800187a <MCP2515_SendMessage+0xea>
		}
    	else if (hdev->emptyTXBuffer[MCP2515_TX_BUFFER_1]){
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	7b9b      	ldrb	r3, [r3, #14]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <MCP2515_SendMessage+0xd4>
    		msgBuffer->buffer = MCP2515_TX_BUFFER_1;
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2201      	movs	r2, #1
 8001860:	701a      	strb	r2, [r3, #0]
 8001862:	e00a      	b.n	800187a <MCP2515_SendMessage+0xea>
		}
    	else if (hdev->emptyTXBuffer[MCP2515_TX_BUFFER_2]){
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	7bdb      	ldrb	r3, [r3, #15]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <MCP2515_SendMessage+0xe4>
    		msgBuffer->buffer = MCP2515_TX_BUFFER_2;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2202      	movs	r2, #2
 8001870:	701a      	strb	r2, [r3, #0]
 8001872:	e002      	b.n	800187a <MCP2515_SendMessage+0xea>
		}
    	else{
    		msgBuffer->buffer = MCP2515_TX_BUFFER_NONE;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2203      	movs	r2, #3
 8001878:	701a      	strb	r2, [r3, #0]
    	}

    	msgBuffer->idData = canMessageTx[indexMsg].msgID;
 800187a:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <MCP2515_SendMessage+0x170>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4613      	mov	r3, r2
 8001882:	011b      	lsls	r3, r3, #4
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	f103 0208 	add.w	r2, r3, #8
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	605a      	str	r2, [r3, #4]
    	msgBuffer->data = canMessageTx[indexMsg].msgData;
 8001892:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <MCP2515_SendMessage+0x170>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	4613      	mov	r3, r2
 800189a:	011b      	lsls	r3, r3, #4
 800189c:	1a9b      	subs	r3, r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	461a      	mov	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	609a      	str	r2, [r3, #8]
    	msgBuffer->length = canMessageTx[indexMsg].dlc;
 80018a8:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <MCP2515_SendMessage+0x170>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4613      	mov	r3, r2
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	7b1a      	ldrb	r2, [r3, #12]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	731a      	strb	r2, [r3, #12]
    		if (canMessageTx[indexMsg].dlc != 8){
    			result = canMessageTx[indexMsg].dlc;}
    		else result=100;
    	}*/

		canMessageTx[indexMsg].sending = true;
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <MCP2515_SendMessage+0x170>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	4613      	mov	r3, r2
 80018c6:	011b      	lsls	r3, r3, #4
 80018c8:	1a9b      	subs	r3, r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	2201      	movs	r2, #1
 80018d0:	739a      	strb	r2, [r3, #14]
		result = MCP2515_LoadTXBuffer(hdev, msgBuffer, true);
 80018d2:	2201      	movs	r2, #1
 80018d4:	68b9      	ldr	r1, [r7, #8]
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7ff fd82 	bl	80013e0 <MCP2515_LoadTXBuffer>
 80018dc:	4603      	mov	r3, r0
 80018de:	75bb      	strb	r3, [r7, #22]
        readyToSend = false;
 80018e0:	2300      	movs	r3, #0
 80018e2:	75fb      	strb	r3, [r7, #23]
 80018e4:	e006      	b.n	80018f4 <MCP2515_SendMessage+0x164>
        //result = 0;
	}

    else{
        
    	result = MCP2515_LoadTXBuffer(hdev, msgBuffer, false);
 80018e6:	2200      	movs	r2, #0
 80018e8:	68b9      	ldr	r1, [r7, #8]
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7ff fd78 	bl	80013e0 <MCP2515_LoadTXBuffer>
 80018f0:	4603      	mov	r3, r0
 80018f2:	75bb      	strb	r3, [r7, #22]
        //printf("Message Buffer Status: %d (TRANSMISSION_IDLE = %d)\n", msgBuffer->status, TRANSMISSION_IDLE);
    	/*if (canMessageTx[indexMsg].newMsg != 0)
    		result = 1;
    	else result = 2;*/
    }
    return result;
 80018f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000555 	.word	0x20000555

08001904 <MCP2515_InterruptHandler>:


uint8_t MCP2515_InterruptHandler(MCP2515_HandleTypeDef* hdev, GPIO_PinState intFlag, MCP2515_MessageBuffer* msgBuffer){
 8001904:	b590      	push	{r4, r7, lr}
 8001906:	b08f      	sub	sp, #60	@ 0x3c
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	460b      	mov	r3, r1
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	72fb      	strb	r3, [r7, #11]
	const uint8_t timeout = 10; // Timeout di 10 ms
 8001912:	230a      	movs	r3, #10
 8001914:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t result_read_TXBnCTRL[3] = {0x0,0x0,0x0};
 8001918:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad4 <MCP2515_InterruptHandler+0x1d0>)
 800191a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	4611      	mov	r1, r2
 8001922:	8019      	strh	r1, [r3, #0]
 8001924:	3302      	adds	r3, #2
 8001926:	0c12      	lsrs	r2, r2, #16
 8001928:	701a      	strb	r2, [r3, #0]

    bool isIdle = (msgBuffer->status == TRANSMISSION_IDLE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7c5b      	ldrb	r3, [r3, #17]
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf0c      	ite	eq
 8001932:	2301      	moveq	r3, #1
 8001934:	2300      	movne	r3, #0
 8001936:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    bool isIntFlagSet = (intFlag==GPIO_PIN_RESET);
 800193a:	7afb      	ldrb	r3, [r7, #11]
 800193c:	2b00      	cmp	r3, #0
 800193e:	bf0c      	ite	eq
 8001940:	2301      	moveq	r3, #1
 8001942:	2300      	movne	r3, #0
 8001944:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    bool isSpiReady = (hdev->hspi->State == HAL_SPI_STATE_READY);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b01      	cmp	r3, #1
 8001954:	bf0c      	ite	eq
 8001956:	2301      	moveq	r3, #1
 8001958:	2300      	movne	r3, #0
 800195a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    uint8_t TXxIF_val[3];

	uint8_t read_TXBnCTRL[3];
	uint8_t TXBnCTRL_addr[3] = {MCP2515_TXB0CTRL, MCP2515_TXB1CTRL, MCP2515_TXB2CTRL};
 800195e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ad8 <MCP2515_InterruptHandler+0x1d4>)
 8001960:	f107 0318 	add.w	r3, r7, #24
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	4611      	mov	r1, r2
 8001968:	8019      	strh	r1, [r3, #0]
 800196a:	3302      	adds	r3, #2
 800196c:	0c12      	lsrs	r2, r2, #16
 800196e:	701a      	strb	r2, [r3, #0]
	uint8_t TXREQ_val[3];



    // Verifica che la trasmissione non sia in corso, che l'interrupt sia attivo, e che l'SPI sia pronto
    if (isIdle && isIntFlagSet && isSpiReady) {
 8001970:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a8 	beq.w	8001aca <MCP2515_InterruptHandler+0x1c6>
 800197a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80a3 	beq.w	8001aca <MCP2515_InterruptHandler+0x1c6>
 8001984:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 809e 	beq.w	8001aca <MCP2515_InterruptHandler+0x1c6>
        //printf("status: %d\n", msgBuffer->status);
        //printf("transmissionOn: %d\n", transmissionOn);
        // Legge il registro CANINTF per verificare quali interrupt sono attivi
        uint8_t result_read_canintf;
        uint8_t read_canintf;
        result_read_canintf = MCP2515_ReadRegister(hdev,MCP2515_CANINTF_MSG, &read_canintf);
 800198e:	f107 0313 	add.w	r3, r7, #19
 8001992:	461a      	mov	r2, r3
 8001994:	212c      	movs	r1, #44	@ 0x2c
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f7ff fc10 	bl	80011bc <MCP2515_ReadRegister>
 800199c:	4603      	mov	r3, r0
 800199e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        if (result_read_canintf != MCP2515_OK) {
 80019a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MCP2515_InterruptHandler+0xaa>
            // Gestisci l'errore se la lettura fallisce
            //printf("Errore nella lettura del registro CANINTF\n");
            return 10;
 80019aa:	230a      	movs	r3, #10
 80019ac:	e08e      	b.n	8001acc <MCP2515_InterruptHandler+0x1c8>
        }

        //uint8_t canintf_val = read_canintf;


        for (uint8_t i=0; i < 3; i++){
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80019b4:	e084      	b.n	8001ac0 <MCP2515_InterruptHandler+0x1bc>
            // Estrai il bit TXxIF corrispondente dal registro CANINTF
            TXxIF_val[i] = (read_canintf >> (i + 2)) & 0x01;
 80019b6:	7cfb      	ldrb	r3, [r7, #19]
 80019b8:	461a      	mov	r2, r3
 80019ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019be:	3302      	adds	r3, #2
 80019c0:	fa42 f303 	asr.w	r3, r2, r3
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019ca:	f002 0201 	and.w	r2, r2, #1
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	3330      	adds	r3, #48	@ 0x30
 80019d2:	443b      	add	r3, r7
 80019d4:	f803 2c10 	strb.w	r2, [r3, #-16]
            //printf("TXxIF_val[%d]: %d\n", i, TXxIF_val[i]);

            if (TXxIF_val[i]) {
 80019d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019dc:	3330      	adds	r3, #48	@ 0x30
 80019de:	443b      	add	r3, r7
 80019e0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d066      	beq.n	8001ab6 <MCP2515_InterruptHandler+0x1b2>

            	uint8_t mask = 1<<(2+i);
 80019e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019ec:	3302      	adds	r3, #2
 80019ee:	2201      	movs	r2, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

            	MCP2515_WriteBitWithTimeout(hdev, MCP2515_CANINTF_MSG, mask, 0x0, timeout);
 80019f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80019fc:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2300      	movs	r3, #0
 8001a04:	212c      	movs	r1, #44	@ 0x2c
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff fb85 	bl	8001116 <MCP2515_WriteBitWithTimeout>

                //canintf_val &= ~(1 << (2+i));
                // Se il bit TXxIF è impostato
                // Leggi il registro TXBnCTRL per verificare lo stato di TXREQ
                result_read_TXBnCTRL[i] = MCP2515_ReadRegister(hdev,TXBnCTRL_addr[i], &read_TXBnCTRL[i]);
 8001a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a10:	3330      	adds	r3, #48	@ 0x30
 8001a12:	443b      	add	r3, r7
 8001a14:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8001a18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a1c:	f107 021c 	add.w	r2, r7, #28
 8001a20:	4413      	add	r3, r2
 8001a22:	f897 402f 	ldrb.w	r4, [r7, #47]	@ 0x2f
 8001a26:	461a      	mov	r2, r3
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f7ff fbc7 	bl	80011bc <MCP2515_ReadRegister>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8001a36:	443b      	add	r3, r7
 8001a38:	f803 2c0c 	strb.w	r2, [r3, #-12]


                if (result_read_TXBnCTRL[i] != MCP2515_OK) {
 8001a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a40:	3330      	adds	r3, #48	@ 0x30
 8001a42:	443b      	add	r3, r7
 8001a44:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d007      	beq.n	8001a5c <MCP2515_InterruptHandler+0x158>
					if (!TXREQ_val[i]) { // Se TXREQ è 0, il buffer è vuoto
					   emptyTXBuffer[i] = true;

					}else
						emptyTXBuffer[i] = true;*/
                	hdev->emptyTXBuffer[i] = true;
 8001a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	2201      	movs	r2, #1
 8001a56:	735a      	strb	r2, [r3, #13]
                	return 11;
 8001a58:	230b      	movs	r3, #11
 8001a5a:	e037      	b.n	8001acc <MCP2515_InterruptHandler+0x1c8>
                }

                // Verifica lo stato di TXREQ
                TXREQ_val[i] = (read_TXBnCTRL[i] >> (3 + i)) & 0x01;
 8001a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a60:	3330      	adds	r3, #48	@ 0x30
 8001a62:	443b      	add	r3, r7
 8001a64:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a6e:	3303      	adds	r3, #3
 8001a70:	fa42 f303 	asr.w	r3, r2, r3
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a7a:	f002 0201 	and.w	r2, r2, #1
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	3330      	adds	r3, #48	@ 0x30
 8001a82:	443b      	add	r3, r7
 8001a84:	f803 2c1c 	strb.w	r2, [r3, #-28]
                //printf("TXREQ_val: %d\n", TXREQ_val[i]);

                if (!TXREQ_val[i]) { // Se TXREQ è 0, il buffer è vuoto
 8001a88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a8c:	3330      	adds	r3, #48	@ 0x30
 8001a8e:	443b      	add	r3, r7
 8001a90:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d106      	bne.n	8001aa6 <MCP2515_InterruptHandler+0x1a2>
                	hdev->emptyTXBuffer[i] = true;
 8001a98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	735a      	strb	r2, [r3, #13]
 8001aa4:	e007      	b.n	8001ab6 <MCP2515_InterruptHandler+0x1b2>
                	                if (!TXREQ_val[i]) { // Se TXREQ è 0, il buffer è vuoto
                	                   emptyTXBuffer[i] = true;

                	                }else
                	                	emptyTXBuffer[i] = true;*/
                	hdev->emptyTXBuffer[i] = true;
 8001aa6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4413      	add	r3, r2
 8001aae:	2201      	movs	r2, #1
 8001ab0:	735a      	strb	r2, [r3, #13]
                	return 12;
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	e00a      	b.n	8001acc <MCP2515_InterruptHandler+0x1c8>
        for (uint8_t i=0; i < 3; i++){
 8001ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001aba:	3301      	adds	r3, #1
 8001abc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	f67f af76 	bls.w	80019b6 <MCP2515_InterruptHandler+0xb2>
		} else {
			return 14;
		}
    }*/
    //*result = result_read_TXBnCTRL[1];
    return MCP2515_OK;
 8001aca:	2300      	movs	r3, #0

}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3734      	adds	r7, #52	@ 0x34
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	080090a8 	.word	0x080090a8
 8001ad8:	080090ac 	.word	0x080090ac

08001adc <initBuffer>:

void initBuffer(MCP2515_MessageBuffer* msgBuffer){
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	msgBuffer->buffer = MCP2515_TX_BUFFER_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	701a      	strb	r2, [r3, #0]
	msgBuffer->idData = idDataEmpty;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a0e      	ldr	r2, [pc, #56]	@ (8001b28 <initBuffer+0x4c>)
 8001aee:	605a      	str	r2, [r3, #4]
    msgBuffer->data = dataEmpty;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a0e      	ldr	r2, [pc, #56]	@ (8001b2c <initBuffer+0x50>)
 8001af4:	609a      	str	r2, [r3, #8]
    msgBuffer->length = 0;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	731a      	strb	r2, [r3, #12]
    msgBuffer->loadIDCmd = 0x0;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	735a      	strb	r2, [r3, #13]
    msgBuffer->loadDataCmd= 0x0;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	739a      	strb	r2, [r3, #14]
    msgBuffer->txDLCAddress = 0x0;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	73da      	strb	r2, [r3, #15]
    msgBuffer->txTXREQAddress = 0x0;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	741a      	strb	r2, [r3, #16]
    msgBuffer->status = TRANSMISSION_IDLE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	745a      	strb	r2, [r3, #17]

}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	2000053c 	.word	0x2000053c
 8001b2c:	20000540 	.word	0x20000540

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <HAL_MspInit+0x54>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	4a11      	ldr	r2, [pc, #68]	@ (8001b84 <HAL_MspInit+0x54>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b46:	4b0f      	ldr	r3, [pc, #60]	@ (8001b84 <HAL_MspInit+0x54>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_MspInit+0x54>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b84 <HAL_MspInit+0x54>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b62:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <HAL_MspInit+0x54>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	210f      	movs	r1, #15
 8001b72:	f06f 0001 	mvn.w	r0, #1
 8001b76:	f000 fba3 	bl	80022c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800

08001b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a50      	ldr	r2, [pc, #320]	@ (8001ce8 <HAL_SPI_MspInit+0x160>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f040 809a 	bne.w	8001ce0 <HAL_SPI_MspInit+0x158>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	4b4e      	ldr	r3, [pc, #312]	@ (8001cec <HAL_SPI_MspInit+0x164>)
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb4:	4a4d      	ldr	r2, [pc, #308]	@ (8001cec <HAL_SPI_MspInit+0x164>)
 8001bb6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bba:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001cec <HAL_SPI_MspInit+0x164>)
 8001bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4b47      	ldr	r3, [pc, #284]	@ (8001cec <HAL_SPI_MspInit+0x164>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd0:	4a46      	ldr	r2, [pc, #280]	@ (8001cec <HAL_SPI_MspInit+0x164>)
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd8:	4b44      	ldr	r3, [pc, #272]	@ (8001cec <HAL_SPI_MspInit+0x164>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001be4:	2328      	movs	r3, #40	@ 0x28
 8001be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be8:	2302      	movs	r3, #2
 8001bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	483c      	ldr	r0, [pc, #240]	@ (8001cf0 <HAL_SPI_MspInit+0x168>)
 8001c00:	f000 fef8 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c04:	2310      	movs	r3, #16
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c14:	2305      	movs	r3, #5
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4834      	ldr	r0, [pc, #208]	@ (8001cf0 <HAL_SPI_MspInit+0x168>)
 8001c20:	f000 fee8 	bl	80029f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001c24:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c26:	4a34      	ldr	r2, [pc, #208]	@ (8001cf8 <HAL_SPI_MspInit+0x170>)
 8001c28:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001c2a:	4b32      	ldr	r3, [pc, #200]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c2c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c30:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c32:	4b30      	ldr	r3, [pc, #192]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c34:	2240      	movs	r2, #64	@ 0x40
 8001c36:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c38:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c44:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c46:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c4c:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c52:	4b28      	ldr	r3, [pc, #160]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001c58:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c5e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c60:	4b24      	ldr	r3, [pc, #144]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c66:	4823      	ldr	r0, [pc, #140]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c68:	f000 fb54 	bl	8002314 <HAL_DMA_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_SPI_MspInit+0xee>
    {
      Error_Handler();
 8001c72:	f7ff f89d 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c7a:	649a      	str	r2, [r3, #72]	@ 0x48
 8001c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf4 <HAL_SPI_MspInit+0x16c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001c82:	4b1e      	ldr	r3, [pc, #120]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001c84:	4a1e      	ldr	r2, [pc, #120]	@ (8001d00 <HAL_SPI_MspInit+0x178>)
 8001c86:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001c88:	4b1c      	ldr	r3, [pc, #112]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001c8a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001c8e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c96:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c9c:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001c9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ca4:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001caa:	4b14      	ldr	r3, [pc, #80]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001cb8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001cbc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001cc4:	480d      	ldr	r0, [pc, #52]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001cc6:	f000 fb25 	bl	8002314 <HAL_DMA_Init>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 8001cd0:	f7ff f86e 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a09      	ldr	r2, [pc, #36]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001cd8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001cda:	4a08      	ldr	r2, [pc, #32]	@ (8001cfc <HAL_SPI_MspInit+0x174>)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	@ 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40013000 	.word	0x40013000
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020400 	.word	0x40020400
 8001cf4:	2000012c 	.word	0x2000012c
 8001cf8:	40026440 	.word	0x40026440
 8001cfc:	2000018c 	.word	0x2000018c
 8001d00:	40026410 	.word	0x40026410

08001d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	@ 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_UART_MspInit+0x84>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d12c      	bne.n	8001d80 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <HAL_UART_MspInit+0x88>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	4a17      	ldr	r2, [pc, #92]	@ (8001d8c <HAL_UART_MspInit+0x88>)
 8001d30:	f043 0310 	orr.w	r3, r3, #16
 8001d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <HAL_UART_MspInit+0x88>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <HAL_UART_MspInit+0x88>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	4a10      	ldr	r2, [pc, #64]	@ (8001d8c <HAL_UART_MspInit+0x88>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <HAL_UART_MspInit+0x88>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d5e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2302      	movs	r3, #2
 8001d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d70:	2307      	movs	r3, #7
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4805      	ldr	r0, [pc, #20]	@ (8001d90 <HAL_UART_MspInit+0x8c>)
 8001d7c:	f000 fe3a 	bl	80029f4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	@ 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40020000 	.word	0x40020000

08001d94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	@ 0x30
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <HAL_InitTick+0xd4>)
 8001daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dac:	4a2e      	ldr	r2, [pc, #184]	@ (8001e68 <HAL_InitTick+0xd4>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001db4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e68 <HAL_InitTick+0xd4>)
 8001db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dc0:	f107 020c 	add.w	r2, r7, #12
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 fc44 	bl	8003658 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001dd0:	f001 fc2e 	bl	8003630 <HAL_RCC_GetPCLK2Freq>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ddc:	4a23      	ldr	r2, [pc, #140]	@ (8001e6c <HAL_InitTick+0xd8>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0c9b      	lsrs	r3, r3, #18
 8001de4:	3b01      	subs	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001de8:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <HAL_InitTick+0xdc>)
 8001dea:	4a22      	ldr	r2, [pc, #136]	@ (8001e74 <HAL_InitTick+0xe0>)
 8001dec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001dee:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_InitTick+0xdc>)
 8001df0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001df4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001df6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e70 <HAL_InitTick+0xdc>)
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e70 <HAL_InitTick+0xdc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <HAL_InitTick+0xdc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <HAL_InitTick+0xdc>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001e0e:	4818      	ldr	r0, [pc, #96]	@ (8001e70 <HAL_InitTick+0xdc>)
 8001e10:	f002 fa70 	bl	80042f4 <HAL_TIM_Base_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001e1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d11b      	bne.n	8001e5a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001e22:	4813      	ldr	r0, [pc, #76]	@ (8001e70 <HAL_InitTick+0xdc>)
 8001e24:	f002 fac0 	bl	80043a8 <HAL_TIM_Base_Start_IT>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001e2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d111      	bne.n	8001e5a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e36:	2019      	movs	r0, #25
 8001e38:	f000 fa5e 	bl	80022f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b0f      	cmp	r3, #15
 8001e40:	d808      	bhi.n	8001e54 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001e42:	2200      	movs	r2, #0
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	2019      	movs	r0, #25
 8001e48:	f000 fa3a 	bl	80022c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e78 <HAL_InitTick+0xe4>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e002      	b.n	8001e5a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3730      	adds	r7, #48	@ 0x30
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	431bde83 	.word	0x431bde83
 8001e70:	20000558 	.word	0x20000558
 8001e74:	40010000 	.word	0x40010000
 8001e78:	20000050 	.word	0x20000050

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <NMI_Handler+0x4>

08001e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <MemManage_Handler+0x4>

08001e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <BusFault_Handler+0x4>

08001e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <UsageFault_Handler+0x4>

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCP2515_INT_Pin);
 8001eb6:	2040      	movs	r0, #64	@ 0x40
 8001eb8:	f000 ff52 	bl	8002d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ec6:	f002 fad1 	bl	800446c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000558 	.word	0x20000558

08001ed4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <DMA2_Stream0_IRQHandler+0x10>)
 8001eda:	f000 fb21 	bl	8002520 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000018c 	.word	0x2000018c

08001ee8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <DMA2_Stream2_IRQHandler+0x10>)
 8001eee:	f000 fb17 	bl	8002520 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000012c 	.word	0x2000012c

08001efc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e00a      	b.n	8001f24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f0e:	f3af 8000 	nop.w
 8001f12:	4601      	mov	r1, r0
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	60ba      	str	r2, [r7, #8]
 8001f1a:	b2ca      	uxtb	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf0      	blt.n	8001f0e <_read+0x12>
  }

  return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f5e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_isatty>:

int _isatty(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	@ (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	@ (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	@ (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f006 f80e 	bl	8007ff0 <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20020000 	.word	0x20020000
 8002000:	00000400 	.word	0x00000400
 8002004:	200005a0 	.word	0x200005a0
 8002008:	200050e0 	.word	0x200050e0

0800200c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <SystemInit+0x20>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002016:	4a05      	ldr	r2, [pc, #20]	@ (800202c <SystemInit+0x20>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002030:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002068 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002034:	f7ff ffea 	bl	800200c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002038:	480c      	ldr	r0, [pc, #48]	@ (800206c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800203a:	490d      	ldr	r1, [pc, #52]	@ (8002070 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800203c:	4a0d      	ldr	r2, [pc, #52]	@ (8002074 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204e:	4a0a      	ldr	r2, [pc, #40]	@ (8002078 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002050:	4c0a      	ldr	r4, [pc, #40]	@ (800207c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800205e:	f005 ffcd 	bl	8007ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002062:	f7fe fa8d 	bl	8000580 <main>
  bx  lr    
 8002066:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002068:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002070:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002074:	08009174 	.word	0x08009174
  ldr r2, =_sbss
 8002078:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 800207c:	200050dc 	.word	0x200050dc

08002080 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002080:	e7fe      	b.n	8002080 <ADC_IRQHandler>
	...

08002084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002088:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <HAL_Init+0x40>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0d      	ldr	r2, [pc, #52]	@ (80020c4 <HAL_Init+0x40>)
 800208e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002094:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <HAL_Init+0x40>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_Init+0x40>)
 800209a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800209e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a0:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a07      	ldr	r2, [pc, #28]	@ (80020c4 <HAL_Init+0x40>)
 80020a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ac:	2003      	movs	r0, #3
 80020ae:	f000 f8fc 	bl	80022aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b2:	200f      	movs	r0, #15
 80020b4:	f7ff fe6e 	bl	8001d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b8:	f7ff fd3a 	bl	8001b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023c00 	.word	0x40023c00

080020c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	@ (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000054 	.word	0x20000054
 80020ec:	200005a4 	.word	0x200005a4

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	@ (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	200005a4 	.word	0x200005a4

08002108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff ffee 	bl	80020f0 <HAL_GetTick>
 8002114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d005      	beq.n	800212e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002122:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <HAL_Delay+0x44>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212e:	bf00      	nop
 8002130:	f7ff ffde 	bl	80020f0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d8f7      	bhi.n	8002130 <HAL_Delay+0x28>
  {
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000054 	.word	0x20000054

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	db0b      	blt.n	80021de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4907      	ldr	r1, [pc, #28]	@ (80021ec <__NVIC_EnableIRQ+0x38>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2001      	movs	r0, #1
 80021d6:	fa00 f202 	lsl.w	r2, r0, r2
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	e000e100 	.word	0xe000e100

080021f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	6039      	str	r1, [r7, #0]
 80021fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	2b00      	cmp	r3, #0
 8002202:	db0a      	blt.n	800221a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	b2da      	uxtb	r2, r3
 8002208:	490c      	ldr	r1, [pc, #48]	@ (800223c <__NVIC_SetPriority+0x4c>)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	0112      	lsls	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	440b      	add	r3, r1
 8002214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002218:	e00a      	b.n	8002230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4908      	ldr	r1, [pc, #32]	@ (8002240 <__NVIC_SetPriority+0x50>)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	3b04      	subs	r3, #4
 8002228:	0112      	lsls	r2, r2, #4
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	440b      	add	r3, r1
 800222e:	761a      	strb	r2, [r3, #24]
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e100 	.word	0xe000e100
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	@ 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f1c3 0307 	rsb	r3, r3, #7
 800225e:	2b04      	cmp	r3, #4
 8002260:	bf28      	it	cs
 8002262:	2304      	movcs	r3, #4
 8002264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	2b06      	cmp	r3, #6
 800226c:	d902      	bls.n	8002274 <NVIC_EncodePriority+0x30>
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3b03      	subs	r3, #3
 8002272:	e000      	b.n	8002276 <NVIC_EncodePriority+0x32>
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	f04f 32ff 	mov.w	r2, #4294967295
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	401a      	ands	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800228c:	f04f 31ff 	mov.w	r1, #4294967295
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	43d9      	mvns	r1, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800229c:	4313      	orrs	r3, r2
         );
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	@ 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff4c 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
 80022cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d2:	f7ff ff61 	bl	8002198 <__NVIC_GetPriorityGrouping>
 80022d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	68b9      	ldr	r1, [r7, #8]
 80022dc:	6978      	ldr	r0, [r7, #20]
 80022de:	f7ff ffb1 	bl	8002244 <NVIC_EncodePriority>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff80 	bl	80021f0 <__NVIC_SetPriority>
}
 80022f0:	bf00      	nop
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff54 	bl	80021b4 <__NVIC_EnableIRQ>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff fee6 	bl	80020f0 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e099      	b.n	8002464 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002350:	e00f      	b.n	8002372 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002352:	f7ff fecd 	bl	80020f0 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b05      	cmp	r3, #5
 800235e:	d908      	bls.n	8002372 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2203      	movs	r2, #3
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e078      	b.n	8002464 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1e8      	bne.n	8002352 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4b38      	ldr	r3, [pc, #224]	@ (800246c <HAL_DMA_Init+0x158>)
 800238c:	4013      	ands	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d107      	bne.n	80023dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	4313      	orrs	r3, r2
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4313      	orrs	r3, r2
 80023da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f023 0307 	bic.w	r3, r3, #7
 80023f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	2b04      	cmp	r3, #4
 8002404:	d117      	bne.n	8002436 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00e      	beq.n	8002436 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fa6f 	bl	80028fc <DMA_CheckFifoParam>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2240      	movs	r2, #64	@ 0x40
 8002428:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002432:	2301      	movs	r3, #1
 8002434:	e016      	b.n	8002464 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fa26 	bl	8002890 <DMA_CalcBaseAndBitshift>
 8002444:	4603      	mov	r3, r0
 8002446:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	223f      	movs	r2, #63	@ 0x3f
 800244e:	409a      	lsls	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	f010803f 	.word	0xf010803f

08002470 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_DMA_Start_IT+0x26>
 8002492:	2302      	movs	r3, #2
 8002494:	e040      	b.n	8002518 <HAL_DMA_Start_IT+0xa8>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d12f      	bne.n	800250a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2202      	movs	r2, #2
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f9b8 	bl	8002834 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c8:	223f      	movs	r2, #63	@ 0x3f
 80024ca:	409a      	lsls	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0216 	orr.w	r2, r2, #22
 80024de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0208 	orr.w	r2, r2, #8
 80024f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e005      	b.n	8002516 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002512:	2302      	movs	r3, #2
 8002514:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002516:	7dfb      	ldrb	r3, [r7, #23]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800252c:	4b8e      	ldr	r3, [pc, #568]	@ (8002768 <HAL_DMA_IRQHandler+0x248>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a8e      	ldr	r2, [pc, #568]	@ (800276c <HAL_DMA_IRQHandler+0x24c>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	0a9b      	lsrs	r3, r3, #10
 8002538:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800254a:	2208      	movs	r2, #8
 800254c:	409a      	lsls	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4013      	ands	r3, r2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01a      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0204 	bic.w	r2, r2, #4
 8002572:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002578:	2208      	movs	r2, #8
 800257a:	409a      	lsls	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002590:	2201      	movs	r2, #1
 8002592:	409a      	lsls	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d012      	beq.n	80025c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ae:	2201      	movs	r2, #1
 80025b0:	409a      	lsls	r2, r3
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ba:	f043 0202 	orr.w	r2, r3, #2
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c6:	2204      	movs	r2, #4
 80025c8:	409a      	lsls	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d012      	beq.n	80025f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00b      	beq.n	80025f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e4:	2204      	movs	r2, #4
 80025e6:	409a      	lsls	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f0:	f043 0204 	orr.w	r2, r3, #4
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	2210      	movs	r2, #16
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d043      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d03c      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261a:	2210      	movs	r2, #16
 800261c:	409a      	lsls	r2, r3
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d018      	beq.n	8002662 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d108      	bne.n	8002650 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d024      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	4798      	blx	r3
 800264e:	e01f      	b.n	8002690 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002654:	2b00      	cmp	r3, #0
 8002656:	d01b      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
 8002660:	e016      	b.n	8002690 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d107      	bne.n	8002680 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0208 	bic.w	r2, r2, #8
 800267e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	2220      	movs	r2, #32
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 808f 	beq.w	80027c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 8087 	beq.w	80027c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	2220      	movs	r2, #32
 80026b8:	409a      	lsls	r2, r3
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d136      	bne.n	8002738 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0216 	bic.w	r2, r2, #22
 80026d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <HAL_DMA_IRQHandler+0x1da>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 0208 	bic.w	r2, r2, #8
 8002708:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800270e:	223f      	movs	r2, #63	@ 0x3f
 8002710:	409a      	lsls	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800272a:	2b00      	cmp	r3, #0
 800272c:	d07e      	beq.n	800282c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
        }
        return;
 8002736:	e079      	b.n	800282c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d01d      	beq.n	8002782 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10d      	bne.n	8002770 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002758:	2b00      	cmp	r3, #0
 800275a:	d031      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	4798      	blx	r3
 8002764:	e02c      	b.n	80027c0 <HAL_DMA_IRQHandler+0x2a0>
 8002766:	bf00      	nop
 8002768:	2000004c 	.word	0x2000004c
 800276c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d023      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
 8002780:	e01e      	b.n	80027c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10f      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0210 	bic.w	r2, r2, #16
 800279e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d032      	beq.n	800282e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d022      	beq.n	800281a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2205      	movs	r2, #5
 80027d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	3301      	adds	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d307      	bcc.n	8002808 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f2      	bne.n	80027ec <HAL_DMA_IRQHandler+0x2cc>
 8002806:	e000      	b.n	800280a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002808:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	4798      	blx	r3
 800282a:	e000      	b.n	800282e <HAL_DMA_IRQHandler+0x30e>
        return;
 800282c:	bf00      	nop
    }
  }
}
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002850:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b40      	cmp	r3, #64	@ 0x40
 8002860:	d108      	bne.n	8002874 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002872:	e007      	b.n	8002884 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	60da      	str	r2, [r3, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	3b10      	subs	r3, #16
 80028a0:	4a14      	ldr	r2, [pc, #80]	@ (80028f4 <DMA_CalcBaseAndBitshift+0x64>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028aa:	4a13      	ldr	r2, [pc, #76]	@ (80028f8 <DMA_CalcBaseAndBitshift+0x68>)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d909      	bls.n	80028d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028c6:	f023 0303 	bic.w	r3, r3, #3
 80028ca:	1d1a      	adds	r2, r3, #4
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80028d0:	e007      	b.n	80028e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028da:	f023 0303 	bic.w	r3, r3, #3
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	aaaaaaab 	.word	0xaaaaaaab
 80028f8:	08009128 	.word	0x08009128

080028fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d11f      	bne.n	8002956 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b03      	cmp	r3, #3
 800291a:	d856      	bhi.n	80029ca <DMA_CheckFifoParam+0xce>
 800291c:	a201      	add	r2, pc, #4	@ (adr r2, 8002924 <DMA_CheckFifoParam+0x28>)
 800291e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002922:	bf00      	nop
 8002924:	08002935 	.word	0x08002935
 8002928:	08002947 	.word	0x08002947
 800292c:	08002935 	.word	0x08002935
 8002930:	080029cb 	.word	0x080029cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d046      	beq.n	80029ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002944:	e043      	b.n	80029ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800294e:	d140      	bne.n	80029d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002954:	e03d      	b.n	80029d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800295e:	d121      	bne.n	80029a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b03      	cmp	r3, #3
 8002964:	d837      	bhi.n	80029d6 <DMA_CheckFifoParam+0xda>
 8002966:	a201      	add	r2, pc, #4	@ (adr r2, 800296c <DMA_CheckFifoParam+0x70>)
 8002968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296c:	0800297d 	.word	0x0800297d
 8002970:	08002983 	.word	0x08002983
 8002974:	0800297d 	.word	0x0800297d
 8002978:	08002995 	.word	0x08002995
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
      break;
 8002980:	e030      	b.n	80029e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002986:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d025      	beq.n	80029da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002992:	e022      	b.n	80029da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002998:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800299c:	d11f      	bne.n	80029de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029a2:	e01c      	b.n	80029de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d903      	bls.n	80029b2 <DMA_CheckFifoParam+0xb6>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d003      	beq.n	80029b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029b0:	e018      	b.n	80029e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
      break;
 80029b6:	e015      	b.n	80029e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00e      	beq.n	80029e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
      break;
 80029c8:	e00b      	b.n	80029e2 <DMA_CheckFifoParam+0xe6>
      break;
 80029ca:	bf00      	nop
 80029cc:	e00a      	b.n	80029e4 <DMA_CheckFifoParam+0xe8>
      break;
 80029ce:	bf00      	nop
 80029d0:	e008      	b.n	80029e4 <DMA_CheckFifoParam+0xe8>
      break;
 80029d2:	bf00      	nop
 80029d4:	e006      	b.n	80029e4 <DMA_CheckFifoParam+0xe8>
      break;
 80029d6:	bf00      	nop
 80029d8:	e004      	b.n	80029e4 <DMA_CheckFifoParam+0xe8>
      break;
 80029da:	bf00      	nop
 80029dc:	e002      	b.n	80029e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <DMA_CheckFifoParam+0xe8>
      break;
 80029e2:	bf00      	nop
    }
  } 
  
  return status; 
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	@ 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e159      	b.n	8002cc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f040 8148 	bne.w	8002cbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d005      	beq.n	8002a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d130      	bne.n	8002aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 0201 	and.w	r2, r3, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d017      	beq.n	8002ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d123      	bne.n	8002b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	69b9      	ldr	r1, [r7, #24]
 8002b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0203 	and.w	r2, r3, #3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80a2 	beq.w	8002cbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b57      	ldr	r3, [pc, #348]	@ (8002cdc <HAL_GPIO_Init+0x2e8>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	4a56      	ldr	r2, [pc, #344]	@ (8002cdc <HAL_GPIO_Init+0x2e8>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8a:	4b54      	ldr	r3, [pc, #336]	@ (8002cdc <HAL_GPIO_Init+0x2e8>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b96:	4a52      	ldr	r2, [pc, #328]	@ (8002ce0 <HAL_GPIO_Init+0x2ec>)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a49      	ldr	r2, [pc, #292]	@ (8002ce4 <HAL_GPIO_Init+0x2f0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d019      	beq.n	8002bf6 <HAL_GPIO_Init+0x202>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a48      	ldr	r2, [pc, #288]	@ (8002ce8 <HAL_GPIO_Init+0x2f4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_Init+0x1fe>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a47      	ldr	r2, [pc, #284]	@ (8002cec <HAL_GPIO_Init+0x2f8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00d      	beq.n	8002bee <HAL_GPIO_Init+0x1fa>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a46      	ldr	r2, [pc, #280]	@ (8002cf0 <HAL_GPIO_Init+0x2fc>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <HAL_GPIO_Init+0x1f6>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a45      	ldr	r2, [pc, #276]	@ (8002cf4 <HAL_GPIO_Init+0x300>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_GPIO_Init+0x1f2>
 8002be2:	2304      	movs	r3, #4
 8002be4:	e008      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002be6:	2307      	movs	r3, #7
 8002be8:	e006      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002bea:	2303      	movs	r3, #3
 8002bec:	e004      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002bee:	2302      	movs	r3, #2
 8002bf0:	e002      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_GPIO_Init+0x204>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	f002 0203 	and.w	r2, r2, #3
 8002bfe:	0092      	lsls	r2, r2, #2
 8002c00:	4093      	lsls	r3, r2
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c08:	4935      	ldr	r1, [pc, #212]	@ (8002ce0 <HAL_GPIO_Init+0x2ec>)
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c16:	4b38      	ldr	r3, [pc, #224]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c3a:	4a2f      	ldr	r2, [pc, #188]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c40:	4b2d      	ldr	r3, [pc, #180]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c64:	4a24      	ldr	r2, [pc, #144]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c6a:	4b23      	ldr	r3, [pc, #140]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c94:	4b18      	ldr	r3, [pc, #96]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb8:	4a0f      	ldr	r2, [pc, #60]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b0f      	cmp	r3, #15
 8002cc8:	f67f aea2 	bls.w	8002a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	3724      	adds	r7, #36	@ 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40013800 	.word	0x40013800
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	40020400 	.word	0x40020400
 8002cec:	40020800 	.word	0x40020800
 8002cf0:	40020c00 	.word	0x40020c00
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40013c00 	.word	0x40013c00

08002cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	e001      	b.n	8002d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d3c:	787b      	ldrb	r3, [r7, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d42:	887a      	ldrh	r2, [r7, #2]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d48:	e003      	b.n	8002d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	041a      	lsls	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	619a      	str	r2, [r3, #24]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d6a:	4b08      	ldr	r3, [pc, #32]	@ (8002d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	88fb      	ldrh	r3, [r7, #6]
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d76:	4a05      	ldr	r2, [pc, #20]	@ (8002d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d78:	88fb      	ldrh	r3, [r7, #6]
 8002d7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f806 	bl	8002d90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40013c00 	.word	0x40013c00

08002d90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e267      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d075      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dc6:	4b88      	ldr	r3, [pc, #544]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d00c      	beq.n	8002dec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dd2:	4b85      	ldr	r3, [pc, #532]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d112      	bne.n	8002e04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dde:	4b82      	ldr	r3, [pc, #520]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dea:	d10b      	bne.n	8002e04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dec:	4b7e      	ldr	r3, [pc, #504]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d05b      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x108>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d157      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e242      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e0c:	d106      	bne.n	8002e1c <HAL_RCC_OscConfig+0x74>
 8002e0e:	4b76      	ldr	r3, [pc, #472]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a75      	ldr	r2, [pc, #468]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e01d      	b.n	8002e58 <HAL_RCC_OscConfig+0xb0>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0x98>
 8002e26:	4b70      	ldr	r3, [pc, #448]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a6f      	ldr	r2, [pc, #444]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a6c      	ldr	r2, [pc, #432]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0xb0>
 8002e40:	4b69      	ldr	r3, [pc, #420]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a68      	ldr	r2, [pc, #416]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b66      	ldr	r3, [pc, #408]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a65      	ldr	r2, [pc, #404]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7ff f946 	bl	80020f0 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e68:	f7ff f942 	bl	80020f0 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	@ 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e207      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0xc0>
 8002e86:	e014      	b.n	8002eb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7ff f932 	bl	80020f0 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e90:	f7ff f92e 	bl	80020f0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	@ 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e1f3      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea2:	4b51      	ldr	r3, [pc, #324]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0xe8>
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d063      	beq.n	8002f86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eca:	4b47      	ldr	r3, [pc, #284]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d11c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed6:	4b44      	ldr	r3, [pc, #272]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d116      	bne.n	8002f10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee2:	4b41      	ldr	r3, [pc, #260]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <HAL_RCC_OscConfig+0x152>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e1c7      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efa:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4937      	ldr	r1, [pc, #220]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0e:	e03a      	b.n	8002f86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f18:	4b34      	ldr	r3, [pc, #208]	@ (8002fec <HAL_RCC_OscConfig+0x244>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1e:	f7ff f8e7 	bl	80020f0 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f26:	f7ff f8e3 	bl	80020f0 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e1a8      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f38:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b28      	ldr	r3, [pc, #160]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4925      	ldr	r1, [pc, #148]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]
 8002f58:	e015      	b.n	8002f86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5a:	4b24      	ldr	r3, [pc, #144]	@ (8002fec <HAL_RCC_OscConfig+0x244>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7ff f8c6 	bl	80020f0 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f68:	f7ff f8c2 	bl	80020f0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e187      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d036      	beq.n	8003000 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d016      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <HAL_RCC_OscConfig+0x248>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa0:	f7ff f8a6 	bl	80020f0 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7ff f8a2 	bl	80020f0 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e167      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x200>
 8002fc6:	e01b      	b.n	8003000 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc8:	4b09      	ldr	r3, [pc, #36]	@ (8002ff0 <HAL_RCC_OscConfig+0x248>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fce:	f7ff f88f 	bl	80020f0 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd4:	e00e      	b.n	8002ff4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd6:	f7ff f88b 	bl	80020f0 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d907      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e150      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	42470000 	.word	0x42470000
 8002ff0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff4:	4b88      	ldr	r3, [pc, #544]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 8002ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ea      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 8097 	beq.w	800313c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003012:	4b81      	ldr	r3, [pc, #516]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10f      	bne.n	800303e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	4b7d      	ldr	r3, [pc, #500]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	4a7c      	ldr	r2, [pc, #496]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 8003028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800302c:	6413      	str	r3, [r2, #64]	@ 0x40
 800302e:	4b7a      	ldr	r3, [pc, #488]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800303a:	2301      	movs	r3, #1
 800303c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303e:	4b77      	ldr	r3, [pc, #476]	@ (800321c <HAL_RCC_OscConfig+0x474>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003046:	2b00      	cmp	r3, #0
 8003048:	d118      	bne.n	800307c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304a:	4b74      	ldr	r3, [pc, #464]	@ (800321c <HAL_RCC_OscConfig+0x474>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a73      	ldr	r2, [pc, #460]	@ (800321c <HAL_RCC_OscConfig+0x474>)
 8003050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003056:	f7ff f84b 	bl	80020f0 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305e:	f7ff f847 	bl	80020f0 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e10c      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003070:	4b6a      	ldr	r3, [pc, #424]	@ (800321c <HAL_RCC_OscConfig+0x474>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d106      	bne.n	8003092 <HAL_RCC_OscConfig+0x2ea>
 8003084:	4b64      	ldr	r3, [pc, #400]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003088:	4a63      	ldr	r2, [pc, #396]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003090:	e01c      	b.n	80030cc <HAL_RCC_OscConfig+0x324>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b05      	cmp	r3, #5
 8003098:	d10c      	bne.n	80030b4 <HAL_RCC_OscConfig+0x30c>
 800309a:	4b5f      	ldr	r3, [pc, #380]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 800309c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309e:	4a5e      	ldr	r2, [pc, #376]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 80030a0:	f043 0304 	orr.w	r3, r3, #4
 80030a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b2:	e00b      	b.n	80030cc <HAL_RCC_OscConfig+0x324>
 80030b4:	4b58      	ldr	r3, [pc, #352]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 80030b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b8:	4a57      	ldr	r2, [pc, #348]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c0:	4b55      	ldr	r3, [pc, #340]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 80030c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c4:	4a54      	ldr	r2, [pc, #336]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 80030c6:	f023 0304 	bic.w	r3, r3, #4
 80030ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d015      	beq.n	8003100 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7ff f80c 	bl	80020f0 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030da:	e00a      	b.n	80030f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030dc:	f7ff f808 	bl	80020f0 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e0cb      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f2:	4b49      	ldr	r3, [pc, #292]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0ee      	beq.n	80030dc <HAL_RCC_OscConfig+0x334>
 80030fe:	e014      	b.n	800312a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003100:	f7fe fff6 	bl	80020f0 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003106:	e00a      	b.n	800311e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f7fe fff2 	bl	80020f0 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0b5      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311e:	4b3e      	ldr	r3, [pc, #248]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1ee      	bne.n	8003108 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800312a:	7dfb      	ldrb	r3, [r7, #23]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003130:	4b39      	ldr	r3, [pc, #228]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	4a38      	ldr	r2, [pc, #224]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 8003136:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800313a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80a1 	beq.w	8003288 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003146:	4b34      	ldr	r3, [pc, #208]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b08      	cmp	r3, #8
 8003150:	d05c      	beq.n	800320c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d141      	bne.n	80031de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315a:	4b31      	ldr	r3, [pc, #196]	@ (8003220 <HAL_RCC_OscConfig+0x478>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003160:	f7fe ffc6 	bl	80020f0 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003168:	f7fe ffc2 	bl	80020f0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e087      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317a:	4b27      	ldr	r3, [pc, #156]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1f0      	bne.n	8003168 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	019b      	lsls	r3, r3, #6
 8003196:	431a      	orrs	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	3b01      	subs	r3, #1
 80031a0:	041b      	lsls	r3, r3, #16
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a8:	061b      	lsls	r3, r3, #24
 80031aa:	491b      	ldr	r1, [pc, #108]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003220 <HAL_RCC_OscConfig+0x478>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b6:	f7fe ff9b 	bl	80020f0 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031be:	f7fe ff97 	bl	80020f0 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e05c      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d0:	4b11      	ldr	r3, [pc, #68]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x416>
 80031dc:	e054      	b.n	8003288 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031de:	4b10      	ldr	r3, [pc, #64]	@ (8003220 <HAL_RCC_OscConfig+0x478>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e4:	f7fe ff84 	bl	80020f0 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe ff80 	bl	80020f0 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e045      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_RCC_OscConfig+0x470>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x444>
 800320a:	e03d      	b.n	8003288 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d107      	bne.n	8003224 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e038      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
 8003218:	40023800 	.word	0x40023800
 800321c:	40007000 	.word	0x40007000
 8003220:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003224:	4b1b      	ldr	r3, [pc, #108]	@ (8003294 <HAL_RCC_OscConfig+0x4ec>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d028      	beq.n	8003284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d121      	bne.n	8003284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324a:	429a      	cmp	r2, r3
 800324c:	d11a      	bne.n	8003284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003254:	4013      	ands	r3, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800325a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800325c:	4293      	cmp	r3, r2
 800325e:	d111      	bne.n	8003284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	3b01      	subs	r3, #1
 800326e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d107      	bne.n	8003284 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3718      	adds	r7, #24
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800

08003298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0cc      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032ac:	4b68      	ldr	r3, [pc, #416]	@ (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d90c      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b65      	ldr	r3, [pc, #404]	@ (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b63      	ldr	r3, [pc, #396]	@ (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0b8      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d020      	beq.n	8003322 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ec:	4b59      	ldr	r3, [pc, #356]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a58      	ldr	r2, [pc, #352]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003304:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a52      	ldr	r2, [pc, #328]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800330e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003310:	4b50      	ldr	r3, [pc, #320]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	494d      	ldr	r1, [pc, #308]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d044      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b47      	ldr	r3, [pc, #284]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d119      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e07f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d003      	beq.n	8003356 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003352:	2b03      	cmp	r3, #3
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003356:	4b3f      	ldr	r3, [pc, #252]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e06f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003366:	4b3b      	ldr	r3, [pc, #236]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e067      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003376:	4b37      	ldr	r3, [pc, #220]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f023 0203 	bic.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4934      	ldr	r1, [pc, #208]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003388:	f7fe feb2 	bl	80020f0 <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f7fe feae 	bl	80020f0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e04f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 020c 	and.w	r2, r3, #12
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1eb      	bne.n	8003390 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b8:	4b25      	ldr	r3, [pc, #148]	@ (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d20c      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b22      	ldr	r3, [pc, #136]	@ (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b20      	ldr	r3, [pc, #128]	@ (8003450 <HAL_RCC_ClockConfig+0x1b8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e032      	b.n	8003446 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ec:	4b19      	ldr	r3, [pc, #100]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4916      	ldr	r1, [pc, #88]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340a:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	490e      	ldr	r1, [pc, #56]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800341e:	f000 f821 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8003422:	4602      	mov	r2, r0
 8003424:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	490a      	ldr	r1, [pc, #40]	@ (8003458 <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	5ccb      	ldrb	r3, [r1, r3]
 8003432:	fa22 f303 	lsr.w	r3, r2, r3
 8003436:	4a09      	ldr	r2, [pc, #36]	@ (800345c <HAL_RCC_ClockConfig+0x1c4>)
 8003438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <HAL_RCC_ClockConfig+0x1c8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fca8 	bl	8001d94 <HAL_InitTick>

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023c00 	.word	0x40023c00
 8003454:	40023800 	.word	0x40023800
 8003458:	08009110 	.word	0x08009110
 800345c:	2000004c 	.word	0x2000004c
 8003460:	20000050 	.word	0x20000050

08003464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003468:	b090      	sub	sp, #64	@ 0x40
 800346a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003470:	2300      	movs	r3, #0
 8003472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003474:	2300      	movs	r3, #0
 8003476:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800347c:	4b59      	ldr	r3, [pc, #356]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b08      	cmp	r3, #8
 8003486:	d00d      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003488:	2b08      	cmp	r3, #8
 800348a:	f200 80a1 	bhi.w	80035d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x34>
 8003492:	2b04      	cmp	r3, #4
 8003494:	d003      	beq.n	800349e <HAL_RCC_GetSysClockFreq+0x3a>
 8003496:	e09b      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003498:	4b53      	ldr	r3, [pc, #332]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800349a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800349c:	e09b      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800349e:	4b53      	ldr	r3, [pc, #332]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x188>)
 80034a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034a2:	e098      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a4:	4b4f      	ldr	r3, [pc, #316]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ae:	4b4d      	ldr	r3, [pc, #308]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d028      	beq.n	800350c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ba:	4b4a      	ldr	r3, [pc, #296]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	099b      	lsrs	r3, r3, #6
 80034c0:	2200      	movs	r2, #0
 80034c2:	623b      	str	r3, [r7, #32]
 80034c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034cc:	2100      	movs	r1, #0
 80034ce:	4b47      	ldr	r3, [pc, #284]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x188>)
 80034d0:	fb03 f201 	mul.w	r2, r3, r1
 80034d4:	2300      	movs	r3, #0
 80034d6:	fb00 f303 	mul.w	r3, r0, r3
 80034da:	4413      	add	r3, r2
 80034dc:	4a43      	ldr	r2, [pc, #268]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x188>)
 80034de:	fba0 1202 	umull	r1, r2, r0, r2
 80034e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034e4:	460a      	mov	r2, r1
 80034e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ea:	4413      	add	r3, r2
 80034ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f0:	2200      	movs	r2, #0
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	61fa      	str	r2, [r7, #28]
 80034f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034fe:	f7fc fec7 	bl	8000290 <__aeabi_uldivmod>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4613      	mov	r3, r2
 8003508:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800350a:	e053      	b.n	80035b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350c:	4b35      	ldr	r3, [pc, #212]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	099b      	lsrs	r3, r3, #6
 8003512:	2200      	movs	r2, #0
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	617a      	str	r2, [r7, #20]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800351e:	f04f 0b00 	mov.w	fp, #0
 8003522:	4652      	mov	r2, sl
 8003524:	465b      	mov	r3, fp
 8003526:	f04f 0000 	mov.w	r0, #0
 800352a:	f04f 0100 	mov.w	r1, #0
 800352e:	0159      	lsls	r1, r3, #5
 8003530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003534:	0150      	lsls	r0, r2, #5
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	ebb2 080a 	subs.w	r8, r2, sl
 800353e:	eb63 090b 	sbc.w	r9, r3, fp
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800354e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003552:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003556:	ebb2 0408 	subs.w	r4, r2, r8
 800355a:	eb63 0509 	sbc.w	r5, r3, r9
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	00eb      	lsls	r3, r5, #3
 8003568:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800356c:	00e2      	lsls	r2, r4, #3
 800356e:	4614      	mov	r4, r2
 8003570:	461d      	mov	r5, r3
 8003572:	eb14 030a 	adds.w	r3, r4, sl
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	eb45 030b 	adc.w	r3, r5, fp
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800358a:	4629      	mov	r1, r5
 800358c:	028b      	lsls	r3, r1, #10
 800358e:	4621      	mov	r1, r4
 8003590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003594:	4621      	mov	r1, r4
 8003596:	028a      	lsls	r2, r1, #10
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359e:	2200      	movs	r2, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	60fa      	str	r2, [r7, #12]
 80035a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a8:	f7fc fe72 	bl	8000290 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4613      	mov	r3, r2
 80035b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035b4:	4b0b      	ldr	r3, [pc, #44]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	0c1b      	lsrs	r3, r3, #16
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	3301      	adds	r3, #1
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80035c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035ce:	e002      	b.n	80035d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d0:	4b05      	ldr	r3, [pc, #20]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80035d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3740      	adds	r7, #64	@ 0x40
 80035dc:	46bd      	mov	sp, r7
 80035de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e2:	bf00      	nop
 80035e4:	40023800 	.word	0x40023800
 80035e8:	00f42400 	.word	0x00f42400
 80035ec:	017d7840 	.word	0x017d7840

080035f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f4:	4b03      	ldr	r3, [pc, #12]	@ (8003604 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f6:	681b      	ldr	r3, [r3, #0]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	2000004c 	.word	0x2000004c

08003608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800360c:	f7ff fff0 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	0a9b      	lsrs	r3, r3, #10
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	4903      	ldr	r1, [pc, #12]	@ (800362c <HAL_RCC_GetPCLK1Freq+0x24>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40023800 	.word	0x40023800
 800362c:	08009120 	.word	0x08009120

08003630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003634:	f7ff ffdc 	bl	80035f0 <HAL_RCC_GetHCLKFreq>
 8003638:	4602      	mov	r2, r0
 800363a:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	0b5b      	lsrs	r3, r3, #13
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	4903      	ldr	r1, [pc, #12]	@ (8003654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	08009120 	.word	0x08009120

08003658 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	220f      	movs	r2, #15
 8003666:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003668:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <HAL_RCC_GetClockConfig+0x5c>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0203 	and.w	r2, r3, #3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003674:	4b0f      	ldr	r3, [pc, #60]	@ (80036b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003680:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800368c:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <HAL_RCC_GetClockConfig+0x5c>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	08db      	lsrs	r3, r3, #3
 8003692:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800369a:	4b07      	ldr	r3, [pc, #28]	@ (80036b8 <HAL_RCC_GetClockConfig+0x60>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0207 	and.w	r2, r3, #7
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	601a      	str	r2, [r3, #0]
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40023c00 	.word	0x40023c00

080036bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e07b      	b.n	80037c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d108      	bne.n	80036e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036de:	d009      	beq.n	80036f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	61da      	str	r2, [r3, #28]
 80036e6:	e005      	b.n	80036f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fe fa3a 	bl	8001b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800372a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	431a      	orrs	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003764:	431a      	orrs	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003778:	ea42 0103 	orr.w	r1, r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003780:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	f003 0104 	and.w	r1, r3, #4
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379a:	f003 0210 	and.w	r2, r3, #16
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69da      	ldr	r2, [r3, #28]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b088      	sub	sp, #32
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	4613      	mov	r3, r2
 80037dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_SPI_Transmit+0x22>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e12d      	b.n	8003a4c <HAL_SPI_Transmit+0x27e>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037f8:	f7fe fc7a 	bl	80020f0 <HAL_GetTick>
 80037fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d002      	beq.n	8003814 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800380e:	2302      	movs	r3, #2
 8003810:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003812:	e116      	b.n	8003a42 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_SPI_Transmit+0x52>
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003824:	e10d      	b.n	8003a42 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2203      	movs	r2, #3
 800382a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800386c:	d10f      	bne.n	800388e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800388c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003898:	2b40      	cmp	r3, #64	@ 0x40
 800389a:	d007      	beq.n	80038ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b4:	d14f      	bne.n	8003956 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_SPI_Transmit+0xf6>
 80038be:	8afb      	ldrh	r3, [r7, #22]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d142      	bne.n	800394a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c8:	881a      	ldrh	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d4:	1c9a      	adds	r2, r3, #2
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038e8:	e02f      	b.n	800394a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d112      	bne.n	800391e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fc:	881a      	ldrh	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003908:	1c9a      	adds	r2, r3, #2
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800391c:	e015      	b.n	800394a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800391e:	f7fe fbe7 	bl	80020f0 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d803      	bhi.n	8003936 <HAL_SPI_Transmit+0x168>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d102      	bne.n	800393c <HAL_SPI_Transmit+0x16e>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d106      	bne.n	800394a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003948:	e07b      	b.n	8003a42 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800394e:	b29b      	uxth	r3, r3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ca      	bne.n	80038ea <HAL_SPI_Transmit+0x11c>
 8003954:	e050      	b.n	80039f8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_SPI_Transmit+0x196>
 800395e:	8afb      	ldrh	r3, [r7, #22]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d144      	bne.n	80039ee <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	7812      	ldrb	r2, [r2, #0]
 8003970:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800398a:	e030      	b.n	80039ee <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b02      	cmp	r3, #2
 8003998:	d113      	bne.n	80039c2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	7812      	ldrb	r2, [r2, #0]
 80039a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039c0:	e015      	b.n	80039ee <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c2:	f7fe fb95 	bl	80020f0 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d803      	bhi.n	80039da <HAL_SPI_Transmit+0x20c>
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d8:	d102      	bne.n	80039e0 <HAL_SPI_Transmit+0x212>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d106      	bne.n	80039ee <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80039ec:	e029      	b.n	8003a42 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1c9      	bne.n	800398c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	6839      	ldr	r1, [r7, #0]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fc25 	bl	800424c <SPI_EndRxTxTransaction>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e003      	b.n	8003a42 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003a4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3720      	adds	r7, #32
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_SPI_Transmit_DMA+0x20>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e097      	b.n	8003ba4 <HAL_SPI_Transmit_DMA+0x150>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d002      	beq.n	8003a8e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a8c:	e085      	b.n	8003b9a <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_SPI_Transmit_DMA+0x46>
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d102      	bne.n	8003aa0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a9e:	e07c      	b.n	8003b9a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	88fa      	ldrh	r2, [r7, #6]
 8003ab8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	88fa      	ldrh	r2, [r7, #6]
 8003abe:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ae6:	d10f      	bne.n	8003b08 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003af6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b0c:	4a27      	ldr	r2, [pc, #156]	@ (8003bac <HAL_SPI_Transmit_DMA+0x158>)
 8003b0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b14:	4a26      	ldr	r2, [pc, #152]	@ (8003bb0 <HAL_SPI_Transmit_DMA+0x15c>)
 8003b16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1c:	4a25      	ldr	r2, [pc, #148]	@ (8003bb4 <HAL_SPI_Transmit_DMA+0x160>)
 8003b1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b24:	2200      	movs	r2, #0
 8003b26:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	4619      	mov	r1, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	330c      	adds	r3, #12
 8003b38:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003b40:	f7fe fc96 	bl	8002470 <HAL_DMA_Start_IT>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4e:	f043 0210 	orr.w	r2, r3, #16
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003b5a:	e01e      	b.n	8003b9a <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b66:	2b40      	cmp	r3, #64	@ 0x40
 8003b68:	d007      	beq.n	8003b7a <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0220 	orr.w	r2, r2, #32
 8003b88:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0202 	orr.w	r2, r2, #2
 8003b98:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	08003fdd 	.word	0x08003fdd
 8003bb0:	08003dfd 	.word	0x08003dfd
 8003bb4:	08004031 	.word	0x08004031

08003bb8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e0db      	b.n	8003d90 <HAL_SPI_TransmitReceive_DMA+0x1d8>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003be6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003bee:	7dbb      	ldrb	r3, [r7, #22]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d00d      	beq.n	8003c10 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bfa:	d106      	bne.n	8003c0a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <HAL_SPI_TransmitReceive_DMA+0x52>
 8003c04:	7dbb      	ldrb	r3, [r7, #22]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d002      	beq.n	8003c10 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c0e:	e0ba      	b.n	8003d86 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003c1c:	887b      	ldrh	r3, [r7, #2]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d102      	bne.n	8003c28 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c26:	e0ae      	b.n	8003d86 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d003      	beq.n	8003c3c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2205      	movs	r2, #5
 8003c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	887a      	ldrh	r2, [r7, #2]
 8003c4c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	887a      	ldrh	r2, [r7, #2]
 8003c52:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	887a      	ldrh	r2, [r7, #2]
 8003c5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	887a      	ldrh	r2, [r7, #2]
 8003c64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d108      	bne.n	8003c90 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c82:	4a45      	ldr	r2, [pc, #276]	@ (8003d98 <HAL_SPI_TransmitReceive_DMA+0x1e0>)
 8003c84:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8a:	4a44      	ldr	r2, [pc, #272]	@ (8003d9c <HAL_SPI_TransmitReceive_DMA+0x1e4>)
 8003c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c8e:	e007      	b.n	8003ca0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c94:	4a42      	ldr	r2, [pc, #264]	@ (8003da0 <HAL_SPI_TransmitReceive_DMA+0x1e8>)
 8003c96:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9c:	4a41      	ldr	r2, [pc, #260]	@ (8003da4 <HAL_SPI_TransmitReceive_DMA+0x1ec>)
 8003c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca4:	4a40      	ldr	r2, [pc, #256]	@ (8003da8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003ca6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cac:	2200      	movs	r2, #0
 8003cae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	330c      	adds	r3, #12
 8003cba:	4619      	mov	r1, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cc6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003cc8:	f7fe fbd2 	bl	8002470 <HAL_DMA_Start_IT>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd6:	f043 0210 	orr.w	r2, r3, #16
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003ce2:	e050      	b.n	8003d86 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d00:	2200      	movs	r2, #0
 8003d02:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d08:	2200      	movs	r2, #0
 8003d0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d10:	2200      	movs	r2, #0
 8003d12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d2a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d2c:	f7fe fba0 	bl	8002470 <HAL_DMA_Start_IT>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_SPI_TransmitReceive_DMA+0x190>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3a:	f043 0210 	orr.w	r2, r3, #16
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	75fb      	strb	r3, [r7, #23]

    goto error;
 8003d46:	e01e      	b.n	8003d86 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d52:	2b40      	cmp	r3, #64	@ 0x40
 8003d54:	d007      	beq.n	8003d66 <HAL_SPI_TransmitReceive_DMA+0x1ae>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d64:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0220 	orr.w	r2, r2, #32
 8003d74:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0202 	orr.w	r2, r2, #2
 8003d84:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	08003ff9 	.word	0x08003ff9
 8003d9c:	08003ea5 	.word	0x08003ea5
 8003da0:	08004015 	.word	0x08004015
 8003da4:	08003f4d 	.word	0x08003f4d
 8003da8:	08004031 	.word	0x08004031

08003dac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e08:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e0a:	f7fe f971 	bl	80020f0 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e1e:	d03b      	beq.n	8003e98 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0220 	bic.w	r2, r2, #32
 8003e2e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0202 	bic.w	r2, r2, #2
 8003e3e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	2164      	movs	r1, #100	@ 0x64
 8003e44:	6978      	ldr	r0, [r7, #20]
 8003e46:	f000 fa01 	bl	800424c <SPI_EndRxTxTransaction>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003e90:	6978      	ldr	r0, [r7, #20]
 8003e92:	f7ff ffa9 	bl	8003de8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003e96:	e002      	b.n	8003e9e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8003e98:	6978      	ldr	r0, [r7, #20]
 8003e9a:	f7fc fd09 	bl	80008b0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eb2:	f7fe f91d 	bl	80020f0 <HAL_GetTick>
 8003eb6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ec6:	d03b      	beq.n	8003f40 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0220 	bic.w	r2, r2, #32
 8003ed6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <SPI_DMAReceiveCplt+0x58>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ee8:	d108      	bne.n	8003efc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0203 	bic.w	r2, r2, #3
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	e007      	b.n	8003f0c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	2164      	movs	r1, #100	@ 0x64
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f935 	bl	8004180 <SPI_EndRxTransaction>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff ff55 	bl	8003de8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f3e:	e002      	b.n	8003f46 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7fc fccb 	bl	80008dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f58:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f5a:	f7fe f8c9 	bl	80020f0 <HAL_GetTick>
 8003f5e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f6e:	d02f      	beq.n	8003fd0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0220 	bic.w	r2, r2, #32
 8003f7e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	2164      	movs	r1, #100	@ 0x64
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f961 	bl	800424c <SPI_EndRxTxTransaction>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0203 	bic.w	r2, r2, #3
 8003faa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff ff0d 	bl	8003de8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003fce:	e002      	b.n	8003fd6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f7fc fc99 	bl	8000908 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fd6:	3710      	adds	r7, #16
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f7ff fede 	bl	8003dac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004004:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f7ff feda 	bl	8003dc0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800400c:	bf00      	nop
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004020:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f7ff fed6 	bl	8003dd4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0203 	bic.w	r2, r2, #3
 800404c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004052:	f043 0210 	orr.w	r2, r3, #16
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f7ff fec0 	bl	8003de8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004080:	f7fe f836 	bl	80020f0 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	4413      	add	r3, r2
 800408e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004090:	f7fe f82e 	bl	80020f0 <HAL_GetTick>
 8004094:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004096:	4b39      	ldr	r3, [pc, #228]	@ (800417c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	015b      	lsls	r3, r3, #5
 800409c:	0d1b      	lsrs	r3, r3, #20
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	fb02 f303 	mul.w	r3, r2, r3
 80040a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040a6:	e054      	b.n	8004152 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d050      	beq.n	8004152 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040b0:	f7fe f81e 	bl	80020f0 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d902      	bls.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d13d      	bne.n	8004142 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040de:	d111      	bne.n	8004104 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040e8:	d004      	beq.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f2:	d107      	bne.n	8004104 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004102:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410c:	d10f      	bne.n	800412e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800412c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e017      	b.n	8004172 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	3b01      	subs	r3, #1
 8004150:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4013      	ands	r3, r2
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	429a      	cmp	r2, r3
 8004160:	bf0c      	ite	eq
 8004162:	2301      	moveq	r3, #1
 8004164:	2300      	movne	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	429a      	cmp	r2, r3
 800416e:	d19b      	bne.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	2000004c 	.word	0x2000004c

08004180 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004194:	d111      	bne.n	80041ba <SPI_EndRxTransaction+0x3a>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800419e:	d004      	beq.n	80041aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a8:	d107      	bne.n	80041ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041c2:	d12a      	bne.n	800421a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041cc:	d012      	beq.n	80041f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2180      	movs	r1, #128	@ 0x80
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff ff49 	bl	8004070 <SPI_WaitFlagStateUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d02d      	beq.n	8004240 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e026      	b.n	8004242 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2200      	movs	r2, #0
 80041fc:	2101      	movs	r1, #1
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f7ff ff36 	bl	8004070 <SPI_WaitFlagStateUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01a      	beq.n	8004240 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420e:	f043 0220 	orr.w	r2, r3, #32
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e013      	b.n	8004242 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2200      	movs	r2, #0
 8004222:	2101      	movs	r1, #1
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff ff23 	bl	8004070 <SPI_WaitFlagStateUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004234:	f043 0220 	orr.w	r2, r3, #32
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e000      	b.n	8004242 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af02      	add	r7, sp, #8
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2201      	movs	r2, #1
 8004260:	2102      	movs	r1, #2
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7ff ff04 	bl	8004070 <SPI_WaitFlagStateUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004272:	f043 0220 	orr.w	r2, r3, #32
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e032      	b.n	80042e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800427e:	4b1b      	ldr	r3, [pc, #108]	@ (80042ec <SPI_EndRxTxTransaction+0xa0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1b      	ldr	r2, [pc, #108]	@ (80042f0 <SPI_EndRxTxTransaction+0xa4>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	0d5b      	lsrs	r3, r3, #21
 800428a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800429c:	d112      	bne.n	80042c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	2200      	movs	r2, #0
 80042a6:	2180      	movs	r1, #128	@ 0x80
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f7ff fee1 	bl	8004070 <SPI_WaitFlagStateUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d016      	beq.n	80042e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b8:	f043 0220 	orr.w	r2, r3, #32
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e00f      	b.n	80042e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00a      	beq.n	80042e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042da:	2b80      	cmp	r3, #128	@ 0x80
 80042dc:	d0f2      	beq.n	80042c4 <SPI_EndRxTxTransaction+0x78>
 80042de:	e000      	b.n	80042e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80042e0:	bf00      	nop
  }

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	2000004c 	.word	0x2000004c
 80042f0:	165e9f81 	.word	0x165e9f81

080042f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e041      	b.n	800438a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f839 	bl	8004392 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	4619      	mov	r1, r3
 8004332:	4610      	mov	r0, r2
 8004334:	f000 f9b2 	bl	800469c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800439a:	bf00      	nop
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d001      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e044      	b.n	800444a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004458 <HAL_TIM_Base_Start_IT+0xb0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d018      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x6c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ea:	d013      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x6c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1a      	ldr	r2, [pc, #104]	@ (800445c <HAL_TIM_Base_Start_IT+0xb4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00e      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x6c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a19      	ldr	r2, [pc, #100]	@ (8004460 <HAL_TIM_Base_Start_IT+0xb8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x6c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a17      	ldr	r2, [pc, #92]	@ (8004464 <HAL_TIM_Base_Start_IT+0xbc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_TIM_Base_Start_IT+0x6c>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a16      	ldr	r2, [pc, #88]	@ (8004468 <HAL_TIM_Base_Start_IT+0xc0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d111      	bne.n	8004438 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b06      	cmp	r3, #6
 8004424:	d010      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0201 	orr.w	r2, r2, #1
 8004434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004436:	e007      	b.n	8004448 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40014000 	.word	0x40014000

0800446c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d020      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01b      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0202 	mvn.w	r2, #2
 80044a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f8d2 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f8c4 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8d5 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d020      	beq.n	800451c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01b      	beq.n	800451c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0204 	mvn.w	r2, #4
 80044ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2202      	movs	r2, #2
 80044f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f8ac 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 8004508:	e005      	b.n	8004516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f89e 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f8af 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d020      	beq.n	8004568 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01b      	beq.n	8004568 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0208 	mvn.w	r2, #8
 8004538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2204      	movs	r2, #4
 800453e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f886 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f878 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f889 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b00      	cmp	r3, #0
 8004570:	d020      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01b      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0210 	mvn.w	r2, #16
 8004584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2208      	movs	r2, #8
 800458a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f860 	bl	8004660 <HAL_TIM_IC_CaptureCallback>
 80045a0:	e005      	b.n	80045ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f852 	bl	800464c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f863 	bl	8004674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0201 	mvn.w	r2, #1
 80045d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fc fbda 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00c      	beq.n	80045fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f8e6 	bl	80047c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00c      	beq.n	8004620 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d007      	beq.n	8004620 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f834 	bl	8004688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00c      	beq.n	8004644 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0220 	mvn.w	r2, #32
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f8b8 	bl	80047b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3a      	ldr	r2, [pc, #232]	@ (8004798 <TIM_Base_SetConfig+0xfc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00f      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ba:	d00b      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a37      	ldr	r2, [pc, #220]	@ (800479c <TIM_Base_SetConfig+0x100>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d007      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a36      	ldr	r2, [pc, #216]	@ (80047a0 <TIM_Base_SetConfig+0x104>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_Base_SetConfig+0x38>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a35      	ldr	r2, [pc, #212]	@ (80047a4 <TIM_Base_SetConfig+0x108>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d108      	bne.n	80046e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004798 <TIM_Base_SetConfig+0xfc>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01b      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046f4:	d017      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a28      	ldr	r2, [pc, #160]	@ (800479c <TIM_Base_SetConfig+0x100>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a27      	ldr	r2, [pc, #156]	@ (80047a0 <TIM_Base_SetConfig+0x104>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00f      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a26      	ldr	r2, [pc, #152]	@ (80047a4 <TIM_Base_SetConfig+0x108>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00b      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a25      	ldr	r2, [pc, #148]	@ (80047a8 <TIM_Base_SetConfig+0x10c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d007      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a24      	ldr	r2, [pc, #144]	@ (80047ac <TIM_Base_SetConfig+0x110>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_Base_SetConfig+0x8a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a23      	ldr	r2, [pc, #140]	@ (80047b0 <TIM_Base_SetConfig+0x114>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d108      	bne.n	8004738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800472c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	689a      	ldr	r2, [r3, #8]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a0e      	ldr	r2, [pc, #56]	@ (8004798 <TIM_Base_SetConfig+0xfc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d103      	bne.n	800476c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f023 0201 	bic.w	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	611a      	str	r2, [r3, #16]
  }
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40010000 	.word	0x40010000
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800
 80047a4:	40000c00 	.word	0x40000c00
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40014400 	.word	0x40014400
 80047b0:	40014800 	.word	0x40014800

080047b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e042      	b.n	8004874 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fd fa7e 	bl	8001d04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	@ 0x24
 800480c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800481e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f973 	bl	8004b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68da      	ldr	r2, [r3, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b08a      	sub	sp, #40	@ 0x28
 8004880:	af02      	add	r7, sp, #8
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	4613      	mov	r3, r2
 800488a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b20      	cmp	r3, #32
 800489a:	d175      	bne.n	8004988 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <HAL_UART_Transmit+0x2c>
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e06e      	b.n	800498a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2221      	movs	r2, #33	@ 0x21
 80048b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ba:	f7fd fc19 	bl	80020f0 <HAL_GetTick>
 80048be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	88fa      	ldrh	r2, [r7, #6]
 80048ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d4:	d108      	bne.n	80048e8 <HAL_UART_Transmit+0x6c>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d104      	bne.n	80048e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	e003      	b.n	80048f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048f0:	e02e      	b.n	8004950 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	2200      	movs	r2, #0
 80048fa:	2180      	movs	r1, #128	@ 0x80
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f848 	bl	8004992 <UART_WaitOnFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e03a      	b.n	800498a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004928:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	3302      	adds	r3, #2
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	e007      	b.n	8004942 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	3301      	adds	r3, #1
 8004940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1cb      	bne.n	80048f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	2200      	movs	r2, #0
 8004962:	2140      	movs	r1, #64	@ 0x40
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f814 	bl	8004992 <UART_WaitOnFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e006      	b.n	800498a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	e000      	b.n	800498a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004988:	2302      	movs	r3, #2
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	3720      	adds	r7, #32
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b086      	sub	sp, #24
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	603b      	str	r3, [r7, #0]
 800499e:	4613      	mov	r3, r2
 80049a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049a2:	e03b      	b.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049aa:	d037      	beq.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ac:	f7fd fba0 	bl	80020f0 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	6a3a      	ldr	r2, [r7, #32]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d302      	bcc.n	80049c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e03a      	b.n	8004a3c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d023      	beq.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x8a>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b80      	cmp	r3, #128	@ 0x80
 80049d8:	d020      	beq.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x8a>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b40      	cmp	r3, #64	@ 0x40
 80049de:	d01d      	beq.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d116      	bne.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	617b      	str	r3, [r7, #20]
 8004a02:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f81d 	bl	8004a44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e00f      	b.n	8004a3c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d0b4      	beq.n	80049a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b095      	sub	sp, #84	@ 0x54
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	330c      	adds	r3, #12
 8004a52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	330c      	adds	r3, #12
 8004a6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a6c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3314      	adds	r3, #20
 8004a86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004aa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e5      	bne.n	8004a80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d119      	bne.n	8004af0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	330c      	adds	r3, #12
 8004ac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	e853 3f00 	ldrex	r3, [r3]
 8004aca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f023 0310 	bic.w	r3, r3, #16
 8004ad2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	330c      	adds	r3, #12
 8004ada:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004adc:	61ba      	str	r2, [r7, #24]
 8004ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	6979      	ldr	r1, [r7, #20]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e5      	bne.n	8004abc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004afe:	bf00      	nop
 8004b00:	3754      	adds	r7, #84	@ 0x54
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
	...

08004b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b10:	b0c0      	sub	sp, #256	@ 0x100
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b28:	68d9      	ldr	r1, [r3, #12]
 8004b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	ea40 0301 	orr.w	r3, r0, r1
 8004b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b64:	f021 010c 	bic.w	r1, r1, #12
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b72:	430b      	orrs	r3, r1
 8004b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b86:	6999      	ldr	r1, [r3, #24]
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	ea40 0301 	orr.w	r3, r0, r1
 8004b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4b8f      	ldr	r3, [pc, #572]	@ (8004dd8 <UART_SetConfig+0x2cc>)
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d005      	beq.n	8004bac <UART_SetConfig+0xa0>
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8004ddc <UART_SetConfig+0x2d0>)
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d104      	bne.n	8004bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bac:	f7fe fd40 	bl	8003630 <HAL_RCC_GetPCLK2Freq>
 8004bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bb4:	e003      	b.n	8004bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bb6:	f7fe fd27 	bl	8003608 <HAL_RCC_GetPCLK1Freq>
 8004bba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bc8:	f040 810c 	bne.w	8004de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004bde:	4622      	mov	r2, r4
 8004be0:	462b      	mov	r3, r5
 8004be2:	1891      	adds	r1, r2, r2
 8004be4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004be6:	415b      	adcs	r3, r3
 8004be8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bee:	4621      	mov	r1, r4
 8004bf0:	eb12 0801 	adds.w	r8, r2, r1
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	eb43 0901 	adc.w	r9, r3, r1
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c0e:	4690      	mov	r8, r2
 8004c10:	4699      	mov	r9, r3
 8004c12:	4623      	mov	r3, r4
 8004c14:	eb18 0303 	adds.w	r3, r8, r3
 8004c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	eb49 0303 	adc.w	r3, r9, r3
 8004c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c32:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	18db      	adds	r3, r3, r3
 8004c3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c40:	4613      	mov	r3, r2
 8004c42:	eb42 0303 	adc.w	r3, r2, r3
 8004c46:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c50:	f7fb fb1e 	bl	8000290 <__aeabi_uldivmod>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4b61      	ldr	r3, [pc, #388]	@ (8004de0 <UART_SetConfig+0x2d4>)
 8004c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	011c      	lsls	r4, r3, #4
 8004c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c74:	4642      	mov	r2, r8
 8004c76:	464b      	mov	r3, r9
 8004c78:	1891      	adds	r1, r2, r2
 8004c7a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c7c:	415b      	adcs	r3, r3
 8004c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c84:	4641      	mov	r1, r8
 8004c86:	eb12 0a01 	adds.w	sl, r2, r1
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ca4:	4692      	mov	sl, r2
 8004ca6:	469b      	mov	fp, r3
 8004ca8:	4643      	mov	r3, r8
 8004caa:	eb1a 0303 	adds.w	r3, sl, r3
 8004cae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8004cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	18db      	adds	r3, r3, r3
 8004cd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	eb42 0303 	adc.w	r3, r2, r3
 8004cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ce6:	f7fb fad3 	bl	8000290 <__aeabi_uldivmod>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8004de0 <UART_SetConfig+0x2d4>)
 8004cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	2264      	movs	r2, #100	@ 0x64
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	1acb      	subs	r3, r1, r3
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d06:	4b36      	ldr	r3, [pc, #216]	@ (8004de0 <UART_SetConfig+0x2d4>)
 8004d08:	fba3 2302 	umull	r2, r3, r3, r2
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d14:	441c      	add	r4, r3
 8004d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d20:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d28:	4642      	mov	r2, r8
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	1891      	adds	r1, r2, r2
 8004d2e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d30:	415b      	adcs	r3, r3
 8004d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d38:	4641      	mov	r1, r8
 8004d3a:	1851      	adds	r1, r2, r1
 8004d3c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d3e:	4649      	mov	r1, r9
 8004d40:	414b      	adcs	r3, r1
 8004d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d50:	4659      	mov	r1, fp
 8004d52:	00cb      	lsls	r3, r1, #3
 8004d54:	4651      	mov	r1, sl
 8004d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d5a:	4651      	mov	r1, sl
 8004d5c:	00ca      	lsls	r2, r1, #3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	4642      	mov	r2, r8
 8004d66:	189b      	adds	r3, r3, r2
 8004d68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	460a      	mov	r2, r1
 8004d70:	eb42 0303 	adc.w	r3, r2, r3
 8004d74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d84:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	18db      	adds	r3, r3, r3
 8004d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d92:	4613      	mov	r3, r2
 8004d94:	eb42 0303 	adc.w	r3, r2, r3
 8004d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004da2:	f7fb fa75 	bl	8000290 <__aeabi_uldivmod>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4b0d      	ldr	r3, [pc, #52]	@ (8004de0 <UART_SetConfig+0x2d4>)
 8004dac:	fba3 1302 	umull	r1, r3, r3, r2
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	2164      	movs	r1, #100	@ 0x64
 8004db4:	fb01 f303 	mul.w	r3, r1, r3
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	3332      	adds	r3, #50	@ 0x32
 8004dbe:	4a08      	ldr	r2, [pc, #32]	@ (8004de0 <UART_SetConfig+0x2d4>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	f003 0207 	and.w	r2, r3, #7
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4422      	add	r2, r4
 8004dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dd4:	e106      	b.n	8004fe4 <UART_SetConfig+0x4d8>
 8004dd6:	bf00      	nop
 8004dd8:	40011000 	.word	0x40011000
 8004ddc:	40011400 	.word	0x40011400
 8004de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004dee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004df6:	4642      	mov	r2, r8
 8004df8:	464b      	mov	r3, r9
 8004dfa:	1891      	adds	r1, r2, r2
 8004dfc:	6239      	str	r1, [r7, #32]
 8004dfe:	415b      	adcs	r3, r3
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e06:	4641      	mov	r1, r8
 8004e08:	1854      	adds	r4, r2, r1
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	eb43 0501 	adc.w	r5, r3, r1
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	00eb      	lsls	r3, r5, #3
 8004e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e1e:	00e2      	lsls	r2, r4, #3
 8004e20:	4614      	mov	r4, r2
 8004e22:	461d      	mov	r5, r3
 8004e24:	4643      	mov	r3, r8
 8004e26:	18e3      	adds	r3, r4, r3
 8004e28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	eb45 0303 	adc.w	r3, r5, r3
 8004e32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e52:	4629      	mov	r1, r5
 8004e54:	008b      	lsls	r3, r1, #2
 8004e56:	4621      	mov	r1, r4
 8004e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	008a      	lsls	r2, r1, #2
 8004e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e64:	f7fb fa14 	bl	8000290 <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4b60      	ldr	r3, [pc, #384]	@ (8004ff0 <UART_SetConfig+0x4e4>)
 8004e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	011c      	lsls	r4, r3, #4
 8004e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e80:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e88:	4642      	mov	r2, r8
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	1891      	adds	r1, r2, r2
 8004e8e:	61b9      	str	r1, [r7, #24]
 8004e90:	415b      	adcs	r3, r3
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e98:	4641      	mov	r1, r8
 8004e9a:	1851      	adds	r1, r2, r1
 8004e9c:	6139      	str	r1, [r7, #16]
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	414b      	adcs	r3, r1
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004eb0:	4659      	mov	r1, fp
 8004eb2:	00cb      	lsls	r3, r1, #3
 8004eb4:	4651      	mov	r1, sl
 8004eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eba:	4651      	mov	r1, sl
 8004ebc:	00ca      	lsls	r2, r1, #3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ecc:	464b      	mov	r3, r9
 8004ece:	460a      	mov	r2, r1
 8004ed0:	eb42 0303 	adc.w	r3, r2, r3
 8004ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ee2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	008b      	lsls	r3, r1, #2
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004efa:	4641      	mov	r1, r8
 8004efc:	008a      	lsls	r2, r1, #2
 8004efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f02:	f7fb f9c5 	bl	8000290 <__aeabi_uldivmod>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4b38      	ldr	r3, [pc, #224]	@ (8004ff0 <UART_SetConfig+0x4e4>)
 8004f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	2264      	movs	r2, #100	@ 0x64
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	1acb      	subs	r3, r1, r3
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	3332      	adds	r3, #50	@ 0x32
 8004f20:	4a33      	ldr	r2, [pc, #204]	@ (8004ff0 <UART_SetConfig+0x4e4>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f2c:	441c      	add	r4, r3
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f36:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f3c:	4642      	mov	r2, r8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	1891      	adds	r1, r2, r2
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	415b      	adcs	r3, r3
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f4c:	4641      	mov	r1, r8
 8004f4e:	1851      	adds	r1, r2, r1
 8004f50:	6039      	str	r1, [r7, #0]
 8004f52:	4649      	mov	r1, r9
 8004f54:	414b      	adcs	r3, r1
 8004f56:	607b      	str	r3, [r7, #4]
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f64:	4659      	mov	r1, fp
 8004f66:	00cb      	lsls	r3, r1, #3
 8004f68:	4651      	mov	r1, sl
 8004f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f6e:	4651      	mov	r1, sl
 8004f70:	00ca      	lsls	r2, r1, #3
 8004f72:	4610      	mov	r0, r2
 8004f74:	4619      	mov	r1, r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	4642      	mov	r2, r8
 8004f7a:	189b      	adds	r3, r3, r2
 8004f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f7e:	464b      	mov	r3, r9
 8004f80:	460a      	mov	r2, r1
 8004f82:	eb42 0303 	adc.w	r3, r2, r3
 8004f86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f92:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	008b      	lsls	r3, r1, #2
 8004fa4:	4641      	mov	r1, r8
 8004fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004faa:	4641      	mov	r1, r8
 8004fac:	008a      	lsls	r2, r1, #2
 8004fae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fb2:	f7fb f96d 	bl	8000290 <__aeabi_uldivmod>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff0 <UART_SetConfig+0x4e4>)
 8004fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	2164      	movs	r1, #100	@ 0x64
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	3332      	adds	r3, #50	@ 0x32
 8004fce:	4a08      	ldr	r2, [pc, #32]	@ (8004ff0 <UART_SetConfig+0x4e4>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	f003 020f 	and.w	r2, r3, #15
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4422      	add	r2, r4
 8004fe2:	609a      	str	r2, [r3, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fea:	46bd      	mov	sp, r7
 8004fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ff0:	51eb851f 	.word	0x51eb851f

08004ff4 <__NVIC_SetPriority>:
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	6039      	str	r1, [r7, #0]
 8004ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005004:	2b00      	cmp	r3, #0
 8005006:	db0a      	blt.n	800501e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	b2da      	uxtb	r2, r3
 800500c:	490c      	ldr	r1, [pc, #48]	@ (8005040 <__NVIC_SetPriority+0x4c>)
 800500e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005012:	0112      	lsls	r2, r2, #4
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	440b      	add	r3, r1
 8005018:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800501c:	e00a      	b.n	8005034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	b2da      	uxtb	r2, r3
 8005022:	4908      	ldr	r1, [pc, #32]	@ (8005044 <__NVIC_SetPriority+0x50>)
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	3b04      	subs	r3, #4
 800502c:	0112      	lsls	r2, r2, #4
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	440b      	add	r3, r1
 8005032:	761a      	strb	r2, [r3, #24]
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	e000e100 	.word	0xe000e100
 8005044:	e000ed00 	.word	0xe000ed00

08005048 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800504c:	4b05      	ldr	r3, [pc, #20]	@ (8005064 <SysTick_Handler+0x1c>)
 800504e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005050:	f001 fd74 	bl	8006b3c <xTaskGetSchedulerState>
 8005054:	4603      	mov	r3, r0
 8005056:	2b01      	cmp	r3, #1
 8005058:	d001      	beq.n	800505e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800505a:	f002 fb6d 	bl	8007738 <xPortSysTickHandler>
  }
}
 800505e:	bf00      	nop
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	e000e010 	.word	0xe000e010

08005068 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800506c:	2100      	movs	r1, #0
 800506e:	f06f 0004 	mvn.w	r0, #4
 8005072:	f7ff ffbf 	bl	8004ff4 <__NVIC_SetPriority>
#endif
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005082:	f3ef 8305 	mrs	r3, IPSR
 8005086:	603b      	str	r3, [r7, #0]
  return(result);
 8005088:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800508e:	f06f 0305 	mvn.w	r3, #5
 8005092:	607b      	str	r3, [r7, #4]
 8005094:	e00c      	b.n	80050b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005096:	4b0a      	ldr	r3, [pc, #40]	@ (80050c0 <osKernelInitialize+0x44>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800509e:	4b08      	ldr	r3, [pc, #32]	@ (80050c0 <osKernelInitialize+0x44>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	607b      	str	r3, [r7, #4]
 80050a8:	e002      	b.n	80050b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80050aa:	f04f 33ff 	mov.w	r3, #4294967295
 80050ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80050b0:	687b      	ldr	r3, [r7, #4]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	200005a8 	.word	0x200005a8

080050c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050ca:	f3ef 8305 	mrs	r3, IPSR
 80050ce:	603b      	str	r3, [r7, #0]
  return(result);
 80050d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <osKernelStart+0x1a>
    stat = osErrorISR;
 80050d6:	f06f 0305 	mvn.w	r3, #5
 80050da:	607b      	str	r3, [r7, #4]
 80050dc:	e010      	b.n	8005100 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80050de:	4b0b      	ldr	r3, [pc, #44]	@ (800510c <osKernelStart+0x48>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d109      	bne.n	80050fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80050e6:	f7ff ffbf 	bl	8005068 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80050ea:	4b08      	ldr	r3, [pc, #32]	@ (800510c <osKernelStart+0x48>)
 80050ec:	2202      	movs	r2, #2
 80050ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80050f0:	f001 f8c0 	bl	8006274 <vTaskStartScheduler>
      stat = osOK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	e002      	b.n	8005100 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80050fa:	f04f 33ff 	mov.w	r3, #4294967295
 80050fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005100:	687b      	ldr	r3, [r7, #4]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	200005a8 	.word	0x200005a8

08005110 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005110:	b580      	push	{r7, lr}
 8005112:	b08e      	sub	sp, #56	@ 0x38
 8005114:	af04      	add	r7, sp, #16
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005120:	f3ef 8305 	mrs	r3, IPSR
 8005124:	617b      	str	r3, [r7, #20]
  return(result);
 8005126:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005128:	2b00      	cmp	r3, #0
 800512a:	d17e      	bne.n	800522a <osThreadNew+0x11a>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d07b      	beq.n	800522a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005132:	2380      	movs	r3, #128	@ 0x80
 8005134:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005136:	2318      	movs	r3, #24
 8005138:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800513a:	2300      	movs	r3, #0
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800513e:	f04f 33ff 	mov.w	r3, #4294967295
 8005142:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d045      	beq.n	80051d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <osThreadNew+0x48>
        name = attr->name;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d008      	beq.n	800517e <osThreadNew+0x6e>
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b38      	cmp	r3, #56	@ 0x38
 8005170:	d805      	bhi.n	800517e <osThreadNew+0x6e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <osThreadNew+0x72>
        return (NULL);
 800517e:	2300      	movs	r3, #0
 8005180:	e054      	b.n	800522c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	089b      	lsrs	r3, r3, #2
 8005190:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00e      	beq.n	80051b8 <osThreadNew+0xa8>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	2ba7      	cmp	r3, #167	@ 0xa7
 80051a0:	d90a      	bls.n	80051b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <osThreadNew+0xa8>
        mem = 1;
 80051b2:	2301      	movs	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	e010      	b.n	80051da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10c      	bne.n	80051da <osThreadNew+0xca>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d108      	bne.n	80051da <osThreadNew+0xca>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d104      	bne.n	80051da <osThreadNew+0xca>
          mem = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	e001      	b.n	80051da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d110      	bne.n	8005202 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80051e8:	9202      	str	r2, [sp, #8]
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	6a3a      	ldr	r2, [r7, #32]
 80051f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fdfe 	bl	8005df8 <xTaskCreateStatic>
 80051fc:	4603      	mov	r3, r0
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	e013      	b.n	800522a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d110      	bne.n	800522a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	b29a      	uxth	r2, r3
 800520c:	f107 0310 	add.w	r3, r7, #16
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fe4c 	bl	8005eb8 <xTaskCreate>
 8005220:	4603      	mov	r3, r0
 8005222:	2b01      	cmp	r3, #1
 8005224:	d001      	beq.n	800522a <osThreadNew+0x11a>
            hTask = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800522a:	693b      	ldr	r3, [r7, #16]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3728      	adds	r7, #40	@ 0x28
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4a07      	ldr	r2, [pc, #28]	@ (8005260 <vApplicationGetIdleTaskMemory+0x2c>)
 8005244:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4a06      	ldr	r2, [pc, #24]	@ (8005264 <vApplicationGetIdleTaskMemory+0x30>)
 800524a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2280      	movs	r2, #128	@ 0x80
 8005250:	601a      	str	r2, [r3, #0]
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	200005ac 	.word	0x200005ac
 8005264:	20000654 	.word	0x20000654

08005268 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4a07      	ldr	r2, [pc, #28]	@ (8005294 <vApplicationGetTimerTaskMemory+0x2c>)
 8005278:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4a06      	ldr	r2, [pc, #24]	@ (8005298 <vApplicationGetTimerTaskMemory+0x30>)
 800527e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005286:	601a      	str	r2, [r3, #0]
}
 8005288:	bf00      	nop
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	20000854 	.word	0x20000854
 8005298:	200008fc 	.word	0x200008fc

0800529c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f103 0208 	add.w	r2, r3, #8
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f04f 32ff 	mov.w	r2, #4294967295
 80052b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f103 0208 	add.w	r2, r3, #8
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f103 0208 	add.w	r2, r3, #8
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	601a      	str	r2, [r3, #0]
}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005354:	d103      	bne.n	800535e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e00c      	b.n	8005378 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3308      	adds	r3, #8
 8005362:	60fb      	str	r3, [r7, #12]
 8005364:	e002      	b.n	800536c <vListInsert+0x2e>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68ba      	ldr	r2, [r7, #8]
 8005374:	429a      	cmp	r2, r3
 8005376:	d2f6      	bcs.n	8005366 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6892      	ldr	r2, [r2, #8]
 80053c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6852      	ldr	r2, [r2, #4]
 80053d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d103      	bne.n	80053e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	1e5a      	subs	r2, r3, #1
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005430:	f002 f8f2 	bl	8007618 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543c:	68f9      	ldr	r1, [r7, #12]
 800543e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005440:	fb01 f303 	mul.w	r3, r1, r3
 8005444:	441a      	add	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005460:	3b01      	subs	r3, #1
 8005462:	68f9      	ldr	r1, [r7, #12]
 8005464:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005466:	fb01 f303 	mul.w	r3, r1, r3
 800546a:	441a      	add	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	22ff      	movs	r2, #255	@ 0xff
 8005474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	22ff      	movs	r2, #255	@ 0xff
 800547c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d114      	bne.n	80054b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01a      	beq.n	80054c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3310      	adds	r3, #16
 8005492:	4618      	mov	r0, r3
 8005494:	f001 f98c 	bl	80067b0 <xTaskRemoveFromEventList>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d012      	beq.n	80054c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800549e:	4b0d      	ldr	r3, [pc, #52]	@ (80054d4 <xQueueGenericReset+0xd0>)
 80054a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	e009      	b.n	80054c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3310      	adds	r3, #16
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff fef1 	bl	800529c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3324      	adds	r3, #36	@ 0x24
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff feec 	bl	800529c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054c4:	f002 f8da 	bl	800767c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054c8:	2301      	movs	r3, #1
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	e000ed04 	.word	0xe000ed04

080054d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08e      	sub	sp, #56	@ 0x38
 80054dc:	af02      	add	r7, sp, #8
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10b      	bne.n	8005504 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054fe:	bf00      	nop
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10b      	bne.n	8005522 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	e7fd      	b.n	800551e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <xQueueGenericCreateStatic+0x56>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <xQueueGenericCreateStatic+0x5a>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <xQueueGenericCreateStatic+0x5c>
 8005532:	2300      	movs	r3, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	623b      	str	r3, [r7, #32]
}
 800554a:	bf00      	nop
 800554c:	bf00      	nop
 800554e:	e7fd      	b.n	800554c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d102      	bne.n	800555c <xQueueGenericCreateStatic+0x84>
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <xQueueGenericCreateStatic+0x88>
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <xQueueGenericCreateStatic+0x8a>
 8005560:	2300      	movs	r3, #0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10b      	bne.n	800557e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	61fb      	str	r3, [r7, #28]
}
 8005578:	bf00      	nop
 800557a:	bf00      	nop
 800557c:	e7fd      	b.n	800557a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800557e:	2350      	movs	r3, #80	@ 0x50
 8005580:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b50      	cmp	r3, #80	@ 0x50
 8005586:	d00b      	beq.n	80055a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	61bb      	str	r3, [r7, #24]
}
 800559a:	bf00      	nop
 800559c:	bf00      	nop
 800559e:	e7fd      	b.n	800559c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80055a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80055a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00d      	beq.n	80055c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80055ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80055b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80055b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ba:	9300      	str	r3, [sp, #0]
 80055bc:	4613      	mov	r3, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 f805 	bl	80055d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80055c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3730      	adds	r7, #48	@ 0x30
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d103      	bne.n	80055ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e002      	b.n	80055f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005600:	2101      	movs	r1, #1
 8005602:	69b8      	ldr	r0, [r7, #24]
 8005604:	f7ff fefe 	bl	8005404 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	78fa      	ldrb	r2, [r7, #3]
 800560c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005610:	bf00      	nop
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08e      	sub	sp, #56	@ 0x38
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005626:	2300      	movs	r3, #0
 8005628:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800562e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10b      	bne.n	800564c <xQueueGenericSend+0x34>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005646:	bf00      	nop
 8005648:	bf00      	nop
 800564a:	e7fd      	b.n	8005648 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <xQueueGenericSend+0x42>
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <xQueueGenericSend+0x46>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <xQueueGenericSend+0x48>
 800565e:	2300      	movs	r3, #0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <xQueueGenericSend+0x64>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	e7fd      	b.n	8005678 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d103      	bne.n	800568a <xQueueGenericSend+0x72>
 8005682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005686:	2b01      	cmp	r3, #1
 8005688:	d101      	bne.n	800568e <xQueueGenericSend+0x76>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <xQueueGenericSend+0x78>
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10b      	bne.n	80056ac <xQueueGenericSend+0x94>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	623b      	str	r3, [r7, #32]
}
 80056a6:	bf00      	nop
 80056a8:	bf00      	nop
 80056aa:	e7fd      	b.n	80056a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056ac:	f001 fa46 	bl	8006b3c <xTaskGetSchedulerState>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <xQueueGenericSend+0xa4>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <xQueueGenericSend+0xa8>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <xQueueGenericSend+0xaa>
 80056c0:	2300      	movs	r3, #0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <xQueueGenericSend+0xc6>
	__asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	61fb      	str	r3, [r7, #28]
}
 80056d8:	bf00      	nop
 80056da:	bf00      	nop
 80056dc:	e7fd      	b.n	80056da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056de:	f001 ff9b 	bl	8007618 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d302      	bcc.n	80056f4 <xQueueGenericSend+0xdc>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d129      	bne.n	8005748 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056fa:	f000 fa0f 	bl	8005b1c <prvCopyDataToQueue>
 80056fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d010      	beq.n	800572a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800570a:	3324      	adds	r3, #36	@ 0x24
 800570c:	4618      	mov	r0, r3
 800570e:	f001 f84f 	bl	80067b0 <xTaskRemoveFromEventList>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d013      	beq.n	8005740 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005718:	4b3f      	ldr	r3, [pc, #252]	@ (8005818 <xQueueGenericSend+0x200>)
 800571a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	e00a      	b.n	8005740 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800572a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005730:	4b39      	ldr	r3, [pc, #228]	@ (8005818 <xQueueGenericSend+0x200>)
 8005732:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005740:	f001 ff9c 	bl	800767c <vPortExitCritical>
				return pdPASS;
 8005744:	2301      	movs	r3, #1
 8005746:	e063      	b.n	8005810 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800574e:	f001 ff95 	bl	800767c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005752:	2300      	movs	r3, #0
 8005754:	e05c      	b.n	8005810 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800575c:	f107 0314 	add.w	r3, r7, #20
 8005760:	4618      	mov	r0, r3
 8005762:	f001 f889 	bl	8006878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005766:	2301      	movs	r3, #1
 8005768:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800576a:	f001 ff87 	bl	800767c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800576e:	f000 fdf1 	bl	8006354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005772:	f001 ff51 	bl	8007618 <vPortEnterCritical>
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800577c:	b25b      	sxtb	r3, r3
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d103      	bne.n	800578c <xQueueGenericSend+0x174>
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005792:	b25b      	sxtb	r3, r3
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d103      	bne.n	80057a2 <xQueueGenericSend+0x18a>
 800579a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057a2:	f001 ff6b 	bl	800767c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057a6:	1d3a      	adds	r2, r7, #4
 80057a8:	f107 0314 	add.w	r3, r7, #20
 80057ac:	4611      	mov	r1, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 f878 	bl	80068a4 <xTaskCheckForTimeOut>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d124      	bne.n	8005804 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80057ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057bc:	f000 faa6 	bl	8005d0c <prvIsQueueFull>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d018      	beq.n	80057f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80057c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c8:	3310      	adds	r3, #16
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	4611      	mov	r1, r2
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 ff9c 	bl	800670c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80057d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057d6:	f000 fa31 	bl	8005c3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80057da:	f000 fdc9 	bl	8006370 <xTaskResumeAll>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f47f af7c 	bne.w	80056de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80057e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <xQueueGenericSend+0x200>)
 80057e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	e772      	b.n	80056de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80057f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057fa:	f000 fa1f 	bl	8005c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057fe:	f000 fdb7 	bl	8006370 <xTaskResumeAll>
 8005802:	e76c      	b.n	80056de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005804:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005806:	f000 fa19 	bl	8005c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800580a:	f000 fdb1 	bl	8006370 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800580e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005810:	4618      	mov	r0, r3
 8005812:	3738      	adds	r7, #56	@ 0x38
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b090      	sub	sp, #64	@ 0x40
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d103      	bne.n	800585a <xQueueGenericSendFromISR+0x3e>
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <xQueueGenericSendFromISR+0x42>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <xQueueGenericSendFromISR+0x44>
 800585e:	2300      	movs	r3, #0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d103      	bne.n	800588a <xQueueGenericSendFromISR+0x6e>
 8005882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <xQueueGenericSendFromISR+0x72>
 800588a:	2301      	movs	r3, #1
 800588c:	e000      	b.n	8005890 <xQueueGenericSendFromISR+0x74>
 800588e:	2300      	movs	r3, #0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	623b      	str	r3, [r7, #32]
}
 80058a6:	bf00      	nop
 80058a8:	bf00      	nop
 80058aa:	e7fd      	b.n	80058a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058ac:	f001 ff94 	bl	80077d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058b0:	f3ef 8211 	mrs	r2, BASEPRI
 80058b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	61fa      	str	r2, [r7, #28]
 80058c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80058c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d302      	bcc.n	80058de <xQueueGenericSendFromISR+0xc2>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d12f      	bne.n	800593e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80058f4:	f000 f912 	bl	8005b1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d112      	bne.n	8005928 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005906:	2b00      	cmp	r3, #0
 8005908:	d016      	beq.n	8005938 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590c:	3324      	adds	r3, #36	@ 0x24
 800590e:	4618      	mov	r0, r3
 8005910:	f000 ff4e 	bl	80067b0 <xTaskRemoveFromEventList>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00e      	beq.n	8005938 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e007      	b.n	8005938 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005928:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800592c:	3301      	adds	r3, #1
 800592e:	b2db      	uxtb	r3, r3
 8005930:	b25a      	sxtb	r2, r3
 8005932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005938:	2301      	movs	r3, #1
 800593a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800593c:	e001      	b.n	8005942 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800593e:	2300      	movs	r3, #0
 8005940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005944:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800594c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800594e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005950:	4618      	mov	r0, r3
 8005952:	3740      	adds	r7, #64	@ 0x40
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08c      	sub	sp, #48	@ 0x30
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005964:	2300      	movs	r3, #0
 8005966:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800596c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10b      	bne.n	800598a <xQueueReceive+0x32>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	623b      	str	r3, [r7, #32]
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
 8005988:	e7fd      	b.n	8005986 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d103      	bne.n	8005998 <xQueueReceive+0x40>
 8005990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <xQueueReceive+0x44>
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <xQueueReceive+0x46>
 800599c:	2300      	movs	r3, #0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <xQueueReceive+0x62>
	__asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	61fb      	str	r3, [r7, #28]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ba:	f001 f8bf 	bl	8006b3c <xTaskGetSchedulerState>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <xQueueReceive+0x72>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <xQueueReceive+0x76>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <xQueueReceive+0x78>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <xQueueReceive+0x94>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	61bb      	str	r3, [r7, #24]
}
 80059e6:	bf00      	nop
 80059e8:	bf00      	nop
 80059ea:	e7fd      	b.n	80059e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ec:	f001 fe14 	bl	8007618 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01f      	beq.n	8005a3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059fc:	68b9      	ldr	r1, [r7, #8]
 80059fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a00:	f000 f8f6 	bl	8005bf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a06:	1e5a      	subs	r2, r3, #1
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00f      	beq.n	8005a34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a16:	3310      	adds	r3, #16
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fec9 	bl	80067b0 <xTaskRemoveFromEventList>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a24:	4b3c      	ldr	r3, [pc, #240]	@ (8005b18 <xQueueReceive+0x1c0>)
 8005a26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a34:	f001 fe22 	bl	800767c <vPortExitCritical>
				return pdPASS;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e069      	b.n	8005b10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a42:	f001 fe1b 	bl	800767c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e062      	b.n	8005b10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d106      	bne.n	8005a5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a50:	f107 0310 	add.w	r3, r7, #16
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 ff0f 	bl	8006878 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a5e:	f001 fe0d 	bl	800767c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a62:	f000 fc77 	bl	8006354 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a66:	f001 fdd7 	bl	8007618 <vPortEnterCritical>
 8005a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d103      	bne.n	8005a80 <xQueueReceive+0x128>
 8005a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a86:	b25b      	sxtb	r3, r3
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d103      	bne.n	8005a96 <xQueueReceive+0x13e>
 8005a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a96:	f001 fdf1 	bl	800767c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a9a:	1d3a      	adds	r2, r7, #4
 8005a9c:	f107 0310 	add.w	r3, r7, #16
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fefe 	bl	80068a4 <xTaskCheckForTimeOut>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d123      	bne.n	8005af6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ab0:	f000 f916 	bl	8005ce0 <prvIsQueueEmpty>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d017      	beq.n	8005aea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abc:	3324      	adds	r3, #36	@ 0x24
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fe22 	bl	800670c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ac8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aca:	f000 f8b7 	bl	8005c3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ace:	f000 fc4f 	bl	8006370 <xTaskResumeAll>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d189      	bne.n	80059ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b18 <xQueueReceive+0x1c0>)
 8005ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	e780      	b.n	80059ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005aec:	f000 f8a6 	bl	8005c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005af0:	f000 fc3e 	bl	8006370 <xTaskResumeAll>
 8005af4:	e77a      	b.n	80059ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005af6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005af8:	f000 f8a0 	bl	8005c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005afc:	f000 fc38 	bl	8006370 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b02:	f000 f8ed 	bl	8005ce0 <prvIsQueueEmpty>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f43f af6f 	beq.w	80059ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3730      	adds	r7, #48	@ 0x30
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	e000ed04 	.word	0xe000ed04

08005b1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10d      	bne.n	8005b56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d14d      	bne.n	8005bde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 f816 	bl	8006b78 <xTaskPriorityDisinherit>
 8005b4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	e043      	b.n	8005bde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d119      	bne.n	8005b90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6858      	ldr	r0, [r3, #4]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b64:	461a      	mov	r2, r3
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	f002 fa6f 	bl	800804a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b74:	441a      	add	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d32b      	bcc.n	8005bde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	e026      	b.n	8005bde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	68d8      	ldr	r0, [r3, #12]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	f002 fa55 	bl	800804a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba8:	425b      	negs	r3, r3
 8005baa:	441a      	add	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d207      	bcs.n	8005bcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc4:	425b      	negs	r3, r3
 8005bc6:	441a      	add	r2, r3
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d105      	bne.n	8005bde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005be6:	697b      	ldr	r3, [r7, #20]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d018      	beq.n	8005c34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	441a      	add	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d303      	bcc.n	8005c24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68d9      	ldr	r1, [r3, #12]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	6838      	ldr	r0, [r7, #0]
 8005c30:	f002 fa0b 	bl	800804a <memcpy>
	}
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c44:	f001 fce8 	bl	8007618 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c50:	e011      	b.n	8005c76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d012      	beq.n	8005c80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3324      	adds	r3, #36	@ 0x24
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fda6 	bl	80067b0 <xTaskRemoveFromEventList>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c6a:	f000 fe7f 	bl	800696c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	dce9      	bgt.n	8005c52 <prvUnlockQueue+0x16>
 8005c7e:	e000      	b.n	8005c82 <prvUnlockQueue+0x46>
					break;
 8005c80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	22ff      	movs	r2, #255	@ 0xff
 8005c86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005c8a:	f001 fcf7 	bl	800767c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c8e:	f001 fcc3 	bl	8007618 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c9a:	e011      	b.n	8005cc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d012      	beq.n	8005cca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3310      	adds	r3, #16
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fd81 	bl	80067b0 <xTaskRemoveFromEventList>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d001      	beq.n	8005cb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cb4:	f000 fe5a 	bl	800696c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cb8:	7bbb      	ldrb	r3, [r7, #14]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	dce9      	bgt.n	8005c9c <prvUnlockQueue+0x60>
 8005cc8:	e000      	b.n	8005ccc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	22ff      	movs	r2, #255	@ 0xff
 8005cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005cd4:	f001 fcd2 	bl	800767c <vPortExitCritical>
}
 8005cd8:	bf00      	nop
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ce8:	f001 fc96 	bl	8007618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d102      	bne.n	8005cfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e001      	b.n	8005cfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cfe:	f001 fcbd 	bl	800767c <vPortExitCritical>

	return xReturn;
 8005d02:	68fb      	ldr	r3, [r7, #12]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d14:	f001 fc80 	bl	8007618 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d102      	bne.n	8005d2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	e001      	b.n	8005d2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d2e:	f001 fca5 	bl	800767c <vPortExitCritical>

	return xReturn;
 8005d32:	68fb      	ldr	r3, [r7, #12]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	e014      	b.n	8005d76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005d4c:	4a0f      	ldr	r2, [pc, #60]	@ (8005d8c <vQueueAddToRegistry+0x50>)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d10b      	bne.n	8005d70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005d58:	490c      	ldr	r1, [pc, #48]	@ (8005d8c <vQueueAddToRegistry+0x50>)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005d62:	4a0a      	ldr	r2, [pc, #40]	@ (8005d8c <vQueueAddToRegistry+0x50>)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	00db      	lsls	r3, r3, #3
 8005d68:	4413      	add	r3, r2
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d6e:	e006      	b.n	8005d7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3301      	adds	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b07      	cmp	r3, #7
 8005d7a:	d9e7      	bls.n	8005d4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d7c:	bf00      	nop
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	20000cfc 	.word	0x20000cfc

08005d90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005da0:	f001 fc3a 	bl	8007618 <vPortEnterCritical>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005daa:	b25b      	sxtb	r3, r3
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d103      	bne.n	8005dba <vQueueWaitForMessageRestricted+0x2a>
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dc0:	b25b      	sxtb	r3, r3
 8005dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc6:	d103      	bne.n	8005dd0 <vQueueWaitForMessageRestricted+0x40>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dd0:	f001 fc54 	bl	800767c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d106      	bne.n	8005dea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	3324      	adds	r3, #36	@ 0x24
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fcb7 	bl	8006758 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005dea:	6978      	ldr	r0, [r7, #20]
 8005dec:	f7ff ff26 	bl	8005c3c <prvUnlockQueue>
	}
 8005df0:	bf00      	nop
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08e      	sub	sp, #56	@ 0x38
 8005dfc:	af04      	add	r7, sp, #16
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10b      	bne.n	8005e24 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	623b      	str	r3, [r7, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	bf00      	nop
 8005e22:	e7fd      	b.n	8005e20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	61fb      	str	r3, [r7, #28]
}
 8005e3c:	bf00      	nop
 8005e3e:	bf00      	nop
 8005e40:	e7fd      	b.n	8005e3e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e42:	23a8      	movs	r3, #168	@ 0xa8
 8005e44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2ba8      	cmp	r3, #168	@ 0xa8
 8005e4a:	d00b      	beq.n	8005e64 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	61bb      	str	r3, [r7, #24]
}
 8005e5e:	bf00      	nop
 8005e60:	bf00      	nop
 8005e62:	e7fd      	b.n	8005e60 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d01e      	beq.n	8005eaa <xTaskCreateStatic+0xb2>
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01b      	beq.n	8005eaa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e84:	2300      	movs	r3, #0
 8005e86:	9303      	str	r3, [sp, #12]
 8005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8a:	9302      	str	r3, [sp, #8]
 8005e8c:	f107 0314 	add.w	r3, r7, #20
 8005e90:	9301      	str	r3, [sp, #4]
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f851 	bl	8005f44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ea2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ea4:	f000 f8f6 	bl	8006094 <prvAddNewTaskToReadyList>
 8005ea8:	e001      	b.n	8005eae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005eae:	697b      	ldr	r3, [r7, #20]
	}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3728      	adds	r7, #40	@ 0x28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08c      	sub	sp, #48	@ 0x30
 8005ebc:	af04      	add	r7, sp, #16
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 fcc5 	bl	800785c <pvPortMalloc>
 8005ed2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00e      	beq.n	8005ef8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005eda:	20a8      	movs	r0, #168	@ 0xa8
 8005edc:	f001 fcbe 	bl	800785c <pvPortMalloc>
 8005ee0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	631a      	str	r2, [r3, #48]	@ 0x30
 8005eee:	e005      	b.n	8005efc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ef0:	6978      	ldr	r0, [r7, #20]
 8005ef2:	f001 fd81 	bl	80079f8 <vPortFree>
 8005ef6:	e001      	b.n	8005efc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d017      	beq.n	8005f32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f0a:	88fa      	ldrh	r2, [r7, #6]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9303      	str	r3, [sp, #12]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	9302      	str	r3, [sp, #8]
 8005f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f80f 	bl	8005f44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f26:	69f8      	ldr	r0, [r7, #28]
 8005f28:	f000 f8b4 	bl	8006094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	61bb      	str	r3, [r7, #24]
 8005f30:	e002      	b.n	8005f38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f32:	f04f 33ff 	mov.w	r3, #4294967295
 8005f36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f38:	69bb      	ldr	r3, [r7, #24]
	}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3720      	adds	r7, #32
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b088      	sub	sp, #32
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f54:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	21a5      	movs	r1, #165	@ 0xa5
 8005f5e:	f001 ffa2 	bl	8007ea6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	f023 0307 	bic.w	r3, r3, #7
 8005f7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	617b      	str	r3, [r7, #20]
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	e7fd      	b.n	8005f9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01f      	beq.n	8005fe4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61fb      	str	r3, [r7, #28]
 8005fa8:	e012      	b.n	8005fd0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	4413      	add	r3, r2
 8005fb0:	7819      	ldrb	r1, [r3, #0]
 8005fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	3334      	adds	r3, #52	@ 0x34
 8005fba:	460a      	mov	r2, r1
 8005fbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d006      	beq.n	8005fd8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	61fb      	str	r3, [r7, #28]
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	2b0f      	cmp	r3, #15
 8005fd4:	d9e9      	bls.n	8005faa <prvInitialiseNewTask+0x66>
 8005fd6:	e000      	b.n	8005fda <prvInitialiseNewTask+0x96>
			{
				break;
 8005fd8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fe2:	e003      	b.n	8005fec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fee:	2b37      	cmp	r3, #55	@ 0x37
 8005ff0:	d901      	bls.n	8005ff6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ff2:	2337      	movs	r3, #55	@ 0x37
 8005ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006000:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006004:	2200      	movs	r2, #0
 8006006:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600a:	3304      	adds	r3, #4
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff f965 	bl	80052dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006014:	3318      	adds	r3, #24
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff f960 	bl	80052dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006020:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006024:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800602c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006030:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	2200      	movs	r2, #0
 8006036:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603c:	2200      	movs	r2, #0
 800603e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006044:	3354      	adds	r3, #84	@ 0x54
 8006046:	224c      	movs	r2, #76	@ 0x4c
 8006048:	2100      	movs	r1, #0
 800604a:	4618      	mov	r0, r3
 800604c:	f001 ff2b 	bl	8007ea6 <memset>
 8006050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006052:	4a0d      	ldr	r2, [pc, #52]	@ (8006088 <prvInitialiseNewTask+0x144>)
 8006054:	659a      	str	r2, [r3, #88]	@ 0x58
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	4a0c      	ldr	r2, [pc, #48]	@ (800608c <prvInitialiseNewTask+0x148>)
 800605a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800605c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605e:	4a0c      	ldr	r2, [pc, #48]	@ (8006090 <prvInitialiseNewTask+0x14c>)
 8006060:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006062:	683a      	ldr	r2, [r7, #0]
 8006064:	68f9      	ldr	r1, [r7, #12]
 8006066:	69b8      	ldr	r0, [r7, #24]
 8006068:	f001 f9a4 	bl	80073b4 <pxPortInitialiseStack>
 800606c:	4602      	mov	r2, r0
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800607c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800607e:	bf00      	nop
 8006080:	3720      	adds	r7, #32
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20004f90 	.word	0x20004f90
 800608c:	20004ff8 	.word	0x20004ff8
 8006090:	20005060 	.word	0x20005060

08006094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800609c:	f001 fabc 	bl	8007618 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060a0:	4b2d      	ldr	r3, [pc, #180]	@ (8006158 <prvAddNewTaskToReadyList+0xc4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	4a2c      	ldr	r2, [pc, #176]	@ (8006158 <prvAddNewTaskToReadyList+0xc4>)
 80060a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060aa:	4b2c      	ldr	r3, [pc, #176]	@ (800615c <prvAddNewTaskToReadyList+0xc8>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060b2:	4a2a      	ldr	r2, [pc, #168]	@ (800615c <prvAddNewTaskToReadyList+0xc8>)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060b8:	4b27      	ldr	r3, [pc, #156]	@ (8006158 <prvAddNewTaskToReadyList+0xc4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d110      	bne.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060c0:	f000 fc78 	bl	80069b4 <prvInitialiseTaskLists>
 80060c4:	e00d      	b.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060c6:	4b26      	ldr	r3, [pc, #152]	@ (8006160 <prvAddNewTaskToReadyList+0xcc>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d109      	bne.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060ce:	4b23      	ldr	r3, [pc, #140]	@ (800615c <prvAddNewTaskToReadyList+0xc8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	429a      	cmp	r2, r3
 80060da:	d802      	bhi.n	80060e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060dc:	4a1f      	ldr	r2, [pc, #124]	@ (800615c <prvAddNewTaskToReadyList+0xc8>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060e2:	4b20      	ldr	r3, [pc, #128]	@ (8006164 <prvAddNewTaskToReadyList+0xd0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3301      	adds	r3, #1
 80060e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006164 <prvAddNewTaskToReadyList+0xd0>)
 80060ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <prvAddNewTaskToReadyList+0xd0>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006168 <prvAddNewTaskToReadyList+0xd4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d903      	bls.n	8006108 <prvAddNewTaskToReadyList+0x74>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006104:	4a18      	ldr	r2, [pc, #96]	@ (8006168 <prvAddNewTaskToReadyList+0xd4>)
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4a15      	ldr	r2, [pc, #84]	@ (800616c <prvAddNewTaskToReadyList+0xd8>)
 8006116:	441a      	add	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3304      	adds	r3, #4
 800611c:	4619      	mov	r1, r3
 800611e:	4610      	mov	r0, r2
 8006120:	f7ff f8e9 	bl	80052f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006124:	f001 faaa 	bl	800767c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006128:	4b0d      	ldr	r3, [pc, #52]	@ (8006160 <prvAddNewTaskToReadyList+0xcc>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00e      	beq.n	800614e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006130:	4b0a      	ldr	r3, [pc, #40]	@ (800615c <prvAddNewTaskToReadyList+0xc8>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613a:	429a      	cmp	r2, r3
 800613c:	d207      	bcs.n	800614e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800613e:	4b0c      	ldr	r3, [pc, #48]	@ (8006170 <prvAddNewTaskToReadyList+0xdc>)
 8006140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800614e:	bf00      	nop
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20001210 	.word	0x20001210
 800615c:	20000d3c 	.word	0x20000d3c
 8006160:	2000121c 	.word	0x2000121c
 8006164:	2000122c 	.word	0x2000122c
 8006168:	20001218 	.word	0x20001218
 800616c:	20000d40 	.word	0x20000d40
 8006170:	e000ed04 	.word	0xe000ed04

08006174 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	@ 0x28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800617e:	2300      	movs	r3, #0
 8006180:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10b      	bne.n	80061a0 <vTaskDelayUntil+0x2c>
	__asm volatile
 8006188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	617b      	str	r3, [r7, #20]
}
 800619a:	bf00      	nop
 800619c:	bf00      	nop
 800619e:	e7fd      	b.n	800619c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d10b      	bne.n	80061be <vTaskDelayUntil+0x4a>
	__asm volatile
 80061a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061aa:	f383 8811 	msr	BASEPRI, r3
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f3bf 8f4f 	dsb	sy
 80061b6:	613b      	str	r3, [r7, #16]
}
 80061b8:	bf00      	nop
 80061ba:	bf00      	nop
 80061bc:	e7fd      	b.n	80061ba <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80061be:	4b2a      	ldr	r3, [pc, #168]	@ (8006268 <vTaskDelayUntil+0xf4>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00b      	beq.n	80061de <vTaskDelayUntil+0x6a>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60fb      	str	r3, [r7, #12]
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop
 80061dc:	e7fd      	b.n	80061da <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80061de:	f000 f8b9 	bl	8006354 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80061e2:	4b22      	ldr	r3, [pc, #136]	@ (800626c <vTaskDelayUntil+0xf8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	4413      	add	r3, r2
 80061f0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6a3a      	ldr	r2, [r7, #32]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d20b      	bcs.n	8006214 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	429a      	cmp	r2, r3
 8006204:	d211      	bcs.n	800622a <vTaskDelayUntil+0xb6>
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	429a      	cmp	r2, r3
 800620c:	d90d      	bls.n	800622a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800620e:	2301      	movs	r3, #1
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
 8006212:	e00a      	b.n	800622a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	429a      	cmp	r2, r3
 800621c:	d303      	bcc.n	8006226 <vTaskDelayUntil+0xb2>
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	429a      	cmp	r2, r3
 8006224:	d901      	bls.n	800622a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006226:	2301      	movs	r3, #1
 8006228:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006232:	2b00      	cmp	r3, #0
 8006234:	d006      	beq.n	8006244 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fd0a 	bl	8006c58 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006244:	f000 f894 	bl	8006370 <xTaskResumeAll>
 8006248:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d107      	bne.n	8006260 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006250:	4b07      	ldr	r3, [pc, #28]	@ (8006270 <vTaskDelayUntil+0xfc>)
 8006252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006260:	bf00      	nop
 8006262:	3728      	adds	r7, #40	@ 0x28
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20001238 	.word	0x20001238
 800626c:	20001214 	.word	0x20001214
 8006270:	e000ed04 	.word	0xe000ed04

08006274 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b08a      	sub	sp, #40	@ 0x28
 8006278:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800627e:	2300      	movs	r3, #0
 8006280:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006282:	463a      	mov	r2, r7
 8006284:	1d39      	adds	r1, r7, #4
 8006286:	f107 0308 	add.w	r3, r7, #8
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe ffd2 	bl	8005234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	9202      	str	r2, [sp, #8]
 8006298:	9301      	str	r3, [sp, #4]
 800629a:	2300      	movs	r3, #0
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	2300      	movs	r3, #0
 80062a0:	460a      	mov	r2, r1
 80062a2:	4924      	ldr	r1, [pc, #144]	@ (8006334 <vTaskStartScheduler+0xc0>)
 80062a4:	4824      	ldr	r0, [pc, #144]	@ (8006338 <vTaskStartScheduler+0xc4>)
 80062a6:	f7ff fda7 	bl	8005df8 <xTaskCreateStatic>
 80062aa:	4603      	mov	r3, r0
 80062ac:	4a23      	ldr	r2, [pc, #140]	@ (800633c <vTaskStartScheduler+0xc8>)
 80062ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062b0:	4b22      	ldr	r3, [pc, #136]	@ (800633c <vTaskStartScheduler+0xc8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062b8:	2301      	movs	r3, #1
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e001      	b.n	80062c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d102      	bne.n	80062ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062c8:	f000 fd1a 	bl	8006d00 <xTimerCreateTimerTask>
 80062cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d11b      	bne.n	800630c <vTaskStartScheduler+0x98>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	613b      	str	r3, [r7, #16]
}
 80062e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062e8:	4b15      	ldr	r3, [pc, #84]	@ (8006340 <vTaskStartScheduler+0xcc>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3354      	adds	r3, #84	@ 0x54
 80062ee:	4a15      	ldr	r2, [pc, #84]	@ (8006344 <vTaskStartScheduler+0xd0>)
 80062f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062f2:	4b15      	ldr	r3, [pc, #84]	@ (8006348 <vTaskStartScheduler+0xd4>)
 80062f4:	f04f 32ff 	mov.w	r2, #4294967295
 80062f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062fa:	4b14      	ldr	r3, [pc, #80]	@ (800634c <vTaskStartScheduler+0xd8>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006300:	4b13      	ldr	r3, [pc, #76]	@ (8006350 <vTaskStartScheduler+0xdc>)
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006306:	f001 f8e3 	bl	80074d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800630a:	e00f      	b.n	800632c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006312:	d10b      	bne.n	800632c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	60fb      	str	r3, [r7, #12]
}
 8006326:	bf00      	nop
 8006328:	bf00      	nop
 800632a:	e7fd      	b.n	8006328 <vTaskStartScheduler+0xb4>
}
 800632c:	bf00      	nop
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	080090b0 	.word	0x080090b0
 8006338:	08006985 	.word	0x08006985
 800633c:	20001234 	.word	0x20001234
 8006340:	20000d3c 	.word	0x20000d3c
 8006344:	20000068 	.word	0x20000068
 8006348:	20001230 	.word	0x20001230
 800634c:	2000121c 	.word	0x2000121c
 8006350:	20001214 	.word	0x20001214

08006354 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006358:	4b04      	ldr	r3, [pc, #16]	@ (800636c <vTaskSuspendAll+0x18>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	4a03      	ldr	r2, [pc, #12]	@ (800636c <vTaskSuspendAll+0x18>)
 8006360:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006362:	bf00      	nop
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	20001238 	.word	0x20001238

08006370 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800637a:	2300      	movs	r3, #0
 800637c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800637e:	4b42      	ldr	r3, [pc, #264]	@ (8006488 <xTaskResumeAll+0x118>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10b      	bne.n	800639e <xTaskResumeAll+0x2e>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	603b      	str	r3, [r7, #0]
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800639e:	f001 f93b 	bl	8007618 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063a2:	4b39      	ldr	r3, [pc, #228]	@ (8006488 <xTaskResumeAll+0x118>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3b01      	subs	r3, #1
 80063a8:	4a37      	ldr	r2, [pc, #220]	@ (8006488 <xTaskResumeAll+0x118>)
 80063aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ac:	4b36      	ldr	r3, [pc, #216]	@ (8006488 <xTaskResumeAll+0x118>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d162      	bne.n	800647a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063b4:	4b35      	ldr	r3, [pc, #212]	@ (800648c <xTaskResumeAll+0x11c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d05e      	beq.n	800647a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063bc:	e02f      	b.n	800641e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063be:	4b34      	ldr	r3, [pc, #208]	@ (8006490 <xTaskResumeAll+0x120>)
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3318      	adds	r3, #24
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe fff0 	bl	80053b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe ffeb 	bl	80053b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063de:	4b2d      	ldr	r3, [pc, #180]	@ (8006494 <xTaskResumeAll+0x124>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d903      	bls.n	80063ee <xTaskResumeAll+0x7e>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006494 <xTaskResumeAll+0x124>)
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4a27      	ldr	r2, [pc, #156]	@ (8006498 <xTaskResumeAll+0x128>)
 80063fc:	441a      	add	r2, r3
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3304      	adds	r3, #4
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f7fe ff76 	bl	80052f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640e:	4b23      	ldr	r3, [pc, #140]	@ (800649c <xTaskResumeAll+0x12c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006414:	429a      	cmp	r2, r3
 8006416:	d302      	bcc.n	800641e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006418:	4b21      	ldr	r3, [pc, #132]	@ (80064a0 <xTaskResumeAll+0x130>)
 800641a:	2201      	movs	r2, #1
 800641c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800641e:	4b1c      	ldr	r3, [pc, #112]	@ (8006490 <xTaskResumeAll+0x120>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1cb      	bne.n	80063be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800642c:	f000 fb66 	bl	8006afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006430:	4b1c      	ldr	r3, [pc, #112]	@ (80064a4 <xTaskResumeAll+0x134>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d010      	beq.n	800645e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800643c:	f000 f846 	bl	80064cc <xTaskIncrementTick>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006446:	4b16      	ldr	r3, [pc, #88]	@ (80064a0 <xTaskResumeAll+0x130>)
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3b01      	subs	r3, #1
 8006450:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1f1      	bne.n	800643c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006458:	4b12      	ldr	r3, [pc, #72]	@ (80064a4 <xTaskResumeAll+0x134>)
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800645e:	4b10      	ldr	r3, [pc, #64]	@ (80064a0 <xTaskResumeAll+0x130>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006466:	2301      	movs	r3, #1
 8006468:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800646a:	4b0f      	ldr	r3, [pc, #60]	@ (80064a8 <xTaskResumeAll+0x138>)
 800646c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800647a:	f001 f8ff 	bl	800767c <vPortExitCritical>

	return xAlreadyYielded;
 800647e:	68bb      	ldr	r3, [r7, #8]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20001238 	.word	0x20001238
 800648c:	20001210 	.word	0x20001210
 8006490:	200011d0 	.word	0x200011d0
 8006494:	20001218 	.word	0x20001218
 8006498:	20000d40 	.word	0x20000d40
 800649c:	20000d3c 	.word	0x20000d3c
 80064a0:	20001224 	.word	0x20001224
 80064a4:	20001220 	.word	0x20001220
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064b2:	4b05      	ldr	r3, [pc, #20]	@ (80064c8 <xTaskGetTickCount+0x1c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064b8:	687b      	ldr	r3, [r7, #4]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	20001214 	.word	0x20001214

080064cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064d2:	2300      	movs	r3, #0
 80064d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064d6:	4b4f      	ldr	r3, [pc, #316]	@ (8006614 <xTaskIncrementTick+0x148>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f040 8090 	bne.w	8006600 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064e0:	4b4d      	ldr	r3, [pc, #308]	@ (8006618 <xTaskIncrementTick+0x14c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3301      	adds	r3, #1
 80064e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064e8:	4a4b      	ldr	r2, [pc, #300]	@ (8006618 <xTaskIncrementTick+0x14c>)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d121      	bne.n	8006538 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80064f4:	4b49      	ldr	r3, [pc, #292]	@ (800661c <xTaskIncrementTick+0x150>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <xTaskIncrementTick+0x4a>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	603b      	str	r3, [r7, #0]
}
 8006510:	bf00      	nop
 8006512:	bf00      	nop
 8006514:	e7fd      	b.n	8006512 <xTaskIncrementTick+0x46>
 8006516:	4b41      	ldr	r3, [pc, #260]	@ (800661c <xTaskIncrementTick+0x150>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	4b40      	ldr	r3, [pc, #256]	@ (8006620 <xTaskIncrementTick+0x154>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a3e      	ldr	r2, [pc, #248]	@ (800661c <xTaskIncrementTick+0x150>)
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	4a3e      	ldr	r2, [pc, #248]	@ (8006620 <xTaskIncrementTick+0x154>)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	4b3e      	ldr	r3, [pc, #248]	@ (8006624 <xTaskIncrementTick+0x158>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3301      	adds	r3, #1
 8006530:	4a3c      	ldr	r2, [pc, #240]	@ (8006624 <xTaskIncrementTick+0x158>)
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	f000 fae2 	bl	8006afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006538:	4b3b      	ldr	r3, [pc, #236]	@ (8006628 <xTaskIncrementTick+0x15c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	429a      	cmp	r2, r3
 8006540:	d349      	bcc.n	80065d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006542:	4b36      	ldr	r3, [pc, #216]	@ (800661c <xTaskIncrementTick+0x150>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800654c:	4b36      	ldr	r3, [pc, #216]	@ (8006628 <xTaskIncrementTick+0x15c>)
 800654e:	f04f 32ff 	mov.w	r2, #4294967295
 8006552:	601a      	str	r2, [r3, #0]
					break;
 8006554:	e03f      	b.n	80065d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006556:	4b31      	ldr	r3, [pc, #196]	@ (800661c <xTaskIncrementTick+0x150>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d203      	bcs.n	8006576 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800656e:	4a2e      	ldr	r2, [pc, #184]	@ (8006628 <xTaskIncrementTick+0x15c>)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006574:	e02f      	b.n	80065d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	3304      	adds	r3, #4
 800657a:	4618      	mov	r0, r3
 800657c:	f7fe ff18 	bl	80053b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006584:	2b00      	cmp	r3, #0
 8006586:	d004      	beq.n	8006592 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	3318      	adds	r3, #24
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe ff0f 	bl	80053b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006596:	4b25      	ldr	r3, [pc, #148]	@ (800662c <xTaskIncrementTick+0x160>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d903      	bls.n	80065a6 <xTaskIncrementTick+0xda>
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	4a22      	ldr	r2, [pc, #136]	@ (800662c <xTaskIncrementTick+0x160>)
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006630 <xTaskIncrementTick+0x164>)
 80065b4:	441a      	add	r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	3304      	adds	r3, #4
 80065ba:	4619      	mov	r1, r3
 80065bc:	4610      	mov	r0, r2
 80065be:	f7fe fe9a 	bl	80052f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006634 <xTaskIncrementTick+0x168>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d3b8      	bcc.n	8006542 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80065d0:	2301      	movs	r3, #1
 80065d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065d4:	e7b5      	b.n	8006542 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065d6:	4b17      	ldr	r3, [pc, #92]	@ (8006634 <xTaskIncrementTick+0x168>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065dc:	4914      	ldr	r1, [pc, #80]	@ (8006630 <xTaskIncrementTick+0x164>)
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d901      	bls.n	80065f2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80065ee:	2301      	movs	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065f2:	4b11      	ldr	r3, [pc, #68]	@ (8006638 <xTaskIncrementTick+0x16c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80065fa:	2301      	movs	r3, #1
 80065fc:	617b      	str	r3, [r7, #20]
 80065fe:	e004      	b.n	800660a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006600:	4b0e      	ldr	r3, [pc, #56]	@ (800663c <xTaskIncrementTick+0x170>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3301      	adds	r3, #1
 8006606:	4a0d      	ldr	r2, [pc, #52]	@ (800663c <xTaskIncrementTick+0x170>)
 8006608:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800660a:	697b      	ldr	r3, [r7, #20]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20001238 	.word	0x20001238
 8006618:	20001214 	.word	0x20001214
 800661c:	200011c8 	.word	0x200011c8
 8006620:	200011cc 	.word	0x200011cc
 8006624:	20001228 	.word	0x20001228
 8006628:	20001230 	.word	0x20001230
 800662c:	20001218 	.word	0x20001218
 8006630:	20000d40 	.word	0x20000d40
 8006634:	20000d3c 	.word	0x20000d3c
 8006638:	20001224 	.word	0x20001224
 800663c:	20001220 	.word	0x20001220

08006640 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006646:	4b2b      	ldr	r3, [pc, #172]	@ (80066f4 <vTaskSwitchContext+0xb4>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800664e:	4b2a      	ldr	r3, [pc, #168]	@ (80066f8 <vTaskSwitchContext+0xb8>)
 8006650:	2201      	movs	r2, #1
 8006652:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006654:	e047      	b.n	80066e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006656:	4b28      	ldr	r3, [pc, #160]	@ (80066f8 <vTaskSwitchContext+0xb8>)
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800665c:	4b27      	ldr	r3, [pc, #156]	@ (80066fc <vTaskSwitchContext+0xbc>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	e011      	b.n	8006688 <vTaskSwitchContext+0x48>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10b      	bne.n	8006682 <vTaskSwitchContext+0x42>
	__asm volatile
 800666a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666e:	f383 8811 	msr	BASEPRI, r3
 8006672:	f3bf 8f6f 	isb	sy
 8006676:	f3bf 8f4f 	dsb	sy
 800667a:	607b      	str	r3, [r7, #4]
}
 800667c:	bf00      	nop
 800667e:	bf00      	nop
 8006680:	e7fd      	b.n	800667e <vTaskSwitchContext+0x3e>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3b01      	subs	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	491d      	ldr	r1, [pc, #116]	@ (8006700 <vTaskSwitchContext+0xc0>)
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4613      	mov	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0e3      	beq.n	8006664 <vTaskSwitchContext+0x24>
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4a16      	ldr	r2, [pc, #88]	@ (8006700 <vTaskSwitchContext+0xc0>)
 80066a8:	4413      	add	r3, r2
 80066aa:	60bb      	str	r3, [r7, #8]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	685a      	ldr	r2, [r3, #4]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	605a      	str	r2, [r3, #4]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	3308      	adds	r3, #8
 80066be:	429a      	cmp	r2, r3
 80066c0:	d104      	bne.n	80066cc <vTaskSwitchContext+0x8c>
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	605a      	str	r2, [r3, #4]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006704 <vTaskSwitchContext+0xc4>)
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	4a09      	ldr	r2, [pc, #36]	@ (80066fc <vTaskSwitchContext+0xbc>)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066dc:	4b09      	ldr	r3, [pc, #36]	@ (8006704 <vTaskSwitchContext+0xc4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3354      	adds	r3, #84	@ 0x54
 80066e2:	4a09      	ldr	r2, [pc, #36]	@ (8006708 <vTaskSwitchContext+0xc8>)
 80066e4:	6013      	str	r3, [r2, #0]
}
 80066e6:	bf00      	nop
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20001238 	.word	0x20001238
 80066f8:	20001224 	.word	0x20001224
 80066fc:	20001218 	.word	0x20001218
 8006700:	20000d40 	.word	0x20000d40
 8006704:	20000d3c 	.word	0x20000d3c
 8006708:	20000068 	.word	0x20000068

0800670c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10b      	bne.n	8006734 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	60fb      	str	r3, [r7, #12]
}
 800672e:	bf00      	nop
 8006730:	bf00      	nop
 8006732:	e7fd      	b.n	8006730 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006734:	4b07      	ldr	r3, [pc, #28]	@ (8006754 <vTaskPlaceOnEventList+0x48>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3318      	adds	r3, #24
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7fe fdfe 	bl	800533e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006742:	2101      	movs	r1, #1
 8006744:	6838      	ldr	r0, [r7, #0]
 8006746:	f000 fa87 	bl	8006c58 <prvAddCurrentTaskToDelayedList>
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20000d3c 	.word	0x20000d3c

08006758 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10b      	bne.n	8006782 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	617b      	str	r3, [r7, #20]
}
 800677c:	bf00      	nop
 800677e:	bf00      	nop
 8006780:	e7fd      	b.n	800677e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006782:	4b0a      	ldr	r3, [pc, #40]	@ (80067ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3318      	adds	r3, #24
 8006788:	4619      	mov	r1, r3
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7fe fdb3 	bl	80052f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006796:	f04f 33ff 	mov.w	r3, #4294967295
 800679a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800679c:	6879      	ldr	r1, [r7, #4]
 800679e:	68b8      	ldr	r0, [r7, #8]
 80067a0:	f000 fa5a 	bl	8006c58 <prvAddCurrentTaskToDelayedList>
	}
 80067a4:	bf00      	nop
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20000d3c 	.word	0x20000d3c

080067b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10b      	bne.n	80067de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	60fb      	str	r3, [r7, #12]
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	e7fd      	b.n	80067da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	3318      	adds	r3, #24
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe fde4 	bl	80053b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006860 <xTaskRemoveFromEventList+0xb0>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d11d      	bne.n	800682c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	3304      	adds	r3, #4
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fe fddb 	bl	80053b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067fe:	4b19      	ldr	r3, [pc, #100]	@ (8006864 <xTaskRemoveFromEventList+0xb4>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d903      	bls.n	800680e <xTaskRemoveFromEventList+0x5e>
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680a:	4a16      	ldr	r2, [pc, #88]	@ (8006864 <xTaskRemoveFromEventList+0xb4>)
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4a13      	ldr	r2, [pc, #76]	@ (8006868 <xTaskRemoveFromEventList+0xb8>)
 800681c:	441a      	add	r2, r3
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	3304      	adds	r3, #4
 8006822:	4619      	mov	r1, r3
 8006824:	4610      	mov	r0, r2
 8006826:	f7fe fd66 	bl	80052f6 <vListInsertEnd>
 800682a:	e005      	b.n	8006838 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	3318      	adds	r3, #24
 8006830:	4619      	mov	r1, r3
 8006832:	480e      	ldr	r0, [pc, #56]	@ (800686c <xTaskRemoveFromEventList+0xbc>)
 8006834:	f7fe fd5f 	bl	80052f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683c:	4b0c      	ldr	r3, [pc, #48]	@ (8006870 <xTaskRemoveFromEventList+0xc0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006842:	429a      	cmp	r2, r3
 8006844:	d905      	bls.n	8006852 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006846:	2301      	movs	r3, #1
 8006848:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800684a:	4b0a      	ldr	r3, [pc, #40]	@ (8006874 <xTaskRemoveFromEventList+0xc4>)
 800684c:	2201      	movs	r2, #1
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e001      	b.n	8006856 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006856:	697b      	ldr	r3, [r7, #20]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	20001238 	.word	0x20001238
 8006864:	20001218 	.word	0x20001218
 8006868:	20000d40 	.word	0x20000d40
 800686c:	200011d0 	.word	0x200011d0
 8006870:	20000d3c 	.word	0x20000d3c
 8006874:	20001224 	.word	0x20001224

08006878 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006880:	4b06      	ldr	r3, [pc, #24]	@ (800689c <vTaskInternalSetTimeOutState+0x24>)
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006888:	4b05      	ldr	r3, [pc, #20]	@ (80068a0 <vTaskInternalSetTimeOutState+0x28>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	605a      	str	r2, [r3, #4]
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	20001228 	.word	0x20001228
 80068a0:	20001214 	.word	0x20001214

080068a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10b      	bne.n	80068cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	613b      	str	r3, [r7, #16]
}
 80068c6:	bf00      	nop
 80068c8:	bf00      	nop
 80068ca:	e7fd      	b.n	80068c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10b      	bne.n	80068ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	60fb      	str	r3, [r7, #12]
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	e7fd      	b.n	80068e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80068ea:	f000 fe95 	bl	8007618 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006964 <xTaskCheckForTimeOut+0xc0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	69ba      	ldr	r2, [r7, #24]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006906:	d102      	bne.n	800690e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006908:	2300      	movs	r3, #0
 800690a:	61fb      	str	r3, [r7, #28]
 800690c:	e023      	b.n	8006956 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4b15      	ldr	r3, [pc, #84]	@ (8006968 <xTaskCheckForTimeOut+0xc4>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	429a      	cmp	r2, r3
 8006918:	d007      	beq.n	800692a <xTaskCheckForTimeOut+0x86>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	69ba      	ldr	r2, [r7, #24]
 8006920:	429a      	cmp	r2, r3
 8006922:	d302      	bcc.n	800692a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006924:	2301      	movs	r3, #1
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	e015      	b.n	8006956 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	429a      	cmp	r2, r3
 8006932:	d20b      	bcs.n	800694c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	1ad2      	subs	r2, r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff ff99 	bl	8006878 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006946:	2300      	movs	r3, #0
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	e004      	b.n	8006956 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2200      	movs	r2, #0
 8006950:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006952:	2301      	movs	r3, #1
 8006954:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006956:	f000 fe91 	bl	800767c <vPortExitCritical>

	return xReturn;
 800695a:	69fb      	ldr	r3, [r7, #28]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3720      	adds	r7, #32
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20001214 	.word	0x20001214
 8006968:	20001228 	.word	0x20001228

0800696c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006970:	4b03      	ldr	r3, [pc, #12]	@ (8006980 <vTaskMissedYield+0x14>)
 8006972:	2201      	movs	r2, #1
 8006974:	601a      	str	r2, [r3, #0]
}
 8006976:	bf00      	nop
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	20001224 	.word	0x20001224

08006984 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800698c:	f000 f852 	bl	8006a34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006990:	4b06      	ldr	r3, [pc, #24]	@ (80069ac <prvIdleTask+0x28>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d9f9      	bls.n	800698c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006998:	4b05      	ldr	r3, [pc, #20]	@ (80069b0 <prvIdleTask+0x2c>)
 800699a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069a8:	e7f0      	b.n	800698c <prvIdleTask+0x8>
 80069aa:	bf00      	nop
 80069ac:	20000d40 	.word	0x20000d40
 80069b0:	e000ed04 	.word	0xe000ed04

080069b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069ba:	2300      	movs	r3, #0
 80069bc:	607b      	str	r3, [r7, #4]
 80069be:	e00c      	b.n	80069da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4a12      	ldr	r2, [pc, #72]	@ (8006a14 <prvInitialiseTaskLists+0x60>)
 80069cc:	4413      	add	r3, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fe fc64 	bl	800529c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3301      	adds	r3, #1
 80069d8:	607b      	str	r3, [r7, #4]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b37      	cmp	r3, #55	@ 0x37
 80069de:	d9ef      	bls.n	80069c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069e0:	480d      	ldr	r0, [pc, #52]	@ (8006a18 <prvInitialiseTaskLists+0x64>)
 80069e2:	f7fe fc5b 	bl	800529c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069e6:	480d      	ldr	r0, [pc, #52]	@ (8006a1c <prvInitialiseTaskLists+0x68>)
 80069e8:	f7fe fc58 	bl	800529c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069ec:	480c      	ldr	r0, [pc, #48]	@ (8006a20 <prvInitialiseTaskLists+0x6c>)
 80069ee:	f7fe fc55 	bl	800529c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069f2:	480c      	ldr	r0, [pc, #48]	@ (8006a24 <prvInitialiseTaskLists+0x70>)
 80069f4:	f7fe fc52 	bl	800529c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80069f8:	480b      	ldr	r0, [pc, #44]	@ (8006a28 <prvInitialiseTaskLists+0x74>)
 80069fa:	f7fe fc4f 	bl	800529c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80069fe:	4b0b      	ldr	r3, [pc, #44]	@ (8006a2c <prvInitialiseTaskLists+0x78>)
 8006a00:	4a05      	ldr	r2, [pc, #20]	@ (8006a18 <prvInitialiseTaskLists+0x64>)
 8006a02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a04:	4b0a      	ldr	r3, [pc, #40]	@ (8006a30 <prvInitialiseTaskLists+0x7c>)
 8006a06:	4a05      	ldr	r2, [pc, #20]	@ (8006a1c <prvInitialiseTaskLists+0x68>)
 8006a08:	601a      	str	r2, [r3, #0]
}
 8006a0a:	bf00      	nop
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000d40 	.word	0x20000d40
 8006a18:	200011a0 	.word	0x200011a0
 8006a1c:	200011b4 	.word	0x200011b4
 8006a20:	200011d0 	.word	0x200011d0
 8006a24:	200011e4 	.word	0x200011e4
 8006a28:	200011fc 	.word	0x200011fc
 8006a2c:	200011c8 	.word	0x200011c8
 8006a30:	200011cc 	.word	0x200011cc

08006a34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a3a:	e019      	b.n	8006a70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a3c:	f000 fdec 	bl	8007618 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a40:	4b10      	ldr	r3, [pc, #64]	@ (8006a84 <prvCheckTasksWaitingTermination+0x50>)
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fe fcaf 	bl	80053b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a52:	4b0d      	ldr	r3, [pc, #52]	@ (8006a88 <prvCheckTasksWaitingTermination+0x54>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3b01      	subs	r3, #1
 8006a58:	4a0b      	ldr	r2, [pc, #44]	@ (8006a88 <prvCheckTasksWaitingTermination+0x54>)
 8006a5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a8c <prvCheckTasksWaitingTermination+0x58>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	4a0a      	ldr	r2, [pc, #40]	@ (8006a8c <prvCheckTasksWaitingTermination+0x58>)
 8006a64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a66:	f000 fe09 	bl	800767c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f810 	bl	8006a90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a70:	4b06      	ldr	r3, [pc, #24]	@ (8006a8c <prvCheckTasksWaitingTermination+0x58>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1e1      	bne.n	8006a3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a78:	bf00      	nop
 8006a7a:	bf00      	nop
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	200011e4 	.word	0x200011e4
 8006a88:	20001210 	.word	0x20001210
 8006a8c:	200011f8 	.word	0x200011f8

08006a90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3354      	adds	r3, #84	@ 0x54
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 fa1b 	bl	8007ed8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d108      	bne.n	8006abe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 ffa1 	bl	80079f8 <vPortFree>
				vPortFree( pxTCB );
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 ff9e 	bl	80079f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006abc:	e019      	b.n	8006af2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d103      	bne.n	8006ad0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 ff95 	bl	80079f8 <vPortFree>
	}
 8006ace:	e010      	b.n	8006af2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d00b      	beq.n	8006af2 <prvDeleteTCB+0x62>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	60fb      	str	r3, [r7, #12]
}
 8006aec:	bf00      	nop
 8006aee:	bf00      	nop
 8006af0:	e7fd      	b.n	8006aee <prvDeleteTCB+0x5e>
	}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
	...

08006afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b02:	4b0c      	ldr	r3, [pc, #48]	@ (8006b34 <prvResetNextTaskUnblockTime+0x38>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d104      	bne.n	8006b16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b38 <prvResetNextTaskUnblockTime+0x3c>)
 8006b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b14:	e008      	b.n	8006b28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b16:	4b07      	ldr	r3, [pc, #28]	@ (8006b34 <prvResetNextTaskUnblockTime+0x38>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	4a04      	ldr	r2, [pc, #16]	@ (8006b38 <prvResetNextTaskUnblockTime+0x3c>)
 8006b26:	6013      	str	r3, [r2, #0]
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	200011c8 	.word	0x200011c8
 8006b38:	20001230 	.word	0x20001230

08006b3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b42:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <xTaskGetSchedulerState+0x34>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	607b      	str	r3, [r7, #4]
 8006b4e:	e008      	b.n	8006b62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b50:	4b08      	ldr	r3, [pc, #32]	@ (8006b74 <xTaskGetSchedulerState+0x38>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d102      	bne.n	8006b5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	607b      	str	r3, [r7, #4]
 8006b5c:	e001      	b.n	8006b62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b62:	687b      	ldr	r3, [r7, #4]
	}
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	2000121c 	.word	0x2000121c
 8006b74:	20001238 	.word	0x20001238

08006b78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d058      	beq.n	8006c40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c4c <xTaskPriorityDisinherit+0xd4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d00b      	beq.n	8006bb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	60fb      	str	r3, [r7, #12]
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	e7fd      	b.n	8006bac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10b      	bne.n	8006bd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	60bb      	str	r3, [r7, #8]
}
 8006bca:	bf00      	nop
 8006bcc:	bf00      	nop
 8006bce:	e7fd      	b.n	8006bcc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd4:	1e5a      	subs	r2, r3, #1
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d02c      	beq.n	8006c40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d128      	bne.n	8006c40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fe fbdc 	bl	80053b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c10:	4b0f      	ldr	r3, [pc, #60]	@ (8006c50 <xTaskPriorityDisinherit+0xd8>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d903      	bls.n	8006c20 <xTaskPriorityDisinherit+0xa8>
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8006c50 <xTaskPriorityDisinherit+0xd8>)
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4a09      	ldr	r2, [pc, #36]	@ (8006c54 <xTaskPriorityDisinherit+0xdc>)
 8006c2e:	441a      	add	r2, r3
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	3304      	adds	r3, #4
 8006c34:	4619      	mov	r1, r3
 8006c36:	4610      	mov	r0, r2
 8006c38:	f7fe fb5d 	bl	80052f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c40:	697b      	ldr	r3, [r7, #20]
	}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20000d3c 	.word	0x20000d3c
 8006c50:	20001218 	.word	0x20001218
 8006c54:	20000d40 	.word	0x20000d40

08006c58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c62:	4b21      	ldr	r3, [pc, #132]	@ (8006ce8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c68:	4b20      	ldr	r3, [pc, #128]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fe fb9e 	bl	80053b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d10a      	bne.n	8006c92 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d007      	beq.n	8006c92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c82:	4b1a      	ldr	r3, [pc, #104]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4819      	ldr	r0, [pc, #100]	@ (8006cf0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c8c:	f7fe fb33 	bl	80052f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c90:	e026      	b.n	8006ce0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4413      	add	r3, r2
 8006c98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c9a:	4b14      	ldr	r3, [pc, #80]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d209      	bcs.n	8006cbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006caa:	4b12      	ldr	r3, [pc, #72]	@ (8006cf4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b0f      	ldr	r3, [pc, #60]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	f7fe fb41 	bl	800533e <vListInsert>
}
 8006cbc:	e010      	b.n	8006ce0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cec <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f7fe fb37 	bl	800533e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006cfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d202      	bcs.n	8006ce0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cda:	4a08      	ldr	r2, [pc, #32]	@ (8006cfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	6013      	str	r3, [r2, #0]
}
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20001214 	.word	0x20001214
 8006cec:	20000d3c 	.word	0x20000d3c
 8006cf0:	200011fc 	.word	0x200011fc
 8006cf4:	200011cc 	.word	0x200011cc
 8006cf8:	200011c8 	.word	0x200011c8
 8006cfc:	20001230 	.word	0x20001230

08006d00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08a      	sub	sp, #40	@ 0x28
 8006d04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d0a:	f000 fb13 	bl	8007334 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8006d84 <xTimerCreateTimerTask+0x84>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d021      	beq.n	8006d5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d1e:	1d3a      	adds	r2, r7, #4
 8006d20:	f107 0108 	add.w	r1, r7, #8
 8006d24:	f107 030c 	add.w	r3, r7, #12
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fe fa9d 	bl	8005268 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	9202      	str	r2, [sp, #8]
 8006d36:	9301      	str	r3, [sp, #4]
 8006d38:	2302      	movs	r3, #2
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	460a      	mov	r2, r1
 8006d40:	4911      	ldr	r1, [pc, #68]	@ (8006d88 <xTimerCreateTimerTask+0x88>)
 8006d42:	4812      	ldr	r0, [pc, #72]	@ (8006d8c <xTimerCreateTimerTask+0x8c>)
 8006d44:	f7ff f858 	bl	8005df8 <xTaskCreateStatic>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	4a11      	ldr	r2, [pc, #68]	@ (8006d90 <xTimerCreateTimerTask+0x90>)
 8006d4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d4e:	4b10      	ldr	r3, [pc, #64]	@ (8006d90 <xTimerCreateTimerTask+0x90>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d56:	2301      	movs	r3, #1
 8006d58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10b      	bne.n	8006d78 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	613b      	str	r3, [r7, #16]
}
 8006d72:	bf00      	nop
 8006d74:	bf00      	nop
 8006d76:	e7fd      	b.n	8006d74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d78:	697b      	ldr	r3, [r7, #20]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	2000126c 	.word	0x2000126c
 8006d88:	080090b8 	.word	0x080090b8
 8006d8c:	08006ecd 	.word	0x08006ecd
 8006d90:	20001270 	.word	0x20001270

08006d94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	@ 0x28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10b      	bne.n	8006dc4 <xTimerGenericCommand+0x30>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	623b      	str	r3, [r7, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	bf00      	nop
 8006dc2:	e7fd      	b.n	8006dc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dc4:	4b19      	ldr	r3, [pc, #100]	@ (8006e2c <xTimerGenericCommand+0x98>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d02a      	beq.n	8006e22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2b05      	cmp	r3, #5
 8006ddc:	dc18      	bgt.n	8006e10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dde:	f7ff fead 	bl	8006b3c <xTaskGetSchedulerState>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d109      	bne.n	8006dfc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006de8:	4b10      	ldr	r3, [pc, #64]	@ (8006e2c <xTimerGenericCommand+0x98>)
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	f107 0110 	add.w	r1, r7, #16
 8006df0:	2300      	movs	r3, #0
 8006df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df4:	f7fe fc10 	bl	8005618 <xQueueGenericSend>
 8006df8:	6278      	str	r0, [r7, #36]	@ 0x24
 8006dfa:	e012      	b.n	8006e22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <xTimerGenericCommand+0x98>)
 8006dfe:	6818      	ldr	r0, [r3, #0]
 8006e00:	f107 0110 	add.w	r1, r7, #16
 8006e04:	2300      	movs	r3, #0
 8006e06:	2200      	movs	r2, #0
 8006e08:	f7fe fc06 	bl	8005618 <xQueueGenericSend>
 8006e0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006e0e:	e008      	b.n	8006e22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e10:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <xTimerGenericCommand+0x98>)
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	f107 0110 	add.w	r1, r7, #16
 8006e18:	2300      	movs	r3, #0
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	f7fe fcfe 	bl	800581c <xQueueGenericSendFromISR>
 8006e20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3728      	adds	r7, #40	@ 0x28
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	2000126c 	.word	0x2000126c

08006e30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af02      	add	r7, sp, #8
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e3a:	4b23      	ldr	r3, [pc, #140]	@ (8006ec8 <prvProcessExpiredTimer+0x98>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	3304      	adds	r3, #4
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe fab1 	bl	80053b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d023      	beq.n	8006ea4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	699a      	ldr	r2, [r3, #24]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	18d1      	adds	r1, r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	6978      	ldr	r0, [r7, #20]
 8006e6a:	f000 f8d5 	bl	8007018 <prvInsertTimerInActiveList>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d020      	beq.n	8006eb6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e74:	2300      	movs	r3, #0
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	6978      	ldr	r0, [r7, #20]
 8006e80:	f7ff ff88 	bl	8006d94 <xTimerGenericCommand>
 8006e84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d114      	bne.n	8006eb6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	60fb      	str	r3, [r7, #12]
}
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	e7fd      	b.n	8006ea0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	6978      	ldr	r0, [r7, #20]
 8006ebc:	4798      	blx	r3
}
 8006ebe:	bf00      	nop
 8006ec0:	3718      	adds	r7, #24
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20001264 	.word	0x20001264

08006ecc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ed4:	f107 0308 	add.w	r3, r7, #8
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 f859 	bl	8006f90 <prvGetNextExpireTime>
 8006ede:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 f805 	bl	8006ef4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006eea:	f000 f8d7 	bl	800709c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eee:	bf00      	nop
 8006ef0:	e7f0      	b.n	8006ed4 <prvTimerTask+0x8>
	...

08006ef4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006efe:	f7ff fa29 	bl	8006354 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f02:	f107 0308 	add.w	r3, r7, #8
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 f866 	bl	8006fd8 <prvSampleTimeNow>
 8006f0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d130      	bne.n	8006f76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <prvProcessTimerOrBlockTask+0x3c>
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d806      	bhi.n	8006f30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f22:	f7ff fa25 	bl	8006370 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f26:	68f9      	ldr	r1, [r7, #12]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff ff81 	bl	8006e30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f2e:	e024      	b.n	8006f7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d008      	beq.n	8006f48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f36:	4b13      	ldr	r3, [pc, #76]	@ (8006f84 <prvProcessTimerOrBlockTask+0x90>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <prvProcessTimerOrBlockTask+0x50>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <prvProcessTimerOrBlockTask+0x52>
 8006f44:	2300      	movs	r3, #0
 8006f46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f48:	4b0f      	ldr	r3, [pc, #60]	@ (8006f88 <prvProcessTimerOrBlockTask+0x94>)
 8006f4a:	6818      	ldr	r0, [r3, #0]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	4619      	mov	r1, r3
 8006f56:	f7fe ff1b 	bl	8005d90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f5a:	f7ff fa09 	bl	8006370 <xTaskResumeAll>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d10a      	bne.n	8006f7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f64:	4b09      	ldr	r3, [pc, #36]	@ (8006f8c <prvProcessTimerOrBlockTask+0x98>)
 8006f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	f3bf 8f6f 	isb	sy
}
 8006f74:	e001      	b.n	8006f7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f76:	f7ff f9fb 	bl	8006370 <xTaskResumeAll>
}
 8006f7a:	bf00      	nop
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20001268 	.word	0x20001268
 8006f88:	2000126c 	.word	0x2000126c
 8006f8c:	e000ed04 	.word	0xe000ed04

08006f90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f98:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd4 <prvGetNextExpireTime+0x44>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <prvGetNextExpireTime+0x16>
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	e000      	b.n	8006fa8 <prvGetNextExpireTime+0x18>
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fb4:	4b07      	ldr	r3, [pc, #28]	@ (8006fd4 <prvGetNextExpireTime+0x44>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	60fb      	str	r3, [r7, #12]
 8006fbe:	e001      	b.n	8006fc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	20001264 	.word	0x20001264

08006fd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fe0:	f7ff fa64 	bl	80064ac <xTaskGetTickCount>
 8006fe4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8007014 <prvSampleTimeNow+0x3c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d205      	bcs.n	8006ffc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ff0:	f000 f93a 	bl	8007268 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	e002      	b.n	8007002 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007002:	4a04      	ldr	r2, [pc, #16]	@ (8007014 <prvSampleTimeNow+0x3c>)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007008:	68fb      	ldr	r3, [r7, #12]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20001274 	.word	0x20001274

08007018 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	68ba      	ldr	r2, [r7, #8]
 800702e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	429a      	cmp	r2, r3
 800703c:	d812      	bhi.n	8007064 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	1ad2      	subs	r2, r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	429a      	cmp	r2, r3
 800704a:	d302      	bcc.n	8007052 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	e01b      	b.n	800708a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007052:	4b10      	ldr	r3, [pc, #64]	@ (8007094 <prvInsertTimerInActiveList+0x7c>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3304      	adds	r3, #4
 800705a:	4619      	mov	r1, r3
 800705c:	4610      	mov	r0, r2
 800705e:	f7fe f96e 	bl	800533e <vListInsert>
 8007062:	e012      	b.n	800708a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d206      	bcs.n	800707a <prvInsertTimerInActiveList+0x62>
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d302      	bcc.n	800707a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007074:	2301      	movs	r3, #1
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	e007      	b.n	800708a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800707a:	4b07      	ldr	r3, [pc, #28]	@ (8007098 <prvInsertTimerInActiveList+0x80>)
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3304      	adds	r3, #4
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f7fe f95a 	bl	800533e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800708a:	697b      	ldr	r3, [r7, #20]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20001268 	.word	0x20001268
 8007098:	20001264 	.word	0x20001264

0800709c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08e      	sub	sp, #56	@ 0x38
 80070a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070a2:	e0ce      	b.n	8007242 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	da19      	bge.n	80070de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070aa:	1d3b      	adds	r3, r7, #4
 80070ac:	3304      	adds	r3, #4
 80070ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10b      	bne.n	80070ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	61fb      	str	r3, [r7, #28]
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop
 80070cc:	e7fd      	b.n	80070ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070d4:	6850      	ldr	r0, [r2, #4]
 80070d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070d8:	6892      	ldr	r2, [r2, #8]
 80070da:	4611      	mov	r1, r2
 80070dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f2c0 80ae 	blt.w	8007242 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f4:	3304      	adds	r3, #4
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fe f95a 	bl	80053b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070fc:	463b      	mov	r3, r7
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff ff6a 	bl	8006fd8 <prvSampleTimeNow>
 8007104:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b09      	cmp	r3, #9
 800710a:	f200 8097 	bhi.w	800723c <prvProcessReceivedCommands+0x1a0>
 800710e:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <prvProcessReceivedCommands+0x78>)
 8007110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007114:	0800713d 	.word	0x0800713d
 8007118:	0800713d 	.word	0x0800713d
 800711c:	0800713d 	.word	0x0800713d
 8007120:	080071b3 	.word	0x080071b3
 8007124:	080071c7 	.word	0x080071c7
 8007128:	08007213 	.word	0x08007213
 800712c:	0800713d 	.word	0x0800713d
 8007130:	0800713d 	.word	0x0800713d
 8007134:	080071b3 	.word	0x080071b3
 8007138:	080071c7 	.word	0x080071c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800713c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007142:	f043 0301 	orr.w	r3, r3, #1
 8007146:	b2da      	uxtb	r2, r3
 8007148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	18d1      	adds	r1, r2, r3
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800715a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800715c:	f7ff ff5c 	bl	8007018 <prvInsertTimerInActiveList>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d06c      	beq.n	8007240 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800716c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800716e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007170:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d061      	beq.n	8007240 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	441a      	add	r2, r3
 8007184:	2300      	movs	r3, #0
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	2300      	movs	r3, #0
 800718a:	2100      	movs	r1, #0
 800718c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800718e:	f7ff fe01 	bl	8006d94 <xTimerGenericCommand>
 8007192:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007194:	6a3b      	ldr	r3, [r7, #32]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d152      	bne.n	8007240 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	61bb      	str	r3, [r7, #24]
}
 80071ac:	bf00      	nop
 80071ae:	bf00      	nop
 80071b0:	e7fd      	b.n	80071ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071b8:	f023 0301 	bic.w	r3, r3, #1
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80071c4:	e03d      	b.n	8007242 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071cc:	f043 0301 	orr.w	r3, r3, #1
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10b      	bne.n	80071fe <prvProcessReceivedCommands+0x162>
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	617b      	str	r3, [r7, #20]
}
 80071f8:	bf00      	nop
 80071fa:	bf00      	nop
 80071fc:	e7fd      	b.n	80071fa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	699a      	ldr	r2, [r3, #24]
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	18d1      	adds	r1, r2, r3
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800720a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800720c:	f7ff ff04 	bl	8007018 <prvInsertTimerInActiveList>
					break;
 8007210:	e017      	b.n	8007242 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007218:	f003 0302 	and.w	r3, r3, #2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007222:	f000 fbe9 	bl	80079f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007226:	e00c      	b.n	8007242 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800722e:	f023 0301 	bic.w	r3, r3, #1
 8007232:	b2da      	uxtb	r2, r3
 8007234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007236:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800723a:	e002      	b.n	8007242 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800723c:	bf00      	nop
 800723e:	e000      	b.n	8007242 <prvProcessReceivedCommands+0x1a6>
					break;
 8007240:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007242:	4b08      	ldr	r3, [pc, #32]	@ (8007264 <prvProcessReceivedCommands+0x1c8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	1d39      	adds	r1, r7, #4
 8007248:	2200      	movs	r2, #0
 800724a:	4618      	mov	r0, r3
 800724c:	f7fe fb84 	bl	8005958 <xQueueReceive>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	f47f af26 	bne.w	80070a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007258:	bf00      	nop
 800725a:	bf00      	nop
 800725c:	3730      	adds	r7, #48	@ 0x30
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	2000126c 	.word	0x2000126c

08007268 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800726e:	e049      	b.n	8007304 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007270:	4b2e      	ldr	r3, [pc, #184]	@ (800732c <prvSwitchTimerLists+0xc4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800727a:	4b2c      	ldr	r3, [pc, #176]	@ (800732c <prvSwitchTimerLists+0xc4>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3304      	adds	r3, #4
 8007288:	4618      	mov	r0, r3
 800728a:	f7fe f891 	bl	80053b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800729c:	f003 0304 	and.w	r3, r3, #4
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d02f      	beq.n	8007304 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4413      	add	r3, r2
 80072ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d90e      	bls.n	80072d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072c2:	4b1a      	ldr	r3, [pc, #104]	@ (800732c <prvSwitchTimerLists+0xc4>)
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	3304      	adds	r3, #4
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f7fe f836 	bl	800533e <vListInsert>
 80072d2:	e017      	b.n	8007304 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072d4:	2300      	movs	r3, #0
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	2300      	movs	r3, #0
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	2100      	movs	r1, #0
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7ff fd58 	bl	8006d94 <xTimerGenericCommand>
 80072e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10b      	bne.n	8007304 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	603b      	str	r3, [r7, #0]
}
 80072fe:	bf00      	nop
 8007300:	bf00      	nop
 8007302:	e7fd      	b.n	8007300 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007304:	4b09      	ldr	r3, [pc, #36]	@ (800732c <prvSwitchTimerLists+0xc4>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1b0      	bne.n	8007270 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800730e:	4b07      	ldr	r3, [pc, #28]	@ (800732c <prvSwitchTimerLists+0xc4>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007314:	4b06      	ldr	r3, [pc, #24]	@ (8007330 <prvSwitchTimerLists+0xc8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a04      	ldr	r2, [pc, #16]	@ (800732c <prvSwitchTimerLists+0xc4>)
 800731a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800731c:	4a04      	ldr	r2, [pc, #16]	@ (8007330 <prvSwitchTimerLists+0xc8>)
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	6013      	str	r3, [r2, #0]
}
 8007322:	bf00      	nop
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20001264 	.word	0x20001264
 8007330:	20001268 	.word	0x20001268

08007334 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800733a:	f000 f96d 	bl	8007618 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800733e:	4b15      	ldr	r3, [pc, #84]	@ (8007394 <prvCheckForValidListAndQueue+0x60>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d120      	bne.n	8007388 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007346:	4814      	ldr	r0, [pc, #80]	@ (8007398 <prvCheckForValidListAndQueue+0x64>)
 8007348:	f7fd ffa8 	bl	800529c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800734c:	4813      	ldr	r0, [pc, #76]	@ (800739c <prvCheckForValidListAndQueue+0x68>)
 800734e:	f7fd ffa5 	bl	800529c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007352:	4b13      	ldr	r3, [pc, #76]	@ (80073a0 <prvCheckForValidListAndQueue+0x6c>)
 8007354:	4a10      	ldr	r2, [pc, #64]	@ (8007398 <prvCheckForValidListAndQueue+0x64>)
 8007356:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007358:	4b12      	ldr	r3, [pc, #72]	@ (80073a4 <prvCheckForValidListAndQueue+0x70>)
 800735a:	4a10      	ldr	r2, [pc, #64]	@ (800739c <prvCheckForValidListAndQueue+0x68>)
 800735c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800735e:	2300      	movs	r3, #0
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	4b11      	ldr	r3, [pc, #68]	@ (80073a8 <prvCheckForValidListAndQueue+0x74>)
 8007364:	4a11      	ldr	r2, [pc, #68]	@ (80073ac <prvCheckForValidListAndQueue+0x78>)
 8007366:	2110      	movs	r1, #16
 8007368:	200a      	movs	r0, #10
 800736a:	f7fe f8b5 	bl	80054d8 <xQueueGenericCreateStatic>
 800736e:	4603      	mov	r3, r0
 8007370:	4a08      	ldr	r2, [pc, #32]	@ (8007394 <prvCheckForValidListAndQueue+0x60>)
 8007372:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007374:	4b07      	ldr	r3, [pc, #28]	@ (8007394 <prvCheckForValidListAndQueue+0x60>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d005      	beq.n	8007388 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800737c:	4b05      	ldr	r3, [pc, #20]	@ (8007394 <prvCheckForValidListAndQueue+0x60>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	490b      	ldr	r1, [pc, #44]	@ (80073b0 <prvCheckForValidListAndQueue+0x7c>)
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe fcda 	bl	8005d3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007388:	f000 f978 	bl	800767c <vPortExitCritical>
}
 800738c:	bf00      	nop
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	2000126c 	.word	0x2000126c
 8007398:	2000123c 	.word	0x2000123c
 800739c:	20001250 	.word	0x20001250
 80073a0:	20001264 	.word	0x20001264
 80073a4:	20001268 	.word	0x20001268
 80073a8:	20001318 	.word	0x20001318
 80073ac:	20001278 	.word	0x20001278
 80073b0:	080090c0 	.word	0x080090c0

080073b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3b04      	subs	r3, #4
 80073c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3b04      	subs	r3, #4
 80073d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f023 0201 	bic.w	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3b04      	subs	r3, #4
 80073e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073e4:	4a0c      	ldr	r2, [pc, #48]	@ (8007418 <pxPortInitialiseStack+0x64>)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3b14      	subs	r3, #20
 80073ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3b04      	subs	r3, #4
 80073fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f06f 0202 	mvn.w	r2, #2
 8007402:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	3b20      	subs	r3, #32
 8007408:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800740a:	68fb      	ldr	r3, [r7, #12]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	0800741d 	.word	0x0800741d

0800741c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007426:	4b13      	ldr	r3, [pc, #76]	@ (8007474 <prvTaskExitError+0x58>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d00b      	beq.n	8007448 <prvTaskExitError+0x2c>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	60fb      	str	r3, [r7, #12]
}
 8007442:	bf00      	nop
 8007444:	bf00      	nop
 8007446:	e7fd      	b.n	8007444 <prvTaskExitError+0x28>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	60bb      	str	r3, [r7, #8]
}
 800745a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800745c:	bf00      	nop
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0fc      	beq.n	800745e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	20000058 	.word	0x20000058
	...

08007480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007480:	4b07      	ldr	r3, [pc, #28]	@ (80074a0 <pxCurrentTCBConst2>)
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	6808      	ldr	r0, [r1, #0]
 8007486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800748a:	f380 8809 	msr	PSP, r0
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f04f 0000 	mov.w	r0, #0
 8007496:	f380 8811 	msr	BASEPRI, r0
 800749a:	4770      	bx	lr
 800749c:	f3af 8000 	nop.w

080074a0 <pxCurrentTCBConst2>:
 80074a0:	20000d3c 	.word	0x20000d3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074a4:	bf00      	nop
 80074a6:	bf00      	nop

080074a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074a8:	4808      	ldr	r0, [pc, #32]	@ (80074cc <prvPortStartFirstTask+0x24>)
 80074aa:	6800      	ldr	r0, [r0, #0]
 80074ac:	6800      	ldr	r0, [r0, #0]
 80074ae:	f380 8808 	msr	MSP, r0
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8814 	msr	CONTROL, r0
 80074ba:	b662      	cpsie	i
 80074bc:	b661      	cpsie	f
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	df00      	svc	0
 80074c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ca:	bf00      	nop
 80074cc:	e000ed08 	.word	0xe000ed08

080074d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b086      	sub	sp, #24
 80074d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074d6:	4b47      	ldr	r3, [pc, #284]	@ (80075f4 <xPortStartScheduler+0x124>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a47      	ldr	r2, [pc, #284]	@ (80075f8 <xPortStartScheduler+0x128>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d10b      	bne.n	80074f8 <xPortStartScheduler+0x28>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	613b      	str	r3, [r7, #16]
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	e7fd      	b.n	80074f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074f8:	4b3e      	ldr	r3, [pc, #248]	@ (80075f4 <xPortStartScheduler+0x124>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a3f      	ldr	r2, [pc, #252]	@ (80075fc <xPortStartScheduler+0x12c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d10b      	bne.n	800751a <xPortStartScheduler+0x4a>
	__asm volatile
 8007502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	60fb      	str	r3, [r7, #12]
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	e7fd      	b.n	8007516 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800751a:	4b39      	ldr	r3, [pc, #228]	@ (8007600 <xPortStartScheduler+0x130>)
 800751c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	b2db      	uxtb	r3, r3
 8007524:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	22ff      	movs	r2, #255	@ 0xff
 800752a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800753c:	b2da      	uxtb	r2, r3
 800753e:	4b31      	ldr	r3, [pc, #196]	@ (8007604 <xPortStartScheduler+0x134>)
 8007540:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007542:	4b31      	ldr	r3, [pc, #196]	@ (8007608 <xPortStartScheduler+0x138>)
 8007544:	2207      	movs	r2, #7
 8007546:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007548:	e009      	b.n	800755e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800754a:	4b2f      	ldr	r3, [pc, #188]	@ (8007608 <xPortStartScheduler+0x138>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3b01      	subs	r3, #1
 8007550:	4a2d      	ldr	r2, [pc, #180]	@ (8007608 <xPortStartScheduler+0x138>)
 8007552:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	b2db      	uxtb	r3, r3
 800755c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007566:	2b80      	cmp	r3, #128	@ 0x80
 8007568:	d0ef      	beq.n	800754a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800756a:	4b27      	ldr	r3, [pc, #156]	@ (8007608 <xPortStartScheduler+0x138>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f1c3 0307 	rsb	r3, r3, #7
 8007572:	2b04      	cmp	r3, #4
 8007574:	d00b      	beq.n	800758e <xPortStartScheduler+0xbe>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757a:	f383 8811 	msr	BASEPRI, r3
 800757e:	f3bf 8f6f 	isb	sy
 8007582:	f3bf 8f4f 	dsb	sy
 8007586:	60bb      	str	r3, [r7, #8]
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	e7fd      	b.n	800758a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800758e:	4b1e      	ldr	r3, [pc, #120]	@ (8007608 <xPortStartScheduler+0x138>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	021b      	lsls	r3, r3, #8
 8007594:	4a1c      	ldr	r2, [pc, #112]	@ (8007608 <xPortStartScheduler+0x138>)
 8007596:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007598:	4b1b      	ldr	r3, [pc, #108]	@ (8007608 <xPortStartScheduler+0x138>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075a0:	4a19      	ldr	r2, [pc, #100]	@ (8007608 <xPortStartScheduler+0x138>)
 80075a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075ac:	4b17      	ldr	r3, [pc, #92]	@ (800760c <xPortStartScheduler+0x13c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a16      	ldr	r2, [pc, #88]	@ (800760c <xPortStartScheduler+0x13c>)
 80075b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075b8:	4b14      	ldr	r3, [pc, #80]	@ (800760c <xPortStartScheduler+0x13c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a13      	ldr	r2, [pc, #76]	@ (800760c <xPortStartScheduler+0x13c>)
 80075be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80075c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075c4:	f000 f8da 	bl	800777c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075c8:	4b11      	ldr	r3, [pc, #68]	@ (8007610 <xPortStartScheduler+0x140>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075ce:	f000 f8f9 	bl	80077c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075d2:	4b10      	ldr	r3, [pc, #64]	@ (8007614 <xPortStartScheduler+0x144>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007614 <xPortStartScheduler+0x144>)
 80075d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80075dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075de:	f7ff ff63 	bl	80074a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075e2:	f7ff f82d 	bl	8006640 <vTaskSwitchContext>
	prvTaskExitError();
 80075e6:	f7ff ff19 	bl	800741c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	e000ed00 	.word	0xe000ed00
 80075f8:	410fc271 	.word	0x410fc271
 80075fc:	410fc270 	.word	0x410fc270
 8007600:	e000e400 	.word	0xe000e400
 8007604:	20001368 	.word	0x20001368
 8007608:	2000136c 	.word	0x2000136c
 800760c:	e000ed20 	.word	0xe000ed20
 8007610:	20000058 	.word	0x20000058
 8007614:	e000ef34 	.word	0xe000ef34

08007618 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
}
 8007630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007632:	4b10      	ldr	r3, [pc, #64]	@ (8007674 <vPortEnterCritical+0x5c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3301      	adds	r3, #1
 8007638:	4a0e      	ldr	r2, [pc, #56]	@ (8007674 <vPortEnterCritical+0x5c>)
 800763a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800763c:	4b0d      	ldr	r3, [pc, #52]	@ (8007674 <vPortEnterCritical+0x5c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d110      	bne.n	8007666 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007644:	4b0c      	ldr	r3, [pc, #48]	@ (8007678 <vPortEnterCritical+0x60>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	b2db      	uxtb	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00b      	beq.n	8007666 <vPortEnterCritical+0x4e>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	603b      	str	r3, [r7, #0]
}
 8007660:	bf00      	nop
 8007662:	bf00      	nop
 8007664:	e7fd      	b.n	8007662 <vPortEnterCritical+0x4a>
	}
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	20000058 	.word	0x20000058
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007682:	4b12      	ldr	r3, [pc, #72]	@ (80076cc <vPortExitCritical+0x50>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10b      	bne.n	80076a2 <vPortExitCritical+0x26>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	607b      	str	r3, [r7, #4]
}
 800769c:	bf00      	nop
 800769e:	bf00      	nop
 80076a0:	e7fd      	b.n	800769e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076a2:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <vPortExitCritical+0x50>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3b01      	subs	r3, #1
 80076a8:	4a08      	ldr	r2, [pc, #32]	@ (80076cc <vPortExitCritical+0x50>)
 80076aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076ac:	4b07      	ldr	r3, [pc, #28]	@ (80076cc <vPortExitCritical+0x50>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d105      	bne.n	80076c0 <vPortExitCritical+0x44>
 80076b4:	2300      	movs	r3, #0
 80076b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	f383 8811 	msr	BASEPRI, r3
}
 80076be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr
 80076cc:	20000058 	.word	0x20000058

080076d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076d0:	f3ef 8009 	mrs	r0, PSP
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	4b15      	ldr	r3, [pc, #84]	@ (8007730 <pxCurrentTCBConst>)
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	f01e 0f10 	tst.w	lr, #16
 80076e0:	bf08      	it	eq
 80076e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ea:	6010      	str	r0, [r2, #0]
 80076ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80076f4:	f380 8811 	msr	BASEPRI, r0
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f7fe ff9e 	bl	8006640 <vTaskSwitchContext>
 8007704:	f04f 0000 	mov.w	r0, #0
 8007708:	f380 8811 	msr	BASEPRI, r0
 800770c:	bc09      	pop	{r0, r3}
 800770e:	6819      	ldr	r1, [r3, #0]
 8007710:	6808      	ldr	r0, [r1, #0]
 8007712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007716:	f01e 0f10 	tst.w	lr, #16
 800771a:	bf08      	it	eq
 800771c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007720:	f380 8809 	msr	PSP, r0
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	f3af 8000 	nop.w

08007730 <pxCurrentTCBConst>:
 8007730:	20000d3c 	.word	0x20000d3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop

08007738 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	607b      	str	r3, [r7, #4]
}
 8007750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007752:	f7fe febb 	bl	80064cc <xTaskIncrementTick>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800775c:	4b06      	ldr	r3, [pc, #24]	@ (8007778 <xPortSysTickHandler+0x40>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	2300      	movs	r3, #0
 8007766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	f383 8811 	msr	BASEPRI, r3
}
 800776e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007780:	4b0b      	ldr	r3, [pc, #44]	@ (80077b0 <vPortSetupTimerInterrupt+0x34>)
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007786:	4b0b      	ldr	r3, [pc, #44]	@ (80077b4 <vPortSetupTimerInterrupt+0x38>)
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800778c:	4b0a      	ldr	r3, [pc, #40]	@ (80077b8 <vPortSetupTimerInterrupt+0x3c>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a0a      	ldr	r2, [pc, #40]	@ (80077bc <vPortSetupTimerInterrupt+0x40>)
 8007792:	fba2 2303 	umull	r2, r3, r2, r3
 8007796:	099b      	lsrs	r3, r3, #6
 8007798:	4a09      	ldr	r2, [pc, #36]	@ (80077c0 <vPortSetupTimerInterrupt+0x44>)
 800779a:	3b01      	subs	r3, #1
 800779c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800779e:	4b04      	ldr	r3, [pc, #16]	@ (80077b0 <vPortSetupTimerInterrupt+0x34>)
 80077a0:	2207      	movs	r2, #7
 80077a2:	601a      	str	r2, [r3, #0]
}
 80077a4:	bf00      	nop
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	e000e010 	.word	0xe000e010
 80077b4:	e000e018 	.word	0xe000e018
 80077b8:	2000004c 	.word	0x2000004c
 80077bc:	10624dd3 	.word	0x10624dd3
 80077c0:	e000e014 	.word	0xe000e014

080077c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80077d4 <vPortEnableVFP+0x10>
 80077c8:	6801      	ldr	r1, [r0, #0]
 80077ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80077ce:	6001      	str	r1, [r0, #0]
 80077d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077d2:	bf00      	nop
 80077d4:	e000ed88 	.word	0xe000ed88

080077d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077de:	f3ef 8305 	mrs	r3, IPSR
 80077e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2b0f      	cmp	r3, #15
 80077e8:	d915      	bls.n	8007816 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077ea:	4a18      	ldr	r2, [pc, #96]	@ (800784c <vPortValidateInterruptPriority+0x74>)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077f4:	4b16      	ldr	r3, [pc, #88]	@ (8007850 <vPortValidateInterruptPriority+0x78>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	7afa      	ldrb	r2, [r7, #11]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d20b      	bcs.n	8007816 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	607b      	str	r3, [r7, #4]
}
 8007810:	bf00      	nop
 8007812:	bf00      	nop
 8007814:	e7fd      	b.n	8007812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007816:	4b0f      	ldr	r3, [pc, #60]	@ (8007854 <vPortValidateInterruptPriority+0x7c>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800781e:	4b0e      	ldr	r3, [pc, #56]	@ (8007858 <vPortValidateInterruptPriority+0x80>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d90b      	bls.n	800783e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	603b      	str	r3, [r7, #0]
}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	e7fd      	b.n	800783a <vPortValidateInterruptPriority+0x62>
	}
 800783e:	bf00      	nop
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	e000e3f0 	.word	0xe000e3f0
 8007850:	20001368 	.word	0x20001368
 8007854:	e000ed0c 	.word	0xe000ed0c
 8007858:	2000136c 	.word	0x2000136c

0800785c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08a      	sub	sp, #40	@ 0x28
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007864:	2300      	movs	r3, #0
 8007866:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007868:	f7fe fd74 	bl	8006354 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800786c:	4b5c      	ldr	r3, [pc, #368]	@ (80079e0 <pvPortMalloc+0x184>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007874:	f000 f924 	bl	8007ac0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007878:	4b5a      	ldr	r3, [pc, #360]	@ (80079e4 <pvPortMalloc+0x188>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4013      	ands	r3, r2
 8007880:	2b00      	cmp	r3, #0
 8007882:	f040 8095 	bne.w	80079b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01e      	beq.n	80078ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800788c:	2208      	movs	r2, #8
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4413      	add	r3, r2
 8007892:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	2b00      	cmp	r3, #0
 800789c:	d015      	beq.n	80078ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f023 0307 	bic.w	r3, r3, #7
 80078a4:	3308      	adds	r3, #8
 80078a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <pvPortMalloc+0x6e>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	617b      	str	r3, [r7, #20]
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop
 80078c8:	e7fd      	b.n	80078c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d06f      	beq.n	80079b0 <pvPortMalloc+0x154>
 80078d0:	4b45      	ldr	r3, [pc, #276]	@ (80079e8 <pvPortMalloc+0x18c>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d86a      	bhi.n	80079b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078da:	4b44      	ldr	r3, [pc, #272]	@ (80079ec <pvPortMalloc+0x190>)
 80078dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078de:	4b43      	ldr	r3, [pc, #268]	@ (80079ec <pvPortMalloc+0x190>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078e4:	e004      	b.n	80078f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d903      	bls.n	8007902 <pvPortMalloc+0xa6>
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1f1      	bne.n	80078e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007902:	4b37      	ldr	r3, [pc, #220]	@ (80079e0 <pvPortMalloc+0x184>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007908:	429a      	cmp	r2, r3
 800790a:	d051      	beq.n	80079b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2208      	movs	r2, #8
 8007912:	4413      	add	r3, r2
 8007914:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	1ad2      	subs	r2, r2, r3
 8007926:	2308      	movs	r3, #8
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	429a      	cmp	r2, r3
 800792c:	d920      	bls.n	8007970 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800792e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4413      	add	r3, r2
 8007934:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00b      	beq.n	8007958 <pvPortMalloc+0xfc>
	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	613b      	str	r3, [r7, #16]
}
 8007952:	bf00      	nop
 8007954:	bf00      	nop
 8007956:	e7fd      	b.n	8007954 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	1ad2      	subs	r2, r2, r3
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800796a:	69b8      	ldr	r0, [r7, #24]
 800796c:	f000 f90a 	bl	8007b84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007970:	4b1d      	ldr	r3, [pc, #116]	@ (80079e8 <pvPortMalloc+0x18c>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	4a1b      	ldr	r2, [pc, #108]	@ (80079e8 <pvPortMalloc+0x18c>)
 800797c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800797e:	4b1a      	ldr	r3, [pc, #104]	@ (80079e8 <pvPortMalloc+0x18c>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	4b1b      	ldr	r3, [pc, #108]	@ (80079f0 <pvPortMalloc+0x194>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	429a      	cmp	r2, r3
 8007988:	d203      	bcs.n	8007992 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800798a:	4b17      	ldr	r3, [pc, #92]	@ (80079e8 <pvPortMalloc+0x18c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a18      	ldr	r2, [pc, #96]	@ (80079f0 <pvPortMalloc+0x194>)
 8007990:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	4b13      	ldr	r3, [pc, #76]	@ (80079e4 <pvPortMalloc+0x188>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	431a      	orrs	r2, r3
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079a6:	4b13      	ldr	r3, [pc, #76]	@ (80079f4 <pvPortMalloc+0x198>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3301      	adds	r3, #1
 80079ac:	4a11      	ldr	r2, [pc, #68]	@ (80079f4 <pvPortMalloc+0x198>)
 80079ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079b0:	f7fe fcde 	bl	8006370 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f003 0307 	and.w	r3, r3, #7
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00b      	beq.n	80079d6 <pvPortMalloc+0x17a>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	60fb      	str	r3, [r7, #12]
}
 80079d0:	bf00      	nop
 80079d2:	bf00      	nop
 80079d4:	e7fd      	b.n	80079d2 <pvPortMalloc+0x176>
	return pvReturn;
 80079d6:	69fb      	ldr	r3, [r7, #28]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3728      	adds	r7, #40	@ 0x28
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20004f78 	.word	0x20004f78
 80079e4:	20004f8c 	.word	0x20004f8c
 80079e8:	20004f7c 	.word	0x20004f7c
 80079ec:	20004f70 	.word	0x20004f70
 80079f0:	20004f80 	.word	0x20004f80
 80079f4:	20004f84 	.word	0x20004f84

080079f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d04f      	beq.n	8007aaa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	425b      	negs	r3, r3
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	4413      	add	r3, r2
 8007a12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	4b25      	ldr	r3, [pc, #148]	@ (8007ab4 <vPortFree+0xbc>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4013      	ands	r3, r2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10b      	bne.n	8007a3e <vPortFree+0x46>
	__asm volatile
 8007a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2a:	f383 8811 	msr	BASEPRI, r3
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f3bf 8f4f 	dsb	sy
 8007a36:	60fb      	str	r3, [r7, #12]
}
 8007a38:	bf00      	nop
 8007a3a:	bf00      	nop
 8007a3c:	e7fd      	b.n	8007a3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00b      	beq.n	8007a5e <vPortFree+0x66>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	60bb      	str	r3, [r7, #8]
}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	e7fd      	b.n	8007a5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	4b14      	ldr	r3, [pc, #80]	@ (8007ab4 <vPortFree+0xbc>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4013      	ands	r3, r2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d01e      	beq.n	8007aaa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d11a      	bne.n	8007aaa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	4b0e      	ldr	r3, [pc, #56]	@ (8007ab4 <vPortFree+0xbc>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	43db      	mvns	r3, r3
 8007a7e:	401a      	ands	r2, r3
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a84:	f7fe fc66 	bl	8006354 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab8 <vPortFree+0xc0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4413      	add	r3, r2
 8007a92:	4a09      	ldr	r2, [pc, #36]	@ (8007ab8 <vPortFree+0xc0>)
 8007a94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a96:	6938      	ldr	r0, [r7, #16]
 8007a98:	f000 f874 	bl	8007b84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a9c:	4b07      	ldr	r3, [pc, #28]	@ (8007abc <vPortFree+0xc4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	4a06      	ldr	r2, [pc, #24]	@ (8007abc <vPortFree+0xc4>)
 8007aa4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007aa6:	f7fe fc63 	bl	8006370 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007aaa:	bf00      	nop
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20004f8c 	.word	0x20004f8c
 8007ab8:	20004f7c 	.word	0x20004f7c
 8007abc:	20004f88 	.word	0x20004f88

08007ac0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ac6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007aca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007acc:	4b27      	ldr	r3, [pc, #156]	@ (8007b6c <prvHeapInit+0xac>)
 8007ace:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00c      	beq.n	8007af4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3307      	adds	r3, #7
 8007ade:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f023 0307 	bic.w	r3, r3, #7
 8007ae6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	4a1f      	ldr	r2, [pc, #124]	@ (8007b6c <prvHeapInit+0xac>)
 8007af0:	4413      	add	r3, r2
 8007af2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007af8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b70 <prvHeapInit+0xb0>)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007afe:	4b1c      	ldr	r3, [pc, #112]	@ (8007b70 <prvHeapInit+0xb0>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	4413      	add	r3, r2
 8007b0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	1a9b      	subs	r3, r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0307 	bic.w	r3, r3, #7
 8007b1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4a15      	ldr	r2, [pc, #84]	@ (8007b74 <prvHeapInit+0xb4>)
 8007b20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b22:	4b14      	ldr	r3, [pc, #80]	@ (8007b74 <prvHeapInit+0xb4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2200      	movs	r2, #0
 8007b28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b2a:	4b12      	ldr	r3, [pc, #72]	@ (8007b74 <prvHeapInit+0xb4>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	1ad2      	subs	r2, r2, r3
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b40:	4b0c      	ldr	r3, [pc, #48]	@ (8007b74 <prvHeapInit+0xb4>)
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8007b78 <prvHeapInit+0xb8>)
 8007b4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	4a09      	ldr	r2, [pc, #36]	@ (8007b7c <prvHeapInit+0xbc>)
 8007b56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b58:	4b09      	ldr	r3, [pc, #36]	@ (8007b80 <prvHeapInit+0xc0>)
 8007b5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b5e:	601a      	str	r2, [r3, #0]
}
 8007b60:	bf00      	nop
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	20001370 	.word	0x20001370
 8007b70:	20004f70 	.word	0x20004f70
 8007b74:	20004f78 	.word	0x20004f78
 8007b78:	20004f80 	.word	0x20004f80
 8007b7c:	20004f7c 	.word	0x20004f7c
 8007b80:	20004f8c 	.word	0x20004f8c

08007b84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b8c:	4b28      	ldr	r3, [pc, #160]	@ (8007c30 <prvInsertBlockIntoFreeList+0xac>)
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	e002      	b.n	8007b98 <prvInsertBlockIntoFreeList+0x14>
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d8f7      	bhi.n	8007b92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	4413      	add	r3, r2
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d108      	bne.n	8007bc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	441a      	add	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	441a      	add	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d118      	bne.n	8007c0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	4b15      	ldr	r3, [pc, #84]	@ (8007c34 <prvInsertBlockIntoFreeList+0xb0>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d00d      	beq.n	8007c02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	e008      	b.n	8007c14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c02:	4b0c      	ldr	r3, [pc, #48]	@ (8007c34 <prvInsertBlockIntoFreeList+0xb0>)
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	e003      	b.n	8007c14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d002      	beq.n	8007c22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c22:	bf00      	nop
 8007c24:	3714      	adds	r7, #20
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	20004f70 	.word	0x20004f70
 8007c34:	20004f78 	.word	0x20004f78

08007c38 <std>:
 8007c38:	2300      	movs	r3, #0
 8007c3a:	b510      	push	{r4, lr}
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c46:	6083      	str	r3, [r0, #8]
 8007c48:	8181      	strh	r1, [r0, #12]
 8007c4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c4c:	81c2      	strh	r2, [r0, #14]
 8007c4e:	6183      	str	r3, [r0, #24]
 8007c50:	4619      	mov	r1, r3
 8007c52:	2208      	movs	r2, #8
 8007c54:	305c      	adds	r0, #92	@ 0x5c
 8007c56:	f000 f926 	bl	8007ea6 <memset>
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c90 <std+0x58>)
 8007c5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c94 <std+0x5c>)
 8007c60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c62:	4b0d      	ldr	r3, [pc, #52]	@ (8007c98 <std+0x60>)
 8007c64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c66:	4b0d      	ldr	r3, [pc, #52]	@ (8007c9c <std+0x64>)
 8007c68:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ca0 <std+0x68>)
 8007c6c:	6224      	str	r4, [r4, #32]
 8007c6e:	429c      	cmp	r4, r3
 8007c70:	d006      	beq.n	8007c80 <std+0x48>
 8007c72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c76:	4294      	cmp	r4, r2
 8007c78:	d002      	beq.n	8007c80 <std+0x48>
 8007c7a:	33d0      	adds	r3, #208	@ 0xd0
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	d105      	bne.n	8007c8c <std+0x54>
 8007c80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c88:	f000 b9dc 	b.w	8008044 <__retarget_lock_init_recursive>
 8007c8c:	bd10      	pop	{r4, pc}
 8007c8e:	bf00      	nop
 8007c90:	08007e21 	.word	0x08007e21
 8007c94:	08007e43 	.word	0x08007e43
 8007c98:	08007e7b 	.word	0x08007e7b
 8007c9c:	08007e9f 	.word	0x08007e9f
 8007ca0:	20004f90 	.word	0x20004f90

08007ca4 <stdio_exit_handler>:
 8007ca4:	4a02      	ldr	r2, [pc, #8]	@ (8007cb0 <stdio_exit_handler+0xc>)
 8007ca6:	4903      	ldr	r1, [pc, #12]	@ (8007cb4 <stdio_exit_handler+0x10>)
 8007ca8:	4803      	ldr	r0, [pc, #12]	@ (8007cb8 <stdio_exit_handler+0x14>)
 8007caa:	f000 b869 	b.w	8007d80 <_fwalk_sglue>
 8007cae:	bf00      	nop
 8007cb0:	2000005c 	.word	0x2000005c
 8007cb4:	08008bb1 	.word	0x08008bb1
 8007cb8:	2000006c 	.word	0x2000006c

08007cbc <cleanup_stdio>:
 8007cbc:	6841      	ldr	r1, [r0, #4]
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf0 <cleanup_stdio+0x34>)
 8007cc0:	4299      	cmp	r1, r3
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	d001      	beq.n	8007ccc <cleanup_stdio+0x10>
 8007cc8:	f000 ff72 	bl	8008bb0 <_fflush_r>
 8007ccc:	68a1      	ldr	r1, [r4, #8]
 8007cce:	4b09      	ldr	r3, [pc, #36]	@ (8007cf4 <cleanup_stdio+0x38>)
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	d002      	beq.n	8007cda <cleanup_stdio+0x1e>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 ff6b 	bl	8008bb0 <_fflush_r>
 8007cda:	68e1      	ldr	r1, [r4, #12]
 8007cdc:	4b06      	ldr	r3, [pc, #24]	@ (8007cf8 <cleanup_stdio+0x3c>)
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d004      	beq.n	8007cec <cleanup_stdio+0x30>
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce8:	f000 bf62 	b.w	8008bb0 <_fflush_r>
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	bf00      	nop
 8007cf0:	20004f90 	.word	0x20004f90
 8007cf4:	20004ff8 	.word	0x20004ff8
 8007cf8:	20005060 	.word	0x20005060

08007cfc <global_stdio_init.part.0>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007d2c <global_stdio_init.part.0+0x30>)
 8007d00:	4c0b      	ldr	r4, [pc, #44]	@ (8007d30 <global_stdio_init.part.0+0x34>)
 8007d02:	4a0c      	ldr	r2, [pc, #48]	@ (8007d34 <global_stdio_init.part.0+0x38>)
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	4620      	mov	r0, r4
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2104      	movs	r1, #4
 8007d0c:	f7ff ff94 	bl	8007c38 <std>
 8007d10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d14:	2201      	movs	r2, #1
 8007d16:	2109      	movs	r1, #9
 8007d18:	f7ff ff8e 	bl	8007c38 <std>
 8007d1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d20:	2202      	movs	r2, #2
 8007d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d26:	2112      	movs	r1, #18
 8007d28:	f7ff bf86 	b.w	8007c38 <std>
 8007d2c:	200050c8 	.word	0x200050c8
 8007d30:	20004f90 	.word	0x20004f90
 8007d34:	08007ca5 	.word	0x08007ca5

08007d38 <__sfp_lock_acquire>:
 8007d38:	4801      	ldr	r0, [pc, #4]	@ (8007d40 <__sfp_lock_acquire+0x8>)
 8007d3a:	f000 b984 	b.w	8008046 <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	200050d1 	.word	0x200050d1

08007d44 <__sfp_lock_release>:
 8007d44:	4801      	ldr	r0, [pc, #4]	@ (8007d4c <__sfp_lock_release+0x8>)
 8007d46:	f000 b97f 	b.w	8008048 <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	200050d1 	.word	0x200050d1

08007d50 <__sinit>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	4604      	mov	r4, r0
 8007d54:	f7ff fff0 	bl	8007d38 <__sfp_lock_acquire>
 8007d58:	6a23      	ldr	r3, [r4, #32]
 8007d5a:	b11b      	cbz	r3, 8007d64 <__sinit+0x14>
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d60:	f7ff bff0 	b.w	8007d44 <__sfp_lock_release>
 8007d64:	4b04      	ldr	r3, [pc, #16]	@ (8007d78 <__sinit+0x28>)
 8007d66:	6223      	str	r3, [r4, #32]
 8007d68:	4b04      	ldr	r3, [pc, #16]	@ (8007d7c <__sinit+0x2c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f5      	bne.n	8007d5c <__sinit+0xc>
 8007d70:	f7ff ffc4 	bl	8007cfc <global_stdio_init.part.0>
 8007d74:	e7f2      	b.n	8007d5c <__sinit+0xc>
 8007d76:	bf00      	nop
 8007d78:	08007cbd 	.word	0x08007cbd
 8007d7c:	200050c8 	.word	0x200050c8

08007d80 <_fwalk_sglue>:
 8007d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d84:	4607      	mov	r7, r0
 8007d86:	4688      	mov	r8, r1
 8007d88:	4614      	mov	r4, r2
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d90:	f1b9 0901 	subs.w	r9, r9, #1
 8007d94:	d505      	bpl.n	8007da2 <_fwalk_sglue+0x22>
 8007d96:	6824      	ldr	r4, [r4, #0]
 8007d98:	2c00      	cmp	r4, #0
 8007d9a:	d1f7      	bne.n	8007d8c <_fwalk_sglue+0xc>
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d907      	bls.n	8007db8 <_fwalk_sglue+0x38>
 8007da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dac:	3301      	adds	r3, #1
 8007dae:	d003      	beq.n	8007db8 <_fwalk_sglue+0x38>
 8007db0:	4629      	mov	r1, r5
 8007db2:	4638      	mov	r0, r7
 8007db4:	47c0      	blx	r8
 8007db6:	4306      	orrs	r6, r0
 8007db8:	3568      	adds	r5, #104	@ 0x68
 8007dba:	e7e9      	b.n	8007d90 <_fwalk_sglue+0x10>

08007dbc <iprintf>:
 8007dbc:	b40f      	push	{r0, r1, r2, r3}
 8007dbe:	b507      	push	{r0, r1, r2, lr}
 8007dc0:	4906      	ldr	r1, [pc, #24]	@ (8007ddc <iprintf+0x20>)
 8007dc2:	ab04      	add	r3, sp, #16
 8007dc4:	6808      	ldr	r0, [r1, #0]
 8007dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dca:	6881      	ldr	r1, [r0, #8]
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	f000 fbc5 	bl	800855c <_vfiprintf_r>
 8007dd2:	b003      	add	sp, #12
 8007dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dd8:	b004      	add	sp, #16
 8007dda:	4770      	bx	lr
 8007ddc:	20000068 	.word	0x20000068

08007de0 <siprintf>:
 8007de0:	b40e      	push	{r1, r2, r3}
 8007de2:	b500      	push	{lr}
 8007de4:	b09c      	sub	sp, #112	@ 0x70
 8007de6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007de8:	9002      	str	r0, [sp, #8]
 8007dea:	9006      	str	r0, [sp, #24]
 8007dec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007df0:	4809      	ldr	r0, [pc, #36]	@ (8007e18 <siprintf+0x38>)
 8007df2:	9107      	str	r1, [sp, #28]
 8007df4:	9104      	str	r1, [sp, #16]
 8007df6:	4909      	ldr	r1, [pc, #36]	@ (8007e1c <siprintf+0x3c>)
 8007df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dfc:	9105      	str	r1, [sp, #20]
 8007dfe:	6800      	ldr	r0, [r0, #0]
 8007e00:	9301      	str	r3, [sp, #4]
 8007e02:	a902      	add	r1, sp, #8
 8007e04:	f000 fa84 	bl	8008310 <_svfiprintf_r>
 8007e08:	9b02      	ldr	r3, [sp, #8]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	b01c      	add	sp, #112	@ 0x70
 8007e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e14:	b003      	add	sp, #12
 8007e16:	4770      	bx	lr
 8007e18:	20000068 	.word	0x20000068
 8007e1c:	ffff0208 	.word	0xffff0208

08007e20 <__sread>:
 8007e20:	b510      	push	{r4, lr}
 8007e22:	460c      	mov	r4, r1
 8007e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e28:	f000 f8be 	bl	8007fa8 <_read_r>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	bfab      	itete	ge
 8007e30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e32:	89a3      	ldrhlt	r3, [r4, #12]
 8007e34:	181b      	addge	r3, r3, r0
 8007e36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e3a:	bfac      	ite	ge
 8007e3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e3e:	81a3      	strhlt	r3, [r4, #12]
 8007e40:	bd10      	pop	{r4, pc}

08007e42 <__swrite>:
 8007e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e46:	461f      	mov	r7, r3
 8007e48:	898b      	ldrh	r3, [r1, #12]
 8007e4a:	05db      	lsls	r3, r3, #23
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	460c      	mov	r4, r1
 8007e50:	4616      	mov	r6, r2
 8007e52:	d505      	bpl.n	8007e60 <__swrite+0x1e>
 8007e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e58:	2302      	movs	r3, #2
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f000 f892 	bl	8007f84 <_lseek_r>
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e6a:	81a3      	strh	r3, [r4, #12]
 8007e6c:	4632      	mov	r2, r6
 8007e6e:	463b      	mov	r3, r7
 8007e70:	4628      	mov	r0, r5
 8007e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e76:	f000 b8a9 	b.w	8007fcc <_write_r>

08007e7a <__sseek>:
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e82:	f000 f87f 	bl	8007f84 <_lseek_r>
 8007e86:	1c43      	adds	r3, r0, #1
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	bf15      	itete	ne
 8007e8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e96:	81a3      	strheq	r3, [r4, #12]
 8007e98:	bf18      	it	ne
 8007e9a:	81a3      	strhne	r3, [r4, #12]
 8007e9c:	bd10      	pop	{r4, pc}

08007e9e <__sclose>:
 8007e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea2:	f000 b809 	b.w	8007eb8 <_close_r>

08007ea6 <memset>:
 8007ea6:	4402      	add	r2, r0
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d100      	bne.n	8007eb0 <memset+0xa>
 8007eae:	4770      	bx	lr
 8007eb0:	f803 1b01 	strb.w	r1, [r3], #1
 8007eb4:	e7f9      	b.n	8007eaa <memset+0x4>
	...

08007eb8 <_close_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d06      	ldr	r5, [pc, #24]	@ (8007ed4 <_close_r+0x1c>)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	602b      	str	r3, [r5, #0]
 8007ec4:	f7fa f837 	bl	8001f36 <_close>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d102      	bne.n	8007ed2 <_close_r+0x1a>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	b103      	cbz	r3, 8007ed2 <_close_r+0x1a>
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	200050cc 	.word	0x200050cc

08007ed8 <_reclaim_reent>:
 8007ed8:	4b29      	ldr	r3, [pc, #164]	@ (8007f80 <_reclaim_reent+0xa8>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4283      	cmp	r3, r0
 8007ede:	b570      	push	{r4, r5, r6, lr}
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	d04b      	beq.n	8007f7c <_reclaim_reent+0xa4>
 8007ee4:	69c3      	ldr	r3, [r0, #28]
 8007ee6:	b1ab      	cbz	r3, 8007f14 <_reclaim_reent+0x3c>
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	b16b      	cbz	r3, 8007f08 <_reclaim_reent+0x30>
 8007eec:	2500      	movs	r5, #0
 8007eee:	69e3      	ldr	r3, [r4, #28]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	5959      	ldr	r1, [r3, r5]
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	d13b      	bne.n	8007f70 <_reclaim_reent+0x98>
 8007ef8:	3504      	adds	r5, #4
 8007efa:	2d80      	cmp	r5, #128	@ 0x80
 8007efc:	d1f7      	bne.n	8007eee <_reclaim_reent+0x16>
 8007efe:	69e3      	ldr	r3, [r4, #28]
 8007f00:	4620      	mov	r0, r4
 8007f02:	68d9      	ldr	r1, [r3, #12]
 8007f04:	f000 f8b0 	bl	8008068 <_free_r>
 8007f08:	69e3      	ldr	r3, [r4, #28]
 8007f0a:	6819      	ldr	r1, [r3, #0]
 8007f0c:	b111      	cbz	r1, 8007f14 <_reclaim_reent+0x3c>
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f000 f8aa 	bl	8008068 <_free_r>
 8007f14:	6961      	ldr	r1, [r4, #20]
 8007f16:	b111      	cbz	r1, 8007f1e <_reclaim_reent+0x46>
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 f8a5 	bl	8008068 <_free_r>
 8007f1e:	69e1      	ldr	r1, [r4, #28]
 8007f20:	b111      	cbz	r1, 8007f28 <_reclaim_reent+0x50>
 8007f22:	4620      	mov	r0, r4
 8007f24:	f000 f8a0 	bl	8008068 <_free_r>
 8007f28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007f2a:	b111      	cbz	r1, 8007f32 <_reclaim_reent+0x5a>
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f000 f89b 	bl	8008068 <_free_r>
 8007f32:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f34:	b111      	cbz	r1, 8007f3c <_reclaim_reent+0x64>
 8007f36:	4620      	mov	r0, r4
 8007f38:	f000 f896 	bl	8008068 <_free_r>
 8007f3c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007f3e:	b111      	cbz	r1, 8007f46 <_reclaim_reent+0x6e>
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 f891 	bl	8008068 <_free_r>
 8007f46:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007f48:	b111      	cbz	r1, 8007f50 <_reclaim_reent+0x78>
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 f88c 	bl	8008068 <_free_r>
 8007f50:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007f52:	b111      	cbz	r1, 8007f5a <_reclaim_reent+0x82>
 8007f54:	4620      	mov	r0, r4
 8007f56:	f000 f887 	bl	8008068 <_free_r>
 8007f5a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007f5c:	b111      	cbz	r1, 8007f64 <_reclaim_reent+0x8c>
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f000 f882 	bl	8008068 <_free_r>
 8007f64:	6a23      	ldr	r3, [r4, #32]
 8007f66:	b14b      	cbz	r3, 8007f7c <_reclaim_reent+0xa4>
 8007f68:	4620      	mov	r0, r4
 8007f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f6e:	4718      	bx	r3
 8007f70:	680e      	ldr	r6, [r1, #0]
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 f878 	bl	8008068 <_free_r>
 8007f78:	4631      	mov	r1, r6
 8007f7a:	e7bb      	b.n	8007ef4 <_reclaim_reent+0x1c>
 8007f7c:	bd70      	pop	{r4, r5, r6, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000068 	.word	0x20000068

08007f84 <_lseek_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d07      	ldr	r5, [pc, #28]	@ (8007fa4 <_lseek_r+0x20>)
 8007f88:	4604      	mov	r4, r0
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	602a      	str	r2, [r5, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	f7f9 fff6 	bl	8001f84 <_lseek>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_lseek_r+0x1e>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_lseek_r+0x1e>
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	200050cc 	.word	0x200050cc

08007fa8 <_read_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4d07      	ldr	r5, [pc, #28]	@ (8007fc8 <_read_r+0x20>)
 8007fac:	4604      	mov	r4, r0
 8007fae:	4608      	mov	r0, r1
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	602a      	str	r2, [r5, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f7f9 ffa0 	bl	8001efc <_read>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_read_r+0x1e>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_read_r+0x1e>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	200050cc 	.word	0x200050cc

08007fcc <_write_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d07      	ldr	r5, [pc, #28]	@ (8007fec <_write_r+0x20>)
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	4608      	mov	r0, r1
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	602a      	str	r2, [r5, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f7f8 fcbc 	bl	8000958 <_write>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d102      	bne.n	8007fea <_write_r+0x1e>
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	b103      	cbz	r3, 8007fea <_write_r+0x1e>
 8007fe8:	6023      	str	r3, [r4, #0]
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	200050cc 	.word	0x200050cc

08007ff0 <__errno>:
 8007ff0:	4b01      	ldr	r3, [pc, #4]	@ (8007ff8 <__errno+0x8>)
 8007ff2:	6818      	ldr	r0, [r3, #0]
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	20000068 	.word	0x20000068

08007ffc <__libc_init_array>:
 8007ffc:	b570      	push	{r4, r5, r6, lr}
 8007ffe:	4d0d      	ldr	r5, [pc, #52]	@ (8008034 <__libc_init_array+0x38>)
 8008000:	4c0d      	ldr	r4, [pc, #52]	@ (8008038 <__libc_init_array+0x3c>)
 8008002:	1b64      	subs	r4, r4, r5
 8008004:	10a4      	asrs	r4, r4, #2
 8008006:	2600      	movs	r6, #0
 8008008:	42a6      	cmp	r6, r4
 800800a:	d109      	bne.n	8008020 <__libc_init_array+0x24>
 800800c:	4d0b      	ldr	r5, [pc, #44]	@ (800803c <__libc_init_array+0x40>)
 800800e:	4c0c      	ldr	r4, [pc, #48]	@ (8008040 <__libc_init_array+0x44>)
 8008010:	f000 ff6e 	bl	8008ef0 <_init>
 8008014:	1b64      	subs	r4, r4, r5
 8008016:	10a4      	asrs	r4, r4, #2
 8008018:	2600      	movs	r6, #0
 800801a:	42a6      	cmp	r6, r4
 800801c:	d105      	bne.n	800802a <__libc_init_array+0x2e>
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	f855 3b04 	ldr.w	r3, [r5], #4
 8008024:	4798      	blx	r3
 8008026:	3601      	adds	r6, #1
 8008028:	e7ee      	b.n	8008008 <__libc_init_array+0xc>
 800802a:	f855 3b04 	ldr.w	r3, [r5], #4
 800802e:	4798      	blx	r3
 8008030:	3601      	adds	r6, #1
 8008032:	e7f2      	b.n	800801a <__libc_init_array+0x1e>
 8008034:	0800916c 	.word	0x0800916c
 8008038:	0800916c 	.word	0x0800916c
 800803c:	0800916c 	.word	0x0800916c
 8008040:	08009170 	.word	0x08009170

08008044 <__retarget_lock_init_recursive>:
 8008044:	4770      	bx	lr

08008046 <__retarget_lock_acquire_recursive>:
 8008046:	4770      	bx	lr

08008048 <__retarget_lock_release_recursive>:
 8008048:	4770      	bx	lr

0800804a <memcpy>:
 800804a:	440a      	add	r2, r1
 800804c:	4291      	cmp	r1, r2
 800804e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008052:	d100      	bne.n	8008056 <memcpy+0xc>
 8008054:	4770      	bx	lr
 8008056:	b510      	push	{r4, lr}
 8008058:	f811 4b01 	ldrb.w	r4, [r1], #1
 800805c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008060:	4291      	cmp	r1, r2
 8008062:	d1f9      	bne.n	8008058 <memcpy+0xe>
 8008064:	bd10      	pop	{r4, pc}
	...

08008068 <_free_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4605      	mov	r5, r0
 800806c:	2900      	cmp	r1, #0
 800806e:	d041      	beq.n	80080f4 <_free_r+0x8c>
 8008070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008074:	1f0c      	subs	r4, r1, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	bfb8      	it	lt
 800807a:	18e4      	addlt	r4, r4, r3
 800807c:	f000 f8e0 	bl	8008240 <__malloc_lock>
 8008080:	4a1d      	ldr	r2, [pc, #116]	@ (80080f8 <_free_r+0x90>)
 8008082:	6813      	ldr	r3, [r2, #0]
 8008084:	b933      	cbnz	r3, 8008094 <_free_r+0x2c>
 8008086:	6063      	str	r3, [r4, #4]
 8008088:	6014      	str	r4, [r2, #0]
 800808a:	4628      	mov	r0, r5
 800808c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008090:	f000 b8dc 	b.w	800824c <__malloc_unlock>
 8008094:	42a3      	cmp	r3, r4
 8008096:	d908      	bls.n	80080aa <_free_r+0x42>
 8008098:	6820      	ldr	r0, [r4, #0]
 800809a:	1821      	adds	r1, r4, r0
 800809c:	428b      	cmp	r3, r1
 800809e:	bf01      	itttt	eq
 80080a0:	6819      	ldreq	r1, [r3, #0]
 80080a2:	685b      	ldreq	r3, [r3, #4]
 80080a4:	1809      	addeq	r1, r1, r0
 80080a6:	6021      	streq	r1, [r4, #0]
 80080a8:	e7ed      	b.n	8008086 <_free_r+0x1e>
 80080aa:	461a      	mov	r2, r3
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	b10b      	cbz	r3, 80080b4 <_free_r+0x4c>
 80080b0:	42a3      	cmp	r3, r4
 80080b2:	d9fa      	bls.n	80080aa <_free_r+0x42>
 80080b4:	6811      	ldr	r1, [r2, #0]
 80080b6:	1850      	adds	r0, r2, r1
 80080b8:	42a0      	cmp	r0, r4
 80080ba:	d10b      	bne.n	80080d4 <_free_r+0x6c>
 80080bc:	6820      	ldr	r0, [r4, #0]
 80080be:	4401      	add	r1, r0
 80080c0:	1850      	adds	r0, r2, r1
 80080c2:	4283      	cmp	r3, r0
 80080c4:	6011      	str	r1, [r2, #0]
 80080c6:	d1e0      	bne.n	800808a <_free_r+0x22>
 80080c8:	6818      	ldr	r0, [r3, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	6053      	str	r3, [r2, #4]
 80080ce:	4408      	add	r0, r1
 80080d0:	6010      	str	r0, [r2, #0]
 80080d2:	e7da      	b.n	800808a <_free_r+0x22>
 80080d4:	d902      	bls.n	80080dc <_free_r+0x74>
 80080d6:	230c      	movs	r3, #12
 80080d8:	602b      	str	r3, [r5, #0]
 80080da:	e7d6      	b.n	800808a <_free_r+0x22>
 80080dc:	6820      	ldr	r0, [r4, #0]
 80080de:	1821      	adds	r1, r4, r0
 80080e0:	428b      	cmp	r3, r1
 80080e2:	bf04      	itt	eq
 80080e4:	6819      	ldreq	r1, [r3, #0]
 80080e6:	685b      	ldreq	r3, [r3, #4]
 80080e8:	6063      	str	r3, [r4, #4]
 80080ea:	bf04      	itt	eq
 80080ec:	1809      	addeq	r1, r1, r0
 80080ee:	6021      	streq	r1, [r4, #0]
 80080f0:	6054      	str	r4, [r2, #4]
 80080f2:	e7ca      	b.n	800808a <_free_r+0x22>
 80080f4:	bd38      	pop	{r3, r4, r5, pc}
 80080f6:	bf00      	nop
 80080f8:	200050d8 	.word	0x200050d8

080080fc <sbrk_aligned>:
 80080fc:	b570      	push	{r4, r5, r6, lr}
 80080fe:	4e0f      	ldr	r6, [pc, #60]	@ (800813c <sbrk_aligned+0x40>)
 8008100:	460c      	mov	r4, r1
 8008102:	6831      	ldr	r1, [r6, #0]
 8008104:	4605      	mov	r5, r0
 8008106:	b911      	cbnz	r1, 800810e <sbrk_aligned+0x12>
 8008108:	f000 fe28 	bl	8008d5c <_sbrk_r>
 800810c:	6030      	str	r0, [r6, #0]
 800810e:	4621      	mov	r1, r4
 8008110:	4628      	mov	r0, r5
 8008112:	f000 fe23 	bl	8008d5c <_sbrk_r>
 8008116:	1c43      	adds	r3, r0, #1
 8008118:	d103      	bne.n	8008122 <sbrk_aligned+0x26>
 800811a:	f04f 34ff 	mov.w	r4, #4294967295
 800811e:	4620      	mov	r0, r4
 8008120:	bd70      	pop	{r4, r5, r6, pc}
 8008122:	1cc4      	adds	r4, r0, #3
 8008124:	f024 0403 	bic.w	r4, r4, #3
 8008128:	42a0      	cmp	r0, r4
 800812a:	d0f8      	beq.n	800811e <sbrk_aligned+0x22>
 800812c:	1a21      	subs	r1, r4, r0
 800812e:	4628      	mov	r0, r5
 8008130:	f000 fe14 	bl	8008d5c <_sbrk_r>
 8008134:	3001      	adds	r0, #1
 8008136:	d1f2      	bne.n	800811e <sbrk_aligned+0x22>
 8008138:	e7ef      	b.n	800811a <sbrk_aligned+0x1e>
 800813a:	bf00      	nop
 800813c:	200050d4 	.word	0x200050d4

08008140 <_malloc_r>:
 8008140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008144:	1ccd      	adds	r5, r1, #3
 8008146:	f025 0503 	bic.w	r5, r5, #3
 800814a:	3508      	adds	r5, #8
 800814c:	2d0c      	cmp	r5, #12
 800814e:	bf38      	it	cc
 8008150:	250c      	movcc	r5, #12
 8008152:	2d00      	cmp	r5, #0
 8008154:	4606      	mov	r6, r0
 8008156:	db01      	blt.n	800815c <_malloc_r+0x1c>
 8008158:	42a9      	cmp	r1, r5
 800815a:	d904      	bls.n	8008166 <_malloc_r+0x26>
 800815c:	230c      	movs	r3, #12
 800815e:	6033      	str	r3, [r6, #0]
 8008160:	2000      	movs	r0, #0
 8008162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008166:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800823c <_malloc_r+0xfc>
 800816a:	f000 f869 	bl	8008240 <__malloc_lock>
 800816e:	f8d8 3000 	ldr.w	r3, [r8]
 8008172:	461c      	mov	r4, r3
 8008174:	bb44      	cbnz	r4, 80081c8 <_malloc_r+0x88>
 8008176:	4629      	mov	r1, r5
 8008178:	4630      	mov	r0, r6
 800817a:	f7ff ffbf 	bl	80080fc <sbrk_aligned>
 800817e:	1c43      	adds	r3, r0, #1
 8008180:	4604      	mov	r4, r0
 8008182:	d158      	bne.n	8008236 <_malloc_r+0xf6>
 8008184:	f8d8 4000 	ldr.w	r4, [r8]
 8008188:	4627      	mov	r7, r4
 800818a:	2f00      	cmp	r7, #0
 800818c:	d143      	bne.n	8008216 <_malloc_r+0xd6>
 800818e:	2c00      	cmp	r4, #0
 8008190:	d04b      	beq.n	800822a <_malloc_r+0xea>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	4639      	mov	r1, r7
 8008196:	4630      	mov	r0, r6
 8008198:	eb04 0903 	add.w	r9, r4, r3
 800819c:	f000 fdde 	bl	8008d5c <_sbrk_r>
 80081a0:	4581      	cmp	r9, r0
 80081a2:	d142      	bne.n	800822a <_malloc_r+0xea>
 80081a4:	6821      	ldr	r1, [r4, #0]
 80081a6:	1a6d      	subs	r5, r5, r1
 80081a8:	4629      	mov	r1, r5
 80081aa:	4630      	mov	r0, r6
 80081ac:	f7ff ffa6 	bl	80080fc <sbrk_aligned>
 80081b0:	3001      	adds	r0, #1
 80081b2:	d03a      	beq.n	800822a <_malloc_r+0xea>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	442b      	add	r3, r5
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	f8d8 3000 	ldr.w	r3, [r8]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	bb62      	cbnz	r2, 800821c <_malloc_r+0xdc>
 80081c2:	f8c8 7000 	str.w	r7, [r8]
 80081c6:	e00f      	b.n	80081e8 <_malloc_r+0xa8>
 80081c8:	6822      	ldr	r2, [r4, #0]
 80081ca:	1b52      	subs	r2, r2, r5
 80081cc:	d420      	bmi.n	8008210 <_malloc_r+0xd0>
 80081ce:	2a0b      	cmp	r2, #11
 80081d0:	d917      	bls.n	8008202 <_malloc_r+0xc2>
 80081d2:	1961      	adds	r1, r4, r5
 80081d4:	42a3      	cmp	r3, r4
 80081d6:	6025      	str	r5, [r4, #0]
 80081d8:	bf18      	it	ne
 80081da:	6059      	strne	r1, [r3, #4]
 80081dc:	6863      	ldr	r3, [r4, #4]
 80081de:	bf08      	it	eq
 80081e0:	f8c8 1000 	streq.w	r1, [r8]
 80081e4:	5162      	str	r2, [r4, r5]
 80081e6:	604b      	str	r3, [r1, #4]
 80081e8:	4630      	mov	r0, r6
 80081ea:	f000 f82f 	bl	800824c <__malloc_unlock>
 80081ee:	f104 000b 	add.w	r0, r4, #11
 80081f2:	1d23      	adds	r3, r4, #4
 80081f4:	f020 0007 	bic.w	r0, r0, #7
 80081f8:	1ac2      	subs	r2, r0, r3
 80081fa:	bf1c      	itt	ne
 80081fc:	1a1b      	subne	r3, r3, r0
 80081fe:	50a3      	strne	r3, [r4, r2]
 8008200:	e7af      	b.n	8008162 <_malloc_r+0x22>
 8008202:	6862      	ldr	r2, [r4, #4]
 8008204:	42a3      	cmp	r3, r4
 8008206:	bf0c      	ite	eq
 8008208:	f8c8 2000 	streq.w	r2, [r8]
 800820c:	605a      	strne	r2, [r3, #4]
 800820e:	e7eb      	b.n	80081e8 <_malloc_r+0xa8>
 8008210:	4623      	mov	r3, r4
 8008212:	6864      	ldr	r4, [r4, #4]
 8008214:	e7ae      	b.n	8008174 <_malloc_r+0x34>
 8008216:	463c      	mov	r4, r7
 8008218:	687f      	ldr	r7, [r7, #4]
 800821a:	e7b6      	b.n	800818a <_malloc_r+0x4a>
 800821c:	461a      	mov	r2, r3
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	42a3      	cmp	r3, r4
 8008222:	d1fb      	bne.n	800821c <_malloc_r+0xdc>
 8008224:	2300      	movs	r3, #0
 8008226:	6053      	str	r3, [r2, #4]
 8008228:	e7de      	b.n	80081e8 <_malloc_r+0xa8>
 800822a:	230c      	movs	r3, #12
 800822c:	6033      	str	r3, [r6, #0]
 800822e:	4630      	mov	r0, r6
 8008230:	f000 f80c 	bl	800824c <__malloc_unlock>
 8008234:	e794      	b.n	8008160 <_malloc_r+0x20>
 8008236:	6005      	str	r5, [r0, #0]
 8008238:	e7d6      	b.n	80081e8 <_malloc_r+0xa8>
 800823a:	bf00      	nop
 800823c:	200050d8 	.word	0x200050d8

08008240 <__malloc_lock>:
 8008240:	4801      	ldr	r0, [pc, #4]	@ (8008248 <__malloc_lock+0x8>)
 8008242:	f7ff bf00 	b.w	8008046 <__retarget_lock_acquire_recursive>
 8008246:	bf00      	nop
 8008248:	200050d0 	.word	0x200050d0

0800824c <__malloc_unlock>:
 800824c:	4801      	ldr	r0, [pc, #4]	@ (8008254 <__malloc_unlock+0x8>)
 800824e:	f7ff befb 	b.w	8008048 <__retarget_lock_release_recursive>
 8008252:	bf00      	nop
 8008254:	200050d0 	.word	0x200050d0

08008258 <__ssputs_r>:
 8008258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800825c:	688e      	ldr	r6, [r1, #8]
 800825e:	461f      	mov	r7, r3
 8008260:	42be      	cmp	r6, r7
 8008262:	680b      	ldr	r3, [r1, #0]
 8008264:	4682      	mov	sl, r0
 8008266:	460c      	mov	r4, r1
 8008268:	4690      	mov	r8, r2
 800826a:	d82d      	bhi.n	80082c8 <__ssputs_r+0x70>
 800826c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008270:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008274:	d026      	beq.n	80082c4 <__ssputs_r+0x6c>
 8008276:	6965      	ldr	r5, [r4, #20]
 8008278:	6909      	ldr	r1, [r1, #16]
 800827a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800827e:	eba3 0901 	sub.w	r9, r3, r1
 8008282:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008286:	1c7b      	adds	r3, r7, #1
 8008288:	444b      	add	r3, r9
 800828a:	106d      	asrs	r5, r5, #1
 800828c:	429d      	cmp	r5, r3
 800828e:	bf38      	it	cc
 8008290:	461d      	movcc	r5, r3
 8008292:	0553      	lsls	r3, r2, #21
 8008294:	d527      	bpl.n	80082e6 <__ssputs_r+0x8e>
 8008296:	4629      	mov	r1, r5
 8008298:	f7ff ff52 	bl	8008140 <_malloc_r>
 800829c:	4606      	mov	r6, r0
 800829e:	b360      	cbz	r0, 80082fa <__ssputs_r+0xa2>
 80082a0:	6921      	ldr	r1, [r4, #16]
 80082a2:	464a      	mov	r2, r9
 80082a4:	f7ff fed1 	bl	800804a <memcpy>
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	6126      	str	r6, [r4, #16]
 80082b6:	6165      	str	r5, [r4, #20]
 80082b8:	444e      	add	r6, r9
 80082ba:	eba5 0509 	sub.w	r5, r5, r9
 80082be:	6026      	str	r6, [r4, #0]
 80082c0:	60a5      	str	r5, [r4, #8]
 80082c2:	463e      	mov	r6, r7
 80082c4:	42be      	cmp	r6, r7
 80082c6:	d900      	bls.n	80082ca <__ssputs_r+0x72>
 80082c8:	463e      	mov	r6, r7
 80082ca:	6820      	ldr	r0, [r4, #0]
 80082cc:	4632      	mov	r2, r6
 80082ce:	4641      	mov	r1, r8
 80082d0:	f000 fd2a 	bl	8008d28 <memmove>
 80082d4:	68a3      	ldr	r3, [r4, #8]
 80082d6:	1b9b      	subs	r3, r3, r6
 80082d8:	60a3      	str	r3, [r4, #8]
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	4433      	add	r3, r6
 80082de:	6023      	str	r3, [r4, #0]
 80082e0:	2000      	movs	r0, #0
 80082e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e6:	462a      	mov	r2, r5
 80082e8:	f000 fd48 	bl	8008d7c <_realloc_r>
 80082ec:	4606      	mov	r6, r0
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d1e0      	bne.n	80082b4 <__ssputs_r+0x5c>
 80082f2:	6921      	ldr	r1, [r4, #16]
 80082f4:	4650      	mov	r0, sl
 80082f6:	f7ff feb7 	bl	8008068 <_free_r>
 80082fa:	230c      	movs	r3, #12
 80082fc:	f8ca 3000 	str.w	r3, [sl]
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008306:	81a3      	strh	r3, [r4, #12]
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	e7e9      	b.n	80082e2 <__ssputs_r+0x8a>
	...

08008310 <_svfiprintf_r>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	4698      	mov	r8, r3
 8008316:	898b      	ldrh	r3, [r1, #12]
 8008318:	061b      	lsls	r3, r3, #24
 800831a:	b09d      	sub	sp, #116	@ 0x74
 800831c:	4607      	mov	r7, r0
 800831e:	460d      	mov	r5, r1
 8008320:	4614      	mov	r4, r2
 8008322:	d510      	bpl.n	8008346 <_svfiprintf_r+0x36>
 8008324:	690b      	ldr	r3, [r1, #16]
 8008326:	b973      	cbnz	r3, 8008346 <_svfiprintf_r+0x36>
 8008328:	2140      	movs	r1, #64	@ 0x40
 800832a:	f7ff ff09 	bl	8008140 <_malloc_r>
 800832e:	6028      	str	r0, [r5, #0]
 8008330:	6128      	str	r0, [r5, #16]
 8008332:	b930      	cbnz	r0, 8008342 <_svfiprintf_r+0x32>
 8008334:	230c      	movs	r3, #12
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	f04f 30ff 	mov.w	r0, #4294967295
 800833c:	b01d      	add	sp, #116	@ 0x74
 800833e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008342:	2340      	movs	r3, #64	@ 0x40
 8008344:	616b      	str	r3, [r5, #20]
 8008346:	2300      	movs	r3, #0
 8008348:	9309      	str	r3, [sp, #36]	@ 0x24
 800834a:	2320      	movs	r3, #32
 800834c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008350:	f8cd 800c 	str.w	r8, [sp, #12]
 8008354:	2330      	movs	r3, #48	@ 0x30
 8008356:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084f4 <_svfiprintf_r+0x1e4>
 800835a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800835e:	f04f 0901 	mov.w	r9, #1
 8008362:	4623      	mov	r3, r4
 8008364:	469a      	mov	sl, r3
 8008366:	f813 2b01 	ldrb.w	r2, [r3], #1
 800836a:	b10a      	cbz	r2, 8008370 <_svfiprintf_r+0x60>
 800836c:	2a25      	cmp	r2, #37	@ 0x25
 800836e:	d1f9      	bne.n	8008364 <_svfiprintf_r+0x54>
 8008370:	ebba 0b04 	subs.w	fp, sl, r4
 8008374:	d00b      	beq.n	800838e <_svfiprintf_r+0x7e>
 8008376:	465b      	mov	r3, fp
 8008378:	4622      	mov	r2, r4
 800837a:	4629      	mov	r1, r5
 800837c:	4638      	mov	r0, r7
 800837e:	f7ff ff6b 	bl	8008258 <__ssputs_r>
 8008382:	3001      	adds	r0, #1
 8008384:	f000 80a7 	beq.w	80084d6 <_svfiprintf_r+0x1c6>
 8008388:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800838a:	445a      	add	r2, fp
 800838c:	9209      	str	r2, [sp, #36]	@ 0x24
 800838e:	f89a 3000 	ldrb.w	r3, [sl]
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 809f 	beq.w	80084d6 <_svfiprintf_r+0x1c6>
 8008398:	2300      	movs	r3, #0
 800839a:	f04f 32ff 	mov.w	r2, #4294967295
 800839e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083a2:	f10a 0a01 	add.w	sl, sl, #1
 80083a6:	9304      	str	r3, [sp, #16]
 80083a8:	9307      	str	r3, [sp, #28]
 80083aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80083b0:	4654      	mov	r4, sl
 80083b2:	2205      	movs	r2, #5
 80083b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b8:	484e      	ldr	r0, [pc, #312]	@ (80084f4 <_svfiprintf_r+0x1e4>)
 80083ba:	f7f7 ff19 	bl	80001f0 <memchr>
 80083be:	9a04      	ldr	r2, [sp, #16]
 80083c0:	b9d8      	cbnz	r0, 80083fa <_svfiprintf_r+0xea>
 80083c2:	06d0      	lsls	r0, r2, #27
 80083c4:	bf44      	itt	mi
 80083c6:	2320      	movmi	r3, #32
 80083c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083cc:	0711      	lsls	r1, r2, #28
 80083ce:	bf44      	itt	mi
 80083d0:	232b      	movmi	r3, #43	@ 0x2b
 80083d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083d6:	f89a 3000 	ldrb.w	r3, [sl]
 80083da:	2b2a      	cmp	r3, #42	@ 0x2a
 80083dc:	d015      	beq.n	800840a <_svfiprintf_r+0xfa>
 80083de:	9a07      	ldr	r2, [sp, #28]
 80083e0:	4654      	mov	r4, sl
 80083e2:	2000      	movs	r0, #0
 80083e4:	f04f 0c0a 	mov.w	ip, #10
 80083e8:	4621      	mov	r1, r4
 80083ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ee:	3b30      	subs	r3, #48	@ 0x30
 80083f0:	2b09      	cmp	r3, #9
 80083f2:	d94b      	bls.n	800848c <_svfiprintf_r+0x17c>
 80083f4:	b1b0      	cbz	r0, 8008424 <_svfiprintf_r+0x114>
 80083f6:	9207      	str	r2, [sp, #28]
 80083f8:	e014      	b.n	8008424 <_svfiprintf_r+0x114>
 80083fa:	eba0 0308 	sub.w	r3, r0, r8
 80083fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008402:	4313      	orrs	r3, r2
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	46a2      	mov	sl, r4
 8008408:	e7d2      	b.n	80083b0 <_svfiprintf_r+0xa0>
 800840a:	9b03      	ldr	r3, [sp, #12]
 800840c:	1d19      	adds	r1, r3, #4
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	9103      	str	r1, [sp, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	bfbb      	ittet	lt
 8008416:	425b      	neglt	r3, r3
 8008418:	f042 0202 	orrlt.w	r2, r2, #2
 800841c:	9307      	strge	r3, [sp, #28]
 800841e:	9307      	strlt	r3, [sp, #28]
 8008420:	bfb8      	it	lt
 8008422:	9204      	strlt	r2, [sp, #16]
 8008424:	7823      	ldrb	r3, [r4, #0]
 8008426:	2b2e      	cmp	r3, #46	@ 0x2e
 8008428:	d10a      	bne.n	8008440 <_svfiprintf_r+0x130>
 800842a:	7863      	ldrb	r3, [r4, #1]
 800842c:	2b2a      	cmp	r3, #42	@ 0x2a
 800842e:	d132      	bne.n	8008496 <_svfiprintf_r+0x186>
 8008430:	9b03      	ldr	r3, [sp, #12]
 8008432:	1d1a      	adds	r2, r3, #4
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	9203      	str	r2, [sp, #12]
 8008438:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800843c:	3402      	adds	r4, #2
 800843e:	9305      	str	r3, [sp, #20]
 8008440:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008504 <_svfiprintf_r+0x1f4>
 8008444:	7821      	ldrb	r1, [r4, #0]
 8008446:	2203      	movs	r2, #3
 8008448:	4650      	mov	r0, sl
 800844a:	f7f7 fed1 	bl	80001f0 <memchr>
 800844e:	b138      	cbz	r0, 8008460 <_svfiprintf_r+0x150>
 8008450:	9b04      	ldr	r3, [sp, #16]
 8008452:	eba0 000a 	sub.w	r0, r0, sl
 8008456:	2240      	movs	r2, #64	@ 0x40
 8008458:	4082      	lsls	r2, r0
 800845a:	4313      	orrs	r3, r2
 800845c:	3401      	adds	r4, #1
 800845e:	9304      	str	r3, [sp, #16]
 8008460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008464:	4824      	ldr	r0, [pc, #144]	@ (80084f8 <_svfiprintf_r+0x1e8>)
 8008466:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800846a:	2206      	movs	r2, #6
 800846c:	f7f7 fec0 	bl	80001f0 <memchr>
 8008470:	2800      	cmp	r0, #0
 8008472:	d036      	beq.n	80084e2 <_svfiprintf_r+0x1d2>
 8008474:	4b21      	ldr	r3, [pc, #132]	@ (80084fc <_svfiprintf_r+0x1ec>)
 8008476:	bb1b      	cbnz	r3, 80084c0 <_svfiprintf_r+0x1b0>
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	3307      	adds	r3, #7
 800847c:	f023 0307 	bic.w	r3, r3, #7
 8008480:	3308      	adds	r3, #8
 8008482:	9303      	str	r3, [sp, #12]
 8008484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008486:	4433      	add	r3, r6
 8008488:	9309      	str	r3, [sp, #36]	@ 0x24
 800848a:	e76a      	b.n	8008362 <_svfiprintf_r+0x52>
 800848c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008490:	460c      	mov	r4, r1
 8008492:	2001      	movs	r0, #1
 8008494:	e7a8      	b.n	80083e8 <_svfiprintf_r+0xd8>
 8008496:	2300      	movs	r3, #0
 8008498:	3401      	adds	r4, #1
 800849a:	9305      	str	r3, [sp, #20]
 800849c:	4619      	mov	r1, r3
 800849e:	f04f 0c0a 	mov.w	ip, #10
 80084a2:	4620      	mov	r0, r4
 80084a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084a8:	3a30      	subs	r2, #48	@ 0x30
 80084aa:	2a09      	cmp	r2, #9
 80084ac:	d903      	bls.n	80084b6 <_svfiprintf_r+0x1a6>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0c6      	beq.n	8008440 <_svfiprintf_r+0x130>
 80084b2:	9105      	str	r1, [sp, #20]
 80084b4:	e7c4      	b.n	8008440 <_svfiprintf_r+0x130>
 80084b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ba:	4604      	mov	r4, r0
 80084bc:	2301      	movs	r3, #1
 80084be:	e7f0      	b.n	80084a2 <_svfiprintf_r+0x192>
 80084c0:	ab03      	add	r3, sp, #12
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	462a      	mov	r2, r5
 80084c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008500 <_svfiprintf_r+0x1f0>)
 80084c8:	a904      	add	r1, sp, #16
 80084ca:	4638      	mov	r0, r7
 80084cc:	f3af 8000 	nop.w
 80084d0:	1c42      	adds	r2, r0, #1
 80084d2:	4606      	mov	r6, r0
 80084d4:	d1d6      	bne.n	8008484 <_svfiprintf_r+0x174>
 80084d6:	89ab      	ldrh	r3, [r5, #12]
 80084d8:	065b      	lsls	r3, r3, #25
 80084da:	f53f af2d 	bmi.w	8008338 <_svfiprintf_r+0x28>
 80084de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084e0:	e72c      	b.n	800833c <_svfiprintf_r+0x2c>
 80084e2:	ab03      	add	r3, sp, #12
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	462a      	mov	r2, r5
 80084e8:	4b05      	ldr	r3, [pc, #20]	@ (8008500 <_svfiprintf_r+0x1f0>)
 80084ea:	a904      	add	r1, sp, #16
 80084ec:	4638      	mov	r0, r7
 80084ee:	f000 f9bb 	bl	8008868 <_printf_i>
 80084f2:	e7ed      	b.n	80084d0 <_svfiprintf_r+0x1c0>
 80084f4:	08009130 	.word	0x08009130
 80084f8:	0800913a 	.word	0x0800913a
 80084fc:	00000000 	.word	0x00000000
 8008500:	08008259 	.word	0x08008259
 8008504:	08009136 	.word	0x08009136

08008508 <__sfputc_r>:
 8008508:	6893      	ldr	r3, [r2, #8]
 800850a:	3b01      	subs	r3, #1
 800850c:	2b00      	cmp	r3, #0
 800850e:	b410      	push	{r4}
 8008510:	6093      	str	r3, [r2, #8]
 8008512:	da08      	bge.n	8008526 <__sfputc_r+0x1e>
 8008514:	6994      	ldr	r4, [r2, #24]
 8008516:	42a3      	cmp	r3, r4
 8008518:	db01      	blt.n	800851e <__sfputc_r+0x16>
 800851a:	290a      	cmp	r1, #10
 800851c:	d103      	bne.n	8008526 <__sfputc_r+0x1e>
 800851e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008522:	f000 bb6d 	b.w	8008c00 <__swbuf_r>
 8008526:	6813      	ldr	r3, [r2, #0]
 8008528:	1c58      	adds	r0, r3, #1
 800852a:	6010      	str	r0, [r2, #0]
 800852c:	7019      	strb	r1, [r3, #0]
 800852e:	4608      	mov	r0, r1
 8008530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008534:	4770      	bx	lr

08008536 <__sfputs_r>:
 8008536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008538:	4606      	mov	r6, r0
 800853a:	460f      	mov	r7, r1
 800853c:	4614      	mov	r4, r2
 800853e:	18d5      	adds	r5, r2, r3
 8008540:	42ac      	cmp	r4, r5
 8008542:	d101      	bne.n	8008548 <__sfputs_r+0x12>
 8008544:	2000      	movs	r0, #0
 8008546:	e007      	b.n	8008558 <__sfputs_r+0x22>
 8008548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854c:	463a      	mov	r2, r7
 800854e:	4630      	mov	r0, r6
 8008550:	f7ff ffda 	bl	8008508 <__sfputc_r>
 8008554:	1c43      	adds	r3, r0, #1
 8008556:	d1f3      	bne.n	8008540 <__sfputs_r+0xa>
 8008558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800855c <_vfiprintf_r>:
 800855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008560:	460d      	mov	r5, r1
 8008562:	b09d      	sub	sp, #116	@ 0x74
 8008564:	4614      	mov	r4, r2
 8008566:	4698      	mov	r8, r3
 8008568:	4606      	mov	r6, r0
 800856a:	b118      	cbz	r0, 8008574 <_vfiprintf_r+0x18>
 800856c:	6a03      	ldr	r3, [r0, #32]
 800856e:	b90b      	cbnz	r3, 8008574 <_vfiprintf_r+0x18>
 8008570:	f7ff fbee 	bl	8007d50 <__sinit>
 8008574:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008576:	07d9      	lsls	r1, r3, #31
 8008578:	d405      	bmi.n	8008586 <_vfiprintf_r+0x2a>
 800857a:	89ab      	ldrh	r3, [r5, #12]
 800857c:	059a      	lsls	r2, r3, #22
 800857e:	d402      	bmi.n	8008586 <_vfiprintf_r+0x2a>
 8008580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008582:	f7ff fd60 	bl	8008046 <__retarget_lock_acquire_recursive>
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	071b      	lsls	r3, r3, #28
 800858a:	d501      	bpl.n	8008590 <_vfiprintf_r+0x34>
 800858c:	692b      	ldr	r3, [r5, #16]
 800858e:	b99b      	cbnz	r3, 80085b8 <_vfiprintf_r+0x5c>
 8008590:	4629      	mov	r1, r5
 8008592:	4630      	mov	r0, r6
 8008594:	f000 fb72 	bl	8008c7c <__swsetup_r>
 8008598:	b170      	cbz	r0, 80085b8 <_vfiprintf_r+0x5c>
 800859a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800859c:	07dc      	lsls	r4, r3, #31
 800859e:	d504      	bpl.n	80085aa <_vfiprintf_r+0x4e>
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	b01d      	add	sp, #116	@ 0x74
 80085a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085aa:	89ab      	ldrh	r3, [r5, #12]
 80085ac:	0598      	lsls	r0, r3, #22
 80085ae:	d4f7      	bmi.n	80085a0 <_vfiprintf_r+0x44>
 80085b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085b2:	f7ff fd49 	bl	8008048 <__retarget_lock_release_recursive>
 80085b6:	e7f3      	b.n	80085a0 <_vfiprintf_r+0x44>
 80085b8:	2300      	movs	r3, #0
 80085ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80085bc:	2320      	movs	r3, #32
 80085be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80085c6:	2330      	movs	r3, #48	@ 0x30
 80085c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008778 <_vfiprintf_r+0x21c>
 80085cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085d0:	f04f 0901 	mov.w	r9, #1
 80085d4:	4623      	mov	r3, r4
 80085d6:	469a      	mov	sl, r3
 80085d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085dc:	b10a      	cbz	r2, 80085e2 <_vfiprintf_r+0x86>
 80085de:	2a25      	cmp	r2, #37	@ 0x25
 80085e0:	d1f9      	bne.n	80085d6 <_vfiprintf_r+0x7a>
 80085e2:	ebba 0b04 	subs.w	fp, sl, r4
 80085e6:	d00b      	beq.n	8008600 <_vfiprintf_r+0xa4>
 80085e8:	465b      	mov	r3, fp
 80085ea:	4622      	mov	r2, r4
 80085ec:	4629      	mov	r1, r5
 80085ee:	4630      	mov	r0, r6
 80085f0:	f7ff ffa1 	bl	8008536 <__sfputs_r>
 80085f4:	3001      	adds	r0, #1
 80085f6:	f000 80a7 	beq.w	8008748 <_vfiprintf_r+0x1ec>
 80085fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085fc:	445a      	add	r2, fp
 80085fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008600:	f89a 3000 	ldrb.w	r3, [sl]
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 809f 	beq.w	8008748 <_vfiprintf_r+0x1ec>
 800860a:	2300      	movs	r3, #0
 800860c:	f04f 32ff 	mov.w	r2, #4294967295
 8008610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008614:	f10a 0a01 	add.w	sl, sl, #1
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	9307      	str	r3, [sp, #28]
 800861c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008620:	931a      	str	r3, [sp, #104]	@ 0x68
 8008622:	4654      	mov	r4, sl
 8008624:	2205      	movs	r2, #5
 8008626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862a:	4853      	ldr	r0, [pc, #332]	@ (8008778 <_vfiprintf_r+0x21c>)
 800862c:	f7f7 fde0 	bl	80001f0 <memchr>
 8008630:	9a04      	ldr	r2, [sp, #16]
 8008632:	b9d8      	cbnz	r0, 800866c <_vfiprintf_r+0x110>
 8008634:	06d1      	lsls	r1, r2, #27
 8008636:	bf44      	itt	mi
 8008638:	2320      	movmi	r3, #32
 800863a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800863e:	0713      	lsls	r3, r2, #28
 8008640:	bf44      	itt	mi
 8008642:	232b      	movmi	r3, #43	@ 0x2b
 8008644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008648:	f89a 3000 	ldrb.w	r3, [sl]
 800864c:	2b2a      	cmp	r3, #42	@ 0x2a
 800864e:	d015      	beq.n	800867c <_vfiprintf_r+0x120>
 8008650:	9a07      	ldr	r2, [sp, #28]
 8008652:	4654      	mov	r4, sl
 8008654:	2000      	movs	r0, #0
 8008656:	f04f 0c0a 	mov.w	ip, #10
 800865a:	4621      	mov	r1, r4
 800865c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008660:	3b30      	subs	r3, #48	@ 0x30
 8008662:	2b09      	cmp	r3, #9
 8008664:	d94b      	bls.n	80086fe <_vfiprintf_r+0x1a2>
 8008666:	b1b0      	cbz	r0, 8008696 <_vfiprintf_r+0x13a>
 8008668:	9207      	str	r2, [sp, #28]
 800866a:	e014      	b.n	8008696 <_vfiprintf_r+0x13a>
 800866c:	eba0 0308 	sub.w	r3, r0, r8
 8008670:	fa09 f303 	lsl.w	r3, r9, r3
 8008674:	4313      	orrs	r3, r2
 8008676:	9304      	str	r3, [sp, #16]
 8008678:	46a2      	mov	sl, r4
 800867a:	e7d2      	b.n	8008622 <_vfiprintf_r+0xc6>
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	1d19      	adds	r1, r3, #4
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	9103      	str	r1, [sp, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	bfbb      	ittet	lt
 8008688:	425b      	neglt	r3, r3
 800868a:	f042 0202 	orrlt.w	r2, r2, #2
 800868e:	9307      	strge	r3, [sp, #28]
 8008690:	9307      	strlt	r3, [sp, #28]
 8008692:	bfb8      	it	lt
 8008694:	9204      	strlt	r2, [sp, #16]
 8008696:	7823      	ldrb	r3, [r4, #0]
 8008698:	2b2e      	cmp	r3, #46	@ 0x2e
 800869a:	d10a      	bne.n	80086b2 <_vfiprintf_r+0x156>
 800869c:	7863      	ldrb	r3, [r4, #1]
 800869e:	2b2a      	cmp	r3, #42	@ 0x2a
 80086a0:	d132      	bne.n	8008708 <_vfiprintf_r+0x1ac>
 80086a2:	9b03      	ldr	r3, [sp, #12]
 80086a4:	1d1a      	adds	r2, r3, #4
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	9203      	str	r2, [sp, #12]
 80086aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086ae:	3402      	adds	r4, #2
 80086b0:	9305      	str	r3, [sp, #20]
 80086b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008788 <_vfiprintf_r+0x22c>
 80086b6:	7821      	ldrb	r1, [r4, #0]
 80086b8:	2203      	movs	r2, #3
 80086ba:	4650      	mov	r0, sl
 80086bc:	f7f7 fd98 	bl	80001f0 <memchr>
 80086c0:	b138      	cbz	r0, 80086d2 <_vfiprintf_r+0x176>
 80086c2:	9b04      	ldr	r3, [sp, #16]
 80086c4:	eba0 000a 	sub.w	r0, r0, sl
 80086c8:	2240      	movs	r2, #64	@ 0x40
 80086ca:	4082      	lsls	r2, r0
 80086cc:	4313      	orrs	r3, r2
 80086ce:	3401      	adds	r4, #1
 80086d0:	9304      	str	r3, [sp, #16]
 80086d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d6:	4829      	ldr	r0, [pc, #164]	@ (800877c <_vfiprintf_r+0x220>)
 80086d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086dc:	2206      	movs	r2, #6
 80086de:	f7f7 fd87 	bl	80001f0 <memchr>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d03f      	beq.n	8008766 <_vfiprintf_r+0x20a>
 80086e6:	4b26      	ldr	r3, [pc, #152]	@ (8008780 <_vfiprintf_r+0x224>)
 80086e8:	bb1b      	cbnz	r3, 8008732 <_vfiprintf_r+0x1d6>
 80086ea:	9b03      	ldr	r3, [sp, #12]
 80086ec:	3307      	adds	r3, #7
 80086ee:	f023 0307 	bic.w	r3, r3, #7
 80086f2:	3308      	adds	r3, #8
 80086f4:	9303      	str	r3, [sp, #12]
 80086f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f8:	443b      	add	r3, r7
 80086fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80086fc:	e76a      	b.n	80085d4 <_vfiprintf_r+0x78>
 80086fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008702:	460c      	mov	r4, r1
 8008704:	2001      	movs	r0, #1
 8008706:	e7a8      	b.n	800865a <_vfiprintf_r+0xfe>
 8008708:	2300      	movs	r3, #0
 800870a:	3401      	adds	r4, #1
 800870c:	9305      	str	r3, [sp, #20]
 800870e:	4619      	mov	r1, r3
 8008710:	f04f 0c0a 	mov.w	ip, #10
 8008714:	4620      	mov	r0, r4
 8008716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800871a:	3a30      	subs	r2, #48	@ 0x30
 800871c:	2a09      	cmp	r2, #9
 800871e:	d903      	bls.n	8008728 <_vfiprintf_r+0x1cc>
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0c6      	beq.n	80086b2 <_vfiprintf_r+0x156>
 8008724:	9105      	str	r1, [sp, #20]
 8008726:	e7c4      	b.n	80086b2 <_vfiprintf_r+0x156>
 8008728:	fb0c 2101 	mla	r1, ip, r1, r2
 800872c:	4604      	mov	r4, r0
 800872e:	2301      	movs	r3, #1
 8008730:	e7f0      	b.n	8008714 <_vfiprintf_r+0x1b8>
 8008732:	ab03      	add	r3, sp, #12
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	462a      	mov	r2, r5
 8008738:	4b12      	ldr	r3, [pc, #72]	@ (8008784 <_vfiprintf_r+0x228>)
 800873a:	a904      	add	r1, sp, #16
 800873c:	4630      	mov	r0, r6
 800873e:	f3af 8000 	nop.w
 8008742:	4607      	mov	r7, r0
 8008744:	1c78      	adds	r0, r7, #1
 8008746:	d1d6      	bne.n	80086f6 <_vfiprintf_r+0x19a>
 8008748:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800874a:	07d9      	lsls	r1, r3, #31
 800874c:	d405      	bmi.n	800875a <_vfiprintf_r+0x1fe>
 800874e:	89ab      	ldrh	r3, [r5, #12]
 8008750:	059a      	lsls	r2, r3, #22
 8008752:	d402      	bmi.n	800875a <_vfiprintf_r+0x1fe>
 8008754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008756:	f7ff fc77 	bl	8008048 <__retarget_lock_release_recursive>
 800875a:	89ab      	ldrh	r3, [r5, #12]
 800875c:	065b      	lsls	r3, r3, #25
 800875e:	f53f af1f 	bmi.w	80085a0 <_vfiprintf_r+0x44>
 8008762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008764:	e71e      	b.n	80085a4 <_vfiprintf_r+0x48>
 8008766:	ab03      	add	r3, sp, #12
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	462a      	mov	r2, r5
 800876c:	4b05      	ldr	r3, [pc, #20]	@ (8008784 <_vfiprintf_r+0x228>)
 800876e:	a904      	add	r1, sp, #16
 8008770:	4630      	mov	r0, r6
 8008772:	f000 f879 	bl	8008868 <_printf_i>
 8008776:	e7e4      	b.n	8008742 <_vfiprintf_r+0x1e6>
 8008778:	08009130 	.word	0x08009130
 800877c:	0800913a 	.word	0x0800913a
 8008780:	00000000 	.word	0x00000000
 8008784:	08008537 	.word	0x08008537
 8008788:	08009136 	.word	0x08009136

0800878c <_printf_common>:
 800878c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008790:	4616      	mov	r6, r2
 8008792:	4698      	mov	r8, r3
 8008794:	688a      	ldr	r2, [r1, #8]
 8008796:	690b      	ldr	r3, [r1, #16]
 8008798:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800879c:	4293      	cmp	r3, r2
 800879e:	bfb8      	it	lt
 80087a0:	4613      	movlt	r3, r2
 80087a2:	6033      	str	r3, [r6, #0]
 80087a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087a8:	4607      	mov	r7, r0
 80087aa:	460c      	mov	r4, r1
 80087ac:	b10a      	cbz	r2, 80087b2 <_printf_common+0x26>
 80087ae:	3301      	adds	r3, #1
 80087b0:	6033      	str	r3, [r6, #0]
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	0699      	lsls	r1, r3, #26
 80087b6:	bf42      	ittt	mi
 80087b8:	6833      	ldrmi	r3, [r6, #0]
 80087ba:	3302      	addmi	r3, #2
 80087bc:	6033      	strmi	r3, [r6, #0]
 80087be:	6825      	ldr	r5, [r4, #0]
 80087c0:	f015 0506 	ands.w	r5, r5, #6
 80087c4:	d106      	bne.n	80087d4 <_printf_common+0x48>
 80087c6:	f104 0a19 	add.w	sl, r4, #25
 80087ca:	68e3      	ldr	r3, [r4, #12]
 80087cc:	6832      	ldr	r2, [r6, #0]
 80087ce:	1a9b      	subs	r3, r3, r2
 80087d0:	42ab      	cmp	r3, r5
 80087d2:	dc26      	bgt.n	8008822 <_printf_common+0x96>
 80087d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087d8:	6822      	ldr	r2, [r4, #0]
 80087da:	3b00      	subs	r3, #0
 80087dc:	bf18      	it	ne
 80087de:	2301      	movne	r3, #1
 80087e0:	0692      	lsls	r2, r2, #26
 80087e2:	d42b      	bmi.n	800883c <_printf_common+0xb0>
 80087e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087e8:	4641      	mov	r1, r8
 80087ea:	4638      	mov	r0, r7
 80087ec:	47c8      	blx	r9
 80087ee:	3001      	adds	r0, #1
 80087f0:	d01e      	beq.n	8008830 <_printf_common+0xa4>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	6922      	ldr	r2, [r4, #16]
 80087f6:	f003 0306 	and.w	r3, r3, #6
 80087fa:	2b04      	cmp	r3, #4
 80087fc:	bf02      	ittt	eq
 80087fe:	68e5      	ldreq	r5, [r4, #12]
 8008800:	6833      	ldreq	r3, [r6, #0]
 8008802:	1aed      	subeq	r5, r5, r3
 8008804:	68a3      	ldr	r3, [r4, #8]
 8008806:	bf0c      	ite	eq
 8008808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800880c:	2500      	movne	r5, #0
 800880e:	4293      	cmp	r3, r2
 8008810:	bfc4      	itt	gt
 8008812:	1a9b      	subgt	r3, r3, r2
 8008814:	18ed      	addgt	r5, r5, r3
 8008816:	2600      	movs	r6, #0
 8008818:	341a      	adds	r4, #26
 800881a:	42b5      	cmp	r5, r6
 800881c:	d11a      	bne.n	8008854 <_printf_common+0xc8>
 800881e:	2000      	movs	r0, #0
 8008820:	e008      	b.n	8008834 <_printf_common+0xa8>
 8008822:	2301      	movs	r3, #1
 8008824:	4652      	mov	r2, sl
 8008826:	4641      	mov	r1, r8
 8008828:	4638      	mov	r0, r7
 800882a:	47c8      	blx	r9
 800882c:	3001      	adds	r0, #1
 800882e:	d103      	bne.n	8008838 <_printf_common+0xac>
 8008830:	f04f 30ff 	mov.w	r0, #4294967295
 8008834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008838:	3501      	adds	r5, #1
 800883a:	e7c6      	b.n	80087ca <_printf_common+0x3e>
 800883c:	18e1      	adds	r1, r4, r3
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	2030      	movs	r0, #48	@ 0x30
 8008842:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008846:	4422      	add	r2, r4
 8008848:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800884c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008850:	3302      	adds	r3, #2
 8008852:	e7c7      	b.n	80087e4 <_printf_common+0x58>
 8008854:	2301      	movs	r3, #1
 8008856:	4622      	mov	r2, r4
 8008858:	4641      	mov	r1, r8
 800885a:	4638      	mov	r0, r7
 800885c:	47c8      	blx	r9
 800885e:	3001      	adds	r0, #1
 8008860:	d0e6      	beq.n	8008830 <_printf_common+0xa4>
 8008862:	3601      	adds	r6, #1
 8008864:	e7d9      	b.n	800881a <_printf_common+0x8e>
	...

08008868 <_printf_i>:
 8008868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800886c:	7e0f      	ldrb	r7, [r1, #24]
 800886e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008870:	2f78      	cmp	r7, #120	@ 0x78
 8008872:	4691      	mov	r9, r2
 8008874:	4680      	mov	r8, r0
 8008876:	460c      	mov	r4, r1
 8008878:	469a      	mov	sl, r3
 800887a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800887e:	d807      	bhi.n	8008890 <_printf_i+0x28>
 8008880:	2f62      	cmp	r7, #98	@ 0x62
 8008882:	d80a      	bhi.n	800889a <_printf_i+0x32>
 8008884:	2f00      	cmp	r7, #0
 8008886:	f000 80d2 	beq.w	8008a2e <_printf_i+0x1c6>
 800888a:	2f58      	cmp	r7, #88	@ 0x58
 800888c:	f000 80b9 	beq.w	8008a02 <_printf_i+0x19a>
 8008890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008894:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008898:	e03a      	b.n	8008910 <_printf_i+0xa8>
 800889a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800889e:	2b15      	cmp	r3, #21
 80088a0:	d8f6      	bhi.n	8008890 <_printf_i+0x28>
 80088a2:	a101      	add	r1, pc, #4	@ (adr r1, 80088a8 <_printf_i+0x40>)
 80088a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088a8:	08008901 	.word	0x08008901
 80088ac:	08008915 	.word	0x08008915
 80088b0:	08008891 	.word	0x08008891
 80088b4:	08008891 	.word	0x08008891
 80088b8:	08008891 	.word	0x08008891
 80088bc:	08008891 	.word	0x08008891
 80088c0:	08008915 	.word	0x08008915
 80088c4:	08008891 	.word	0x08008891
 80088c8:	08008891 	.word	0x08008891
 80088cc:	08008891 	.word	0x08008891
 80088d0:	08008891 	.word	0x08008891
 80088d4:	08008a15 	.word	0x08008a15
 80088d8:	0800893f 	.word	0x0800893f
 80088dc:	080089cf 	.word	0x080089cf
 80088e0:	08008891 	.word	0x08008891
 80088e4:	08008891 	.word	0x08008891
 80088e8:	08008a37 	.word	0x08008a37
 80088ec:	08008891 	.word	0x08008891
 80088f0:	0800893f 	.word	0x0800893f
 80088f4:	08008891 	.word	0x08008891
 80088f8:	08008891 	.word	0x08008891
 80088fc:	080089d7 	.word	0x080089d7
 8008900:	6833      	ldr	r3, [r6, #0]
 8008902:	1d1a      	adds	r2, r3, #4
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6032      	str	r2, [r6, #0]
 8008908:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800890c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008910:	2301      	movs	r3, #1
 8008912:	e09d      	b.n	8008a50 <_printf_i+0x1e8>
 8008914:	6833      	ldr	r3, [r6, #0]
 8008916:	6820      	ldr	r0, [r4, #0]
 8008918:	1d19      	adds	r1, r3, #4
 800891a:	6031      	str	r1, [r6, #0]
 800891c:	0606      	lsls	r6, r0, #24
 800891e:	d501      	bpl.n	8008924 <_printf_i+0xbc>
 8008920:	681d      	ldr	r5, [r3, #0]
 8008922:	e003      	b.n	800892c <_printf_i+0xc4>
 8008924:	0645      	lsls	r5, r0, #25
 8008926:	d5fb      	bpl.n	8008920 <_printf_i+0xb8>
 8008928:	f9b3 5000 	ldrsh.w	r5, [r3]
 800892c:	2d00      	cmp	r5, #0
 800892e:	da03      	bge.n	8008938 <_printf_i+0xd0>
 8008930:	232d      	movs	r3, #45	@ 0x2d
 8008932:	426d      	negs	r5, r5
 8008934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008938:	4859      	ldr	r0, [pc, #356]	@ (8008aa0 <_printf_i+0x238>)
 800893a:	230a      	movs	r3, #10
 800893c:	e011      	b.n	8008962 <_printf_i+0xfa>
 800893e:	6821      	ldr	r1, [r4, #0]
 8008940:	6833      	ldr	r3, [r6, #0]
 8008942:	0608      	lsls	r0, r1, #24
 8008944:	f853 5b04 	ldr.w	r5, [r3], #4
 8008948:	d402      	bmi.n	8008950 <_printf_i+0xe8>
 800894a:	0649      	lsls	r1, r1, #25
 800894c:	bf48      	it	mi
 800894e:	b2ad      	uxthmi	r5, r5
 8008950:	2f6f      	cmp	r7, #111	@ 0x6f
 8008952:	4853      	ldr	r0, [pc, #332]	@ (8008aa0 <_printf_i+0x238>)
 8008954:	6033      	str	r3, [r6, #0]
 8008956:	bf14      	ite	ne
 8008958:	230a      	movne	r3, #10
 800895a:	2308      	moveq	r3, #8
 800895c:	2100      	movs	r1, #0
 800895e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008962:	6866      	ldr	r6, [r4, #4]
 8008964:	60a6      	str	r6, [r4, #8]
 8008966:	2e00      	cmp	r6, #0
 8008968:	bfa2      	ittt	ge
 800896a:	6821      	ldrge	r1, [r4, #0]
 800896c:	f021 0104 	bicge.w	r1, r1, #4
 8008970:	6021      	strge	r1, [r4, #0]
 8008972:	b90d      	cbnz	r5, 8008978 <_printf_i+0x110>
 8008974:	2e00      	cmp	r6, #0
 8008976:	d04b      	beq.n	8008a10 <_printf_i+0x1a8>
 8008978:	4616      	mov	r6, r2
 800897a:	fbb5 f1f3 	udiv	r1, r5, r3
 800897e:	fb03 5711 	mls	r7, r3, r1, r5
 8008982:	5dc7      	ldrb	r7, [r0, r7]
 8008984:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008988:	462f      	mov	r7, r5
 800898a:	42bb      	cmp	r3, r7
 800898c:	460d      	mov	r5, r1
 800898e:	d9f4      	bls.n	800897a <_printf_i+0x112>
 8008990:	2b08      	cmp	r3, #8
 8008992:	d10b      	bne.n	80089ac <_printf_i+0x144>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	07df      	lsls	r7, r3, #31
 8008998:	d508      	bpl.n	80089ac <_printf_i+0x144>
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	6861      	ldr	r1, [r4, #4]
 800899e:	4299      	cmp	r1, r3
 80089a0:	bfde      	ittt	le
 80089a2:	2330      	movle	r3, #48	@ 0x30
 80089a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089ac:	1b92      	subs	r2, r2, r6
 80089ae:	6122      	str	r2, [r4, #16]
 80089b0:	f8cd a000 	str.w	sl, [sp]
 80089b4:	464b      	mov	r3, r9
 80089b6:	aa03      	add	r2, sp, #12
 80089b8:	4621      	mov	r1, r4
 80089ba:	4640      	mov	r0, r8
 80089bc:	f7ff fee6 	bl	800878c <_printf_common>
 80089c0:	3001      	adds	r0, #1
 80089c2:	d14a      	bne.n	8008a5a <_printf_i+0x1f2>
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	b004      	add	sp, #16
 80089ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	f043 0320 	orr.w	r3, r3, #32
 80089d4:	6023      	str	r3, [r4, #0]
 80089d6:	4833      	ldr	r0, [pc, #204]	@ (8008aa4 <_printf_i+0x23c>)
 80089d8:	2778      	movs	r7, #120	@ 0x78
 80089da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	6831      	ldr	r1, [r6, #0]
 80089e2:	061f      	lsls	r7, r3, #24
 80089e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80089e8:	d402      	bmi.n	80089f0 <_printf_i+0x188>
 80089ea:	065f      	lsls	r7, r3, #25
 80089ec:	bf48      	it	mi
 80089ee:	b2ad      	uxthmi	r5, r5
 80089f0:	6031      	str	r1, [r6, #0]
 80089f2:	07d9      	lsls	r1, r3, #31
 80089f4:	bf44      	itt	mi
 80089f6:	f043 0320 	orrmi.w	r3, r3, #32
 80089fa:	6023      	strmi	r3, [r4, #0]
 80089fc:	b11d      	cbz	r5, 8008a06 <_printf_i+0x19e>
 80089fe:	2310      	movs	r3, #16
 8008a00:	e7ac      	b.n	800895c <_printf_i+0xf4>
 8008a02:	4827      	ldr	r0, [pc, #156]	@ (8008aa0 <_printf_i+0x238>)
 8008a04:	e7e9      	b.n	80089da <_printf_i+0x172>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	f023 0320 	bic.w	r3, r3, #32
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	e7f6      	b.n	80089fe <_printf_i+0x196>
 8008a10:	4616      	mov	r6, r2
 8008a12:	e7bd      	b.n	8008990 <_printf_i+0x128>
 8008a14:	6833      	ldr	r3, [r6, #0]
 8008a16:	6825      	ldr	r5, [r4, #0]
 8008a18:	6961      	ldr	r1, [r4, #20]
 8008a1a:	1d18      	adds	r0, r3, #4
 8008a1c:	6030      	str	r0, [r6, #0]
 8008a1e:	062e      	lsls	r6, r5, #24
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	d501      	bpl.n	8008a28 <_printf_i+0x1c0>
 8008a24:	6019      	str	r1, [r3, #0]
 8008a26:	e002      	b.n	8008a2e <_printf_i+0x1c6>
 8008a28:	0668      	lsls	r0, r5, #25
 8008a2a:	d5fb      	bpl.n	8008a24 <_printf_i+0x1bc>
 8008a2c:	8019      	strh	r1, [r3, #0]
 8008a2e:	2300      	movs	r3, #0
 8008a30:	6123      	str	r3, [r4, #16]
 8008a32:	4616      	mov	r6, r2
 8008a34:	e7bc      	b.n	80089b0 <_printf_i+0x148>
 8008a36:	6833      	ldr	r3, [r6, #0]
 8008a38:	1d1a      	adds	r2, r3, #4
 8008a3a:	6032      	str	r2, [r6, #0]
 8008a3c:	681e      	ldr	r6, [r3, #0]
 8008a3e:	6862      	ldr	r2, [r4, #4]
 8008a40:	2100      	movs	r1, #0
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7f7 fbd4 	bl	80001f0 <memchr>
 8008a48:	b108      	cbz	r0, 8008a4e <_printf_i+0x1e6>
 8008a4a:	1b80      	subs	r0, r0, r6
 8008a4c:	6060      	str	r0, [r4, #4]
 8008a4e:	6863      	ldr	r3, [r4, #4]
 8008a50:	6123      	str	r3, [r4, #16]
 8008a52:	2300      	movs	r3, #0
 8008a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a58:	e7aa      	b.n	80089b0 <_printf_i+0x148>
 8008a5a:	6923      	ldr	r3, [r4, #16]
 8008a5c:	4632      	mov	r2, r6
 8008a5e:	4649      	mov	r1, r9
 8008a60:	4640      	mov	r0, r8
 8008a62:	47d0      	blx	sl
 8008a64:	3001      	adds	r0, #1
 8008a66:	d0ad      	beq.n	80089c4 <_printf_i+0x15c>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	079b      	lsls	r3, r3, #30
 8008a6c:	d413      	bmi.n	8008a96 <_printf_i+0x22e>
 8008a6e:	68e0      	ldr	r0, [r4, #12]
 8008a70:	9b03      	ldr	r3, [sp, #12]
 8008a72:	4298      	cmp	r0, r3
 8008a74:	bfb8      	it	lt
 8008a76:	4618      	movlt	r0, r3
 8008a78:	e7a6      	b.n	80089c8 <_printf_i+0x160>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4632      	mov	r2, r6
 8008a7e:	4649      	mov	r1, r9
 8008a80:	4640      	mov	r0, r8
 8008a82:	47d0      	blx	sl
 8008a84:	3001      	adds	r0, #1
 8008a86:	d09d      	beq.n	80089c4 <_printf_i+0x15c>
 8008a88:	3501      	adds	r5, #1
 8008a8a:	68e3      	ldr	r3, [r4, #12]
 8008a8c:	9903      	ldr	r1, [sp, #12]
 8008a8e:	1a5b      	subs	r3, r3, r1
 8008a90:	42ab      	cmp	r3, r5
 8008a92:	dcf2      	bgt.n	8008a7a <_printf_i+0x212>
 8008a94:	e7eb      	b.n	8008a6e <_printf_i+0x206>
 8008a96:	2500      	movs	r5, #0
 8008a98:	f104 0619 	add.w	r6, r4, #25
 8008a9c:	e7f5      	b.n	8008a8a <_printf_i+0x222>
 8008a9e:	bf00      	nop
 8008aa0:	08009141 	.word	0x08009141
 8008aa4:	08009152 	.word	0x08009152

08008aa8 <__sflush_r>:
 8008aa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab0:	0716      	lsls	r6, r2, #28
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	d454      	bmi.n	8008b62 <__sflush_r+0xba>
 8008ab8:	684b      	ldr	r3, [r1, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	dc02      	bgt.n	8008ac4 <__sflush_r+0x1c>
 8008abe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	dd48      	ble.n	8008b56 <__sflush_r+0xae>
 8008ac4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ac6:	2e00      	cmp	r6, #0
 8008ac8:	d045      	beq.n	8008b56 <__sflush_r+0xae>
 8008aca:	2300      	movs	r3, #0
 8008acc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ad0:	682f      	ldr	r7, [r5, #0]
 8008ad2:	6a21      	ldr	r1, [r4, #32]
 8008ad4:	602b      	str	r3, [r5, #0]
 8008ad6:	d030      	beq.n	8008b3a <__sflush_r+0x92>
 8008ad8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	0759      	lsls	r1, r3, #29
 8008ade:	d505      	bpl.n	8008aec <__sflush_r+0x44>
 8008ae0:	6863      	ldr	r3, [r4, #4]
 8008ae2:	1ad2      	subs	r2, r2, r3
 8008ae4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ae6:	b10b      	cbz	r3, 8008aec <__sflush_r+0x44>
 8008ae8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008aea:	1ad2      	subs	r2, r2, r3
 8008aec:	2300      	movs	r3, #0
 8008aee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008af0:	6a21      	ldr	r1, [r4, #32]
 8008af2:	4628      	mov	r0, r5
 8008af4:	47b0      	blx	r6
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	d106      	bne.n	8008b0a <__sflush_r+0x62>
 8008afc:	6829      	ldr	r1, [r5, #0]
 8008afe:	291d      	cmp	r1, #29
 8008b00:	d82b      	bhi.n	8008b5a <__sflush_r+0xb2>
 8008b02:	4a2a      	ldr	r2, [pc, #168]	@ (8008bac <__sflush_r+0x104>)
 8008b04:	410a      	asrs	r2, r1
 8008b06:	07d6      	lsls	r6, r2, #31
 8008b08:	d427      	bmi.n	8008b5a <__sflush_r+0xb2>
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	6062      	str	r2, [r4, #4]
 8008b0e:	04d9      	lsls	r1, r3, #19
 8008b10:	6922      	ldr	r2, [r4, #16]
 8008b12:	6022      	str	r2, [r4, #0]
 8008b14:	d504      	bpl.n	8008b20 <__sflush_r+0x78>
 8008b16:	1c42      	adds	r2, r0, #1
 8008b18:	d101      	bne.n	8008b1e <__sflush_r+0x76>
 8008b1a:	682b      	ldr	r3, [r5, #0]
 8008b1c:	b903      	cbnz	r3, 8008b20 <__sflush_r+0x78>
 8008b1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b22:	602f      	str	r7, [r5, #0]
 8008b24:	b1b9      	cbz	r1, 8008b56 <__sflush_r+0xae>
 8008b26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b2a:	4299      	cmp	r1, r3
 8008b2c:	d002      	beq.n	8008b34 <__sflush_r+0x8c>
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f7ff fa9a 	bl	8008068 <_free_r>
 8008b34:	2300      	movs	r3, #0
 8008b36:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b38:	e00d      	b.n	8008b56 <__sflush_r+0xae>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	47b0      	blx	r6
 8008b40:	4602      	mov	r2, r0
 8008b42:	1c50      	adds	r0, r2, #1
 8008b44:	d1c9      	bne.n	8008ada <__sflush_r+0x32>
 8008b46:	682b      	ldr	r3, [r5, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d0c6      	beq.n	8008ada <__sflush_r+0x32>
 8008b4c:	2b1d      	cmp	r3, #29
 8008b4e:	d001      	beq.n	8008b54 <__sflush_r+0xac>
 8008b50:	2b16      	cmp	r3, #22
 8008b52:	d11e      	bne.n	8008b92 <__sflush_r+0xea>
 8008b54:	602f      	str	r7, [r5, #0]
 8008b56:	2000      	movs	r0, #0
 8008b58:	e022      	b.n	8008ba0 <__sflush_r+0xf8>
 8008b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b5e:	b21b      	sxth	r3, r3
 8008b60:	e01b      	b.n	8008b9a <__sflush_r+0xf2>
 8008b62:	690f      	ldr	r7, [r1, #16]
 8008b64:	2f00      	cmp	r7, #0
 8008b66:	d0f6      	beq.n	8008b56 <__sflush_r+0xae>
 8008b68:	0793      	lsls	r3, r2, #30
 8008b6a:	680e      	ldr	r6, [r1, #0]
 8008b6c:	bf08      	it	eq
 8008b6e:	694b      	ldreq	r3, [r1, #20]
 8008b70:	600f      	str	r7, [r1, #0]
 8008b72:	bf18      	it	ne
 8008b74:	2300      	movne	r3, #0
 8008b76:	eba6 0807 	sub.w	r8, r6, r7
 8008b7a:	608b      	str	r3, [r1, #8]
 8008b7c:	f1b8 0f00 	cmp.w	r8, #0
 8008b80:	dde9      	ble.n	8008b56 <__sflush_r+0xae>
 8008b82:	6a21      	ldr	r1, [r4, #32]
 8008b84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008b86:	4643      	mov	r3, r8
 8008b88:	463a      	mov	r2, r7
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	47b0      	blx	r6
 8008b8e:	2800      	cmp	r0, #0
 8008b90:	dc08      	bgt.n	8008ba4 <__sflush_r+0xfc>
 8008b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba4:	4407      	add	r7, r0
 8008ba6:	eba8 0800 	sub.w	r8, r8, r0
 8008baa:	e7e7      	b.n	8008b7c <__sflush_r+0xd4>
 8008bac:	dfbffffe 	.word	0xdfbffffe

08008bb0 <_fflush_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	690b      	ldr	r3, [r1, #16]
 8008bb4:	4605      	mov	r5, r0
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	b913      	cbnz	r3, 8008bc0 <_fflush_r+0x10>
 8008bba:	2500      	movs	r5, #0
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	b118      	cbz	r0, 8008bca <_fflush_r+0x1a>
 8008bc2:	6a03      	ldr	r3, [r0, #32]
 8008bc4:	b90b      	cbnz	r3, 8008bca <_fflush_r+0x1a>
 8008bc6:	f7ff f8c3 	bl	8007d50 <__sinit>
 8008bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d0f3      	beq.n	8008bba <_fflush_r+0xa>
 8008bd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008bd4:	07d0      	lsls	r0, r2, #31
 8008bd6:	d404      	bmi.n	8008be2 <_fflush_r+0x32>
 8008bd8:	0599      	lsls	r1, r3, #22
 8008bda:	d402      	bmi.n	8008be2 <_fflush_r+0x32>
 8008bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bde:	f7ff fa32 	bl	8008046 <__retarget_lock_acquire_recursive>
 8008be2:	4628      	mov	r0, r5
 8008be4:	4621      	mov	r1, r4
 8008be6:	f7ff ff5f 	bl	8008aa8 <__sflush_r>
 8008bea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008bec:	07da      	lsls	r2, r3, #31
 8008bee:	4605      	mov	r5, r0
 8008bf0:	d4e4      	bmi.n	8008bbc <_fflush_r+0xc>
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	059b      	lsls	r3, r3, #22
 8008bf6:	d4e1      	bmi.n	8008bbc <_fflush_r+0xc>
 8008bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008bfa:	f7ff fa25 	bl	8008048 <__retarget_lock_release_recursive>
 8008bfe:	e7dd      	b.n	8008bbc <_fflush_r+0xc>

08008c00 <__swbuf_r>:
 8008c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c02:	460e      	mov	r6, r1
 8008c04:	4614      	mov	r4, r2
 8008c06:	4605      	mov	r5, r0
 8008c08:	b118      	cbz	r0, 8008c12 <__swbuf_r+0x12>
 8008c0a:	6a03      	ldr	r3, [r0, #32]
 8008c0c:	b90b      	cbnz	r3, 8008c12 <__swbuf_r+0x12>
 8008c0e:	f7ff f89f 	bl	8007d50 <__sinit>
 8008c12:	69a3      	ldr	r3, [r4, #24]
 8008c14:	60a3      	str	r3, [r4, #8]
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	071a      	lsls	r2, r3, #28
 8008c1a:	d501      	bpl.n	8008c20 <__swbuf_r+0x20>
 8008c1c:	6923      	ldr	r3, [r4, #16]
 8008c1e:	b943      	cbnz	r3, 8008c32 <__swbuf_r+0x32>
 8008c20:	4621      	mov	r1, r4
 8008c22:	4628      	mov	r0, r5
 8008c24:	f000 f82a 	bl	8008c7c <__swsetup_r>
 8008c28:	b118      	cbz	r0, 8008c32 <__swbuf_r+0x32>
 8008c2a:	f04f 37ff 	mov.w	r7, #4294967295
 8008c2e:	4638      	mov	r0, r7
 8008c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	6922      	ldr	r2, [r4, #16]
 8008c36:	1a98      	subs	r0, r3, r2
 8008c38:	6963      	ldr	r3, [r4, #20]
 8008c3a:	b2f6      	uxtb	r6, r6
 8008c3c:	4283      	cmp	r3, r0
 8008c3e:	4637      	mov	r7, r6
 8008c40:	dc05      	bgt.n	8008c4e <__swbuf_r+0x4e>
 8008c42:	4621      	mov	r1, r4
 8008c44:	4628      	mov	r0, r5
 8008c46:	f7ff ffb3 	bl	8008bb0 <_fflush_r>
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d1ed      	bne.n	8008c2a <__swbuf_r+0x2a>
 8008c4e:	68a3      	ldr	r3, [r4, #8]
 8008c50:	3b01      	subs	r3, #1
 8008c52:	60a3      	str	r3, [r4, #8]
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	6022      	str	r2, [r4, #0]
 8008c5a:	701e      	strb	r6, [r3, #0]
 8008c5c:	6962      	ldr	r2, [r4, #20]
 8008c5e:	1c43      	adds	r3, r0, #1
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d004      	beq.n	8008c6e <__swbuf_r+0x6e>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	07db      	lsls	r3, r3, #31
 8008c68:	d5e1      	bpl.n	8008c2e <__swbuf_r+0x2e>
 8008c6a:	2e0a      	cmp	r6, #10
 8008c6c:	d1df      	bne.n	8008c2e <__swbuf_r+0x2e>
 8008c6e:	4621      	mov	r1, r4
 8008c70:	4628      	mov	r0, r5
 8008c72:	f7ff ff9d 	bl	8008bb0 <_fflush_r>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	d0d9      	beq.n	8008c2e <__swbuf_r+0x2e>
 8008c7a:	e7d6      	b.n	8008c2a <__swbuf_r+0x2a>

08008c7c <__swsetup_r>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	4b29      	ldr	r3, [pc, #164]	@ (8008d24 <__swsetup_r+0xa8>)
 8008c80:	4605      	mov	r5, r0
 8008c82:	6818      	ldr	r0, [r3, #0]
 8008c84:	460c      	mov	r4, r1
 8008c86:	b118      	cbz	r0, 8008c90 <__swsetup_r+0x14>
 8008c88:	6a03      	ldr	r3, [r0, #32]
 8008c8a:	b90b      	cbnz	r3, 8008c90 <__swsetup_r+0x14>
 8008c8c:	f7ff f860 	bl	8007d50 <__sinit>
 8008c90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c94:	0719      	lsls	r1, r3, #28
 8008c96:	d422      	bmi.n	8008cde <__swsetup_r+0x62>
 8008c98:	06da      	lsls	r2, r3, #27
 8008c9a:	d407      	bmi.n	8008cac <__swsetup_r+0x30>
 8008c9c:	2209      	movs	r2, #9
 8008c9e:	602a      	str	r2, [r5, #0]
 8008ca0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ca4:	81a3      	strh	r3, [r4, #12]
 8008ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8008caa:	e033      	b.n	8008d14 <__swsetup_r+0x98>
 8008cac:	0758      	lsls	r0, r3, #29
 8008cae:	d512      	bpl.n	8008cd6 <__swsetup_r+0x5a>
 8008cb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cb2:	b141      	cbz	r1, 8008cc6 <__swsetup_r+0x4a>
 8008cb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cb8:	4299      	cmp	r1, r3
 8008cba:	d002      	beq.n	8008cc2 <__swsetup_r+0x46>
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	f7ff f9d3 	bl	8008068 <_free_r>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cc6:	89a3      	ldrh	r3, [r4, #12]
 8008cc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ccc:	81a3      	strh	r3, [r4, #12]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	6063      	str	r3, [r4, #4]
 8008cd2:	6923      	ldr	r3, [r4, #16]
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	89a3      	ldrh	r3, [r4, #12]
 8008cd8:	f043 0308 	orr.w	r3, r3, #8
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	6923      	ldr	r3, [r4, #16]
 8008ce0:	b94b      	cbnz	r3, 8008cf6 <__swsetup_r+0x7a>
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ce8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cec:	d003      	beq.n	8008cf6 <__swsetup_r+0x7a>
 8008cee:	4621      	mov	r1, r4
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	f000 f897 	bl	8008e24 <__smakebuf_r>
 8008cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cfa:	f013 0201 	ands.w	r2, r3, #1
 8008cfe:	d00a      	beq.n	8008d16 <__swsetup_r+0x9a>
 8008d00:	2200      	movs	r2, #0
 8008d02:	60a2      	str	r2, [r4, #8]
 8008d04:	6962      	ldr	r2, [r4, #20]
 8008d06:	4252      	negs	r2, r2
 8008d08:	61a2      	str	r2, [r4, #24]
 8008d0a:	6922      	ldr	r2, [r4, #16]
 8008d0c:	b942      	cbnz	r2, 8008d20 <__swsetup_r+0xa4>
 8008d0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d12:	d1c5      	bne.n	8008ca0 <__swsetup_r+0x24>
 8008d14:	bd38      	pop	{r3, r4, r5, pc}
 8008d16:	0799      	lsls	r1, r3, #30
 8008d18:	bf58      	it	pl
 8008d1a:	6962      	ldrpl	r2, [r4, #20]
 8008d1c:	60a2      	str	r2, [r4, #8]
 8008d1e:	e7f4      	b.n	8008d0a <__swsetup_r+0x8e>
 8008d20:	2000      	movs	r0, #0
 8008d22:	e7f7      	b.n	8008d14 <__swsetup_r+0x98>
 8008d24:	20000068 	.word	0x20000068

08008d28 <memmove>:
 8008d28:	4288      	cmp	r0, r1
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	eb01 0402 	add.w	r4, r1, r2
 8008d30:	d902      	bls.n	8008d38 <memmove+0x10>
 8008d32:	4284      	cmp	r4, r0
 8008d34:	4623      	mov	r3, r4
 8008d36:	d807      	bhi.n	8008d48 <memmove+0x20>
 8008d38:	1e43      	subs	r3, r0, #1
 8008d3a:	42a1      	cmp	r1, r4
 8008d3c:	d008      	beq.n	8008d50 <memmove+0x28>
 8008d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d46:	e7f8      	b.n	8008d3a <memmove+0x12>
 8008d48:	4402      	add	r2, r0
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	428a      	cmp	r2, r1
 8008d4e:	d100      	bne.n	8008d52 <memmove+0x2a>
 8008d50:	bd10      	pop	{r4, pc}
 8008d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d5a:	e7f7      	b.n	8008d4c <memmove+0x24>

08008d5c <_sbrk_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4d06      	ldr	r5, [pc, #24]	@ (8008d78 <_sbrk_r+0x1c>)
 8008d60:	2300      	movs	r3, #0
 8008d62:	4604      	mov	r4, r0
 8008d64:	4608      	mov	r0, r1
 8008d66:	602b      	str	r3, [r5, #0]
 8008d68:	f7f9 f91a 	bl	8001fa0 <_sbrk>
 8008d6c:	1c43      	adds	r3, r0, #1
 8008d6e:	d102      	bne.n	8008d76 <_sbrk_r+0x1a>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	b103      	cbz	r3, 8008d76 <_sbrk_r+0x1a>
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	bd38      	pop	{r3, r4, r5, pc}
 8008d78:	200050cc 	.word	0x200050cc

08008d7c <_realloc_r>:
 8008d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d80:	4680      	mov	r8, r0
 8008d82:	4615      	mov	r5, r2
 8008d84:	460c      	mov	r4, r1
 8008d86:	b921      	cbnz	r1, 8008d92 <_realloc_r+0x16>
 8008d88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8c:	4611      	mov	r1, r2
 8008d8e:	f7ff b9d7 	b.w	8008140 <_malloc_r>
 8008d92:	b92a      	cbnz	r2, 8008da0 <_realloc_r+0x24>
 8008d94:	f7ff f968 	bl	8008068 <_free_r>
 8008d98:	2400      	movs	r4, #0
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008da0:	f000 f89e 	bl	8008ee0 <_malloc_usable_size_r>
 8008da4:	4285      	cmp	r5, r0
 8008da6:	4606      	mov	r6, r0
 8008da8:	d802      	bhi.n	8008db0 <_realloc_r+0x34>
 8008daa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008dae:	d8f4      	bhi.n	8008d9a <_realloc_r+0x1e>
 8008db0:	4629      	mov	r1, r5
 8008db2:	4640      	mov	r0, r8
 8008db4:	f7ff f9c4 	bl	8008140 <_malloc_r>
 8008db8:	4607      	mov	r7, r0
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	d0ec      	beq.n	8008d98 <_realloc_r+0x1c>
 8008dbe:	42b5      	cmp	r5, r6
 8008dc0:	462a      	mov	r2, r5
 8008dc2:	4621      	mov	r1, r4
 8008dc4:	bf28      	it	cs
 8008dc6:	4632      	movcs	r2, r6
 8008dc8:	f7ff f93f 	bl	800804a <memcpy>
 8008dcc:	4621      	mov	r1, r4
 8008dce:	4640      	mov	r0, r8
 8008dd0:	f7ff f94a 	bl	8008068 <_free_r>
 8008dd4:	463c      	mov	r4, r7
 8008dd6:	e7e0      	b.n	8008d9a <_realloc_r+0x1e>

08008dd8 <__swhatbuf_r>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	460c      	mov	r4, r1
 8008ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008de0:	2900      	cmp	r1, #0
 8008de2:	b096      	sub	sp, #88	@ 0x58
 8008de4:	4615      	mov	r5, r2
 8008de6:	461e      	mov	r6, r3
 8008de8:	da0d      	bge.n	8008e06 <__swhatbuf_r+0x2e>
 8008dea:	89a3      	ldrh	r3, [r4, #12]
 8008dec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008df0:	f04f 0100 	mov.w	r1, #0
 8008df4:	bf14      	ite	ne
 8008df6:	2340      	movne	r3, #64	@ 0x40
 8008df8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	6031      	str	r1, [r6, #0]
 8008e00:	602b      	str	r3, [r5, #0]
 8008e02:	b016      	add	sp, #88	@ 0x58
 8008e04:	bd70      	pop	{r4, r5, r6, pc}
 8008e06:	466a      	mov	r2, sp
 8008e08:	f000 f848 	bl	8008e9c <_fstat_r>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	dbec      	blt.n	8008dea <__swhatbuf_r+0x12>
 8008e10:	9901      	ldr	r1, [sp, #4]
 8008e12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e1a:	4259      	negs	r1, r3
 8008e1c:	4159      	adcs	r1, r3
 8008e1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e22:	e7eb      	b.n	8008dfc <__swhatbuf_r+0x24>

08008e24 <__smakebuf_r>:
 8008e24:	898b      	ldrh	r3, [r1, #12]
 8008e26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e28:	079d      	lsls	r5, r3, #30
 8008e2a:	4606      	mov	r6, r0
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	d507      	bpl.n	8008e40 <__smakebuf_r+0x1c>
 8008e30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	6123      	str	r3, [r4, #16]
 8008e38:	2301      	movs	r3, #1
 8008e3a:	6163      	str	r3, [r4, #20]
 8008e3c:	b003      	add	sp, #12
 8008e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e40:	ab01      	add	r3, sp, #4
 8008e42:	466a      	mov	r2, sp
 8008e44:	f7ff ffc8 	bl	8008dd8 <__swhatbuf_r>
 8008e48:	9f00      	ldr	r7, [sp, #0]
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	4630      	mov	r0, r6
 8008e50:	f7ff f976 	bl	8008140 <_malloc_r>
 8008e54:	b948      	cbnz	r0, 8008e6a <__smakebuf_r+0x46>
 8008e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e5a:	059a      	lsls	r2, r3, #22
 8008e5c:	d4ee      	bmi.n	8008e3c <__smakebuf_r+0x18>
 8008e5e:	f023 0303 	bic.w	r3, r3, #3
 8008e62:	f043 0302 	orr.w	r3, r3, #2
 8008e66:	81a3      	strh	r3, [r4, #12]
 8008e68:	e7e2      	b.n	8008e30 <__smakebuf_r+0xc>
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	6020      	str	r0, [r4, #0]
 8008e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	9b01      	ldr	r3, [sp, #4]
 8008e76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e7a:	b15b      	cbz	r3, 8008e94 <__smakebuf_r+0x70>
 8008e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e80:	4630      	mov	r0, r6
 8008e82:	f000 f81d 	bl	8008ec0 <_isatty_r>
 8008e86:	b128      	cbz	r0, 8008e94 <__smakebuf_r+0x70>
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	f023 0303 	bic.w	r3, r3, #3
 8008e8e:	f043 0301 	orr.w	r3, r3, #1
 8008e92:	81a3      	strh	r3, [r4, #12]
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	431d      	orrs	r5, r3
 8008e98:	81a5      	strh	r5, [r4, #12]
 8008e9a:	e7cf      	b.n	8008e3c <__smakebuf_r+0x18>

08008e9c <_fstat_r>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4d07      	ldr	r5, [pc, #28]	@ (8008ebc <_fstat_r+0x20>)
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	4608      	mov	r0, r1
 8008ea6:	4611      	mov	r1, r2
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	f7f9 f850 	bl	8001f4e <_fstat>
 8008eae:	1c43      	adds	r3, r0, #1
 8008eb0:	d102      	bne.n	8008eb8 <_fstat_r+0x1c>
 8008eb2:	682b      	ldr	r3, [r5, #0]
 8008eb4:	b103      	cbz	r3, 8008eb8 <_fstat_r+0x1c>
 8008eb6:	6023      	str	r3, [r4, #0]
 8008eb8:	bd38      	pop	{r3, r4, r5, pc}
 8008eba:	bf00      	nop
 8008ebc:	200050cc 	.word	0x200050cc

08008ec0 <_isatty_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d06      	ldr	r5, [pc, #24]	@ (8008edc <_isatty_r+0x1c>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	602b      	str	r3, [r5, #0]
 8008ecc:	f7f9 f84f 	bl	8001f6e <_isatty>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_isatty_r+0x1a>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_isatty_r+0x1a>
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	200050cc 	.word	0x200050cc

08008ee0 <_malloc_usable_size_r>:
 8008ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ee4:	1f18      	subs	r0, r3, #4
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	bfbc      	itt	lt
 8008eea:	580b      	ldrlt	r3, [r1, r0]
 8008eec:	18c0      	addlt	r0, r0, r3
 8008eee:	4770      	bx	lr

08008ef0 <_init>:
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	bf00      	nop
 8008ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ef6:	bc08      	pop	{r3}
 8008ef8:	469e      	mov	lr, r3
 8008efa:	4770      	bx	lr

08008efc <_fini>:
 8008efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efe:	bf00      	nop
 8008f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f02:	bc08      	pop	{r3}
 8008f04:	469e      	mov	lr, r3
 8008f06:	4770      	bx	lr

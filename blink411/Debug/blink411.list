
blink411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08009550  08009550  0000a550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097a4  080097a4  0000b070  2**0
                  CONTENTS
  4 .ARM          00000008  080097a4  080097a4  0000a7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097ac  080097ac  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097ac  080097ac  0000a7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080097b0  080097b0  0000a7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080097b4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fb0  20000070  08009824  0000b070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005020  08009824  0000c020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0e8  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e44  00000000  00000000  00028188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018c0  00000000  00000000  0002bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001340  00000000  00000000  0002d890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054cd  00000000  00000000  0002ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c04e  00000000  00000000  0003409d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a99c4  00000000  00000000  000500eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f9aaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007200  00000000  00000000  000f9af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000031  00000000  00000000  00100cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009538 	.word	0x08009538

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08009538 	.word	0x08009538

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f001 ff6c 	bl	8002460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f82a 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f944 	bl	8000818 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000590:	f000 f8e2 	bl	8000758 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000594:	f000 f916 	bl	80007c4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000598:	f000 f88c 	bl	80006b4 <MX_ADC1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059c:	f005 f870 	bl	8005680 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskADC */
  TaskADCHandle = osThreadNew(StartTaskADC, NULL, &TaskADC_attributes);
 80005a0:	4a09      	ldr	r2, [pc, #36]	@ (80005c8 <main+0x48>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4809      	ldr	r0, [pc, #36]	@ (80005cc <main+0x4c>)
 80005a6:	f005 f8b5 	bl	8005714 <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a08      	ldr	r2, [pc, #32]	@ (80005d0 <main+0x50>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* creation of TaskSPI */
  TaskSPIHandle = osThreadNew(StartTaskSPI, NULL, &TaskSPI_attributes);
 80005b0:	4a08      	ldr	r2, [pc, #32]	@ (80005d4 <main+0x54>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <main+0x58>)
 80005b6:	f005 f8ad 	bl	8005714 <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <main+0x5c>)
 80005be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c0:	f005 f882 	bl	80056c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c4:	bf00      	nop
 80005c6:	e7fd      	b.n	80005c4 <main+0x44>
 80005c8:	08009710 	.word	0x08009710
 80005cc:	08000b35 	.word	0x08000b35
 80005d0:	20000174 	.word	0x20000174
 80005d4:	08009734 	.word	0x08009734
 80005d8:	08000fcd 	.word	0x08000fcd
 80005dc:	20000178 	.word	0x20000178

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	@ 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f007 ff59 	bl	80084a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b28      	ldr	r3, [pc, #160]	@ (80006ac <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	4a27      	ldr	r2, [pc, #156]	@ (80006ac <SystemClock_Config+0xcc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	@ 0x40
 8000614:	4b25      	ldr	r3, [pc, #148]	@ (80006ac <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a21      	ldr	r2, [pc, #132]	@ (80006b0 <SystemClock_Config+0xd0>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2302      	movs	r3, #2
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000644:	2310      	movs	r3, #16
 8000646:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000648:	2302      	movs	r3, #2
 800064a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000650:	2310      	movs	r3, #16
 8000652:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000654:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000658:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800065a:	2304      	movs	r3, #4
 800065c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800065e:	2304      	movs	r3, #4
 8000660:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fe0c 	bl	8003284 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000672:	f000 fdab 	bl	80011cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000682:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000688:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2102      	movs	r1, #2
 8000694:	4618      	mov	r0, r3
 8000696:	f003 f86d 	bl	8003774 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a0:	f000 fd94 	bl	80011cc <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	@ 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	463b      	mov	r3, r7
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006c6:	4b21      	ldr	r3, [pc, #132]	@ (800074c <MX_ADC1_Init+0x98>)
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <MX_ADC1_Init+0x9c>)
 80006ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <MX_ADC1_Init+0x98>)
 80006ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	@ (800074c <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006da:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	@ (800074c <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_ADC1_Init+0x98>)
 80006f6:	4a17      	ldr	r2, [pc, #92]	@ (8000754 <MX_ADC1_Init+0xa0>)
 80006f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_ADC1_Init+0x98>)
 8000702:	2201      	movs	r2, #1
 8000704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_ADC1_Init+0x98>)
 8000710:	2201      	movs	r2, #1
 8000712:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000714:	480d      	ldr	r0, [pc, #52]	@ (800074c <MX_ADC1_Init+0x98>)
 8000716:	f001 ff09 	bl	800252c <HAL_ADC_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000720:	f000 fd54 	bl	80011cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000724:	2300      	movs	r3, #0
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_ADC1_Init+0x98>)
 8000736:	f002 f8bd 	bl	80028b4 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000740:	f000 fd44 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000008c 	.word	0x2000008c
 8000750:	40012000 	.word	0x40012000
 8000754:	0f000001 	.word	0x0f000001

08000758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800075c:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_SPI1_Init+0x64>)
 800075e:	4a18      	ldr	r2, [pc, #96]	@ (80007c0 <MX_SPI1_Init+0x68>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000764:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_SPI1_Init+0x64>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_SPI1_Init+0x64>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000788:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800078a:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_SPI1_Init+0x64>)
 800078c:	2208      	movs	r2, #8
 800078e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000790:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000796:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_SPI1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079c:	4b07      	ldr	r3, [pc, #28]	@ (80007bc <MX_SPI1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007a2:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_SPI1_Init+0x64>)
 80007a4:	220a      	movs	r2, #10
 80007a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_SPI1_Init+0x64>)
 80007aa:	f003 f9f5 	bl	8003b98 <HAL_SPI_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007b4:	f000 fd0a 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000d4 	.word	0x200000d4
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c8:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <MX_USART1_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	@ (8000814 <MX_USART1_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <MX_USART1_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <MX_USART1_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX_USART1_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <MX_USART1_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX_USART1_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <MX_USART1_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_USART1_UART_Init+0x4c>)
 80007fc:	f004 faf0 	bl	8004de0 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f000 fce1 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  
  /* USER CODE END USART1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000012c 	.word	0x2000012c
 8000814:	40011000 	.word	0x40011000

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	4b31      	ldr	r3, [pc, #196]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a30      	ldr	r2, [pc, #192]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b2e      	ldr	r3, [pc, #184]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b2a      	ldr	r3, [pc, #168]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a29      	ldr	r2, [pc, #164]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b23      	ldr	r3, [pc, #140]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a22      	ldr	r2, [pc, #136]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b20      	ldr	r3, [pc, #128]	@ (80008f8 <MX_GPIO_Init+0xe0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedOnBoard_GPIO_Port, LedOnBoard_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000888:	481c      	ldr	r0, [pc, #112]	@ (80008fc <MX_GPIO_Init+0xe4>)
 800088a:	f002 fce1 	bl	8003250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000894:	481a      	ldr	r0, [pc, #104]	@ (8000900 <MX_GPIO_Init+0xe8>)
 8000896:	f002 fcdb 	bl	8003250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedOnBoard_Pin */
  GPIO_InitStruct.Pin = LedOnBoard_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LedOnBoard_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4619      	mov	r1, r3
 80008b2:	4812      	ldr	r0, [pc, #72]	@ (80008fc <MX_GPIO_Init+0xe4>)
 80008b4:	f002 fb30 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80008b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	4619      	mov	r1, r3
 80008d0:	480b      	ldr	r0, [pc, #44]	@ (8000900 <MX_GPIO_Init+0xe8>)
 80008d2:	f002 fb21 	bl	8002f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_INT_Pin */
  GPIO_InitStruct.Pin = MCP2515_INT_Pin;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MCP2515_INT_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_GPIO_Init+0xe8>)
 80008ea:	f002 fb15 	bl	8002f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020800 	.word	0x40020800
 8000900:	40020400 	.word	0x40020400

08000904 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    // Verifica che questo callback sia per il tuo hspi
    if (hspi == &hspi1) {
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a06      	ldr	r2, [pc, #24]	@ (8000928 <HAL_SPI_TxCpltCallback+0x24>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d102      	bne.n	800091a <HAL_SPI_TxCpltCallback+0x16>
        //MCP2515_SetTransmissionComplete(&mcp2515_1, 1);
    	mcp2515_1.transmissionComplete = true;
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <HAL_SPI_TxCpltCallback+0x28>)
 8000916:	2201      	movs	r2, #1
 8000918:	731a      	strb	r2, [r3, #12]
        //BaseType_t xHigherPriorityTaskWoken = pdFALSE;
        //vTaskNotifyGiveFromISR(xTaskHandleSPI, &xHigherPriorityTaskWoken);
        //portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    }
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	200000d4 	.word	0x200000d4
 800092c:	2000017c 	.word	0x2000017c

08000930 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a06      	ldr	r2, [pc, #24]	@ (8000954 <HAL_SPI_RxCpltCallback+0x24>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d102      	bne.n	8000946 <HAL_SPI_RxCpltCallback+0x16>
    	//MCP2515_SetTransmissionComplete(&mcp2515_1, 1);
    	mcp2515_1.transmissionComplete = true;
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <HAL_SPI_RxCpltCallback+0x28>)
 8000942:	2201      	movs	r2, #1
 8000944:	731a      	strb	r2, [r3, #12]
    }
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	200000d4 	.word	0x200000d4
 8000958:	2000017c 	.word	0x2000017c

0800095c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a06      	ldr	r2, [pc, #24]	@ (8000980 <HAL_SPI_TxRxCpltCallback+0x24>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d102      	bne.n	8000972 <HAL_SPI_TxRxCpltCallback+0x16>
    	//MCP2515_SetTransmissionComplete(&mcp2515_1, 1);
    	mcp2515_1.transmissionComplete = true;
 800096c:	4b05      	ldr	r3, [pc, #20]	@ (8000984 <HAL_SPI_TxRxCpltCallback+0x28>)
 800096e:	2201      	movs	r2, #1
 8000970:	731a      	strb	r2, [r3, #12]
    }
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	200000d4 	.word	0x200000d4
 8000984:	2000017c 	.word	0x2000017c

08000988 <__io_putchar>:
        HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);*/
    //}
//}


int __io_putchar(int ch) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    // Invia il carattere tramite USART (ad esempio huart1)
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000990:	1d39      	adds	r1, r7, #4
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	2201      	movs	r2, #1
 8000998:	4803      	ldr	r0, [pc, #12]	@ (80009a8 <__io_putchar+0x20>)
 800099a:	f004 fa71 	bl	8004e80 <HAL_UART_Transmit>
    return ch;
 800099e:	687b      	ldr	r3, [r7, #4]
  }
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000012c 	.word	0x2000012c

080009ac <_write>:

  int _write(int file, char *ptr, int len) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
      for (int i = 0; i < len; i++) {
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e009      	b.n	80009d2 <_write+0x26>
          __io_putchar(*ptr++);
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	60ba      	str	r2, [r7, #8]
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ffde 	bl	8000988 <__io_putchar>
      for (int i = 0; i < len; i++) {
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	3301      	adds	r3, #1
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	697a      	ldr	r2, [r7, #20]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	dbf1      	blt.n	80009be <_write+0x12>
      }
      return len;
 80009da:	687b      	ldr	r3, [r7, #4]
  }
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <canMsgTx>:

    /* uso
    int arraySize = sizeof(writeMessage) / sizeof(writeMessage[0]);
    printByteArray(writeMessage, arraySize);*/
}
void canMsgTx(canMessage* messageToSend, MCP2515_canMessage* messageBuffer){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]

	uint8_t msgId_bf[4];

	if (messageToSend->extended){
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	7b5b      	ldrb	r3, [r3, #13]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d025      	beq.n	8000a42 <canMsgTx+0x5e>
		  msgId_bf[0] = (messageToSend->msgID >> 3) & 0xFF;  // Estrai il byte alto (MSB)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	733b      	strb	r3, [r7, #12]
		  msgId_bf[1] = (messageToSend->msgID << 5) & 0xE0;         // Estrai il byte basso (LSB)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	015b      	lsls	r3, r3, #5
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	737b      	strb	r3, [r7, #13]
		  msgId_bf[1] = msgId_bf[1] | 8;
 8000a0c:	7b7b      	ldrb	r3, [r7, #13]
 8000a0e:	f043 0308 	orr.w	r3, r3, #8
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	737b      	strb	r3, [r7, #13]
		  msgId_bf[1] = msgId_bf[1] | ((messageToSend->msgID >> 28) & 0x02);
 8000a16:	7b7a      	ldrb	r2, [r7, #13]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	0f1b      	lsrs	r3, r3, #28
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	4313      	orrs	r3, r2
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	737b      	strb	r3, [r7, #13]
		  msgId_bf[2] = (messageToSend->msgID >> 19) & 0xFF;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	0cdb      	lsrs	r3, r3, #19
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	73bb      	strb	r3, [r7, #14]
		  msgId_bf[3] = (messageToSend->msgID >> 11) & 0xFF;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	0adb      	lsrs	r3, r3, #11
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	e00e      	b.n	8000a60 <canMsgTx+0x7c>

	  } else{

		msgId_bf[0] = (messageToSend->msgID >> 3) & 0xFF;  // Estrai il byte alto (MSB)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	08db      	lsrs	r3, r3, #3
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	733b      	strb	r3, [r7, #12]
		msgId_bf[1] = (messageToSend->msgID << 5) & 0xE0;         // Estrai il byte basso (LSB)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	015b      	lsls	r3, r3, #5
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	737b      	strb	r3, [r7, #13]
		msgId_bf[2] = 0x00;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73bb      	strb	r3, [r7, #14]
		msgId_bf[3] = 0x00;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]
	  }


	  memcpy(messageBuffer->msgID, msgId_bf, sizeof(msgId_bf));
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	3308      	adds	r3, #8
 8000a64:	68fa      	ldr	r2, [r7, #12]
 8000a66:	601a      	str	r2, [r3, #0]
	  memcpy(messageBuffer->msgData, messageToSend->msgData, messageToSend->dlc);
 8000a68:	6838      	ldr	r0, [r7, #0]
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7b1b      	ldrb	r3, [r3, #12]
 8000a70:	461a      	mov	r2, r3
 8000a72:	f007 fdea 	bl	800864a <memcpy>
	  messageBuffer->dlc = messageToSend->dlc;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	7b1a      	ldrb	r2, [r3, #12]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	731a      	strb	r2, [r3, #12]
	  messageBuffer->newMsg = true;
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2201      	movs	r2, #1
 8000a82:	735a      	strb	r2, [r3, #13]



}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <Read_ADC_Polling>:


void Read_ADC_Polling(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig, uint32_t* value) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	60b9      	str	r1, [r7, #8]
 8000a96:	607a      	str	r2, [r7, #4]



        HAL_ADC_ConfigChannel(hadc, sConfig);
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f001 ff0a 	bl	80028b4 <HAL_ADC_ConfigChannel>

        // Avvia la conversione
        HAL_ADC_Start(hadc);
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f001 fd87 	bl	80025b4 <HAL_ADC_Start>

        // Aspetta che la conversione sia completata
        if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK) {
 8000aa6:	210a      	movs	r1, #10
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f001 fe6a 	bl	8002782 <HAL_ADC_PollForConversion>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d105      	bne.n	8000ac0 <Read_ADC_Polling+0x34>
            // Leggi il valore convertito
        	*value = HAL_ADC_GetValue(hadc);
 8000ab4:	68f8      	ldr	r0, [r7, #12]
 8000ab6:	f001 feef 	bl	8002898 <HAL_ADC_GetValue>
 8000aba:	4602      	mov	r2, r0
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	601a      	str	r2, [r3, #0]

        }


        // Ferma la conversione (opzionale, ma per sicurezza)
        HAL_ADC_Stop(hadc);
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	f001 fe2b 	bl	800271c <HAL_ADC_Stop>

}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <scaleValue>:

float scaleValue(float input, float min_input, float max_input, float min_output, float max_output) {
 8000ace:	b480      	push	{r7}
 8000ad0:	b089      	sub	sp, #36	@ 0x24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	ed87 0a05 	vstr	s0, [r7, #20]
 8000ad8:	edc7 0a04 	vstr	s1, [r7, #16]
 8000adc:	ed87 1a03 	vstr	s2, [r7, #12]
 8000ae0:	edc7 1a02 	vstr	s3, [r7, #8]
 8000ae4:	ed87 2a01 	vstr	s4, [r7, #4]
    // Mappatura lineare del valore di input all'intervallo di output
    float output = ((input - min_input) / (max_input - min_input)) * (max_output - min_output) + min_output;
 8000ae8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000aec:	edd7 7a04 	vldr	s15, [r7, #16]
 8000af0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000af4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000af8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000b04:	edd7 6a01 	vldr	s13, [r7, #4]
 8000b08:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b0c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b14:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b1c:	edc7 7a07 	vstr	s15, [r7, #28]
    return output;
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	ee07 3a90 	vmov	s15, r3
}
 8000b26:	eeb0 0a67 	vmov.f32	s0, s15
 8000b2a:	3724      	adds	r7, #36	@ 0x24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <StartTaskADC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void *argument)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0b4      	sub	sp, #208	@ 0xd0
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000b3c:	f005 ffb8 	bl	8006ab0 <xTaskGetTickCount>
 8000b40:	4603      	mov	r3, r0
 8000b42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	const TickType_t xFrequency = 5;
 8000b46:	2305      	movs	r3, #5
 8000b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4


	float min_input = 0.0;     // Minimo valore di tensione (0V)
 8000b4c:	f04f 0300 	mov.w	r3, #0
 8000b50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	float max_input = 4096;     // Massimo valore di tensione (5V)
 8000b54:	f04f 438b 	mov.w	r3, #1166016512	@ 0x45800000
 8000b58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	float min_output = 0.0;    // Minimo valore di dbar (0 dbar)
 8000b5c:	f04f 0300 	mov.w	r3, #0
 8000b60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	float max_output = 100.0;  // Massimo valore di dbar (100 dbar)
 8000b64:	4bb6      	ldr	r3, [pc, #728]	@ (8000e40 <StartTaskADC+0x30c>)
 8000b66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4


	uint32_t adcValues[8] = {0};
 8000b6a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000b6e:	2220      	movs	r2, #32
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f007 fc97 	bl	80084a6 <memset>
	uint32_t ui_pressureValue_dbar[8] = {0};
 8000b78:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f007 fc90 	bl	80084a6 <memset>
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
	canMessage canMessage[4] = {0};
 8000b94:	f107 0308 	add.w	r3, r7, #8
 8000b98:	2240      	movs	r2, #64	@ 0x40
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f007 fc82 	bl	80084a6 <memset>
	// start_time = HAL_GetTick();

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000ba2:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000ba6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8000baa:	4618      	mov	r0, r3
 8000bac:	f005 fde4 	bl	8006778 <vTaskDelayUntil>


	  //start_time = HAL_GetTick();  // Usa SysTick per ottenere il tempo attuale

	  if (result_mcp2515Init == MCP2515_OK &&
 8000bb0:	4ba4      	ldr	r3, [pc, #656]	@ (8000e44 <StartTaskADC+0x310>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1f4      	bne.n	8000ba2 <StartTaskADC+0x6e>
			spiInUse == false){
 8000bb8:	4ba3      	ldr	r3, [pc, #652]	@ (8000e48 <StartTaskADC+0x314>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	f083 0301 	eor.w	r3, r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
	  if (result_mcp2515Init == MCP2515_OK &&
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0ed      	beq.n	8000ba2 <StartTaskADC+0x6e>
			 //(xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE)) {
		  adcInUse = true;
 8000bc6:	4ba1      	ldr	r3, [pc, #644]	@ (8000e4c <StartTaskADC+0x318>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
		  // Esegui la lettura dei canali ADC
		  for (int i = 0; i < 8; i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000bd2:	e017      	b.n	8000c04 <StartTaskADC+0xd0>
		          // Seleziona il canale da leggere
		          sConfig.Channel = ADC_CHANNEL_0 + i;
 8000bd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
		          sConfig.Rank = 1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
		          sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000bde:	2302      	movs	r3, #2
 8000be0:	653b      	str	r3, [r7, #80]	@ 0x50
		          Read_ADC_Polling(&hadc1, &sConfig, &adcValues[i]);
 8000be2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8000be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	441a      	add	r2, r3
 8000bee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4896      	ldr	r0, [pc, #600]	@ (8000e50 <StartTaskADC+0x31c>)
 8000bf6:	f7ff ff49 	bl	8000a8c <Read_ADC_Polling>
		  for (int i = 0; i < 8; i++) {
 8000bfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000bfe:	3301      	adds	r3, #1
 8000c00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8000c04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000c08:	2b07      	cmp	r3, #7
 8000c0a:	dde3      	ble.n	8000bd4 <StartTaskADC+0xa0>

		  }

		  for (int i = 0; i < 8; i++) {
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000c12:	e053      	b.n	8000cbc <StartTaskADC+0x188>
			  float input = (float)adcValues[i];
 8000c14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	33d0      	adds	r3, #208	@ 0xd0
 8000c1c:	443b      	add	r3, r7
 8000c1e:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8000c22:	ee07 3a90 	vmov	s15, r3
 8000c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c2a:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
			  float outputDbar = scaleValue(input, min_input, max_input, min_output, max_output);
 8000c2e:	ed97 2a29 	vldr	s4, [r7, #164]	@ 0xa4
 8000c32:	edd7 1a2a 	vldr	s3, [r7, #168]	@ 0xa8
 8000c36:	ed97 1a2b 	vldr	s2, [r7, #172]	@ 0xac
 8000c3a:	edd7 0a2c 	vldr	s1, [r7, #176]	@ 0xb0
 8000c3e:	ed97 0a28 	vldr	s0, [r7, #160]	@ 0xa0
 8000c42:	f7ff ff44 	bl	8000ace <scaleValue>
 8000c46:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c

			  if (outputDbar < 0) {
 8000c4a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8000c4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c56:	d508      	bpl.n	8000c6a <StartTaskADC+0x136>
				  ui_pressureValue_dbar[i] = 0;  // Saturazione a 0 se il valore è negativo
 8000c58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	33d0      	adds	r3, #208	@ 0xd0
 8000c60:	443b      	add	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	f843 2c78 	str.w	r2, [r3, #-120]
 8000c68:	e023      	b.n	8000cb2 <StartTaskADC+0x17e>
			  } else if (outputDbar > 65535) {
 8000c6a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8000c6e:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8000e54 <StartTaskADC+0x320>
 8000c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c7a:	dd09      	ble.n	8000c90 <StartTaskADC+0x15c>
				  ui_pressureValue_dbar[i] = 65535;  // Saturazione al massimo valore se eccede 65535
 8000c7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	33d0      	adds	r3, #208	@ 0xd0
 8000c84:	443b      	add	r3, r7
 8000c86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c8a:	f843 2c78 	str.w	r2, [r3, #-120]
 8000c8e:	e010      	b.n	8000cb2 <StartTaskADC+0x17e>
			  } else {
				  ui_pressureValue_dbar[i] = (uint32_t)roundf(outputDbar);  // Conversione diretta se è nei limiti
 8000c90:	ed97 0a27 	vldr	s0, [r7, #156]	@ 0x9c
 8000c94:	f008 fc2c 	bl	80094f0 <roundf>
 8000c98:	eef0 7a40 	vmov.f32	s15, s0
 8000c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ca0:	ee17 2a90 	vmov	r2, s15
 8000ca4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	33d0      	adds	r3, #208	@ 0xd0
 8000cac:	443b      	add	r3, r7
 8000cae:	f843 2c78 	str.w	r2, [r3, #-120]
		  for (int i = 0; i < 8; i++) {
 8000cb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8000cbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000cc0:	2b07      	cmp	r3, #7
 8000cc2:	dda7      	ble.n	8000c14 <StartTaskADC+0xe0>
			  }

		  }

		  //0x010
		  canMessage[0].msgID = 0x010;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	613b      	str	r3, [r7, #16]
		  canMessage[0].extended = false;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	757b      	strb	r3, [r7, #21]
		  canMessage[0].dlc = 8;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	753b      	strb	r3, [r7, #20]

		  for (int m = 0; m < 8; m++){
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000cd6:	e00b      	b.n	8000cf0 <StartTaskADC+0x1bc>
			  canMessage[0].msgData[m] = 0x0;
 8000cd8:	f107 0208 	add.w	r2, r7, #8
 8000cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000ce0:	4413      	add	r3, r2
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
		  for (int m = 0; m < 8; m++){
 8000ce6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000cea:	3301      	adds	r3, #1
 8000cec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8000cf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000cf4:	2b07      	cmp	r3, #7
 8000cf6:	ddef      	ble.n	8000cd8 <StartTaskADC+0x1a4>
		  }

		  canMessage[0].msgData[0] = (uint8_t)(adcValues[0] & 0x00FF);
 8000cf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	723b      	strb	r3, [r7, #8]
		  canMessage[0].msgData[1] = (uint8_t)(adcValues[0] >> 8);
 8000cfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	727b      	strb	r3, [r7, #9]
		  canMessage[0].msgData[2] = (uint8_t)(adcValues[1] & 0x00FF);
 8000d06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	72bb      	strb	r3, [r7, #10]
		  canMessage[0].msgData[3] = (uint8_t)(adcValues[1] >> 8);
 8000d0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000d0e:	0a1b      	lsrs	r3, r3, #8
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	72fb      	strb	r3, [r7, #11]
		  canMessage[0].msgData[4] = (uint8_t)(adcValues[2] & 0x00FF);
 8000d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	733b      	strb	r3, [r7, #12]
		  canMessage[0].msgData[5] = (uint8_t)(adcValues[2] >> 8);
 8000d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	737b      	strb	r3, [r7, #13]
		  canMessage[0].msgData[6] = (uint8_t)(adcValues[3] & 0x00FF);
 8000d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	73bb      	strb	r3, [r7, #14]
		  canMessage[0].msgData[7] = (uint8_t)(adcValues[3] >> 8);
 8000d2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000d32:	0a1b      	lsrs	r3, r3, #8
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	73fb      	strb	r3, [r7, #15]

		  canMsgTx(&canMessage[0], &canMessageTx[indexTx]);
 8000d38:	4b47      	ldr	r3, [pc, #284]	@ (8000e58 <StartTaskADC+0x324>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4613      	mov	r3, r2
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	4a45      	ldr	r2, [pc, #276]	@ (8000e5c <StartTaskADC+0x328>)
 8000d46:	441a      	add	r2, r3
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fe48 	bl	80009e4 <canMsgTx>

		  indexTx++;
 8000d54:	4b40      	ldr	r3, [pc, #256]	@ (8000e58 <StartTaskADC+0x324>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e58 <StartTaskADC+0x324>)
 8000d5e:	701a      	strb	r2, [r3, #0]
		  if (indexTx >= BUFFER_TX_SPI) {
 8000d60:	4b3d      	ldr	r3, [pc, #244]	@ (8000e58 <StartTaskADC+0x324>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b31      	cmp	r3, #49	@ 0x31
 8000d66:	d902      	bls.n	8000d6e <StartTaskADC+0x23a>
			  indexTx = 0;
 8000d68:	4b3b      	ldr	r3, [pc, #236]	@ (8000e58 <StartTaskADC+0x324>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
		  }

  		 /********/

		  //0x011
		  canMessage[1].msgID = 0x011;
 8000d6e:	2311      	movs	r3, #17
 8000d70:	623b      	str	r3, [r7, #32]
		  canMessage[1].extended = false;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		  canMessage[1].dlc = 8;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		  for (int m = 0; m < 8; m++){
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000d84:	e00b      	b.n	8000d9e <StartTaskADC+0x26a>
			  canMessage[1].msgData[m] = 0x0;
 8000d86:	f107 0218 	add.w	r2, r7, #24
 8000d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000d8e:	4413      	add	r3, r2
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
		  for (int m = 0; m < 8; m++){
 8000d94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000d98:	3301      	adds	r3, #1
 8000d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8000d9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000da2:	2b07      	cmp	r3, #7
 8000da4:	ddef      	ble.n	8000d86 <StartTaskADC+0x252>
		  }

		  canMessage[1].msgData[0] = (uint8_t)(adcValues[4] & 0x00FF);
 8000da6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	763b      	strb	r3, [r7, #24]
		  canMessage[1].msgData[1] = (uint8_t)(adcValues[4] >> 8);
 8000dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000db2:	0a1b      	lsrs	r3, r3, #8
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	767b      	strb	r3, [r7, #25]
		  canMessage[1].msgData[2] = (uint8_t)(adcValues[5] & 0x00FF);
 8000db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	76bb      	strb	r3, [r7, #26]
		  canMessage[1].msgData[3] = (uint8_t)(adcValues[5] >> 8);
 8000dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000dc4:	0a1b      	lsrs	r3, r3, #8
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	76fb      	strb	r3, [r7, #27]
		  canMessage[1].msgData[4] = (uint8_t)(adcValues[6] & 0x00FF);
 8000dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	773b      	strb	r3, [r7, #28]
		  canMessage[1].msgData[5] = (uint8_t)(adcValues[6] >> 8);
 8000dd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	777b      	strb	r3, [r7, #29]
		  canMessage[1].msgData[6] = (uint8_t)(adcValues[7] & 0x00FF);
 8000ddc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	77bb      	strb	r3, [r7, #30]
		  canMessage[1].msgData[7] = (uint8_t)(adcValues[7] >> 8);
 8000de4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	77fb      	strb	r3, [r7, #31]

		  canMsgTx(&canMessage[1], &canMessageTx[indexTx]);
 8000dee:	4b1a      	ldr	r3, [pc, #104]	@ (8000e58 <StartTaskADC+0x324>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4613      	mov	r3, r2
 8000df6:	011b      	lsls	r3, r3, #4
 8000df8:	1a9b      	subs	r3, r3, r2
 8000dfa:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <StartTaskADC+0x328>)
 8000dfc:	441a      	add	r2, r3
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	3310      	adds	r3, #16
 8000e04:	4611      	mov	r1, r2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fdec 	bl	80009e4 <canMsgTx>

		  indexTx++;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <StartTaskADC+0x324>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <StartTaskADC+0x324>)
 8000e16:	701a      	strb	r2, [r3, #0]
		  if (indexTx >= BUFFER_TX_SPI) {
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <StartTaskADC+0x324>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b31      	cmp	r3, #49	@ 0x31
 8000e1e:	d902      	bls.n	8000e26 <StartTaskADC+0x2f2>
			  indexTx = 0;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <StartTaskADC+0x324>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]
		  }

		 /********/
		  //0x012
		  canMessage[2].msgID = 0x012;
 8000e26:	2312      	movs	r3, #18
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
		  canMessage[2].extended = false;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
		  canMessage[2].dlc = 8;
 8000e30:	2308      	movs	r3, #8
 8000e32:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

		  for (int m = 0; m < 8; m++){
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000e3c:	e01c      	b.n	8000e78 <StartTaskADC+0x344>
 8000e3e:	bf00      	nop
 8000e40:	42c80000 	.word	0x42c80000
 8000e44:	20000000 	.word	0x20000000
 8000e48:	2000047b 	.word	0x2000047b
 8000e4c:	2000047a 	.word	0x2000047a
 8000e50:	2000008c 	.word	0x2000008c
 8000e54:	477fff00 	.word	0x477fff00
 8000e58:	2000047c 	.word	0x2000047c
 8000e5c:	2000018c 	.word	0x2000018c
			  canMessage[2].msgData[m] = 0x0;
 8000e60:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000e64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000e68:	4413      	add	r3, r2
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
		  for (int m = 0; m < 8; m++){
 8000e6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000e72:	3301      	adds	r3, #1
 8000e74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000e78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000e7c:	2b07      	cmp	r3, #7
 8000e7e:	ddef      	ble.n	8000e60 <StartTaskADC+0x32c>
		  }

		  canMessage[2].msgData[0] = (uint8_t)(ui_pressureValue_dbar[0] & 0x00FF);
 8000e80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
		  canMessage[2].msgData[1] = (uint8_t)(ui_pressureValue_dbar[0] >> 8);
 8000e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		  canMessage[2].msgData[2] = (uint8_t)(ui_pressureValue_dbar[1] & 0x00FF);
 8000e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
		  canMessage[2].msgData[3] = (uint8_t)(ui_pressureValue_dbar[1] >> 8);
 8000e9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		  canMessage[2].msgData[4] = (uint8_t)(ui_pressureValue_dbar[2] & 0x00FF);
 8000ea4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
		  canMessage[2].msgData[5] = (uint8_t)(ui_pressureValue_dbar[2] >> 8);
 8000eac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000eae:	0a1b      	lsrs	r3, r3, #8
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		  canMessage[2].msgData[6] = (uint8_t)(ui_pressureValue_dbar[3] & 0x00FF);
 8000eb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
		  canMessage[2].msgData[7] = (uint8_t)(ui_pressureValue_dbar[3] >> 8);
 8000ebe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  		  canMsgTx(&canMessage[2], &canMessageTx[indexTx]);
 8000ec8:	4b3d      	ldr	r3, [pc, #244]	@ (8000fc0 <StartTaskADC+0x48c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4613      	mov	r3, r2
 8000ed0:	011b      	lsls	r3, r3, #4
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	4a3b      	ldr	r2, [pc, #236]	@ (8000fc4 <StartTaskADC+0x490>)
 8000ed6:	441a      	add	r2, r3
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	3320      	adds	r3, #32
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fd7f 	bl	80009e4 <canMsgTx>

		  indexTx++;
 8000ee6:	4b36      	ldr	r3, [pc, #216]	@ (8000fc0 <StartTaskADC+0x48c>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	3301      	adds	r3, #1
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b34      	ldr	r3, [pc, #208]	@ (8000fc0 <StartTaskADC+0x48c>)
 8000ef0:	701a      	strb	r2, [r3, #0]
		  if (indexTx >= BUFFER_TX_SPI) {
 8000ef2:	4b33      	ldr	r3, [pc, #204]	@ (8000fc0 <StartTaskADC+0x48c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b31      	cmp	r3, #49	@ 0x31
 8000ef8:	d902      	bls.n	8000f00 <StartTaskADC+0x3cc>
			  indexTx = 0;
 8000efa:	4b31      	ldr	r3, [pc, #196]	@ (8000fc0 <StartTaskADC+0x48c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
		  }
		  /***********/
		  /********/
		  //0x013
		  canMessage[3].msgID = 0x013;
 8000f00:	2313      	movs	r3, #19
 8000f02:	643b      	str	r3, [r7, #64]	@ 0x40
		  canMessage[3].extended = false;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		  canMessage[3].dlc = 8;
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

		  for (int m = 0; m < 8; m++){
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000f16:	e00b      	b.n	8000f30 <StartTaskADC+0x3fc>
			  canMessage[3].msgData[m] = 0x0;
 8000f18:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000f1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000f20:	4413      	add	r3, r2
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]
		  for (int m = 0; m < 8; m++){
 8000f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000f30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000f34:	2b07      	cmp	r3, #7
 8000f36:	ddef      	ble.n	8000f18 <StartTaskADC+0x3e4>
		  }

		  canMessage[3].msgData[0] = (uint8_t)(ui_pressureValue_dbar[4] & 0x00FF);
 8000f38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
		  canMessage[3].msgData[1] = (uint8_t)(ui_pressureValue_dbar[4] >> 8);
 8000f40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000f42:	0a1b      	lsrs	r3, r3, #8
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
		  canMessage[3].msgData[2] = (uint8_t)(ui_pressureValue_dbar[5] & 0x00FF);
 8000f4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
		  canMessage[3].msgData[3] = (uint8_t)(ui_pressureValue_dbar[5] >> 8);
 8000f52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		  canMessage[3].msgData[4] = (uint8_t)(ui_pressureValue_dbar[6] & 0x00FF);
 8000f5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		  canMessage[3].msgData[5] = (uint8_t)(ui_pressureValue_dbar[6] >> 8);
 8000f64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
		  canMessage[3].msgData[6] = (uint8_t)(ui_pressureValue_dbar[7] & 0x00FF);
 8000f6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		  canMessage[3].msgData[7] = (uint8_t)(ui_pressureValue_dbar[7] >> 8);
 8000f76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			  canMsgTx(&canMessage[3], &canMessageTx[indexTx]);
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <StartTaskADC+0x48c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4613      	mov	r3, r2
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	1a9b      	subs	r3, r3, r2
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <StartTaskADC+0x490>)
 8000f8e:	441a      	add	r2, r3
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	3330      	adds	r3, #48	@ 0x30
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fd23 	bl	80009e4 <canMsgTx>

		  indexTx++;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <StartTaskADC+0x48c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <StartTaskADC+0x48c>)
 8000fa8:	701a      	strb	r2, [r3, #0]
		  if (indexTx >= BUFFER_TX_SPI) {
 8000faa:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <StartTaskADC+0x48c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b31      	cmp	r3, #49	@ 0x31
 8000fb0:	d902      	bls.n	8000fb8 <StartTaskADC+0x484>
			  indexTx = 0;
 8000fb2:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <StartTaskADC+0x48c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
		  }
		 /* char message [20];
		  // Converte l'intero in una stringa
		  sprintf(message, "index: %d\r\n", indexTx);
		  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);*/
		  adcInUse = false;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	@ (8000fc8 <StartTaskADC+0x494>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000fbe:	e5f0      	b.n	8000ba2 <StartTaskADC+0x6e>
 8000fc0:	2000047c 	.word	0x2000047c
 8000fc4:	2000018c 	.word	0x2000018c
 8000fc8:	2000047a 	.word	0x2000047a

08000fcc <StartTaskSPI>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSPI */
void StartTaskSPI(void *argument)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b09a      	sub	sp, #104	@ 0x68
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	6078      	str	r0, [r7, #4]
	MCP2515_MessageBuffer canMsg_buffer;


	// Inizializzazione del dispositivo MCP2515
	  //HAL_Delay(500);
	  initBuffer(&canMsg_buffer);
 8000fd4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 ff97 	bl	8001f0c <initBuffer>


	  uint8_t dummyData = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	  HAL_SPI_Transmit(&hspi1, &dummyData, 1, HAL_MAX_DELAY); // Trasmissione dummy
 8000fe4:	f107 013b 	add.w	r1, r7, #59	@ 0x3b
 8000fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fec:	2201      	movs	r2, #1
 8000fee:	485a      	ldr	r0, [pc, #360]	@ (8001158 <StartTaskSPI+0x18c>)
 8000ff0:	f002 fe5b 	bl	8003caa <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);  // CS alto
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ffa:	4858      	ldr	r0, [pc, #352]	@ (800115c <StartTaskSPI+0x190>)
 8000ffc:	f002 f928 	bl	8003250 <HAL_GPIO_WritePin>


	  const char* resMcp2515_msg;
	  result_mcp2515Init = MCP2515_Init(&mcp2515_1, GPIOB, GPIO_PIN_13, &hspi1, CAN0_BAUDRATE, true);
 8001000:	2301      	movs	r3, #1
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	2302      	movs	r3, #2
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	4b53      	ldr	r3, [pc, #332]	@ (8001158 <StartTaskSPI+0x18c>)
 800100a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800100e:	4953      	ldr	r1, [pc, #332]	@ (800115c <StartTaskSPI+0x190>)
 8001010:	4853      	ldr	r0, [pc, #332]	@ (8001160 <StartTaskSPI+0x194>)
 8001012:	f000 f8e1 	bl	80011d8 <MCP2515_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b52      	ldr	r3, [pc, #328]	@ (8001164 <StartTaskSPI+0x198>)
 800101c:	701a      	strb	r2, [r3, #0]
	  switch ( result_mcp2515Init){
 800101e:	4b51      	ldr	r3, [pc, #324]	@ (8001164 <StartTaskSPI+0x198>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b09      	cmp	r3, #9
 8001024:	d834      	bhi.n	8001090 <StartTaskSPI+0xc4>
 8001026:	a201      	add	r2, pc, #4	@ (adr r2, 800102c <StartTaskSPI+0x60>)
 8001028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102c:	08001055 	.word	0x08001055
 8001030:	0800105b 	.word	0x0800105b
 8001034:	08001061 	.word	0x08001061
 8001038:	08001067 	.word	0x08001067
 800103c:	0800106d 	.word	0x0800106d
 8001040:	08001073 	.word	0x08001073
 8001044:	08001079 	.word	0x08001079
 8001048:	0800107f 	.word	0x0800107f
 800104c:	08001085 	.word	0x08001085
 8001050:	0800108b 	.word	0x0800108b

	    case MCP2515_OK:
	      resMcp2515_msg = "Inizializzazione mcp2515 ok\n";
 8001054:	4b44      	ldr	r3, [pc, #272]	@ (8001168 <StartTaskSPI+0x19c>)
 8001056:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      break;
 8001058:	e01d      	b.n	8001096 <StartTaskSPI+0xca>

	    case MCP2515_FAIL:
	      resMcp2515_msg = "Inizializzazione mcp2515 fallita\n";
 800105a:	4b44      	ldr	r3, [pc, #272]	@ (800116c <StartTaskSPI+0x1a0>)
 800105c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      break;
 800105e:	e01a      	b.n	8001096 <StartTaskSPI+0xca>

	    case MCP2515_RESET_FAIL:
	      resMcp2515_msg = "Reset mcp2515 fallito\n";
 8001060:	4b43      	ldr	r3, [pc, #268]	@ (8001170 <StartTaskSPI+0x1a4>)
 8001062:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      break;
 8001064:	e017      	b.n	8001096 <StartTaskSPI+0xca>

	    case MCP2515_SET_BAUDRATE_FAIL:
	      resMcp2515_msg = "Set baudrate mcp2515 fallito\n";
 8001066:	4b43      	ldr	r3, [pc, #268]	@ (8001174 <StartTaskSPI+0x1a8>)
 8001068:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      break;
 800106a:	e014      	b.n	8001096 <StartTaskSPI+0xca>

	    case MCP2515_SET_MODE_FAIL:
	      resMcp2515_msg = "Set modalita operativa mcp2515 fallita\n";
 800106c:	4b42      	ldr	r3, [pc, #264]	@ (8001178 <StartTaskSPI+0x1ac>)
 800106e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      break;
 8001070:	e011      	b.n	8001096 <StartTaskSPI+0xca>

	    case MCP2515_RESET_TIMEOUT:
	      resMcp2515_msg = "MCP2515_RESET_TIMEOUT\n";
 8001072:	4b42      	ldr	r3, [pc, #264]	@ (800117c <StartTaskSPI+0x1b0>)
 8001074:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      break;
 8001076:	e00e      	b.n	8001096 <StartTaskSPI+0xca>

	    case MCP2515_READ_TIMEOUT_1:
	      resMcp2515_msg = "MCP2515_READ_TIMEOUT_1\n";
 8001078:	4b41      	ldr	r3, [pc, #260]	@ (8001180 <StartTaskSPI+0x1b4>)
 800107a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      break;
 800107c:	e00b      	b.n	8001096 <StartTaskSPI+0xca>

	    case MCP2515_READ_TIMEOUT_2:
	      resMcp2515_msg = "MCP2515_READ_TIMEOUT_2\n";
 800107e:	4b41      	ldr	r3, [pc, #260]	@ (8001184 <StartTaskSPI+0x1b8>)
 8001080:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      break;
 8001082:	e008      	b.n	8001096 <StartTaskSPI+0xca>

	    case MCP2515_BAUDRATE_READ_FAIL:
	      resMcp2515_msg = "MCP2515_BAUDRATE_READ_FAIL\n";
 8001084:	4b40      	ldr	r3, [pc, #256]	@ (8001188 <StartTaskSPI+0x1bc>)
 8001086:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      break;
 8001088:	e005      	b.n	8001096 <StartTaskSPI+0xca>

	    case MCP2515_BAUDRATE_NOT_OK:
	      resMcp2515_msg = "MCP2515_BAUDRATE_NOT_OK\n";
 800108a:	4b40      	ldr	r3, [pc, #256]	@ (800118c <StartTaskSPI+0x1c0>)
 800108c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      break;
 800108e:	e002      	b.n	8001096 <StartTaskSPI+0xca>

	    default:
	      resMcp2515_msg = "Errore non riconosciuto mcp2515\n";
 8001090:	4b3f      	ldr	r3, [pc, #252]	@ (8001190 <StartTaskSPI+0x1c4>)
 8001092:	65fb      	str	r3, [r7, #92]	@ 0x5c
	      break;
 8001094:	bf00      	nop
	  }

	  HAL_UART_Transmit(&huart1, (uint8_t*)resMcp2515_msg, strlen(resMcp2515_msg), HAL_MAX_DELAY);
 8001096:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001098:	f7ff f8a2 	bl	80001e0 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80010a6:	483b      	ldr	r0, [pc, #236]	@ (8001194 <StartTaskSPI+0x1c8>)
 80010a8:	f003 feea 	bl	8004e80 <HAL_UART_Transmit>

	  uint8_t resultHandler = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	  uint8_t resultSend = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a

	  	//uint32_t start_time, timeADC;
	  	uint32_t start_time2, time2;
	  			// Inizializza start_time
	  			 //start_time = HAL_GetTick();
	  			start_time2 = HAL_GetTick();
 80010b8:	f001 fa08 	bl	80024cc <HAL_GetTick>
 80010bc:	6578      	str	r0, [r7, #84]	@ 0x54
  /* Infinite loop */
  for(;;)
  {

	  //ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
	  if (result_mcp2515Init == MCP2515_OK){
 80010be:	4b29      	ldr	r3, [pc, #164]	@ (8001164 <StartTaskSPI+0x198>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1fb      	bne.n	80010be <StartTaskSPI+0xf2>

		}*/



			  mcp2515IntState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80010c6:	2140      	movs	r1, #64	@ 0x40
 80010c8:	4824      	ldr	r0, [pc, #144]	@ (800115c <StartTaskSPI+0x190>)
 80010ca:	f002 f8a9 	bl	8003220 <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

			  resultHandler = MCP2515_InterruptHandler(&mcp2515_1, mcp2515IntState, &canMsg_buffer);
 80010d4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80010d8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80010dc:	4619      	mov	r1, r3
 80010de:	4820      	ldr	r0, [pc, #128]	@ (8001160 <StartTaskSPI+0x194>)
 80010e0:	f000 fe28 	bl	8001d34 <MCP2515_InterruptHandler>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
		  	  }*/


			  //if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE){
				 // do{
		  	  if (!adcInUse){
 80010ea:	4b2b      	ldr	r3, [pc, #172]	@ (8001198 <StartTaskSPI+0x1cc>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	f083 0301 	eor.w	r3, r3, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0e2      	beq.n	80010be <StartTaskSPI+0xf2>
						resultSend = MCP2515_SendMessage(&mcp2515_1, &canMsg_buffer, canMessageTx);
 80010f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010fc:	4a27      	ldr	r2, [pc, #156]	@ (800119c <StartTaskSPI+0x1d0>)
 80010fe:	4619      	mov	r1, r3
 8001100:	4817      	ldr	r0, [pc, #92]	@ (8001160 <StartTaskSPI+0x194>)
 8001102:	f000 fd5d 	bl	8001bc0 <MCP2515_SendMessage>
 8001106:	4603      	mov	r3, r0
 8001108:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
						if (canMsg_buffer.status != TRANSMISSION_IDLE) {
 800110c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <StartTaskSPI+0x150>
							spiInUse = true;
 8001114:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <StartTaskSPI+0x1d4>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
 800111a:	e002      	b.n	8001122 <StartTaskSPI+0x156>
						}
						else
							spiInUse = false;
 800111c:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <StartTaskSPI+0x1d4>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]



						if (resultSend != 0){
 8001122:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0c9      	beq.n	80010be <StartTaskSPI+0xf2>

						 // Converte l'intero in una stringa
						  sprintf(message, "ResultSend: %d\r\n", resultSend);
 800112a:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	491c      	ldr	r1, [pc, #112]	@ (80011a4 <StartTaskSPI+0x1d8>)
 8001134:	4618      	mov	r0, r3
 8001136:	f007 f953 	bl	80083e0 <siprintf>
						  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 800113a:	f107 0308 	add.w	r3, r7, #8
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f84e 	bl	80001e0 <strlen>
 8001144:	4603      	mov	r3, r0
 8001146:	b29a      	uxth	r2, r3
 8001148:	f107 0108 	add.w	r1, r7, #8
 800114c:	f04f 33ff 	mov.w	r3, #4294967295
 8001150:	4810      	ldr	r0, [pc, #64]	@ (8001194 <StartTaskSPI+0x1c8>)
 8001152:	f003 fe95 	bl	8004e80 <HAL_UART_Transmit>
	  if (result_mcp2515Init == MCP2515_OK){
 8001156:	e7b2      	b.n	80010be <StartTaskSPI+0xf2>
 8001158:	200000d4 	.word	0x200000d4
 800115c:	40020400 	.word	0x40020400
 8001160:	2000017c 	.word	0x2000017c
 8001164:	20000000 	.word	0x20000000
 8001168:	08009578 	.word	0x08009578
 800116c:	08009598 	.word	0x08009598
 8001170:	080095bc 	.word	0x080095bc
 8001174:	080095d4 	.word	0x080095d4
 8001178:	080095f4 	.word	0x080095f4
 800117c:	0800961c 	.word	0x0800961c
 8001180:	08009634 	.word	0x08009634
 8001184:	0800964c 	.word	0x0800964c
 8001188:	08009664 	.word	0x08009664
 800118c:	08009680 	.word	0x08009680
 8001190:	0800969c 	.word	0x0800969c
 8001194:	2000012c 	.word	0x2000012c
 8001198:	2000047a 	.word	0x2000047a
 800119c:	2000018c 	.word	0x2000018c
 80011a0:	2000047b 	.word	0x2000047b
 80011a4:	080096c0 	.word	0x080096c0

080011a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ba:	f001 f973 	bl	80024a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40010000 	.word	0x40010000

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <Error_Handler+0x8>

080011d8 <MCP2515_Init>:
uint8_t dataEmpty[8] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,0x0};
static uint8_t writeMessage[4];
volatile uint8_t transmissionComplete;

// Costruttore
uint8_t MCP2515_Init(MCP2515_HandleTypeDef* hdev, GPIO_TypeDef* csPort,  uint16_t csPin, SPI_HandleTypeDef* hspi, uint8_t baudrate,uint8_t intTxEnable ) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	80fb      	strh	r3, [r7, #6]
    hdev->csPin = csPin;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	88fa      	ldrh	r2, [r7, #6]
 80011ec:	809a      	strh	r2, [r3, #4]
    hdev->csPort = csPort;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	601a      	str	r2, [r3, #0]
    hdev->hspi = hspi;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	609a      	str	r2, [r3, #8]
    hdev->emptyTXBuffer[0] = true;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2201      	movs	r2, #1
 80011fe:	735a      	strb	r2, [r3, #13]
    hdev->emptyTXBuffer[1] = true;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2201      	movs	r2, #1
 8001204:	739a      	strb	r2, [r3, #14]
    hdev->emptyTXBuffer[2] = true;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2201      	movs	r2, #1
 800120a:	73da      	strb	r2, [r3, #15]
    
    uint8_t result = MCP2515_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	75fb      	strb	r3, [r7, #23]
    result = MCP2515_deviceInit(hdev, baudrate, intTxEnable);
 8001210:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001214:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001218:	4619      	mov	r1, r3
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f000 f807 	bl	800122e <MCP2515_deviceInit>
 8001220:	4603      	mov	r3, r0
 8001222:	75fb      	strb	r3, [r7, #23]
    
    return result;
 8001224:	7dfb      	ldrb	r3, [r7, #23]
       

}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <MCP2515_deviceInit>:

uint8_t MCP2515_deviceInit(MCP2515_HandleTypeDef* hdev, uint8_t baudrate, uint8_t intTxEnable) {
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	460b      	mov	r3, r1
 8001238:	70fb      	strb	r3, [r7, #3]
 800123a:	4613      	mov	r3, r2
 800123c:	70bb      	strb	r3, [r7, #2]

    HAL_Delay(100);
 800123e:	2064      	movs	r0, #100	@ 0x64
 8001240:	f001 f950 	bl	80024e4 <HAL_Delay>

    // Resetta il MCP2515
    uint8_t resultReset;
    //MCP2515_Reset(hdev);
    resultReset = MCP2515_Reset(hdev);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f83a 	bl	80012be <MCP2515_Reset>
 800124a:	4603      	mov	r3, r0
 800124c:	73fb      	strb	r3, [r7, #15]
    if (resultReset != MCP2515_OK) {
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MCP2515_deviceInit+0x2a>
        return resultReset;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	e02e      	b.n	80012b6 <MCP2515_deviceInit+0x88>
    }

    // Imposta il baudrate
    uint8_t resultBaudrate;
    resultBaudrate = MCP2515_SetBaudrate(hdev, baudrate);
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	4619      	mov	r1, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 f88d 	bl	800137c <MCP2515_SetBaudrate>
 8001262:	4603      	mov	r3, r0
 8001264:	73bb      	strb	r3, [r7, #14]
    if (resultBaudrate != MCP2515_OK) {
 8001266:	7bbb      	ldrb	r3, [r7, #14]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MCP2515_deviceInit+0x42>
        return resultBaudrate;
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	e022      	b.n	80012b6 <MCP2515_deviceInit+0x88>
    }
    
    // Imposta la modalità operativa
    uint8_t resultRun;
    resultRun = MCP2515_SetMode(hdev, MCP2515_NORMAL_MODE);
 8001270:	2100      	movs	r1, #0
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fa28 	bl	80016c8 <MCP2515_SetMode>
 8001278:	4603      	mov	r3, r0
 800127a:	737b      	strb	r3, [r7, #13]
    if (resultRun != MCP2515_OK) {
 800127c:	7b7b      	ldrb	r3, [r7, #13]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MCP2515_deviceInit+0x58>
        return MCP2515_SET_MODE_FAIL;
 8001282:	2304      	movs	r3, #4
 8001284:	e017      	b.n	80012b6 <MCP2515_deviceInit+0x88>
    }
    
    uint8_t resultResetInt;
    resultResetInt = MCP2515_ResetInt(hdev);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 fa65 	bl	8001756 <MCP2515_ResetInt>
 800128c:	4603      	mov	r3, r0
 800128e:	733b      	strb	r3, [r7, #12]
    if (resultResetInt != MCP2515_OK) {
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MCP2515_deviceInit+0x6c>
        return MCP2515_FAIL;
 8001296:	2301      	movs	r3, #1
 8001298:	e00d      	b.n	80012b6 <MCP2515_deviceInit+0x88>
    }
    // Imposta l'interrupt sui tx'
    if (intTxEnable){
 800129a:	78bb      	ldrb	r3, [r7, #2]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d009      	beq.n	80012b4 <MCP2515_deviceInit+0x86>
        uint8_t resultIntTx;
        resultIntTx = MCP2515_SetIntTx(hdev);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f000 fa6e 	bl	8001782 <MCP2515_SetIntTx>
 80012a6:	4603      	mov	r3, r0
 80012a8:	72fb      	strb	r3, [r7, #11]
        if (resultIntTx != MCP2515_OK) {
 80012aa:	7afb      	ldrb	r3, [r7, #11]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MCP2515_deviceInit+0x86>
            return MCP2515_FAIL;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <MCP2515_deviceInit+0x88>
            printf("Errore nell'enable interrupt tx\n");
        }
    }


    return MCP2515_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <MCP2515_Reset>:

uint8_t MCP2515_Reset(MCP2515_HandleTypeDef* hdev) {
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
    uint8_t resetCommand = MCP2515_RESET;
 80012c6:	23c0      	movs	r3, #192	@ 0xc0
 80012c8:	737b      	strb	r3, [r7, #13]
    const uint32_t timeout = 10; // Timeout di 10 ms
 80012ca:	230a      	movs	r3, #10
 80012cc:	617b      	str	r3, [r7, #20]
    

    hdev->transmissionComplete = 0;  // Resetta lo stato
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	731a      	strb	r2, [r3, #12]
    
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	f001 ffb6 	bl	8003250 <HAL_GPIO_WritePin>
    //HAL_Delay(2);
    HAL_SPI_Transmit_IT(hdev->hspi, &resetCommand, 1); // Invia il comando di reset
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f107 010d 	add.w	r1, r7, #13
 80012ec:	2201      	movs	r2, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 fe1e 	bl	8003f30 <HAL_SPI_Transmit_IT>
    uint32_t startTime = HAL_GetTick();
 80012f4:	f001 f8ea 	bl	80024cc <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]
    // Attendi il completamento della trasmissione
    while (!hdev->transmissionComplete) {
 80012fa:	e011      	b.n	8001320 <MCP2515_Reset+0x62>
        if ((HAL_GetTick() - startTime) > timeout) {
 80012fc:	f001 f8e6 	bl	80024cc <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	429a      	cmp	r2, r3
 800130a:	d209      	bcs.n	8001320 <MCP2515_Reset+0x62>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	889b      	ldrh	r3, [r3, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	4619      	mov	r1, r3
 8001318:	f001 ff9a 	bl	8003250 <HAL_GPIO_WritePin>
            return MCP2515_RESET_TIMEOUT; // Esci dalla funzione, indicando un errore o fallimento
 800131c:	2305      	movs	r3, #5
 800131e:	e029      	b.n	8001374 <MCP2515_Reset+0xb6>
    while (!hdev->transmissionComplete) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7b1b      	ldrb	r3, [r3, #12]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0e8      	beq.n	80012fc <MCP2515_Reset+0x3e>
        }
    }
    hdev->transmissionComplete = 0;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	731a      	strb	r2, [r3, #12]
    HAL_Delay(10);  // Attendi che il reset venga completato (10 ms è un valore standard)
 8001330:	200a      	movs	r0, #10
 8001332:	f001 f8d7 	bl	80024e4 <HAL_Delay>
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	889b      	ldrh	r3, [r3, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	4619      	mov	r1, r3
 8001342:	f001 ff85 	bl	8003250 <HAL_GPIO_WritePin>

    

    uint8_t status_data;
    uint8_t resultRead;
    resultRead = MCP2515_ReadRegister(hdev,MCP2515_CANSTAT_MSG, &status_data);
 8001346:	f107 030c 	add.w	r3, r7, #12
 800134a:	461a      	mov	r2, r3
 800134c:	210e      	movs	r1, #14
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f942 	bl	80015d8 <MCP2515_ReadRegister>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]
    if (resultRead != MCP2515_OK)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MCP2515_Reset+0xa4>
        return resultRead;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	e008      	b.n	8001374 <MCP2515_Reset+0xb6>
    // Verifica se il modo è stato impostato correttamente
    uint8_t currentMode = (status_data >> 5) & 0x07;
 8001362:	7b3b      	ldrb	r3, [r7, #12]
 8001364:	095b      	lsrs	r3, r3, #5
 8001366:	73bb      	strb	r3, [r7, #14]
    if (currentMode != MCP2515_CONFIGURATION_MODE) {
 8001368:	7bbb      	ldrb	r3, [r7, #14]
 800136a:	2b04      	cmp	r3, #4
 800136c:	d001      	beq.n	8001372 <MCP2515_Reset+0xb4>
            return MCP2515_RESET_FAIL; }
 800136e:	2302      	movs	r3, #2
 8001370:	e000      	b.n	8001374 <MCP2515_Reset+0xb6>


    return MCP2515_OK;  // Restituisci un codice di successo
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <MCP2515_SetBaudrate>:
void MCP2515_SetTransmissionComplete(MCP2515_HandleTypeDef* hdev, uint8_t transmissionComplete) {
    hdev->transmissionComplete = transmissionComplete;
}


uint8_t MCP2515_SetBaudrate(MCP2515_HandleTypeDef* hdev, uint8_t baudrate) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
    const uint32_t timeout = 10; // Timeout di 10 ms
 8001388:	230a      	movs	r3, #10
 800138a:	613b      	str	r3, [r7, #16]
    uint8_t CNF1, CNF2, CNF3;

    // composizione messaggi
    switch (baudrate) {
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d826      	bhi.n	80013e0 <MCP2515_SetBaudrate+0x64>
 8001392:	a201      	add	r2, pc, #4	@ (adr r2, 8001398 <MCP2515_SetBaudrate+0x1c>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013b7 	.word	0x080013b7
 80013a0:	080013c5 	.word	0x080013c5
 80013a4:	080013d3 	.word	0x080013d3
        case CAN_BAUDRATE_125kbps:  // 125 kbps
            CNF1 = (MCP2515_SJW_DATA_125kbps << 6) | MCP2515_BRP_DATA_125kbps;
 80013a8:	2303      	movs	r3, #3
 80013aa:	75fb      	strb	r3, [r7, #23]
            CNF2 = (MCP2515_BTLMODE_DATA_125kbps << 7) | (MCP2515_SAM_DATA_125kbps << 6) | (MCP2515_PHSEG1_DATA_125kbps << 3) | MCP2515_PRSEG_DATA_125kbps;
 80013ac:	23f0      	movs	r3, #240	@ 0xf0
 80013ae:	75bb      	strb	r3, [r7, #22]
            CNF3 = (MCP2515_SOF_DATA_125kbps << 7) | (MCP2515_WAKFIL_DATA_125kbps << 6) | MCP2515_PHSEG2_DATA_125kbps;
 80013b0:	2386      	movs	r3, #134	@ 0x86
 80013b2:	757b      	strb	r3, [r7, #21]
            break;
 80013b4:	e016      	b.n	80013e4 <MCP2515_SetBaudrate+0x68>

        case CAN_BAUDRATE_250kbps:  // 250 kbps
            CNF1 = (MCP2515_SJW_DATA_250kbps << 6) | MCP2515_BRP_DATA_250kbps;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
            CNF2 = (MCP2515_BTLMODE_DATA_250kbps << 7) | (MCP2515_SAM_DATA_250kbps << 6) | (MCP2515_PHSEG1_DATA_250kbps << 3) | MCP2515_PRSEG_DATA_250kbps;
 80013ba:	23d5      	movs	r3, #213	@ 0xd5
 80013bc:	75bb      	strb	r3, [r7, #22]
            CNF3 = (MCP2515_SOF_DATA_250kbps << 7) | (MCP2515_WAKFIL_DATA_250kbps << 6) | MCP2515_PHSEG2_DATA_250kbps;
 80013be:	2305      	movs	r3, #5
 80013c0:	757b      	strb	r3, [r7, #21]
            break;
 80013c2:	e00f      	b.n	80013e4 <MCP2515_SetBaudrate+0x68>

        case CAN_BAUDRATE_500kbps:  // 500 kbps
            CNF1 = (MCP2515_SJW_DATA_500kbps << 6) | MCP2515_BRP_DATA_500kbps;
 80013c4:	2300      	movs	r3, #0
 80013c6:	75fb      	strb	r3, [r7, #23]
            CNF2 = (MCP2515_BTLMODE_DATA_500kbps << 7) | (MCP2515_SAM_DATA_500kbps << 6) | (MCP2515_PHSEG1_DATA_500kbps << 3) | MCP2515_PRSEG_DATA_500kbps;
 80013c8:	238a      	movs	r3, #138	@ 0x8a
 80013ca:	75bb      	strb	r3, [r7, #22]
            CNF3 = (MCP2515_SOF_DATA_500kbps << 7) | (MCP2515_WAKFIL_DATA_500kbps << 6) | MCP2515_PHSEG2_DATA_500kbps;
 80013cc:	2301      	movs	r3, #1
 80013ce:	757b      	strb	r3, [r7, #21]
            break;
 80013d0:	e008      	b.n	80013e4 <MCP2515_SetBaudrate+0x68>

        case CAN_BAUDRATE_1Mbps:  // 1 Mbps
            CNF1 = (MCP2515_SJW_DATA_1Mbps << 6) | MCP2515_BRP_DATA_1Mbps;
 80013d2:	2300      	movs	r3, #0
 80013d4:	75fb      	strb	r3, [r7, #23]
            CNF2 = (MCP2515_BTLMODE_DATA_1Mbps << 7) | (MCP2515_SAM_DATA_1Mbps << 6) | (MCP2515_PHSEG1_DATA_1Mbps << 3) | MCP2515_PRSEG_DATA_1Mbps;
 80013d6:	23d8      	movs	r3, #216	@ 0xd8
 80013d8:	75bb      	strb	r3, [r7, #22]
            CNF3 = (MCP2515_SOF_DATA_1Mbps << 7) | (MCP2515_WAKFIL_DATA_1Mbps << 6) | MCP2515_PHSEG2_DATA_1Mbps;
 80013da:	2380      	movs	r3, #128	@ 0x80
 80013dc:	757b      	strb	r3, [r7, #21]
            break;
 80013de:	e001      	b.n	80013e4 <MCP2515_SetBaudrate+0x68>

        default:
            return MCP2515_SET_BAUDRATE_FAIL;  // Baud rate non supportato
 80013e0:	2303      	movs	r3, #3
 80013e2:	e055      	b.n	8001490 <MCP2515_SetBaudrate+0x114>

    //printf("CNF1: 0x%02X, CNF2: 0x%02X, CNF3: 0x%02X\n", CNF1, CNF2, CNF3);


    // Scrivi i registri e attendi la conferma
    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CNF1_MSG, CNF1, timeout) != MCP2515_OK)
 80013e4:	7dfa      	ldrb	r2, [r7, #23]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	212a      	movs	r1, #42	@ 0x2a
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f854 	bl	8001498 <MCP2515_WriteRegisterWithTimeout>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MCP2515_SetBaudrate+0x7e>
        return MCP2515_SET_BAUDRATE_FAIL;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e04a      	b.n	8001490 <MCP2515_SetBaudrate+0x114>

    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CNF2_MSG, CNF2, timeout) != MCP2515_OK)
 80013fa:	7dba      	ldrb	r2, [r7, #22]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	2129      	movs	r1, #41	@ 0x29
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f849 	bl	8001498 <MCP2515_WriteRegisterWithTimeout>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MCP2515_SetBaudrate+0x94>
        return MCP2515_SET_BAUDRATE_FAIL;
 800140c:	2303      	movs	r3, #3
 800140e:	e03f      	b.n	8001490 <MCP2515_SetBaudrate+0x114>

    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CNF3_MSG, CNF3, timeout) != MCP2515_OK)
 8001410:	7d7a      	ldrb	r2, [r7, #21]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	2128      	movs	r1, #40	@ 0x28
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f83e 	bl	8001498 <MCP2515_WriteRegisterWithTimeout>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MCP2515_SetBaudrate+0xaa>
        return MCP2515_SET_BAUDRATE_FAIL;
 8001422:	2303      	movs	r3, #3
 8001424:	e034      	b.n	8001490 <MCP2515_SetBaudrate+0x114>

    // verifica scrittura
    uint8_t result_read_cnf1, result_read_cnf2, result_read_cnf3;
    uint8_t read_cnf1, read_cnf2, read_cnf3;
    // Leggi i registri CNF1, CNF2, CNF3
    result_read_cnf1 = MCP2515_ReadRegister(hdev,MCP2515_CNF1_MSG, &read_cnf1);
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	461a      	mov	r2, r3
 800142c:	212a      	movs	r1, #42	@ 0x2a
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 f8d2 	bl	80015d8 <MCP2515_ReadRegister>
 8001434:	4603      	mov	r3, r0
 8001436:	73fb      	strb	r3, [r7, #15]
    result_read_cnf2 = MCP2515_ReadRegister(hdev,MCP2515_CNF2_MSG, &read_cnf2);
 8001438:	f107 030b 	add.w	r3, r7, #11
 800143c:	461a      	mov	r2, r3
 800143e:	2129      	movs	r1, #41	@ 0x29
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f8c9 	bl	80015d8 <MCP2515_ReadRegister>
 8001446:	4603      	mov	r3, r0
 8001448:	73bb      	strb	r3, [r7, #14]
    result_read_cnf3 = MCP2515_ReadRegister(hdev,MCP2515_CNF3_MSG, &read_cnf3);
 800144a:	f107 030a 	add.w	r3, r7, #10
 800144e:	461a      	mov	r2, r3
 8001450:	2128      	movs	r1, #40	@ 0x28
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f8c0 	bl	80015d8 <MCP2515_ReadRegister>
 8001458:	4603      	mov	r3, r0
 800145a:	737b      	strb	r3, [r7, #13]

    if (result_read_cnf1 != MCP2515_OK ||
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d105      	bne.n	800146e <MCP2515_SetBaudrate+0xf2>
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <MCP2515_SetBaudrate+0xf2>
        result_read_cnf2 != MCP2515_OK ||
 8001468:	7b7b      	ldrb	r3, [r7, #13]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MCP2515_SetBaudrate+0xf6>
        result_read_cnf3 != MCP2515_OK) {
            return MCP2515_BAUDRATE_READ_FAIL;
 800146e:	2308      	movs	r3, #8
 8001470:	e00e      	b.n	8001490 <MCP2515_SetBaudrate+0x114>

        }

    // Confronta con i valori attesi
    if (read_cnf1 != CNF1 || 
 8001472:	7b3b      	ldrb	r3, [r7, #12]
 8001474:	7dfa      	ldrb	r2, [r7, #23]
 8001476:	429a      	cmp	r2, r3
 8001478:	d107      	bne.n	800148a <MCP2515_SetBaudrate+0x10e>
        read_cnf2 != CNF2 || 
 800147a:	7afb      	ldrb	r3, [r7, #11]
    if (read_cnf1 != CNF1 || 
 800147c:	7dba      	ldrb	r2, [r7, #22]
 800147e:	429a      	cmp	r2, r3
 8001480:	d103      	bne.n	800148a <MCP2515_SetBaudrate+0x10e>
        read_cnf3 != CNF3) {
 8001482:	7abb      	ldrb	r3, [r7, #10]
        read_cnf2 != CNF2 || 
 8001484:	7d7a      	ldrb	r2, [r7, #21]
 8001486:	429a      	cmp	r2, r3
 8001488:	d001      	beq.n	800148e <MCP2515_SetBaudrate+0x112>
            return MCP2515_BAUDRATE_NOT_OK;
 800148a:	2309      	movs	r3, #9
 800148c:	e000      	b.n	8001490 <MCP2515_SetBaudrate+0x114>
    }

    return MCP2515_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <MCP2515_WriteRegisterWithTimeout>:

uint8_t MCP2515_WriteRegisterWithTimeout(MCP2515_HandleTypeDef* hdev, uint8_t address, uint8_t value, uint32_t timeout){
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	460b      	mov	r3, r1
 80014a4:	72fb      	strb	r3, [r7, #11]
 80014a6:	4613      	mov	r3, r2
 80014a8:	72bb      	strb	r3, [r7, #10]
    uint32_t startTime;
    
    uint8_t writeMessage[3];
    writeMessage[0] = MCP2515_WRITE;
 80014aa:	2302      	movs	r3, #2
 80014ac:	743b      	strb	r3, [r7, #16]
    writeMessage[1] = address;
 80014ae:	7afb      	ldrb	r3, [r7, #11]
 80014b0:	747b      	strb	r3, [r7, #17]
    writeMessage[2] = value;
 80014b2:	7abb      	ldrb	r3, [r7, #10]
 80014b4:	74bb      	strb	r3, [r7, #18]
    /*printf("value: 0x%02X\n", value);
    int arraySize = sizeof(writeMessage) / sizeof(writeMessage[0]);
    printByteArray(writeMessage, arraySize);*/

    
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	889b      	ldrh	r3, [r3, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	f001 fec5 	bl	8003250 <HAL_GPIO_WritePin>
    hdev->transmissionComplete = 0;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	731a      	strb	r2, [r3, #12]
    HAL_SPI_Transmit_IT(hdev->hspi, writeMessage, 3);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f107 0110 	add.w	r1, r7, #16
 80014d4:	2203      	movs	r2, #3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fd2a 	bl	8003f30 <HAL_SPI_Transmit_IT>

    startTime = HAL_GetTick();
 80014dc:	f000 fff6 	bl	80024cc <HAL_GetTick>
 80014e0:	6178      	str	r0, [r7, #20]
    while (!hdev->transmissionComplete) {
 80014e2:	e011      	b.n	8001508 <MCP2515_WriteRegisterWithTimeout+0x70>
        if ((HAL_GetTick() - startTime) > timeout) {
 80014e4:	f000 fff2 	bl	80024cc <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d209      	bcs.n	8001508 <MCP2515_WriteRegisterWithTimeout+0x70>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	889b      	ldrh	r3, [r3, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4619      	mov	r1, r3
 8001500:	f001 fea6 	bl	8003250 <HAL_GPIO_WritePin>
            return MCP2515_FAIL; // Timeout raggiunto
 8001504:	2301      	movs	r3, #1
 8001506:	e010      	b.n	800152a <MCP2515_WriteRegisterWithTimeout+0x92>
    while (!hdev->transmissionComplete) {
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	7b1b      	ldrb	r3, [r3, #12]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0e8      	beq.n	80014e4 <MCP2515_WriteRegisterWithTimeout+0x4c>
        }
    }
    hdev->transmissionComplete = 0;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	731a      	strb	r2, [r3, #12]
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	4619      	mov	r1, r3
 8001524:	f001 fe94 	bl	8003250 <HAL_GPIO_WritePin>
    
    return MCP2515_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <MCP2515_WriteBitWithTimeout>:

uint8_t MCP2515_WriteBitWithTimeout(MCP2515_HandleTypeDef* hdev, uint8_t address, uint8_t mask, uint8_t value, uint32_t timeout){
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
 800153a:	4608      	mov	r0, r1
 800153c:	4611      	mov	r1, r2
 800153e:	461a      	mov	r2, r3
 8001540:	4603      	mov	r3, r0
 8001542:	70fb      	strb	r3, [r7, #3]
 8001544:	460b      	mov	r3, r1
 8001546:	70bb      	strb	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
    uint32_t startTime;

    uint8_t writeMessage[3];
    writeMessage[0] = MCP2515_BIT_MODIFY;
 800154c:	2305      	movs	r3, #5
 800154e:	723b      	strb	r3, [r7, #8]
    writeMessage[1] = address;
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	727b      	strb	r3, [r7, #9]
    writeMessage[2] = mask;
 8001554:	78bb      	ldrb	r3, [r7, #2]
 8001556:	72bb      	strb	r3, [r7, #10]
    writeMessage[3] = value;
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	72fb      	strb	r3, [r7, #11]
    /*printf("value: 0x%02X\n", value);
    int arraySize = sizeof(writeMessage) / sizeof(writeMessage[0]);
    printByteArray(writeMessage, arraySize);*/


    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6818      	ldr	r0, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	889b      	ldrh	r3, [r3, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	4619      	mov	r1, r3
 8001568:	f001 fe72 	bl	8003250 <HAL_GPIO_WritePin>
    hdev->transmissionComplete = 0;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	731a      	strb	r2, [r3, #12]
    HAL_SPI_Transmit_IT(hdev->hspi, writeMessage, 4);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f107 0108 	add.w	r1, r7, #8
 800157a:	2204      	movs	r2, #4
 800157c:	4618      	mov	r0, r3
 800157e:	f002 fcd7 	bl	8003f30 <HAL_SPI_Transmit_IT>

    startTime = HAL_GetTick();
 8001582:	f000 ffa3 	bl	80024cc <HAL_GetTick>
 8001586:	60f8      	str	r0, [r7, #12]
    while (!hdev->transmissionComplete) {
 8001588:	e011      	b.n	80015ae <MCP2515_WriteBitWithTimeout+0x7c>
        if ((HAL_GetTick() - startTime) > timeout) {
 800158a:	f000 ff9f 	bl	80024cc <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	429a      	cmp	r2, r3
 8001598:	d209      	bcs.n	80015ae <MCP2515_WriteBitWithTimeout+0x7c>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	889b      	ldrh	r3, [r3, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4619      	mov	r1, r3
 80015a6:	f001 fe53 	bl	8003250 <HAL_GPIO_WritePin>
            return MCP2515_FAIL; // Timeout raggiunto
 80015aa:	2301      	movs	r3, #1
 80015ac:	e010      	b.n	80015d0 <MCP2515_WriteBitWithTimeout+0x9e>
    while (!hdev->transmissionComplete) {
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7b1b      	ldrb	r3, [r3, #12]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0e8      	beq.n	800158a <MCP2515_WriteBitWithTimeout+0x58>
        }
    }
    hdev->transmissionComplete = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	731a      	strb	r2, [r3, #12]
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	889b      	ldrh	r3, [r3, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	4619      	mov	r1, r3
 80015ca:	f001 fe41 	bl	8003250 <HAL_GPIO_WritePin>

    return MCP2515_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <MCP2515_ReadRegister>:


uint8_t MCP2515_ReadRegister(MCP2515_HandleTypeDef* hdev, uint8_t address, uint8_t* data){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	460b      	mov	r3, r1
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	72fb      	strb	r3, [r7, #11]
    uint32_t startTime;
    const uint32_t timeout = 10; // Timeout di 10 ms
 80015e6:	230a      	movs	r3, #10
 80015e8:	61fb      	str	r3, [r7, #28]
    uint8_t readMessage[2];
    readMessage[0] = MCP2515_READ;
 80015ea:	2303      	movs	r3, #3
 80015ec:	753b      	strb	r3, [r7, #20]
    readMessage[1] = address;
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	757b      	strb	r3, [r7, #21]

    uint8_t dummyData = 0x00;  // Dato dummy per generare i clock necessari
 80015f2:	2300      	movs	r3, #0
 80015f4:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	889b      	ldrh	r3, [r3, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	4619      	mov	r1, r3
 8001602:	f001 fe25 	bl	8003250 <HAL_GPIO_WritePin>
    hdev->transmissionComplete = 0;  // Resetta lo stato
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2200      	movs	r2, #0
 800160a:	731a      	strb	r2, [r3, #12]
    // Trasmetti il comando di lettura e l'indirizzo
    HAL_SPI_Transmit_IT(hdev->hspi, readMessage, 2);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f107 0114 	add.w	r1, r7, #20
 8001614:	2202      	movs	r2, #2
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fc8a 	bl	8003f30 <HAL_SPI_Transmit_IT>
    startTime = HAL_GetTick();
 800161c:	f000 ff56 	bl	80024cc <HAL_GetTick>
 8001620:	61b8      	str	r0, [r7, #24]
    // Attendi che la trasmissione sia completata
    while (!hdev->transmissionComplete) {
 8001622:	e014      	b.n	800164e <MCP2515_ReadRegister+0x76>
        if ((HAL_GetTick() - startTime) > timeout) {
 8001624:	f000 ff52 	bl	80024cc <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	429a      	cmp	r2, r3
 8001632:	d20c      	bcs.n	800164e <MCP2515_ReadRegister+0x76>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6818      	ldr	r0, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	889b      	ldrh	r3, [r3, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	4619      	mov	r1, r3
 8001640:	f001 fe06 	bl	8003250 <HAL_GPIO_WritePin>
            printf("Timeout trasmission read");
 8001644:	481f      	ldr	r0, [pc, #124]	@ (80016c4 <MCP2515_ReadRegister+0xec>)
 8001646:	f006 feb9 	bl	80083bc <iprintf>
            return MCP2515_READ_TIMEOUT_1; // Timeout raggiunto
 800164a:	2306      	movs	r3, #6
 800164c:	e036      	b.n	80016bc <MCP2515_ReadRegister+0xe4>
    while (!hdev->transmissionComplete) {
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	7b1b      	ldrb	r3, [r3, #12]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0e5      	beq.n	8001624 <MCP2515_ReadRegister+0x4c>
        }
    }
    hdev->transmissionComplete = 0;  // Resetta lo stato
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	731a      	strb	r2, [r3, #12]
    // Ricevi il dato dal registro
    HAL_SPI_TransmitReceive_IT(hdev->hspi, &dummyData, data, 1);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6898      	ldr	r0, [r3, #8]
 8001662:	f107 0113 	add.w	r1, r7, #19
 8001666:	2301      	movs	r3, #1
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	f002 fce9 	bl	8004040 <HAL_SPI_TransmitReceive_IT>
    startTime = HAL_GetTick();
 800166e:	f000 ff2d 	bl	80024cc <HAL_GetTick>
 8001672:	61b8      	str	r0, [r7, #24]
    // Attendi che la ricezione sia completata
    while (!hdev->transmissionComplete) {
 8001674:	e011      	b.n	800169a <MCP2515_ReadRegister+0xc2>
        if ((HAL_GetTick() - startTime) > timeout) {
 8001676:	f000 ff29 	bl	80024cc <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	429a      	cmp	r2, r3
 8001684:	d209      	bcs.n	800169a <MCP2515_ReadRegister+0xc2>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6818      	ldr	r0, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	4619      	mov	r1, r3
 8001692:	f001 fddd 	bl	8003250 <HAL_GPIO_WritePin>
            return MCP2515_READ_TIMEOUT_2; // Timeout raggiunto
 8001696:	2307      	movs	r3, #7
 8001698:	e010      	b.n	80016bc <MCP2515_ReadRegister+0xe4>
    while (!hdev->transmissionComplete) {
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	7b1b      	ldrb	r3, [r3, #12]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0e8      	beq.n	8001676 <MCP2515_ReadRegister+0x9e>
        }
    }
    hdev->transmissionComplete = 0;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2200      	movs	r2, #0
 80016a8:	731a      	strb	r2, [r3, #12]
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	889b      	ldrh	r3, [r3, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	4619      	mov	r1, r3
 80016b6:	f001 fdcb 	bl	8003250 <HAL_GPIO_WritePin>
    return MCP2515_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	080096d4 	.word	0x080096d4

080016c8 <MCP2515_SetMode>:


uint8_t MCP2515_SetMode(MCP2515_HandleTypeDef* hdev, uint8_t mode) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	70fb      	strb	r3, [r7, #3]
    const uint32_t timeout = 10; // Timeout di 10 ms
 80016d4:	230a      	movs	r3, #10
 80016d6:	60fb      	str	r3, [r7, #12]
    uint8_t status_data;
    uint8_t canctrl_data;
    uint8_t valueToSend;

    // Leggi il valore corrente per preservare gli altri bit
    if (MCP2515_ReadRegister(hdev, MCP2515_CANCTRL_MSG, &canctrl_data) != MCP2515_OK)
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	461a      	mov	r2, r3
 80016de:	210f      	movs	r1, #15
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff79 	bl	80015d8 <MCP2515_ReadRegister>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MCP2515_SetMode+0x28>
        return MCP2515_FAIL;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e02e      	b.n	800174e <MCP2515_SetMode+0x86>

    // Preserva gli altri bit e imposta quelli relativi alla trasmissione
    valueToSend = canctrl_data;
 80016f0:	7a3b      	ldrb	r3, [r7, #8]
 80016f2:	72fb      	strb	r3, [r7, #11]
    valueToSend &= ~(0x7 << 5);
 80016f4:	7afb      	ldrb	r3, [r7, #11]
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	72fb      	strb	r3, [r7, #11]
    valueToSend |= (mode << 5);
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	015b      	lsls	r3, r3, #5
 8001700:	b25a      	sxtb	r2, r3
 8001702:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001706:	4313      	orrs	r3, r2
 8001708:	b25b      	sxtb	r3, r3
 800170a:	72fb      	strb	r3, [r7, #11]

    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CANCTRL_MSG, valueToSend, timeout) != MCP2515_OK)
 800170c:	7afa      	ldrb	r2, [r7, #11]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	210f      	movs	r1, #15
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fec0 	bl	8001498 <MCP2515_WriteRegisterWithTimeout>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MCP2515_SetMode+0x5a>
        return MCP2515_FAIL;
 800171e:	2301      	movs	r3, #1
 8001720:	e015      	b.n	800174e <MCP2515_SetMode+0x86>

    if (MCP2515_ReadRegister(hdev,MCP2515_CANSTAT_MSG, &status_data) != MCP2515_OK)
 8001722:	f107 0309 	add.w	r3, r7, #9
 8001726:	461a      	mov	r2, r3
 8001728:	210e      	movs	r1, #14
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff54 	bl	80015d8 <MCP2515_ReadRegister>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MCP2515_SetMode+0x72>
        return MCP2515_FAIL;
 8001736:	2301      	movs	r3, #1
 8001738:	e009      	b.n	800174e <MCP2515_SetMode+0x86>
    // Verifica se il modo è stato impostato correttamente
    uint8_t currentMode = (status_data >> 5) & 0x07;
 800173a:	7a7b      	ldrb	r3, [r7, #9]
 800173c:	095b      	lsrs	r3, r3, #5
 800173e:	72bb      	strb	r3, [r7, #10]
    if (currentMode == mode) {
 8001740:	7aba      	ldrb	r2, [r7, #10]
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	429a      	cmp	r2, r3
 8001746:	d101      	bne.n	800174c <MCP2515_SetMode+0x84>
        return MCP2515_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	e000      	b.n	800174e <MCP2515_SetMode+0x86>
    }else
        return MCP2515_FAIL; 
 800174c:	2301      	movs	r3, #1
    
    return 
    MCP2515_FAIL;
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <MCP2515_ResetInt>:

uint8_t MCP2515_ResetInt(MCP2515_HandleTypeDef* hdev) {
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	const uint32_t timeout = 5; // Timeout di 10 ms
 800175e:	2305      	movs	r3, #5
 8001760:	60fb      	str	r3, [r7, #12]
	if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CANINTE_MSG, 0x0, timeout) != MCP2515_OK) // rivedere se si vogliono attivare altri enable
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2200      	movs	r2, #0
 8001766:	212b      	movs	r1, #43	@ 0x2b
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fe95 	bl	8001498 <MCP2515_WriteRegisterWithTimeout>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MCP2515_ResetInt+0x22>
	   return MCP2515_FAIL;
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <MCP2515_ResetInt+0x24>
	return MCP2515_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <MCP2515_SetIntTx>:





uint8_t MCP2515_SetIntTx(MCP2515_HandleTypeDef* hdev) {
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
    const uint32_t timeout = 5; // Timeout di 10 ms
 800178a:	2305      	movs	r3, #5
 800178c:	60fb      	str	r3, [r7, #12]
    uint8_t caninte_data;
    uint8_t intTx_value = 0x1C;
 800178e:	231c      	movs	r3, #28
 8001790:	72fb      	strb	r3, [r7, #11]
    
    // Leggi il valore corrente di CANINTE per preservare gli altri bit
    if (MCP2515_ReadRegister(hdev, MCP2515_CANINTE_MSG, &caninte_data) != MCP2515_OK)
 8001792:	f107 0309 	add.w	r3, r7, #9
 8001796:	461a      	mov	r2, r3
 8001798:	212b      	movs	r1, #43	@ 0x2b
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ff1c 	bl	80015d8 <MCP2515_ReadRegister>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MCP2515_SetIntTx+0x28>
        return MCP2515_FAIL;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e024      	b.n	80017f4 <MCP2515_SetIntTx+0x72>

    // Preserva gli altri bit e imposta quelli relativi alla trasmissione
    uint8_t valueToSend = caninte_data | intTx_value;
 80017aa:	7a7a      	ldrb	r2, [r7, #9]
 80017ac:	7afb      	ldrb	r3, [r7, #11]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	72bb      	strb	r3, [r7, #10]

    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CANINTE_MSG, valueToSend, timeout) != MCP2515_OK) // rivedere se si vogliono attivare altri enable
 80017b2:	7aba      	ldrb	r2, [r7, #10]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	212b      	movs	r1, #43	@ 0x2b
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe6d 	bl	8001498 <MCP2515_WriteRegisterWithTimeout>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MCP2515_SetIntTx+0x46>
        return MCP2515_FAIL;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e015      	b.n	80017f4 <MCP2515_SetIntTx+0x72>

    if (MCP2515_ReadRegister(hdev,MCP2515_CANINTE_MSG, &caninte_data) != MCP2515_OK)
 80017c8:	f107 0309 	add.w	r3, r7, #9
 80017cc:	461a      	mov	r2, r3
 80017ce:	212b      	movs	r1, #43	@ 0x2b
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ff01 	bl	80015d8 <MCP2515_ReadRegister>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MCP2515_SetIntTx+0x5e>
        return MCP2515_FAIL;
 80017dc:	2301      	movs	r3, #1
 80017de:	e009      	b.n	80017f4 <MCP2515_SetIntTx+0x72>

    // Controlla se i bit desiderati sono stati impostati
    if ((caninte_data & intTx_value) == intTx_value) {
 80017e0:	7a7a      	ldrb	r2, [r7, #9]
 80017e2:	7afb      	ldrb	r3, [r7, #11]
 80017e4:	4013      	ands	r3, r2
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	7afa      	ldrb	r2, [r7, #11]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d101      	bne.n	80017f2 <MCP2515_SetIntTx+0x70>
        return MCP2515_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e000      	b.n	80017f4 <MCP2515_SetIntTx+0x72>
    }else
        return MCP2515_FAIL; 
 80017f2:	2301      	movs	r3, #1

    return MCP2515_FAIL;
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <MCP2515_LoadTXBuffer>:

uint8_t MCP2515_LoadTXBuffer(MCP2515_HandleTypeDef* hdev, MCP2515_MessageBuffer* msgBuffer, uint8_t start) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	4613      	mov	r3, r2
 8001808:	71fb      	strb	r3, [r7, #7]

	static uint32_t start_time, timeWait;
	static uint8_t status_old;

	timeWait = HAL_GetTick() - start_time;
 800180a:	f000 fe5f 	bl	80024cc <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	4b9a      	ldr	r3, [pc, #616]	@ (8001a7c <MCP2515_LoadTXBuffer+0x280>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	4a9a      	ldr	r2, [pc, #616]	@ (8001a80 <MCP2515_LoadTXBuffer+0x284>)
 8001818:	6013      	str	r3, [r2, #0]
	switch (msgBuffer->status){
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	7c5b      	ldrb	r3, [r3, #17]
 800181e:	2b0a      	cmp	r3, #10
 8001820:	f200 81a0 	bhi.w	8001b64 <MCP2515_LoadTXBuffer+0x368>
 8001824:	a201      	add	r2, pc, #4	@ (adr r2, 800182c <MCP2515_LoadTXBuffer+0x30>)
 8001826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182a:	bf00      	nop
 800182c:	08001859 	.word	0x08001859
 8001830:	0800187d 	.word	0x0800187d
 8001834:	080018f1 	.word	0x080018f1
 8001838:	0800191f 	.word	0x0800191f
 800183c:	08001959 	.word	0x08001959
 8001840:	080019b3 	.word	0x080019b3
 8001844:	080019ff 	.word	0x080019ff
 8001848:	08001a89 	.word	0x08001a89
 800184c:	08001af9 	.word	0x08001af9
 8001850:	08001b31 	.word	0x08001b31
 8001854:	08001b39 	.word	0x08001b39

        case TRANSMISSION_IDLE:
            if (start == true){
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b01      	cmp	r3, #1
 800185c:	f040 8186 	bne.w	8001b6c <MCP2515_LoadTXBuffer+0x370>
                msgBuffer->status = TRANSMISSION_SET_VALUE;
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2201      	movs	r2, #1
 8001864:	745a      	strb	r2, [r3, #17]
                hdev->transmissionComplete = 0;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	731a      	strb	r2, [r3, #12]
                hdev->emptyTXBuffer[msgBuffer->buffer] = false;
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	461a      	mov	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4413      	add	r3, r2
 8001876:	2200      	movs	r2, #0
 8001878:	735a      	strb	r2, [r3, #13]
            }
            
            break;
 800187a:	e177      	b.n	8001b6c <MCP2515_LoadTXBuffer+0x370>

        case TRANSMISSION_SET_VALUE:
            switch (msgBuffer->buffer){
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d020      	beq.n	80018c6 <MCP2515_LoadTXBuffer+0xca>
 8001884:	2b02      	cmp	r3, #2
 8001886:	dc2b      	bgt.n	80018e0 <MCP2515_LoadTXBuffer+0xe4>
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <MCP2515_LoadTXBuffer+0x96>
 800188c:	2b01      	cmp	r3, #1
 800188e:	d00d      	beq.n	80018ac <MCP2515_LoadTXBuffer+0xb0>
                    msgBuffer->txTXREQAddress = MCP2515_TXB2CTRL;
                    //printf("buffer2\n");
                    break;

                default:
                    break;
 8001890:	e026      	b.n	80018e0 <MCP2515_LoadTXBuffer+0xe4>
                    msgBuffer->loadIDCmd = MCP2515_LOAD_TX_ID_0;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2240      	movs	r2, #64	@ 0x40
 8001896:	735a      	strb	r2, [r3, #13]
                    msgBuffer->loadDataCmd = MCP2515_LOAD_TX_DATA_0;
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2241      	movs	r2, #65	@ 0x41
 800189c:	739a      	strb	r2, [r3, #14]
                    msgBuffer->txDLCAddress = MCP2515_TXB0DLC;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2235      	movs	r2, #53	@ 0x35
 80018a2:	73da      	strb	r2, [r3, #15]
                    msgBuffer->txTXREQAddress = MCP2515_TXB0CTRL;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2230      	movs	r2, #48	@ 0x30
 80018a8:	741a      	strb	r2, [r3, #16]
                    break;
 80018aa:	e01a      	b.n	80018e2 <MCP2515_LoadTXBuffer+0xe6>
                    msgBuffer->loadIDCmd = MCP2515_LOAD_TX_ID_1;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2242      	movs	r2, #66	@ 0x42
 80018b0:	735a      	strb	r2, [r3, #13]
                    msgBuffer->loadDataCmd = MCP2515_LOAD_TX_DATA_1;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	2243      	movs	r2, #67	@ 0x43
 80018b6:	739a      	strb	r2, [r3, #14]
                    msgBuffer->txDLCAddress = MCP2515_TXB1DLC;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2245      	movs	r2, #69	@ 0x45
 80018bc:	73da      	strb	r2, [r3, #15]
                    msgBuffer->txTXREQAddress = MCP2515_TXB1CTRL;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2240      	movs	r2, #64	@ 0x40
 80018c2:	741a      	strb	r2, [r3, #16]
                    break;
 80018c4:	e00d      	b.n	80018e2 <MCP2515_LoadTXBuffer+0xe6>
                    msgBuffer->loadIDCmd = MCP2515_LOAD_TX_ID_2;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2244      	movs	r2, #68	@ 0x44
 80018ca:	735a      	strb	r2, [r3, #13]
                    msgBuffer->loadDataCmd = MCP2515_LOAD_TX_DATA_2;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2245      	movs	r2, #69	@ 0x45
 80018d0:	739a      	strb	r2, [r3, #14]
                    msgBuffer->txDLCAddress = MCP2515_TXB2DLC;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2255      	movs	r2, #85	@ 0x55
 80018d6:	73da      	strb	r2, [r3, #15]
                    msgBuffer->txTXREQAddress = MCP2515_TXB2CTRL;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2250      	movs	r2, #80	@ 0x50
 80018dc:	741a      	strb	r2, [r3, #16]
                    break;
 80018de:	e000      	b.n	80018e2 <MCP2515_LoadTXBuffer+0xe6>
                    break;
 80018e0:	bf00      	nop
            }

            msgBuffer->status = TRANSMISSION_ID_CMD;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2202      	movs	r2, #2
 80018e6:	745a      	strb	r2, [r3, #17]
            hdev->transmissionComplete = 0;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	731a      	strb	r2, [r3, #12]
            break;
 80018ee:	e14a      	b.n	8001b86 <MCP2515_LoadTXBuffer+0x38a>

        case TRANSMISSION_ID_CMD:
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	889b      	ldrh	r3, [r3, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	4619      	mov	r1, r3
 80018fc:	f001 fca8 	bl	8003250 <HAL_GPIO_WritePin>
            hdev->transmissionComplete = 0;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	731a      	strb	r2, [r3, #12]
            //printf("ID_ADDR: 0x%02X"\n, msgBuffer->loadIDCmd);
            HAL_SPI_Transmit_IT(hdev->hspi, &msgBuffer->loadIDCmd, 1);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6898      	ldr	r0, [r3, #8]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	330d      	adds	r3, #13
 800190e:	2201      	movs	r2, #1
 8001910:	4619      	mov	r1, r3
 8001912:	f002 fb0d 	bl	8003f30 <HAL_SPI_Transmit_IT>
            msgBuffer->status = TRANSMISSION_ID_VALUE;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2203      	movs	r2, #3
 800191a:	745a      	strb	r2, [r3, #17]
            
            break;
 800191c:	e133      	b.n	8001b86 <MCP2515_LoadTXBuffer+0x38a>

        case TRANSMISSION_ID_VALUE:


            
             if (hdev->transmissionComplete == 1) {
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	7b1b      	ldrb	r3, [r3, #12]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d10d      	bne.n	8001944 <MCP2515_LoadTXBuffer+0x148>
            	 // HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
                hdev->transmissionComplete = 0;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	731a      	strb	r2, [r3, #12]
                //HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
                HAL_SPI_Transmit_IT(hdev->hspi, msgBuffer->idData, 4);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6898      	ldr	r0, [r3, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2204      	movs	r2, #4
 8001938:	4619      	mov	r1, r3
 800193a:	f002 faf9 	bl	8003f30 <HAL_SPI_Transmit_IT>
                msgBuffer->status = TRANSMISSION_DATA_CMD;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2204      	movs	r2, #4
 8001942:	745a      	strb	r2, [r3, #17]

            }
            if (timeWait>=2){
 8001944:	4b4e      	ldr	r3, [pc, #312]	@ (8001a80 <MCP2515_LoadTXBuffer+0x284>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	f240 8111 	bls.w	8001b70 <MCP2515_LoadTXBuffer+0x374>
        		msgBuffer->status = TRANSMISSION_ERROR;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	220a      	movs	r2, #10
 8001952:	745a      	strb	r2, [r3, #17]
        		return 100;
 8001954:	2364      	movs	r3, #100	@ 0x64
 8001956:	e126      	b.n	8001ba6 <MCP2515_LoadTXBuffer+0x3aa>

            break;

        case TRANSMISSION_DATA_CMD:

             if (hdev->transmissionComplete == 1) {
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	7b1b      	ldrb	r3, [r3, #12]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d11d      	bne.n	800199e <MCP2515_LoadTXBuffer+0x1a2>
            	HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	889b      	ldrh	r3, [r3, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	4619      	mov	r1, r3
 800196e:	f001 fc6f 	bl	8003250 <HAL_GPIO_WritePin>
                hdev->transmissionComplete = 0;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	731a      	strb	r2, [r3, #12]
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	889b      	ldrh	r3, [r3, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	4619      	mov	r1, r3
 8001984:	f001 fc64 	bl	8003250 <HAL_GPIO_WritePin>
                HAL_SPI_Transmit_IT(hdev->hspi, &msgBuffer->loadDataCmd, 1);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6898      	ldr	r0, [r3, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	330e      	adds	r3, #14
 8001990:	2201      	movs	r2, #1
 8001992:	4619      	mov	r1, r3
 8001994:	f002 facc 	bl	8003f30 <HAL_SPI_Transmit_IT>
                msgBuffer->status = TRANSMISSION_DATA_VALUE;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	2205      	movs	r2, #5
 800199c:	745a      	strb	r2, [r3, #17]
            }
            if (timeWait>=2){
 800199e:	4b38      	ldr	r3, [pc, #224]	@ (8001a80 <MCP2515_LoadTXBuffer+0x284>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	f240 80e6 	bls.w	8001b74 <MCP2515_LoadTXBuffer+0x378>
        	        		msgBuffer->status = TRANSMISSION_ERROR;
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	220a      	movs	r2, #10
 80019ac:	745a      	strb	r2, [r3, #17]
        	        		return 101;
 80019ae:	2365      	movs	r3, #101	@ 0x65
 80019b0:	e0f9      	b.n	8001ba6 <MCP2515_LoadTXBuffer+0x3aa>
            
            break;

        case TRANSMISSION_DATA_VALUE:

             if (hdev->transmissionComplete == 1) {
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	7b1b      	ldrb	r3, [r3, #12]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d116      	bne.n	80019ea <MCP2515_LoadTXBuffer+0x1ee>
            	// HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
                hdev->transmissionComplete = 0;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	731a      	strb	r2, [r3, #12]
                /*uint8_t lenghtMsg = msgBuffer->length;
                if (lenghtMsg == 0){
                	lenghtMsg = 1;
                }*/

                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	889b      	ldrh	r3, [r3, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	4619      	mov	r1, r3
 80019ce:	f001 fc3f 	bl	8003250 <HAL_GPIO_WritePin>

                HAL_SPI_Transmit_IT(hdev->hspi, msgBuffer->data, msgBuffer->length);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6898      	ldr	r0, [r3, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	6899      	ldr	r1, [r3, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	7b1b      	ldrb	r3, [r3, #12]
 80019de:	461a      	mov	r2, r3
 80019e0:	f002 faa6 	bl	8003f30 <HAL_SPI_Transmit_IT>
                msgBuffer->status = TRANSMISSION_DLC;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2206      	movs	r2, #6
 80019e8:	745a      	strb	r2, [r3, #17]
            }
            if (timeWait>=2){
 80019ea:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <MCP2515_LoadTXBuffer+0x284>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	f240 80c2 	bls.w	8001b78 <MCP2515_LoadTXBuffer+0x37c>
        	        		msgBuffer->status = TRANSMISSION_ERROR;
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	220a      	movs	r2, #10
 80019f8:	745a      	strb	r2, [r3, #17]
        	        		return 102;
 80019fa:	2366      	movs	r3, #102	@ 0x66
 80019fc:	e0d3      	b.n	8001ba6 <MCP2515_LoadTXBuffer+0x3aa>

            break;

        case TRANSMISSION_DLC:

             if (hdev->transmissionComplete == 1) {
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	7b1b      	ldrb	r3, [r3, #12]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d12f      	bne.n	8001a68 <MCP2515_LoadTXBuffer+0x26c>
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	889b      	ldrh	r3, [r3, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	4619      	mov	r1, r3
 8001a14:	f001 fc1c 	bl	8003250 <HAL_GPIO_WritePin>
                writeMessage[0] = MCP2515_WRITE;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <MCP2515_LoadTXBuffer+0x288>)
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	701a      	strb	r2, [r3, #0]
                writeMessage[1] = msgBuffer->txDLCAddress;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	7bda      	ldrb	r2, [r3, #15]
 8001a22:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <MCP2515_LoadTXBuffer+0x288>)
 8001a24:	705a      	strb	r2, [r3, #1]
                if (msgBuffer->length <= 8)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	7b1b      	ldrb	r3, [r3, #12]
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d804      	bhi.n	8001a38 <MCP2515_LoadTXBuffer+0x23c>
                    writeMessage[2] = msgBuffer->length;
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	7b1a      	ldrb	r2, [r3, #12]
 8001a32:	4b14      	ldr	r3, [pc, #80]	@ (8001a84 <MCP2515_LoadTXBuffer+0x288>)
 8001a34:	709a      	strb	r2, [r3, #2]
 8001a36:	e002      	b.n	8001a3e <MCP2515_LoadTXBuffer+0x242>
                else 
                    writeMessage[2] = 8;
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <MCP2515_LoadTXBuffer+0x288>)
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	709a      	strb	r2, [r3, #2]
                //printf("0: 0x%02X, 1: 0x%02X, 2: 0x%02X\n", writeMessage[0], writeMessage[1], writeMessage[2]);
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	889b      	ldrh	r3, [r3, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f001 fc01 	bl	8003250 <HAL_GPIO_WritePin>
                hdev->transmissionComplete = 0;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	731a      	strb	r2, [r3, #12]
                HAL_SPI_Transmit_IT(hdev->hspi, writeMessage, 3);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2203      	movs	r2, #3
 8001a5a:	490a      	ldr	r1, [pc, #40]	@ (8001a84 <MCP2515_LoadTXBuffer+0x288>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 fa67 	bl	8003f30 <HAL_SPI_Transmit_IT>
                msgBuffer->status = TRANSMISSION_TXREQ;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2207      	movs	r2, #7
 8001a66:	745a      	strb	r2, [r3, #17]
            }
            if (timeWait>=1){
 8001a68:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <MCP2515_LoadTXBuffer+0x284>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 8085 	beq.w	8001b7c <MCP2515_LoadTXBuffer+0x380>
        	        		msgBuffer->status = TRANSMISSION_ERROR;
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	220a      	movs	r2, #10
 8001a76:	745a      	strb	r2, [r3, #17]
        	        		return 103;
 8001a78:	2367      	movs	r3, #103	@ 0x67
 8001a7a:	e094      	b.n	8001ba6 <MCP2515_LoadTXBuffer+0x3aa>
 8001a7c:	20000490 	.word	0x20000490
 8001a80:	20000494 	.word	0x20000494
 8001a84:	2000048c 	.word	0x2000048c
            break;

        case TRANSMISSION_TXREQ:
            

            if (hdev->transmissionComplete == 1) {
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	7b1b      	ldrb	r3, [r3, #12]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d129      	bne.n	8001ae6 <MCP2515_LoadTXBuffer+0x2ea>
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	889b      	ldrh	r3, [r3, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f001 fbd7 	bl	8003250 <HAL_GPIO_WritePin>
                writeMessage[0] = MCP2515_BIT_MODIFY;
 8001aa2:	4b43      	ldr	r3, [pc, #268]	@ (8001bb0 <MCP2515_LoadTXBuffer+0x3b4>)
 8001aa4:	2205      	movs	r2, #5
 8001aa6:	701a      	strb	r2, [r3, #0]
                writeMessage[1] = msgBuffer->txTXREQAddress;
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	7c1a      	ldrb	r2, [r3, #16]
 8001aac:	4b40      	ldr	r3, [pc, #256]	@ (8001bb0 <MCP2515_LoadTXBuffer+0x3b4>)
 8001aae:	705a      	strb	r2, [r3, #1]
                writeMessage[2] = MCP2515_TXREQ_MASK;
 8001ab0:	4b3f      	ldr	r3, [pc, #252]	@ (8001bb0 <MCP2515_LoadTXBuffer+0x3b4>)
 8001ab2:	2208      	movs	r2, #8
 8001ab4:	709a      	strb	r2, [r3, #2]
                writeMessage[3] = MCP2515_TXREQ_SET;
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb0 <MCP2515_LoadTXBuffer+0x3b4>)
 8001ab8:	2208      	movs	r2, #8
 8001aba:	70da      	strb	r2, [r3, #3]

                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	889b      	ldrh	r3, [r3, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f001 fbc2 	bl	8003250 <HAL_GPIO_WritePin>
                hdev->transmissionComplete = 0;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	731a      	strb	r2, [r3, #12]
                HAL_SPI_Transmit_IT(hdev->hspi, writeMessage, 4);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	4935      	ldr	r1, [pc, #212]	@ (8001bb0 <MCP2515_LoadTXBuffer+0x3b4>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fa28 	bl	8003f30 <HAL_SPI_Transmit_IT>

                msgBuffer->status = TRANSMISSION_END;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	745a      	strb	r2, [r3, #17]
                
            }
            if (timeWait>=2){
 8001ae6:	4b33      	ldr	r3, [pc, #204]	@ (8001bb4 <MCP2515_LoadTXBuffer+0x3b8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d948      	bls.n	8001b80 <MCP2515_LoadTXBuffer+0x384>
        	        		msgBuffer->status = TRANSMISSION_ERROR;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	220a      	movs	r2, #10
 8001af2:	745a      	strb	r2, [r3, #17]
        	        		return 104;
 8001af4:	2368      	movs	r3, #104	@ 0x68
 8001af6:	e056      	b.n	8001ba6 <MCP2515_LoadTXBuffer+0x3aa>
        	        	}
            
            break;

        case TRANSMISSION_END:
        	 if (hdev->transmissionComplete == 1) {
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	7b1b      	ldrb	r3, [r3, #12]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d10d      	bne.n	8001b1e <MCP2515_LoadTXBuffer+0x322>
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	889b      	ldrh	r3, [r3, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f001 fb9f 	bl	8003250 <HAL_GPIO_WritePin>
                hdev->transmissionComplete = 0;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	731a      	strb	r2, [r3, #12]
                //MCP2515_ReadRegister(hdev,0x2b, &data);
                //MCP2515_ReadRegister(hdev,0x2c, &data);
                //MCP2515_ReadRegister(hdev,MCP2515_TXB0CTRL, &data);
                //printf("Value: 0x%02X\n",data );*/

                msgBuffer->status = TRANSMISSION_RESET;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2209      	movs	r2, #9
 8001b1c:	745a      	strb	r2, [r3, #17]


            }
        	 if (timeWait>=2){
 8001b1e:	4b25      	ldr	r3, [pc, #148]	@ (8001bb4 <MCP2515_LoadTXBuffer+0x3b8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d92e      	bls.n	8001b84 <MCP2515_LoadTXBuffer+0x388>
        	        		msgBuffer->status = TRANSMISSION_ERROR;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	220a      	movs	r2, #10
 8001b2a:	745a      	strb	r2, [r3, #17]
        	        		return 105;
 8001b2c:	2369      	movs	r3, #105	@ 0x69
 8001b2e:	e03a      	b.n	8001ba6 <MCP2515_LoadTXBuffer+0x3aa>
        	        	}

            break;

        case TRANSMISSION_RESET:
        	msgBuffer->status = TRANSMISSION_IDLE;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2200      	movs	r2, #0
 8001b34:	745a      	strb	r2, [r3, #17]
        	break;
 8001b36:	e026      	b.n	8001b86 <MCP2515_LoadTXBuffer+0x38a>

        case TRANSMISSION_ERROR:
            //printf("Errore trasmissione");
        	HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	889b      	ldrh	r3, [r3, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	4619      	mov	r1, r3
 8001b44:	f001 fb84 	bl	8003250 <HAL_GPIO_WritePin>
        	hdev->transmissionComplete = 0;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	731a      	strb	r2, [r3, #12]
        	hdev->emptyTXBuffer[msgBuffer->buffer] = true;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	2201      	movs	r2, #1
 8001b5a:	735a      	strb	r2, [r3, #13]
            msgBuffer->status = TRANSMISSION_IDLE;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	745a      	strb	r2, [r3, #17]
            
            break;
 8001b62:	e010      	b.n	8001b86 <MCP2515_LoadTXBuffer+0x38a>

        default:
            msgBuffer->status = TRANSMISSION_IDLE;  
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2200      	movs	r2, #0
 8001b68:	745a      	strb	r2, [r3, #17]
            break;
 8001b6a:	e00c      	b.n	8001b86 <MCP2515_LoadTXBuffer+0x38a>
            break;
 8001b6c:	bf00      	nop
 8001b6e:	e00a      	b.n	8001b86 <MCP2515_LoadTXBuffer+0x38a>
            break;
 8001b70:	bf00      	nop
 8001b72:	e008      	b.n	8001b86 <MCP2515_LoadTXBuffer+0x38a>
            break;
 8001b74:	bf00      	nop
 8001b76:	e006      	b.n	8001b86 <MCP2515_LoadTXBuffer+0x38a>
            break;
 8001b78:	bf00      	nop
 8001b7a:	e004      	b.n	8001b86 <MCP2515_LoadTXBuffer+0x38a>
            break;
 8001b7c:	bf00      	nop
 8001b7e:	e002      	b.n	8001b86 <MCP2515_LoadTXBuffer+0x38a>
            break;
 8001b80:	bf00      	nop
 8001b82:	e000      	b.n	8001b86 <MCP2515_LoadTXBuffer+0x38a>
            break;
 8001b84:	bf00      	nop
        
    }

	if (msgBuffer->status != status_old){
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	7c5a      	ldrb	r2, [r3, #17]
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <MCP2515_LoadTXBuffer+0x3bc>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d008      	beq.n	8001ba4 <MCP2515_LoadTXBuffer+0x3a8>
			status_old = msgBuffer->status;
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	7c5a      	ldrb	r2, [r3, #17]
 8001b96:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <MCP2515_LoadTXBuffer+0x3bc>)
 8001b98:	701a      	strb	r2, [r3, #0]
			start_time = HAL_GetTick();
 8001b9a:	f000 fc97 	bl	80024cc <HAL_GetTick>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4a06      	ldr	r2, [pc, #24]	@ (8001bbc <MCP2515_LoadTXBuffer+0x3c0>)
 8001ba2:	6013      	str	r3, [r2, #0]
		}
    return 0;
 8001ba4:	2300      	movs	r3, #0

}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000048c 	.word	0x2000048c
 8001bb4:	20000494 	.word	0x20000494
 8001bb8:	20000498 	.word	0x20000498
 8001bbc:	20000490 	.word	0x20000490

08001bc0 <MCP2515_SendMessage>:

uint8_t MCP2515_SendMessage(MCP2515_HandleTypeDef* hdev, MCP2515_MessageBuffer* msgBuffer, MCP2515_canMessage* canMessageTx){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
	static uint8_t indexMsg = 0;
	uint8_t readyToSend = false;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	75fb      	strb	r3, [r7, #23]
	uint8_t result = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	75bb      	strb	r3, [r7, #22]

    if (hdev->emptyTXBuffer[MCP2515_TX_BUFFER_0] ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	7b5b      	ldrb	r3, [r3, #13]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d107      	bne.n	8001bec <MCP2515_SendMessage+0x2c>
    		hdev->emptyTXBuffer[MCP2515_TX_BUFFER_1] ||
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	7b9b      	ldrb	r3, [r3, #14]
    if (hdev->emptyTXBuffer[MCP2515_TX_BUFFER_0] ||
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d103      	bne.n	8001bec <MCP2515_SendMessage+0x2c>
			hdev->emptyTXBuffer[MCP2515_TX_BUFFER_2]){
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	7bdb      	ldrb	r3, [r3, #15]
    		hdev->emptyTXBuffer[MCP2515_TX_BUFFER_1] ||
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MCP2515_SendMessage+0x30>
        readyToSend = true;
 8001bec:	2301      	movs	r3, #1
 8001bee:	75fb      	strb	r3, [r7, #23]
    }



    if (msgBuffer->status ==  TRANSMISSION_RESET ||
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	7c5b      	ldrb	r3, [r3, #17]
 8001bf4:	2b09      	cmp	r3, #9
 8001bf6:	d003      	beq.n	8001c00 <MCP2515_SendMessage+0x40>
    		msgBuffer->status ==  TRANSMISSION_ERROR	){
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	7c5b      	ldrb	r3, [r3, #17]
    if (msgBuffer->status ==  TRANSMISSION_RESET ||
 8001bfc:	2b0a      	cmp	r3, #10
 8001bfe:	d120      	bne.n	8001c42 <MCP2515_SendMessage+0x82>
    	canMessageTx[indexMsg].sending = false;
 8001c00:	4b4b      	ldr	r3, [pc, #300]	@ (8001d30 <MCP2515_SendMessage+0x170>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	2200      	movs	r2, #0
 8001c12:	739a      	strb	r2, [r3, #14]
    	canMessageTx[indexMsg].newMsg = false;
 8001c14:	4b46      	ldr	r3, [pc, #280]	@ (8001d30 <MCP2515_SendMessage+0x170>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	1a9b      	subs	r3, r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	2200      	movs	r2, #0
 8001c26:	735a      	strb	r2, [r3, #13]
    	indexMsg ++;
 8001c28:	4b41      	ldr	r3, [pc, #260]	@ (8001d30 <MCP2515_SendMessage+0x170>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b3f      	ldr	r3, [pc, #252]	@ (8001d30 <MCP2515_SendMessage+0x170>)
 8001c32:	701a      	strb	r2, [r3, #0]
    	if (indexMsg >= BUFFER_TX_SPI){
 8001c34:	4b3e      	ldr	r3, [pc, #248]	@ (8001d30 <MCP2515_SendMessage+0x170>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b31      	cmp	r3, #49	@ 0x31
 8001c3a:	d902      	bls.n	8001c42 <MCP2515_SendMessage+0x82>
    		indexMsg = 0;}
 8001c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d30 <MCP2515_SendMessage+0x170>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
    }

    if (readyToSend && 
 8001c42:	7dfb      	ldrb	r3, [r7, #23]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d066      	beq.n	8001d16 <MCP2515_SendMessage+0x156>
        hdev->hspi->State == HAL_SPI_STATE_READY &&
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c50:	b2db      	uxtb	r3, r3
    if (readyToSend && 
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d15f      	bne.n	8001d16 <MCP2515_SendMessage+0x156>
		msgBuffer->status ==  TRANSMISSION_IDLE &&
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	7c5b      	ldrb	r3, [r3, #17]
        hdev->hspi->State == HAL_SPI_STATE_READY &&
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d15b      	bne.n	8001d16 <MCP2515_SendMessage+0x156>
		canMessageTx[indexMsg].newMsg) {
 8001c5e:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <MCP2515_SendMessage+0x170>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	4613      	mov	r3, r2
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	7b5b      	ldrb	r3, [r3, #13]
		msgBuffer->status ==  TRANSMISSION_IDLE &&
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d050      	beq.n	8001d16 <MCP2515_SendMessage+0x156>

    	if (hdev->emptyTXBuffer[MCP2515_TX_BUFFER_0]){
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	7b5b      	ldrb	r3, [r3, #13]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <MCP2515_SendMessage+0xc4>
    		msgBuffer->buffer = MCP2515_TX_BUFFER_0;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	e012      	b.n	8001caa <MCP2515_SendMessage+0xea>
		}
    	else if (hdev->emptyTXBuffer[MCP2515_TX_BUFFER_1]){
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	7b9b      	ldrb	r3, [r3, #14]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <MCP2515_SendMessage+0xd4>
    		msgBuffer->buffer = MCP2515_TX_BUFFER_1;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e00a      	b.n	8001caa <MCP2515_SendMessage+0xea>
		}
    	else if (hdev->emptyTXBuffer[MCP2515_TX_BUFFER_2]){
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	7bdb      	ldrb	r3, [r3, #15]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <MCP2515_SendMessage+0xe4>
    		msgBuffer->buffer = MCP2515_TX_BUFFER_2;
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	e002      	b.n	8001caa <MCP2515_SendMessage+0xea>
		}
    	else{
    		msgBuffer->buffer = MCP2515_TX_BUFFER_NONE;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	701a      	strb	r2, [r3, #0]
    	}

    	msgBuffer->idData = canMessageTx[indexMsg].msgID;
 8001caa:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <MCP2515_SendMessage+0x170>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	4413      	add	r3, r2
 8001cba:	f103 0208 	add.w	r2, r3, #8
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	605a      	str	r2, [r3, #4]
    	msgBuffer->data = canMessageTx[indexMsg].msgData;
 8001cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d30 <MCP2515_SendMessage+0x170>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4613      	mov	r3, r2
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	609a      	str	r2, [r3, #8]
    	msgBuffer->length = canMessageTx[indexMsg].dlc;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <MCP2515_SendMessage+0x170>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4613      	mov	r3, r2
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	1a9b      	subs	r3, r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	7b1a      	ldrb	r2, [r3, #12]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	731a      	strb	r2, [r3, #12]
    		if (canMessageTx[indexMsg].dlc != 8){
    			result = canMessageTx[indexMsg].dlc;}
    		else result=100;
    	}*/

		canMessageTx[indexMsg].sending = true;
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <MCP2515_SendMessage+0x170>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	2201      	movs	r2, #1
 8001d00:	739a      	strb	r2, [r3, #14]
		result = MCP2515_LoadTXBuffer(hdev, msgBuffer, true);
 8001d02:	2201      	movs	r2, #1
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f7ff fd78 	bl	80017fc <MCP2515_LoadTXBuffer>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	75bb      	strb	r3, [r7, #22]
        readyToSend = false;
 8001d10:	2300      	movs	r3, #0
 8001d12:	75fb      	strb	r3, [r7, #23]
 8001d14:	e006      	b.n	8001d24 <MCP2515_SendMessage+0x164>
        //result = 0;
	}

    else{
        
    	result = MCP2515_LoadTXBuffer(hdev, msgBuffer, false);
 8001d16:	2200      	movs	r2, #0
 8001d18:	68b9      	ldr	r1, [r7, #8]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7ff fd6e 	bl	80017fc <MCP2515_LoadTXBuffer>
 8001d20:	4603      	mov	r3, r0
 8001d22:	75bb      	strb	r3, [r7, #22]
        //printf("Message Buffer Status: %d (TRANSMISSION_IDLE = %d)\n", msgBuffer->status, TRANSMISSION_IDLE);
    	/*if (canMessageTx[indexMsg].newMsg != 0)
    		result = 1;
    	else result = 2;*/
    }
    return result;
 8001d24:	7dbb      	ldrb	r3, [r7, #22]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000499 	.word	0x20000499

08001d34 <MCP2515_InterruptHandler>:


uint8_t MCP2515_InterruptHandler(MCP2515_HandleTypeDef* hdev, GPIO_PinState intFlag, MCP2515_MessageBuffer* msgBuffer){
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b08f      	sub	sp, #60	@ 0x3c
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	72fb      	strb	r3, [r7, #11]
	const uint8_t timeout = 10; // Timeout di 10 ms
 8001d42:	230a      	movs	r3, #10
 8001d44:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t result_read_TXBnCTRL[3] = {0x0,0x0,0x0};
 8001d48:	4a6e      	ldr	r2, [pc, #440]	@ (8001f04 <MCP2515_InterruptHandler+0x1d0>)
 8001d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	4611      	mov	r1, r2
 8001d52:	8019      	strh	r1, [r3, #0]
 8001d54:	3302      	adds	r3, #2
 8001d56:	0c12      	lsrs	r2, r2, #16
 8001d58:	701a      	strb	r2, [r3, #0]

    bool isIdle = (msgBuffer->status == TRANSMISSION_IDLE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7c5b      	ldrb	r3, [r3, #17]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf0c      	ite	eq
 8001d62:	2301      	moveq	r3, #1
 8001d64:	2300      	movne	r3, #0
 8001d66:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    bool isIntFlagSet = (intFlag==GPIO_PIN_RESET);
 8001d6a:	7afb      	ldrb	r3, [r7, #11]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    bool isSpiReady = (hdev->hspi->State == HAL_SPI_STATE_READY);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	bf0c      	ite	eq
 8001d86:	2301      	moveq	r3, #1
 8001d88:	2300      	movne	r3, #0
 8001d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    uint8_t TXxIF_val[3];

	uint8_t read_TXBnCTRL[3];
	uint8_t TXBnCTRL_addr[3] = {MCP2515_TXB0CTRL, MCP2515_TXB1CTRL, MCP2515_TXB2CTRL};
 8001d8e:	4a5e      	ldr	r2, [pc, #376]	@ (8001f08 <MCP2515_InterruptHandler+0x1d4>)
 8001d90:	f107 0318 	add.w	r3, r7, #24
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	4611      	mov	r1, r2
 8001d98:	8019      	strh	r1, [r3, #0]
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	0c12      	lsrs	r2, r2, #16
 8001d9e:	701a      	strb	r2, [r3, #0]
	uint8_t TXREQ_val[3];



    // Verifica che la trasmissione non sia in corso, che l'interrupt sia attivo, e che l'SPI sia pronto
    if (isIdle && isIntFlagSet && isSpiReady) {
 8001da0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a8 	beq.w	8001efa <MCP2515_InterruptHandler+0x1c6>
 8001daa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80a3 	beq.w	8001efa <MCP2515_InterruptHandler+0x1c6>
 8001db4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 809e 	beq.w	8001efa <MCP2515_InterruptHandler+0x1c6>
        //printf("status: %d\n", msgBuffer->status);
        //printf("transmissionOn: %d\n", transmissionOn);
        // Legge il registro CANINTF per verificare quali interrupt sono attivi
        uint8_t result_read_canintf;
        uint8_t read_canintf;
        result_read_canintf = MCP2515_ReadRegister(hdev,MCP2515_CANINTF_MSG, &read_canintf);
 8001dbe:	f107 0313 	add.w	r3, r7, #19
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	212c      	movs	r1, #44	@ 0x2c
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f7ff fc06 	bl	80015d8 <MCP2515_ReadRegister>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

        if (result_read_canintf != MCP2515_OK) {
 8001dd2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MCP2515_InterruptHandler+0xaa>
            // Gestisci l'errore se la lettura fallisce
            //printf("Errore nella lettura del registro CANINTF\n");
            return 10;
 8001dda:	230a      	movs	r3, #10
 8001ddc:	e08e      	b.n	8001efc <MCP2515_InterruptHandler+0x1c8>
        }

        //uint8_t canintf_val = read_canintf;


        for (uint8_t i=0; i < 3; i++){
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001de4:	e084      	b.n	8001ef0 <MCP2515_InterruptHandler+0x1bc>
            // Estrai il bit TXxIF corrispondente dal registro CANINTF
            TXxIF_val[i] = (read_canintf >> (i + 2)) & 0x01;
 8001de6:	7cfb      	ldrb	r3, [r7, #19]
 8001de8:	461a      	mov	r2, r3
 8001dea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dee:	3302      	adds	r3, #2
 8001df0:	fa42 f303 	asr.w	r3, r2, r3
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001dfa:	f002 0201 	and.w	r2, r2, #1
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	3330      	adds	r3, #48	@ 0x30
 8001e02:	443b      	add	r3, r7
 8001e04:	f803 2c10 	strb.w	r2, [r3, #-16]
            //printf("TXxIF_val[%d]: %d\n", i, TXxIF_val[i]);

            if (TXxIF_val[i]) {
 8001e08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e0c:	3330      	adds	r3, #48	@ 0x30
 8001e0e:	443b      	add	r3, r7
 8001e10:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d066      	beq.n	8001ee6 <MCP2515_InterruptHandler+0x1b2>

            	uint8_t mask = 1<<(2+i);
 8001e18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	2201      	movs	r2, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

            	MCP2515_WriteBitWithTimeout(hdev, MCP2515_CANINTF_MSG, mask, 0x0, timeout);
 8001e28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e2c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2300      	movs	r3, #0
 8001e34:	212c      	movs	r1, #44	@ 0x2c
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff fb7b 	bl	8001532 <MCP2515_WriteBitWithTimeout>

                //canintf_val &= ~(1 << (2+i));
                // Se il bit TXxIF è impostato
                // Leggi il registro TXBnCTRL per verificare lo stato di TXREQ
                result_read_TXBnCTRL[i] = MCP2515_ReadRegister(hdev,TXBnCTRL_addr[i], &read_TXBnCTRL[i]);
 8001e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e40:	3330      	adds	r3, #48	@ 0x30
 8001e42:	443b      	add	r3, r7
 8001e44:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8001e48:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e4c:	f107 021c 	add.w	r2, r7, #28
 8001e50:	4413      	add	r3, r2
 8001e52:	f897 402f 	ldrb.w	r4, [r7, #47]	@ 0x2f
 8001e56:	461a      	mov	r2, r3
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7ff fbbd 	bl	80015d8 <MCP2515_ReadRegister>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	461a      	mov	r2, r3
 8001e62:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8001e66:	443b      	add	r3, r7
 8001e68:	f803 2c0c 	strb.w	r2, [r3, #-12]


                if (result_read_TXBnCTRL[i] != MCP2515_OK) {
 8001e6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e70:	3330      	adds	r3, #48	@ 0x30
 8001e72:	443b      	add	r3, r7
 8001e74:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <MCP2515_InterruptHandler+0x158>
					if (!TXREQ_val[i]) { // Se TXREQ è 0, il buffer è vuoto
					   emptyTXBuffer[i] = true;

					}else
						emptyTXBuffer[i] = true;*/
                	hdev->emptyTXBuffer[i] = true;
 8001e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	2201      	movs	r2, #1
 8001e86:	735a      	strb	r2, [r3, #13]
                	return 11;
 8001e88:	230b      	movs	r3, #11
 8001e8a:	e037      	b.n	8001efc <MCP2515_InterruptHandler+0x1c8>
                }

                // Verifica lo stato di TXREQ
                TXREQ_val[i] = (read_TXBnCTRL[i] >> (3 + i)) & 0x01;
 8001e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e90:	3330      	adds	r3, #48	@ 0x30
 8001e92:	443b      	add	r3, r7
 8001e94:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e9e:	3303      	adds	r3, #3
 8001ea0:	fa42 f303 	asr.w	r3, r2, r3
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eaa:	f002 0201 	and.w	r2, r2, #1
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	3330      	adds	r3, #48	@ 0x30
 8001eb2:	443b      	add	r3, r7
 8001eb4:	f803 2c1c 	strb.w	r2, [r3, #-28]
                //printf("TXREQ_val: %d\n", TXREQ_val[i]);

                if (!TXREQ_val[i]) { // Se TXREQ è 0, il buffer è vuoto
 8001eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ebc:	3330      	adds	r3, #48	@ 0x30
 8001ebe:	443b      	add	r3, r7
 8001ec0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <MCP2515_InterruptHandler+0x1a2>
                	hdev->emptyTXBuffer[i] = true;
 8001ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4413      	add	r3, r2
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	735a      	strb	r2, [r3, #13]
 8001ed4:	e007      	b.n	8001ee6 <MCP2515_InterruptHandler+0x1b2>
                	                if (!TXREQ_val[i]) { // Se TXREQ è 0, il buffer è vuoto
                	                   emptyTXBuffer[i] = true;

                	                }else
                	                	emptyTXBuffer[i] = true;*/
                	hdev->emptyTXBuffer[i] = true;
 8001ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4413      	add	r3, r2
 8001ede:	2201      	movs	r2, #1
 8001ee0:	735a      	strb	r2, [r3, #13]
                	return 12;
 8001ee2:	230c      	movs	r3, #12
 8001ee4:	e00a      	b.n	8001efc <MCP2515_InterruptHandler+0x1c8>
        for (uint8_t i=0; i < 3; i++){
 8001ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eea:	3301      	adds	r3, #1
 8001eec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001ef0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	f67f af76 	bls.w	8001de6 <MCP2515_InterruptHandler+0xb2>
		} else {
			return 14;
		}
    }*/
    //*result = result_read_TXBnCTRL[1];
    return MCP2515_OK;
 8001efa:	2300      	movs	r3, #0

}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3734      	adds	r7, #52	@ 0x34
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd90      	pop	{r4, r7, pc}
 8001f04:	080096f0 	.word	0x080096f0
 8001f08:	080096f4 	.word	0x080096f4

08001f0c <initBuffer>:

void initBuffer(MCP2515_MessageBuffer* msgBuffer){
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	msgBuffer->buffer = MCP2515_TX_BUFFER_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	701a      	strb	r2, [r3, #0]
	msgBuffer->idData = idDataEmpty;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f58 <initBuffer+0x4c>)
 8001f1e:	605a      	str	r2, [r3, #4]
    msgBuffer->data = dataEmpty;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a0e      	ldr	r2, [pc, #56]	@ (8001f5c <initBuffer+0x50>)
 8001f24:	609a      	str	r2, [r3, #8]
    msgBuffer->length = 0;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	731a      	strb	r2, [r3, #12]
    msgBuffer->loadIDCmd = 0x0;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	735a      	strb	r2, [r3, #13]
    msgBuffer->loadDataCmd= 0x0;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	739a      	strb	r2, [r3, #14]
    msgBuffer->txDLCAddress = 0x0;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	73da      	strb	r2, [r3, #15]
    msgBuffer->txTXREQAddress = 0x0;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	741a      	strb	r2, [r3, #16]
    msgBuffer->status = TRANSMISSION_IDLE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	745a      	strb	r2, [r3, #17]

}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000480 	.word	0x20000480
 8001f5c:	20000484 	.word	0x20000484

08001f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_MspInit+0x54>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6e:	4a11      	ldr	r2, [pc, #68]	@ (8001fb4 <HAL_MspInit+0x54>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f76:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb4 <HAL_MspInit+0x54>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	603b      	str	r3, [r7, #0]
 8001f86:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <HAL_MspInit+0x54>)
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb4 <HAL_MspInit+0x54>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f92:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <HAL_MspInit+0x54>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	210f      	movs	r1, #15
 8001fa2:	f06f 0001 	mvn.w	r0, #1
 8001fa6:	f000 ff6b 	bl	8002e80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <HAL_ADC_MspInit+0x7c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d127      	bne.n	800202a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	4b16      	ldr	r3, [pc, #88]	@ (8002038 <HAL_ADC_MspInit+0x80>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	4a15      	ldr	r2, [pc, #84]	@ (8002038 <HAL_ADC_MspInit+0x80>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fea:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <HAL_ADC_MspInit+0x80>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_ADC_MspInit+0x80>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	@ (8002038 <HAL_ADC_MspInit+0x80>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6313      	str	r3, [r2, #48]	@ 0x30
 8002006:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <HAL_ADC_MspInit+0x80>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002012:	23ff      	movs	r3, #255	@ 0xff
 8002014:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002016:	2303      	movs	r3, #3
 8002018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201e:	f107 0314 	add.w	r3, r7, #20
 8002022:	4619      	mov	r1, r3
 8002024:	4805      	ldr	r0, [pc, #20]	@ (800203c <HAL_ADC_MspInit+0x84>)
 8002026:	f000 ff77 	bl	8002f18 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800202a:	bf00      	nop
 800202c:	3728      	adds	r7, #40	@ 0x28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40012000 	.word	0x40012000
 8002038:	40023800 	.word	0x40023800
 800203c:	40020000 	.word	0x40020000

08002040 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	@ 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a25      	ldr	r2, [pc, #148]	@ (80020f4 <HAL_SPI_MspInit+0xb4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d143      	bne.n	80020ea <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b24      	ldr	r3, [pc, #144]	@ (80020f8 <HAL_SPI_MspInit+0xb8>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	4a23      	ldr	r2, [pc, #140]	@ (80020f8 <HAL_SPI_MspInit+0xb8>)
 800206c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002070:	6453      	str	r3, [r2, #68]	@ 0x44
 8002072:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <HAL_SPI_MspInit+0xb8>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b1d      	ldr	r3, [pc, #116]	@ (80020f8 <HAL_SPI_MspInit+0xb8>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	4a1c      	ldr	r2, [pc, #112]	@ (80020f8 <HAL_SPI_MspInit+0xb8>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	6313      	str	r3, [r2, #48]	@ 0x30
 800208e:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <HAL_SPI_MspInit+0xb8>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800209a:	2328      	movs	r3, #40	@ 0x28
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a6:	2303      	movs	r3, #3
 80020a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020aa:	2305      	movs	r3, #5
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	4619      	mov	r1, r3
 80020b4:	4811      	ldr	r0, [pc, #68]	@ (80020fc <HAL_SPI_MspInit+0xbc>)
 80020b6:	f000 ff2f 	bl	8002f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80020ba:	2310      	movs	r3, #16
 80020bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c2:	2301      	movs	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c6:	2303      	movs	r3, #3
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020ca:	2305      	movs	r3, #5
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4809      	ldr	r0, [pc, #36]	@ (80020fc <HAL_SPI_MspInit+0xbc>)
 80020d6:	f000 ff1f 	bl	8002f18 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2105      	movs	r1, #5
 80020de:	2023      	movs	r0, #35	@ 0x23
 80020e0:	f000 fece 	bl	8002e80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80020e4:	2023      	movs	r0, #35	@ 0x23
 80020e6:	f000 fee7 	bl	8002eb8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80020ea:	bf00      	nop
 80020ec:	3728      	adds	r7, #40	@ 0x28
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40013000 	.word	0x40013000
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020400 	.word	0x40020400

08002100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	@ 0x28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a19      	ldr	r2, [pc, #100]	@ (8002184 <HAL_UART_MspInit+0x84>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d12c      	bne.n	800217c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	4b18      	ldr	r3, [pc, #96]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212a:	4a17      	ldr	r2, [pc, #92]	@ (8002188 <HAL_UART_MspInit+0x88>)
 800212c:	f043 0310 	orr.w	r3, r3, #16
 8002130:	6453      	str	r3, [r2, #68]	@ 0x44
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b11      	ldr	r3, [pc, #68]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	4a10      	ldr	r2, [pc, #64]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	@ 0x30
 800214e:	4b0e      	ldr	r3, [pc, #56]	@ (8002188 <HAL_UART_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800215a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800215e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800216c:	2307      	movs	r3, #7
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	4619      	mov	r1, r3
 8002176:	4805      	ldr	r0, [pc, #20]	@ (800218c <HAL_UART_MspInit+0x8c>)
 8002178:	f000 fece 	bl	8002f18 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	@ 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40011000 	.word	0x40011000
 8002188:	40023800 	.word	0x40023800
 800218c:	40020000 	.word	0x40020000

08002190 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08c      	sub	sp, #48	@ 0x30
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002264 <HAL_InitTick+0xd4>)
 80021a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a8:	4a2e      	ldr	r2, [pc, #184]	@ (8002264 <HAL_InitTick+0xd4>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002264 <HAL_InitTick+0xd4>)
 80021b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021bc:	f107 020c 	add.w	r2, r7, #12
 80021c0:	f107 0310 	add.w	r3, r7, #16
 80021c4:	4611      	mov	r1, r2
 80021c6:	4618      	mov	r0, r3
 80021c8:	f001 fcb4 	bl	8003b34 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80021cc:	f001 fc9e 	bl	8003b0c <HAL_RCC_GetPCLK2Freq>
 80021d0:	4603      	mov	r3, r0
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021d8:	4a23      	ldr	r2, [pc, #140]	@ (8002268 <HAL_InitTick+0xd8>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	0c9b      	lsrs	r3, r3, #18
 80021e0:	3b01      	subs	r3, #1
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80021e4:	4b21      	ldr	r3, [pc, #132]	@ (800226c <HAL_InitTick+0xdc>)
 80021e6:	4a22      	ldr	r2, [pc, #136]	@ (8002270 <HAL_InitTick+0xe0>)
 80021e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80021ea:	4b20      	ldr	r3, [pc, #128]	@ (800226c <HAL_InitTick+0xdc>)
 80021ec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80021f2:	4a1e      	ldr	r2, [pc, #120]	@ (800226c <HAL_InitTick+0xdc>)
 80021f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80021f8:	4b1c      	ldr	r3, [pc, #112]	@ (800226c <HAL_InitTick+0xdc>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fe:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <HAL_InitTick+0xdc>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002204:	4b19      	ldr	r3, [pc, #100]	@ (800226c <HAL_InitTick+0xdc>)
 8002206:	2200      	movs	r2, #0
 8002208:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800220a:	4818      	ldr	r0, [pc, #96]	@ (800226c <HAL_InitTick+0xdc>)
 800220c:	f002 fb74 	bl	80048f8 <HAL_TIM_Base_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002216:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800221a:	2b00      	cmp	r3, #0
 800221c:	d11b      	bne.n	8002256 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800221e:	4813      	ldr	r0, [pc, #76]	@ (800226c <HAL_InitTick+0xdc>)
 8002220:	f002 fbc4 	bl	80049ac <HAL_TIM_Base_Start_IT>
 8002224:	4603      	mov	r3, r0
 8002226:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800222a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800222e:	2b00      	cmp	r3, #0
 8002230:	d111      	bne.n	8002256 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002232:	2019      	movs	r0, #25
 8002234:	f000 fe40 	bl	8002eb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	d808      	bhi.n	8002250 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800223e:	2200      	movs	r2, #0
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	2019      	movs	r0, #25
 8002244:	f000 fe1c 	bl	8002e80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002248:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <HAL_InitTick+0xe4>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e002      	b.n	8002256 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002256:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800225a:	4618      	mov	r0, r3
 800225c:	3730      	adds	r7, #48	@ 0x30
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	431bde83 	.word	0x431bde83
 800226c:	2000049c 	.word	0x2000049c
 8002270:	40010000 	.word	0x40010000
 8002274:	20000008 	.word	0x20000008

08002278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800227c:	bf00      	nop
 800227e:	e7fd      	b.n	800227c <NMI_Handler+0x4>

08002280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002284:	bf00      	nop
 8002286:	e7fd      	b.n	8002284 <HardFault_Handler+0x4>

08002288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <MemManage_Handler+0x4>

08002290 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002294:	bf00      	nop
 8002296:	e7fd      	b.n	8002294 <BusFault_Handler+0x4>

08002298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800229c:	bf00      	nop
 800229e:	e7fd      	b.n	800229c <UsageFault_Handler+0x4>

080022a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022b4:	4802      	ldr	r0, [pc, #8]	@ (80022c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80022b6:	f002 fbdb 	bl	8004a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2000049c 	.word	0x2000049c

080022c4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80022c8:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <SPI1_IRQHandler+0x10>)
 80022ca:	f001 ff4b 	bl	8004164 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200000d4 	.word	0x200000d4

080022d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	e00a      	b.n	8002300 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ea:	f3af 8000 	nop.w
 80022ee:	4601      	mov	r1, r0
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	60ba      	str	r2, [r7, #8]
 80022f6:	b2ca      	uxtb	r2, r1
 80022f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3301      	adds	r3, #1
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	429a      	cmp	r2, r3
 8002306:	dbf0      	blt.n	80022ea <_read+0x12>
  }

  return len;
 8002308:	687b      	ldr	r3, [r7, #4]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800233a:	605a      	str	r2, [r3, #4]
  return 0;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_isatty>:

int _isatty(int file)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002352:	2301      	movs	r3, #1
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002384:	4a14      	ldr	r2, [pc, #80]	@ (80023d8 <_sbrk+0x5c>)
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <_sbrk+0x60>)
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <_sbrk+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <_sbrk+0x64>)
 800239a:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <_sbrk+0x68>)
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d207      	bcs.n	80023bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ac:	f006 f920 	bl	80085f0 <__errno>
 80023b0:	4603      	mov	r3, r0
 80023b2:	220c      	movs	r2, #12
 80023b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e009      	b.n	80023d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023bc:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a05      	ldr	r2, [pc, #20]	@ (80023e0 <_sbrk+0x64>)
 80023cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20020000 	.word	0x20020000
 80023dc:	00000400 	.word	0x00000400
 80023e0:	200004e4 	.word	0x200004e4
 80023e4:	20005020 	.word	0x20005020

080023e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <SystemInit+0x20>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <SystemInit+0x20>)
 80023f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800240c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002444 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002410:	f7ff ffea 	bl	80023e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002414:	480c      	ldr	r0, [pc, #48]	@ (8002448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002416:	490d      	ldr	r1, [pc, #52]	@ (800244c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002418:	4a0d      	ldr	r2, [pc, #52]	@ (8002450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800242c:	4c0a      	ldr	r4, [pc, #40]	@ (8002458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800243a:	f006 f8df 	bl	80085fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243e:	f7fe f89f 	bl	8000580 <main>
  bx  lr    
 8002442:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002444:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002450:	080097b4 	.word	0x080097b4
  ldr r2, =_sbss
 8002454:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002458:	20005020 	.word	0x20005020

0800245c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800245c:	e7fe      	b.n	800245c <ADC_IRQHandler>
	...

08002460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002464:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0d      	ldr	r2, [pc, #52]	@ (80024a0 <HAL_Init+0x40>)
 800246a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800246e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <HAL_Init+0x40>)
 8002476:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800247a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a07      	ldr	r2, [pc, #28]	@ (80024a0 <HAL_Init+0x40>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002488:	2003      	movs	r0, #3
 800248a:	f000 fcee 	bl	8002e6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248e:	200f      	movs	r0, #15
 8002490:	f7ff fe7e 	bl	8002190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002494:	f7ff fd64 	bl	8001f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00

080024a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a8:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_IncTick+0x20>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_IncTick+0x24>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	4a04      	ldr	r2, [pc, #16]	@ (80024c8 <HAL_IncTick+0x24>)
 80024b6:	6013      	str	r3, [r2, #0]
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	2000000c 	.word	0x2000000c
 80024c8:	200004e8 	.word	0x200004e8

080024cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return uwTick;
 80024d0:	4b03      	ldr	r3, [pc, #12]	@ (80024e0 <HAL_GetTick+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	200004e8 	.word	0x200004e8

080024e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024ec:	f7ff ffee 	bl	80024cc <HAL_GetTick>
 80024f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d005      	beq.n	800250a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_Delay+0x44>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800250a:	bf00      	nop
 800250c:	f7ff ffde 	bl	80024cc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d8f7      	bhi.n	800250c <HAL_Delay+0x28>
  {
  }
}
 800251c:	bf00      	nop
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	2000000c 	.word	0x2000000c

0800252c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002534:	2300      	movs	r3, #0
 8002536:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e033      	b.n	80025aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fd34 	bl	8001fb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	d118      	bne.n	800259c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002572:	f023 0302 	bic.w	r3, r3, #2
 8002576:	f043 0202 	orr.w	r2, r3, #2
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 faca 	bl	8002b18 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
 800259a:	e001      	b.n	80025a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80025bc:	2300      	movs	r3, #0
 80025be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_ADC_Start+0x1a>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e097      	b.n	80026fe <HAL_ADC_Start+0x14a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d018      	beq.n	8002616 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025f4:	4b45      	ldr	r3, [pc, #276]	@ (800270c <HAL_ADC_Start+0x158>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a45      	ldr	r2, [pc, #276]	@ (8002710 <HAL_ADC_Start+0x15c>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	0c9a      	lsrs	r2, r3, #18
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002608:	e002      	b.n	8002610 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3b01      	subs	r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f9      	bne.n	800260a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d15f      	bne.n	80026e4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002642:	2b00      	cmp	r3, #0
 8002644:	d007      	beq.n	8002656 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800264e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800265e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002662:	d106      	bne.n	8002672 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002668:	f023 0206 	bic.w	r2, r3, #6
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002670:	e002      	b.n	8002678 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002680:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <HAL_ADC_Start+0x160>)
 8002682:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800268c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d129      	bne.n	80026fc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	e020      	b.n	80026fc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a16      	ldr	r2, [pc, #88]	@ (8002718 <HAL_ADC_Start+0x164>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d11b      	bne.n	80026fc <HAL_ADC_Start+0x148>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d114      	bne.n	80026fc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80026e0:	609a      	str	r2, [r3, #8]
 80026e2:	e00b      	b.n	80026fc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	f043 0210 	orr.w	r2, r3, #16
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000004 	.word	0x20000004
 8002710:	431bde83 	.word	0x431bde83
 8002714:	40012300 	.word	0x40012300
 8002718:	40012000 	.word	0x40012000

0800271c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_ADC_Stop+0x16>
 800272e:	2302      	movs	r3, #2
 8002730:	e021      	b.n	8002776 <HAL_ADC_Stop+0x5a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0201 	bic.w	r2, r2, #1
 8002748:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	f043 0201 	orr.w	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
 800278a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800279e:	d113      	bne.n	80027c8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027ae:	d10b      	bne.n	80027c8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b4:	f043 0220 	orr.w	r2, r3, #32
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e063      	b.n	8002890 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80027c8:	f7ff fe80 	bl	80024cc <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027ce:	e021      	b.n	8002814 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d01d      	beq.n	8002814 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_ADC_PollForConversion+0x6c>
 80027de:	f7ff fe75 	bl	80024cc <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d212      	bcs.n	8002814 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d00b      	beq.n	8002814 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	f043 0204 	orr.w	r2, r3, #4
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e03d      	b.n	8002890 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b02      	cmp	r3, #2
 8002820:	d1d6      	bne.n	80027d0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f06f 0212 	mvn.w	r2, #18
 800282a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002830:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d123      	bne.n	800288e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800284a:	2b00      	cmp	r3, #0
 800284c:	d11f      	bne.n	800288e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002858:	2b00      	cmp	r3, #0
 800285a:	d006      	beq.n	800286a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002866:	2b00      	cmp	r3, #0
 8002868:	d111      	bne.n	800288e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d105      	bne.n	800288e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	f043 0201 	orr.w	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028be:	2300      	movs	r3, #0
 80028c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x1c>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e113      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x244>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b09      	cmp	r3, #9
 80028de:	d925      	bls.n	800292c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68d9      	ldr	r1, [r3, #12]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	3b1e      	subs	r3, #30
 80028f6:	2207      	movs	r2, #7
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43da      	mvns	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	400a      	ands	r2, r1
 8002904:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68d9      	ldr	r1, [r3, #12]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	4618      	mov	r0, r3
 8002918:	4603      	mov	r3, r0
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4403      	add	r3, r0
 800291e:	3b1e      	subs	r3, #30
 8002920:	409a      	lsls	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	e022      	b.n	8002972 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6919      	ldr	r1, [r3, #16]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	2207      	movs	r2, #7
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43da      	mvns	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	400a      	ands	r2, r1
 800294e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6919      	ldr	r1, [r3, #16]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	4603      	mov	r3, r0
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4403      	add	r3, r0
 8002968:	409a      	lsls	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b06      	cmp	r3, #6
 8002978:	d824      	bhi.n	80029c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	3b05      	subs	r3, #5
 800298c:	221f      	movs	r2, #31
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	400a      	ands	r2, r1
 800299a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4618      	mov	r0, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	3b05      	subs	r3, #5
 80029b6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80029c2:	e04c      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b0c      	cmp	r3, #12
 80029ca:	d824      	bhi.n	8002a16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	3b23      	subs	r3, #35	@ 0x23
 80029de:	221f      	movs	r2, #31
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43da      	mvns	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	400a      	ands	r2, r1
 80029ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	4618      	mov	r0, r3
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	3b23      	subs	r3, #35	@ 0x23
 8002a08:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a14:	e023      	b.n	8002a5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4413      	add	r3, r2
 8002a26:	3b41      	subs	r3, #65	@ 0x41
 8002a28:	221f      	movs	r2, #31
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	400a      	ands	r2, r1
 8002a36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	4618      	mov	r0, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	3b41      	subs	r3, #65	@ 0x41
 8002a52:	fa00 f203 	lsl.w	r2, r0, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a5e:	4b29      	ldr	r3, [pc, #164]	@ (8002b04 <HAL_ADC_ConfigChannel+0x250>)
 8002a60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a28      	ldr	r2, [pc, #160]	@ (8002b08 <HAL_ADC_ConfigChannel+0x254>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d10f      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x1d8>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b12      	cmp	r3, #18
 8002a72:	d10b      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1d      	ldr	r2, [pc, #116]	@ (8002b08 <HAL_ADC_ConfigChannel+0x254>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d12b      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x23a>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002b0c <HAL_ADC_ConfigChannel+0x258>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d003      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0x1f4>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b11      	cmp	r3, #17
 8002aa6:	d122      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a11      	ldr	r2, [pc, #68]	@ (8002b0c <HAL_ADC_ConfigChannel+0x258>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d111      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aca:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <HAL_ADC_ConfigChannel+0x25c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a11      	ldr	r2, [pc, #68]	@ (8002b14 <HAL_ADC_ConfigChannel+0x260>)
 8002ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad4:	0c9a      	lsrs	r2, r3, #18
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ae0:	e002      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f9      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40012300 	.word	0x40012300
 8002b08:	40012000 	.word	0x40012000
 8002b0c:	10000012 	.word	0x10000012
 8002b10:	20000004 	.word	0x20000004
 8002b14:	431bde83 	.word	0x431bde83

08002b18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b20:	4b79      	ldr	r3, [pc, #484]	@ (8002d08 <ADC_Init+0x1f0>)
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6899      	ldr	r1, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	4a58      	ldr	r2, [pc, #352]	@ (8002d0c <ADC_Init+0x1f4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6899      	ldr	r1, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002be0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6899      	ldr	r1, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	e00f      	b.n	8002c16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c14:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0202 	bic.w	r2, r2, #2
 8002c24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6899      	ldr	r1, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7e1b      	ldrb	r3, [r3, #24]
 8002c30:	005a      	lsls	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01b      	beq.n	8002c7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c52:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002c62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6859      	ldr	r1, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	035a      	lsls	r2, r3, #13
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	e007      	b.n	8002c8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c8a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	051a      	lsls	r2, r3, #20
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cce:	025a      	lsls	r2, r3, #9
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6899      	ldr	r1, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	029a      	lsls	r2, r3, #10
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	40012300 	.word	0x40012300
 8002d0c:	0f000001 	.word	0x0f000001

08002d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d20:	4b0c      	ldr	r3, [pc, #48]	@ (8002d54 <__NVIC_SetPriorityGrouping+0x44>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d42:	4a04      	ldr	r2, [pc, #16]	@ (8002d54 <__NVIC_SetPriorityGrouping+0x44>)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	60d3      	str	r3, [r2, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d5c:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <__NVIC_GetPriorityGrouping+0x18>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	0a1b      	lsrs	r3, r3, #8
 8002d62:	f003 0307 	and.w	r3, r3, #7
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	db0b      	blt.n	8002d9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	4907      	ldr	r1, [pc, #28]	@ (8002dac <__NVIC_EnableIRQ+0x38>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2001      	movs	r0, #1
 8002d96:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000e100 	.word	0xe000e100

08002db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	6039      	str	r1, [r7, #0]
 8002dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	db0a      	blt.n	8002dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	490c      	ldr	r1, [pc, #48]	@ (8002dfc <__NVIC_SetPriority+0x4c>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	0112      	lsls	r2, r2, #4
 8002dd0:	b2d2      	uxtb	r2, r2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd8:	e00a      	b.n	8002df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4908      	ldr	r1, [pc, #32]	@ (8002e00 <__NVIC_SetPriority+0x50>)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	3b04      	subs	r3, #4
 8002de8:	0112      	lsls	r2, r2, #4
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	440b      	add	r3, r1
 8002dee:	761a      	strb	r2, [r3, #24]
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000e100 	.word	0xe000e100
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b089      	sub	sp, #36	@ 0x24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f1c3 0307 	rsb	r3, r3, #7
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	bf28      	it	cs
 8002e22:	2304      	movcs	r3, #4
 8002e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d902      	bls.n	8002e34 <NVIC_EncodePriority+0x30>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3b03      	subs	r3, #3
 8002e32:	e000      	b.n	8002e36 <NVIC_EncodePriority+0x32>
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e38:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	401a      	ands	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa01 f303 	lsl.w	r3, r1, r3
 8002e56:	43d9      	mvns	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e5c:	4313      	orrs	r3, r2
         );
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3724      	adds	r7, #36	@ 0x24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ff4c 	bl	8002d10 <__NVIC_SetPriorityGrouping>
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
 8002e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e92:	f7ff ff61 	bl	8002d58 <__NVIC_GetPriorityGrouping>
 8002e96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68b9      	ldr	r1, [r7, #8]
 8002e9c:	6978      	ldr	r0, [r7, #20]
 8002e9e:	f7ff ffb1 	bl	8002e04 <NVIC_EncodePriority>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff ff80 	bl	8002db0 <__NVIC_SetPriority>
}
 8002eb0:	bf00      	nop
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff ff54 	bl	8002d74 <__NVIC_EnableIRQ>
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2280      	movs	r2, #128	@ 0x80
 8002eec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00c      	b.n	8002f0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2205      	movs	r2, #5
 8002ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b089      	sub	sp, #36	@ 0x24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	e159      	b.n	80031e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f34:	2201      	movs	r2, #1
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	f040 8148 	bne.w	80031e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d005      	beq.n	8002f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d130      	bne.n	8002fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	2203      	movs	r2, #3
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 0201 	and.w	r2, r3, #1
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d017      	beq.n	8003008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d123      	bne.n	800305c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	08da      	lsrs	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3208      	adds	r2, #8
 800301c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	220f      	movs	r2, #15
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	08da      	lsrs	r2, r3, #3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3208      	adds	r2, #8
 8003056:	69b9      	ldr	r1, [r7, #24]
 8003058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	2203      	movs	r2, #3
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0203 	and.w	r2, r3, #3
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80a2 	beq.w	80031e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	4b57      	ldr	r3, [pc, #348]	@ (8003200 <HAL_GPIO_Init+0x2e8>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a6:	4a56      	ldr	r2, [pc, #344]	@ (8003200 <HAL_GPIO_Init+0x2e8>)
 80030a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ae:	4b54      	ldr	r3, [pc, #336]	@ (8003200 <HAL_GPIO_Init+0x2e8>)
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ba:	4a52      	ldr	r2, [pc, #328]	@ (8003204 <HAL_GPIO_Init+0x2ec>)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	3302      	adds	r3, #2
 80030c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	220f      	movs	r2, #15
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a49      	ldr	r2, [pc, #292]	@ (8003208 <HAL_GPIO_Init+0x2f0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d019      	beq.n	800311a <HAL_GPIO_Init+0x202>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a48      	ldr	r2, [pc, #288]	@ (800320c <HAL_GPIO_Init+0x2f4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d013      	beq.n	8003116 <HAL_GPIO_Init+0x1fe>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a47      	ldr	r2, [pc, #284]	@ (8003210 <HAL_GPIO_Init+0x2f8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00d      	beq.n	8003112 <HAL_GPIO_Init+0x1fa>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a46      	ldr	r2, [pc, #280]	@ (8003214 <HAL_GPIO_Init+0x2fc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d007      	beq.n	800310e <HAL_GPIO_Init+0x1f6>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a45      	ldr	r2, [pc, #276]	@ (8003218 <HAL_GPIO_Init+0x300>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_GPIO_Init+0x1f2>
 8003106:	2304      	movs	r3, #4
 8003108:	e008      	b.n	800311c <HAL_GPIO_Init+0x204>
 800310a:	2307      	movs	r3, #7
 800310c:	e006      	b.n	800311c <HAL_GPIO_Init+0x204>
 800310e:	2303      	movs	r3, #3
 8003110:	e004      	b.n	800311c <HAL_GPIO_Init+0x204>
 8003112:	2302      	movs	r3, #2
 8003114:	e002      	b.n	800311c <HAL_GPIO_Init+0x204>
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_GPIO_Init+0x204>
 800311a:	2300      	movs	r3, #0
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	f002 0203 	and.w	r2, r2, #3
 8003122:	0092      	lsls	r2, r2, #2
 8003124:	4093      	lsls	r3, r2
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800312c:	4935      	ldr	r1, [pc, #212]	@ (8003204 <HAL_GPIO_Init+0x2ec>)
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	3302      	adds	r3, #2
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313a:	4b38      	ldr	r3, [pc, #224]	@ (800321c <HAL_GPIO_Init+0x304>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315e:	4a2f      	ldr	r2, [pc, #188]	@ (800321c <HAL_GPIO_Init+0x304>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003164:	4b2d      	ldr	r3, [pc, #180]	@ (800321c <HAL_GPIO_Init+0x304>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003188:	4a24      	ldr	r2, [pc, #144]	@ (800321c <HAL_GPIO_Init+0x304>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800318e:	4b23      	ldr	r3, [pc, #140]	@ (800321c <HAL_GPIO_Init+0x304>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031b2:	4a1a      	ldr	r2, [pc, #104]	@ (800321c <HAL_GPIO_Init+0x304>)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031b8:	4b18      	ldr	r3, [pc, #96]	@ (800321c <HAL_GPIO_Init+0x304>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031dc:	4a0f      	ldr	r2, [pc, #60]	@ (800321c <HAL_GPIO_Init+0x304>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3301      	adds	r3, #1
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	2b0f      	cmp	r3, #15
 80031ec:	f67f aea2 	bls.w	8002f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	3724      	adds	r7, #36	@ 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
 8003204:	40013800 	.word	0x40013800
 8003208:	40020000 	.word	0x40020000
 800320c:	40020400 	.word	0x40020400
 8003210:	40020800 	.word	0x40020800
 8003214:	40020c00 	.word	0x40020c00
 8003218:	40021000 	.word	0x40021000
 800321c:	40013c00 	.word	0x40013c00

08003220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	887b      	ldrh	r3, [r7, #2]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	e001      	b.n	8003242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	807b      	strh	r3, [r7, #2]
 800325c:	4613      	mov	r3, r2
 800325e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003260:	787b      	ldrb	r3, [r7, #1]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003266:	887a      	ldrh	r2, [r7, #2]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800326c:	e003      	b.n	8003276 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800326e:	887b      	ldrh	r3, [r7, #2]
 8003270:	041a      	lsls	r2, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	619a      	str	r2, [r3, #24]
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e267      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d075      	beq.n	800338e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032a2:	4b88      	ldr	r3, [pc, #544]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d00c      	beq.n	80032c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ae:	4b85      	ldr	r3, [pc, #532]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d112      	bne.n	80032e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ba:	4b82      	ldr	r3, [pc, #520]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032c6:	d10b      	bne.n	80032e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	4b7e      	ldr	r3, [pc, #504]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d05b      	beq.n	800338c <HAL_RCC_OscConfig+0x108>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d157      	bne.n	800338c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e242      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e8:	d106      	bne.n	80032f8 <HAL_RCC_OscConfig+0x74>
 80032ea:	4b76      	ldr	r3, [pc, #472]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a75      	ldr	r2, [pc, #468]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f4:	6013      	str	r3, [r2, #0]
 80032f6:	e01d      	b.n	8003334 <HAL_RCC_OscConfig+0xb0>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x98>
 8003302:	4b70      	ldr	r3, [pc, #448]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a6f      	ldr	r2, [pc, #444]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 8003308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b6d      	ldr	r3, [pc, #436]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a6c      	ldr	r2, [pc, #432]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e00b      	b.n	8003334 <HAL_RCC_OscConfig+0xb0>
 800331c:	4b69      	ldr	r3, [pc, #420]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a68      	ldr	r2, [pc, #416]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 8003322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b66      	ldr	r3, [pc, #408]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a65      	ldr	r2, [pc, #404]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 800332e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7ff f8c6 	bl	80024cc <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003344:	f7ff f8c2 	bl	80024cc <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	@ 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e207      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	4b5b      	ldr	r3, [pc, #364]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0f0      	beq.n	8003344 <HAL_RCC_OscConfig+0xc0>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7ff f8b2 	bl	80024cc <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800336c:	f7ff f8ae 	bl	80024cc <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b64      	cmp	r3, #100	@ 0x64
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e1f3      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337e:	4b51      	ldr	r3, [pc, #324]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0xe8>
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d063      	beq.n	8003462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800339a:	4b4a      	ldr	r3, [pc, #296]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033a6:	4b47      	ldr	r3, [pc, #284]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d11c      	bne.n	80033ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b2:	4b44      	ldr	r3, [pc, #272]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d116      	bne.n	80033ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	4b41      	ldr	r3, [pc, #260]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_RCC_OscConfig+0x152>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e1c7      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d6:	4b3b      	ldr	r3, [pc, #236]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4937      	ldr	r1, [pc, #220]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ea:	e03a      	b.n	8003462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d020      	beq.n	8003436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033f4:	4b34      	ldr	r3, [pc, #208]	@ (80034c8 <HAL_RCC_OscConfig+0x244>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7ff f867 	bl	80024cc <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003402:	f7ff f863 	bl	80024cc <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e1a8      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003414:	4b2b      	ldr	r3, [pc, #172]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003420:	4b28      	ldr	r3, [pc, #160]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4925      	ldr	r1, [pc, #148]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 8003430:	4313      	orrs	r3, r2
 8003432:	600b      	str	r3, [r1, #0]
 8003434:	e015      	b.n	8003462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003436:	4b24      	ldr	r3, [pc, #144]	@ (80034c8 <HAL_RCC_OscConfig+0x244>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7ff f846 	bl	80024cc <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003444:	f7ff f842 	bl	80024cc <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e187      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003456:	4b1b      	ldr	r3, [pc, #108]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d036      	beq.n	80034dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d016      	beq.n	80034a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003476:	4b15      	ldr	r3, [pc, #84]	@ (80034cc <HAL_RCC_OscConfig+0x248>)
 8003478:	2201      	movs	r2, #1
 800347a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7ff f826 	bl	80024cc <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003484:	f7ff f822 	bl	80024cc <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e167      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003496:	4b0b      	ldr	r3, [pc, #44]	@ (80034c4 <HAL_RCC_OscConfig+0x240>)
 8003498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f0      	beq.n	8003484 <HAL_RCC_OscConfig+0x200>
 80034a2:	e01b      	b.n	80034dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034a4:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <HAL_RCC_OscConfig+0x248>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034aa:	f7ff f80f 	bl	80024cc <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b0:	e00e      	b.n	80034d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034b2:	f7ff f80b 	bl	80024cc <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d907      	bls.n	80034d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e150      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
 80034c4:	40023800 	.word	0x40023800
 80034c8:	42470000 	.word	0x42470000
 80034cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d0:	4b88      	ldr	r3, [pc, #544]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 80034d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1ea      	bne.n	80034b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8097 	beq.w	8003618 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034ea:	2300      	movs	r3, #0
 80034ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ee:	4b81      	ldr	r3, [pc, #516]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10f      	bne.n	800351a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	4b7d      	ldr	r3, [pc, #500]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	4a7c      	ldr	r2, [pc, #496]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003508:	6413      	str	r3, [r2, #64]	@ 0x40
 800350a:	4b7a      	ldr	r3, [pc, #488]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003516:	2301      	movs	r3, #1
 8003518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351a:	4b77      	ldr	r3, [pc, #476]	@ (80036f8 <HAL_RCC_OscConfig+0x474>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d118      	bne.n	8003558 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003526:	4b74      	ldr	r3, [pc, #464]	@ (80036f8 <HAL_RCC_OscConfig+0x474>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a73      	ldr	r2, [pc, #460]	@ (80036f8 <HAL_RCC_OscConfig+0x474>)
 800352c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003532:	f7fe ffcb 	bl	80024cc <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800353a:	f7fe ffc7 	bl	80024cc <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e10c      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800354c:	4b6a      	ldr	r3, [pc, #424]	@ (80036f8 <HAL_RCC_OscConfig+0x474>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d106      	bne.n	800356e <HAL_RCC_OscConfig+0x2ea>
 8003560:	4b64      	ldr	r3, [pc, #400]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003564:	4a63      	ldr	r2, [pc, #396]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6713      	str	r3, [r2, #112]	@ 0x70
 800356c:	e01c      	b.n	80035a8 <HAL_RCC_OscConfig+0x324>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b05      	cmp	r3, #5
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0x30c>
 8003576:	4b5f      	ldr	r3, [pc, #380]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800357a:	4a5e      	ldr	r2, [pc, #376]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 800357c:	f043 0304 	orr.w	r3, r3, #4
 8003580:	6713      	str	r3, [r2, #112]	@ 0x70
 8003582:	4b5c      	ldr	r3, [pc, #368]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003586:	4a5b      	ldr	r2, [pc, #364]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6713      	str	r3, [r2, #112]	@ 0x70
 800358e:	e00b      	b.n	80035a8 <HAL_RCC_OscConfig+0x324>
 8003590:	4b58      	ldr	r3, [pc, #352]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003594:	4a57      	ldr	r2, [pc, #348]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	6713      	str	r3, [r2, #112]	@ 0x70
 800359c:	4b55      	ldr	r3, [pc, #340]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a0:	4a54      	ldr	r2, [pc, #336]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 80035a2:	f023 0304 	bic.w	r3, r3, #4
 80035a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d015      	beq.n	80035dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b0:	f7fe ff8c 	bl	80024cc <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f7fe ff88 	bl	80024cc <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e0cb      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ce:	4b49      	ldr	r3, [pc, #292]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0ee      	beq.n	80035b8 <HAL_RCC_OscConfig+0x334>
 80035da:	e014      	b.n	8003606 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035dc:	f7fe ff76 	bl	80024cc <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035e4:	f7fe ff72 	bl	80024cc <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e0b5      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fa:	4b3e      	ldr	r3, [pc, #248]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1ee      	bne.n	80035e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003606:	7dfb      	ldrb	r3, [r7, #23]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d105      	bne.n	8003618 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800360c:	4b39      	ldr	r3, [pc, #228]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 800360e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003610:	4a38      	ldr	r2, [pc, #224]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003616:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80a1 	beq.w	8003764 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003622:	4b34      	ldr	r3, [pc, #208]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b08      	cmp	r3, #8
 800362c:	d05c      	beq.n	80036e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d141      	bne.n	80036ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003636:	4b31      	ldr	r3, [pc, #196]	@ (80036fc <HAL_RCC_OscConfig+0x478>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fe ff46 	bl	80024cc <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003644:	f7fe ff42 	bl	80024cc <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e087      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003656:	4b27      	ldr	r3, [pc, #156]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	019b      	lsls	r3, r3, #6
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	3b01      	subs	r3, #1
 800367c:	041b      	lsls	r3, r3, #16
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	061b      	lsls	r3, r3, #24
 8003686:	491b      	ldr	r1, [pc, #108]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800368c:	4b1b      	ldr	r3, [pc, #108]	@ (80036fc <HAL_RCC_OscConfig+0x478>)
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003692:	f7fe ff1b 	bl	80024cc <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369a:	f7fe ff17 	bl	80024cc <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e05c      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ac:	4b11      	ldr	r3, [pc, #68]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x416>
 80036b8:	e054      	b.n	8003764 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b10      	ldr	r3, [pc, #64]	@ (80036fc <HAL_RCC_OscConfig+0x478>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe ff04 	bl	80024cc <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe ff00 	bl	80024cc <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e045      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_RCC_OscConfig+0x470>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x444>
 80036e6:	e03d      	b.n	8003764 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	699b      	ldr	r3, [r3, #24]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d107      	bne.n	8003700 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e038      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40007000 	.word	0x40007000
 80036fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003700:	4b1b      	ldr	r3, [pc, #108]	@ (8003770 <HAL_RCC_OscConfig+0x4ec>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d028      	beq.n	8003760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003718:	429a      	cmp	r2, r3
 800371a:	d121      	bne.n	8003760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d11a      	bne.n	8003760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003730:	4013      	ands	r3, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003738:	4293      	cmp	r3, r2
 800373a:	d111      	bne.n	8003760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	3b01      	subs	r3, #1
 800374a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800374c:	429a      	cmp	r2, r3
 800374e:	d107      	bne.n	8003760 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800

08003774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0cc      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003788:	4b68      	ldr	r3, [pc, #416]	@ (800392c <HAL_RCC_ClockConfig+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d90c      	bls.n	80037b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b65      	ldr	r3, [pc, #404]	@ (800392c <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b63      	ldr	r3, [pc, #396]	@ (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e0b8      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c8:	4b59      	ldr	r3, [pc, #356]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4a58      	ldr	r2, [pc, #352]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80037d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e0:	4b53      	ldr	r3, [pc, #332]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a52      	ldr	r2, [pc, #328]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80037ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ec:	4b50      	ldr	r3, [pc, #320]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	494d      	ldr	r1, [pc, #308]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d044      	beq.n	8003894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	4b47      	ldr	r3, [pc, #284]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d119      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e07f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d003      	beq.n	8003832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382e:	2b03      	cmp	r3, #3
 8003830:	d107      	bne.n	8003842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	4b3f      	ldr	r3, [pc, #252]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e06f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003842:	4b3b      	ldr	r3, [pc, #236]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e067      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003852:	4b37      	ldr	r3, [pc, #220]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 0203 	bic.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4934      	ldr	r1, [pc, #208]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003864:	f7fe fe32 	bl	80024cc <HAL_GetTick>
 8003868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7fe fe2e 	bl	80024cc <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e04f      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b2b      	ldr	r3, [pc, #172]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d1eb      	bne.n	800386c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003894:	4b25      	ldr	r3, [pc, #148]	@ (800392c <HAL_RCC_ClockConfig+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d20c      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b22      	ldr	r3, [pc, #136]	@ (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b20      	ldr	r3, [pc, #128]	@ (800392c <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e032      	b.n	8003922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038c8:	4b19      	ldr	r3, [pc, #100]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4916      	ldr	r1, [pc, #88]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038e6:	4b12      	ldr	r3, [pc, #72]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	490e      	ldr	r1, [pc, #56]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038fa:	f000 f821 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80038fe:	4602      	mov	r2, r0
 8003900:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	490a      	ldr	r1, [pc, #40]	@ (8003934 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	5ccb      	ldrb	r3, [r1, r3]
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	4a09      	ldr	r2, [pc, #36]	@ (8003938 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003916:	4b09      	ldr	r3, [pc, #36]	@ (800393c <HAL_RCC_ClockConfig+0x1c8>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fc38 	bl	8002190 <HAL_InitTick>

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023c00 	.word	0x40023c00
 8003930:	40023800 	.word	0x40023800
 8003934:	08009758 	.word	0x08009758
 8003938:	20000004 	.word	0x20000004
 800393c:	20000008 	.word	0x20000008

08003940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003944:	b090      	sub	sp, #64	@ 0x40
 8003946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	637b      	str	r3, [r7, #52]	@ 0x34
 800394c:	2300      	movs	r3, #0
 800394e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003950:	2300      	movs	r3, #0
 8003952:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003958:	4b59      	ldr	r3, [pc, #356]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 030c 	and.w	r3, r3, #12
 8003960:	2b08      	cmp	r3, #8
 8003962:	d00d      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x40>
 8003964:	2b08      	cmp	r3, #8
 8003966:	f200 80a1 	bhi.w	8003aac <HAL_RCC_GetSysClockFreq+0x16c>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <HAL_RCC_GetSysClockFreq+0x34>
 800396e:	2b04      	cmp	r3, #4
 8003970:	d003      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x3a>
 8003972:	e09b      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4b53      	ldr	r3, [pc, #332]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003976:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003978:	e09b      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800397a:	4b53      	ldr	r3, [pc, #332]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 800397c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800397e:	e098      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003980:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003988:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800398a:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d028      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003996:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	099b      	lsrs	r3, r3, #6
 800399c:	2200      	movs	r2, #0
 800399e:	623b      	str	r3, [r7, #32]
 80039a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039a8:	2100      	movs	r1, #0
 80039aa:	4b47      	ldr	r3, [pc, #284]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039ac:	fb03 f201 	mul.w	r2, r3, r1
 80039b0:	2300      	movs	r3, #0
 80039b2:	fb00 f303 	mul.w	r3, r0, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	4a43      	ldr	r2, [pc, #268]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x188>)
 80039ba:	fba0 1202 	umull	r1, r2, r0, r2
 80039be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039c0:	460a      	mov	r2, r1
 80039c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80039c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039c6:	4413      	add	r3, r2
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039cc:	2200      	movs	r2, #0
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	61fa      	str	r2, [r7, #28]
 80039d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039da:	f7fc fc59 	bl	8000290 <__aeabi_uldivmod>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4613      	mov	r3, r2
 80039e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039e6:	e053      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e8:	4b35      	ldr	r3, [pc, #212]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	099b      	lsrs	r3, r3, #6
 80039ee:	2200      	movs	r2, #0
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	617a      	str	r2, [r7, #20]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039fa:	f04f 0b00 	mov.w	fp, #0
 80039fe:	4652      	mov	r2, sl
 8003a00:	465b      	mov	r3, fp
 8003a02:	f04f 0000 	mov.w	r0, #0
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	0159      	lsls	r1, r3, #5
 8003a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a10:	0150      	lsls	r0, r2, #5
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	ebb2 080a 	subs.w	r8, r2, sl
 8003a1a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a32:	ebb2 0408 	subs.w	r4, r2, r8
 8003a36:	eb63 0509 	sbc.w	r5, r3, r9
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	00eb      	lsls	r3, r5, #3
 8003a44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a48:	00e2      	lsls	r2, r4, #3
 8003a4a:	4614      	mov	r4, r2
 8003a4c:	461d      	mov	r5, r3
 8003a4e:	eb14 030a 	adds.w	r3, r4, sl
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	eb45 030b 	adc.w	r3, r5, fp
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a66:	4629      	mov	r1, r5
 8003a68:	028b      	lsls	r3, r1, #10
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a70:	4621      	mov	r1, r4
 8003a72:	028a      	lsls	r2, r1, #10
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	60fa      	str	r2, [r7, #12]
 8003a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a84:	f7fc fc04 	bl	8000290 <__aeabi_uldivmod>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003aa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aac:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3740      	adds	r7, #64	@ 0x40
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	00f42400 	.word	0x00f42400
 8003ac8:	017d7840 	.word	0x017d7840

08003acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad0:	4b03      	ldr	r3, [pc, #12]	@ (8003ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	20000004 	.word	0x20000004

08003ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ae8:	f7ff fff0 	bl	8003acc <HAL_RCC_GetHCLKFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b05      	ldr	r3, [pc, #20]	@ (8003b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	0a9b      	lsrs	r3, r3, #10
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	4903      	ldr	r1, [pc, #12]	@ (8003b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40023800 	.word	0x40023800
 8003b08:	08009768 	.word	0x08009768

08003b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b10:	f7ff ffdc 	bl	8003acc <HAL_RCC_GetHCLKFreq>
 8003b14:	4602      	mov	r2, r0
 8003b16:	4b05      	ldr	r3, [pc, #20]	@ (8003b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	0b5b      	lsrs	r3, r3, #13
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	4903      	ldr	r1, [pc, #12]	@ (8003b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b22:	5ccb      	ldrb	r3, [r1, r3]
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	08009768 	.word	0x08009768

08003b34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	220f      	movs	r2, #15
 8003b42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b44:	4b12      	ldr	r3, [pc, #72]	@ (8003b90 <HAL_RCC_GetClockConfig+0x5c>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0203 	and.w	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003b50:	4b0f      	ldr	r3, [pc, #60]	@ (8003b90 <HAL_RCC_GetClockConfig+0x5c>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b90 <HAL_RCC_GetClockConfig+0x5c>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003b68:	4b09      	ldr	r3, [pc, #36]	@ (8003b90 <HAL_RCC_GetClockConfig+0x5c>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	08db      	lsrs	r3, r3, #3
 8003b6e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b76:	4b07      	ldr	r3, [pc, #28]	@ (8003b94 <HAL_RCC_GetClockConfig+0x60>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0207 	and.w	r2, r3, #7
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	601a      	str	r2, [r3, #0]
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	40023c00 	.word	0x40023c00

08003b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e07b      	b.n	8003ca2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d108      	bne.n	8003bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bba:	d009      	beq.n	8003bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
 8003bc2:	e005      	b.n	8003bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fe fa28 	bl	8002040 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c54:	ea42 0103 	orr.w	r1, r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	f003 0104 	and.w	r1, r3, #4
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c76:	f003 0210 	and.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b088      	sub	sp, #32
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_SPI_Transmit+0x22>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e12d      	b.n	8003f28 <HAL_SPI_Transmit+0x27e>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cd4:	f7fe fbfa 	bl	80024cc <HAL_GetTick>
 8003cd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d002      	beq.n	8003cf0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
 8003cec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cee:	e116      	b.n	8003f1e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <HAL_SPI_Transmit+0x52>
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d00:	e10d      	b.n	8003f1e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2203      	movs	r2, #3
 8003d06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	88fa      	ldrh	r2, [r7, #6]
 8003d1a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	88fa      	ldrh	r2, [r7, #6]
 8003d20:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d48:	d10f      	bne.n	8003d6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d74:	2b40      	cmp	r3, #64	@ 0x40
 8003d76:	d007      	beq.n	8003d88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d90:	d14f      	bne.n	8003e32 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <HAL_SPI_Transmit+0xf6>
 8003d9a:	8afb      	ldrh	r3, [r7, #22]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d142      	bne.n	8003e26 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	881a      	ldrh	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	1c9a      	adds	r2, r3, #2
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003dc4:	e02f      	b.n	8003e26 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d112      	bne.n	8003dfa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd8:	881a      	ldrh	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de4:	1c9a      	adds	r2, r3, #2
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003df8:	e015      	b.n	8003e26 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dfa:	f7fe fb67 	bl	80024cc <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d803      	bhi.n	8003e12 <HAL_SPI_Transmit+0x168>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e10:	d102      	bne.n	8003e18 <HAL_SPI_Transmit+0x16e>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d106      	bne.n	8003e26 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003e24:	e07b      	b.n	8003f1e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ca      	bne.n	8003dc6 <HAL_SPI_Transmit+0x11c>
 8003e30:	e050      	b.n	8003ed4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d002      	beq.n	8003e40 <HAL_SPI_Transmit+0x196>
 8003e3a:	8afb      	ldrh	r3, [r7, #22]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d144      	bne.n	8003eca <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	7812      	ldrb	r2, [r2, #0]
 8003e4c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	1c5a      	adds	r2, r3, #1
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e66:	e030      	b.n	8003eca <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d113      	bne.n	8003e9e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e9c:	e015      	b.n	8003eca <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e9e:	f7fe fb15 	bl	80024cc <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d803      	bhi.n	8003eb6 <HAL_SPI_Transmit+0x20c>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	d102      	bne.n	8003ebc <HAL_SPI_Transmit+0x212>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003ec8:	e029      	b.n	8003f1e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1c9      	bne.n	8003e68 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	6839      	ldr	r1, [r7, #0]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 fbe3 	bl	80046a4 <SPI_EndRxTxTransaction>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e003      	b.n	8003f1e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003f26:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3720      	adds	r7, #32
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_SPI_Transmit_IT+0x1e>
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f52:	e06a      	b.n	800402a <HAL_SPI_Transmit_IT+0xfa>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d002      	beq.n	8003f66 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 8003f60:	2302      	movs	r3, #2
 8003f62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f64:	e061      	b.n	800402a <HAL_SPI_Transmit_IT+0xfa>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_SPI_Transmit_IT+0x44>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e05b      	b.n	800402c <HAL_SPI_Transmit_IT+0xfc>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2203      	movs	r2, #3
 8003f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	88fa      	ldrh	r2, [r7, #6]
 8003f94:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	88fa      	ldrh	r2, [r7, #6]
 8003f9a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004038 <HAL_SPI_Transmit_IT+0x108>)
 8003fc0:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fc2:	e002      	b.n	8003fca <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800403c <HAL_SPI_Transmit_IT+0x10c>)
 8003fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fd2:	d10f      	bne.n	8003ff4 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fe2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ff2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffe:	2b40      	cmp	r3, #64	@ 0x40
 8004000:	d007      	beq.n	8004012 <HAL_SPI_Transmit_IT+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004010:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8004028:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800402a:	7dfb      	ldrb	r3, [r7, #23]
}
 800402c:	4618      	mov	r0, r3
 800402e:	371c      	adds	r7, #28
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	08004551 	.word	0x08004551
 800403c:	0800450b 	.word	0x0800450b

08004040 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004058:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004060:	7dbb      	ldrb	r3, [r7, #22]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d00d      	beq.n	8004082 <HAL_SPI_TransmitReceive_IT+0x42>
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800406c:	d106      	bne.n	800407c <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d102      	bne.n	800407c <HAL_SPI_TransmitReceive_IT+0x3c>
 8004076:	7dbb      	ldrb	r3, [r7, #22]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d002      	beq.n	8004082 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 800407c:	2302      	movs	r3, #2
 800407e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004080:	e061      	b.n	8004146 <HAL_SPI_TransmitReceive_IT+0x106>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_SPI_TransmitReceive_IT+0x54>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_SPI_TransmitReceive_IT+0x54>
 800408e:	887b      	ldrh	r3, [r7, #2]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d102      	bne.n	800409a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004098:	e055      	b.n	8004146 <HAL_SPI_TransmitReceive_IT+0x106>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_SPI_TransmitReceive_IT+0x68>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e04f      	b.n	8004148 <HAL_SPI_TransmitReceive_IT+0x108>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d003      	beq.n	80040c4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2205      	movs	r2, #5
 80040c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	887a      	ldrh	r2, [r7, #2]
 80040d4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	887a      	ldrh	r2, [r7, #2]
 80040da:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	887a      	ldrh	r2, [r7, #2]
 80040e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	887a      	ldrh	r2, [r7, #2]
 80040ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a16      	ldr	r2, [pc, #88]	@ (8004154 <HAL_SPI_TransmitReceive_IT+0x114>)
 80040fa:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4a16      	ldr	r2, [pc, #88]	@ (8004158 <HAL_SPI_TransmitReceive_IT+0x118>)
 8004100:	645a      	str	r2, [r3, #68]	@ 0x44
 8004102:	e005      	b.n	8004110 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4a15      	ldr	r2, [pc, #84]	@ (800415c <HAL_SPI_TransmitReceive_IT+0x11c>)
 8004108:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a14      	ldr	r2, [pc, #80]	@ (8004160 <HAL_SPI_TransmitReceive_IT+0x120>)
 800410e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411a:	2b40      	cmp	r3, #64	@ 0x40
 800411c:	d007      	beq.n	800412e <HAL_SPI_TransmitReceive_IT+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800412c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8004144:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8004146:	7dfb      	ldrb	r3, [r7, #23]
}
 8004148:	4618      	mov	r0, r3
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	0800444d 	.word	0x0800444d
 8004158:	080044ad 	.word	0x080044ad
 800415c:	08004389 	.word	0x08004389
 8004160:	080043ed 	.word	0x080043ed

08004164 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10e      	bne.n	80041a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d004      	beq.n	80041a4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	4798      	blx	r3
    return;
 80041a2:	e0ce      	b.n	8004342 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <HAL_SPI_IRQHandler+0x5e>
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4798      	blx	r3
    return;
 80041c0:	e0bf      	b.n	8004342 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	f003 0320 	and.w	r3, r3, #32
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <HAL_SPI_IRQHandler+0x7e>
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d105      	bne.n	80041e2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80b0 	beq.w	8004342 <HAL_SPI_IRQHandler+0x1de>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80aa 	beq.w	8004342 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d023      	beq.n	8004240 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b03      	cmp	r3, #3
 8004202:	d011      	beq.n	8004228 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004208:	f043 0204 	orr.w	r2, r3, #4
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	e00b      	b.n	8004240 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004228:	2300      	movs	r3, #0
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	693b      	ldr	r3, [r7, #16]
        return;
 800423e:	e080      	b.n	8004342 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d014      	beq.n	8004274 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424e:	f043 0201 	orr.w	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00c      	beq.n	8004298 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004282:	f043 0208 	orr.w	r2, r3, #8
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429c:	2b00      	cmp	r3, #0
 800429e:	d04f      	beq.n	8004340 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042ae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d104      	bne.n	80042cc <HAL_SPI_IRQHandler+0x168>
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d034      	beq.n	8004336 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0203 	bic.w	r2, r2, #3
 80042da:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d011      	beq.n	8004308 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e8:	4a17      	ldr	r2, [pc, #92]	@ (8004348 <HAL_SPI_IRQHandler+0x1e4>)
 80042ea:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fe fdef 	bl	8002ed4 <HAL_DMA_Abort_IT>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004300:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800430c:	2b00      	cmp	r3, #0
 800430e:	d016      	beq.n	800433e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004314:	4a0c      	ldr	r2, [pc, #48]	@ (8004348 <HAL_SPI_IRQHandler+0x1e4>)
 8004316:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe fdd9 	bl	8002ed4 <HAL_DMA_Abort_IT>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800432c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004334:	e003      	b.n	800433e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f808 	bl	800434c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800433c:	e000      	b.n	8004340 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800433e:	bf00      	nop
    return;
 8004340:	bf00      	nop
  }
}
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	08004361 	.word	0x08004361

0800434c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f7ff ffe6 	bl	800434c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f103 020c 	add.w	r2, r3, #12
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439c:	7812      	ldrb	r2, [r2, #0]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10f      	bne.n	80043e4 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043d2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f9b4 	bl	800474c <SPI_CloseRxTx_ISR>
    }
  }
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	7812      	ldrb	r2, [r2, #0]
 8004400:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10f      	bne.n	8004444 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004432:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d102      	bne.n	8004444 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f984 	bl	800474c <SPI_CloseRxTx_ISR>
    }
  }
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445e:	b292      	uxth	r2, r2
 8004460:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004466:	1c9a      	adds	r2, r3, #2
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b01      	subs	r3, #1
 8004474:	b29a      	uxth	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10f      	bne.n	80044a4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004492:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f954 	bl	800474c <SPI_CloseRxTx_ISR>
    }
  }
}
 80044a4:	bf00      	nop
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b8:	881a      	ldrh	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c4:	1c9a      	adds	r2, r3, #2
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10f      	bne.n	8004502 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044f0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f925 	bl	800474c <SPI_CloseRxTx_ISR>
    }
  }
}
 8004502:	bf00      	nop
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d102      	bne.n	8004548 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f976 	bl	8004834 <SPI_CloseTx_ISR>
  }
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	881a      	ldrh	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004568:	1c9a      	adds	r2, r3, #2
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f954 	bl	8004834 <SPI_CloseTx_ISR>
  }
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045a4:	f7fd ff92 	bl	80024cc <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ac:	1a9b      	subs	r3, r3, r2
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	4413      	add	r3, r2
 80045b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045b4:	f7fd ff8a 	bl	80024cc <HAL_GetTick>
 80045b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045ba:	4b39      	ldr	r3, [pc, #228]	@ (80046a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	015b      	lsls	r3, r3, #5
 80045c0:	0d1b      	lsrs	r3, r3, #20
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	fb02 f303 	mul.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ca:	e054      	b.n	8004676 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d050      	beq.n	8004676 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045d4:	f7fd ff7a 	bl	80024cc <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d902      	bls.n	80045ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d13d      	bne.n	8004666 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004602:	d111      	bne.n	8004628 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800460c:	d004      	beq.n	8004618 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004616:	d107      	bne.n	8004628 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004626:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004630:	d10f      	bne.n	8004652 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004650:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e017      	b.n	8004696 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3b01      	subs	r3, #1
 8004674:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4013      	ands	r3, r2
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	429a      	cmp	r2, r3
 8004684:	bf0c      	ite	eq
 8004686:	2301      	moveq	r3, #1
 8004688:	2300      	movne	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	429a      	cmp	r2, r3
 8004692:	d19b      	bne.n	80045cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20000004 	.word	0x20000004

080046a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2201      	movs	r2, #1
 80046b8:	2102      	movs	r1, #2
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff ff6a 	bl	8004594 <SPI_WaitFlagStateUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ca:	f043 0220 	orr.w	r2, r3, #32
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e032      	b.n	800473c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <SPI_EndRxTxTransaction+0xa0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1b      	ldr	r2, [pc, #108]	@ (8004748 <SPI_EndRxTxTransaction+0xa4>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	0d5b      	lsrs	r3, r3, #21
 80046e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046f4:	d112      	bne.n	800471c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2200      	movs	r2, #0
 80046fe:	2180      	movs	r1, #128	@ 0x80
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f7ff ff47 	bl	8004594 <SPI_WaitFlagStateUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d016      	beq.n	800473a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004710:	f043 0220 	orr.w	r2, r3, #32
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e00f      	b.n	800473c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	3b01      	subs	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004732:	2b80      	cmp	r3, #128	@ 0x80
 8004734:	d0f2      	beq.n	800471c <SPI_EndRxTxTransaction+0x78>
 8004736:	e000      	b.n	800473a <SPI_EndRxTxTransaction+0x96>
        break;
 8004738:	bf00      	nop
  }

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000004 	.word	0x20000004
 8004748:	165e9f81 	.word	0x165e9f81

0800474c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8004754:	4b35      	ldr	r3, [pc, #212]	@ (800482c <SPI_CloseRxTx_ISR+0xe0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a35      	ldr	r2, [pc, #212]	@ (8004830 <SPI_CloseRxTx_ISR+0xe4>)
 800475a:	fba2 2303 	umull	r2, r3, r2, r3
 800475e:	0a5b      	lsrs	r3, r3, #9
 8004760:	2264      	movs	r2, #100	@ 0x64
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004768:	f7fd feb0 	bl	80024cc <HAL_GetTick>
 800476c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0220 	bic.w	r2, r2, #32
 800477c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d106      	bne.n	8004792 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004788:	f043 0220 	orr.w	r2, r3, #32
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004790:	e009      	b.n	80047a6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	3b01      	subs	r3, #1
 8004796:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0eb      	beq.n	800477e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	2164      	movs	r1, #100	@ 0x64
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff ff7a 	bl	80046a4 <SPI_EndRxTxTransaction>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d115      	bne.n	8004814 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d107      	bne.n	8004804 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7fc f897 	bl	8000930 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004802:	e00e      	b.n	8004822 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fc f8a5 	bl	800095c <HAL_SPI_TxRxCpltCallback>
}
 8004812:	e006      	b.n	8004822 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7ff fd95 	bl	800434c <HAL_SPI_ErrorCallback>
}
 8004822:	bf00      	nop
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000004 	.word	0x20000004
 8004830:	057619f1 	.word	0x057619f1

08004834 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800483c:	4b2c      	ldr	r3, [pc, #176]	@ (80048f0 <SPI_CloseTx_ISR+0xbc>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a2c      	ldr	r2, [pc, #176]	@ (80048f4 <SPI_CloseTx_ISR+0xc0>)
 8004842:	fba2 2303 	umull	r2, r3, r2, r3
 8004846:	0a5b      	lsrs	r3, r3, #9
 8004848:	2264      	movs	r2, #100	@ 0x64
 800484a:	fb02 f303 	mul.w	r3, r2, r3
 800484e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004850:	f7fd fe3c 	bl	80024cc <HAL_GetTick>
 8004854:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004868:	e009      	b.n	800487e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	3b01      	subs	r3, #1
 800486e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0eb      	beq.n	8004856 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800488c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	2164      	movs	r1, #100	@ 0x64
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff ff06 	bl	80046a4 <SPI_EndRxTxTransaction>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d005      	beq.n	80048aa <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a2:	f043 0220 	orr.w	r2, r3, #32
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10a      	bne.n	80048c8 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff fd37 	bl	800434c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80048de:	e002      	b.n	80048e6 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7fc f80f 	bl	8000904 <HAL_SPI_TxCpltCallback>
}
 80048e6:	bf00      	nop
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000004 	.word	0x20000004
 80048f4:	057619f1 	.word	0x057619f1

080048f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e041      	b.n	800498e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f839 	bl	8004996 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f000 f9b2 	bl	8004ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d001      	beq.n	80049c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e044      	b.n	8004a4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a5c <HAL_TIM_Base_Start_IT+0xb0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d018      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x6c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ee:	d013      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x6c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004a60 <HAL_TIM_Base_Start_IT+0xb4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00e      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x6c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a19      	ldr	r2, [pc, #100]	@ (8004a64 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d009      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x6c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a17      	ldr	r2, [pc, #92]	@ (8004a68 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d004      	beq.n	8004a18 <HAL_TIM_Base_Start_IT+0x6c>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a16      	ldr	r2, [pc, #88]	@ (8004a6c <HAL_TIM_Base_Start_IT+0xc0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d111      	bne.n	8004a3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b06      	cmp	r3, #6
 8004a28:	d010      	beq.n	8004a4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3a:	e007      	b.n	8004a4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3714      	adds	r7, #20
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	40010000 	.word	0x40010000
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	40014000 	.word	0x40014000

08004a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d020      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01b      	beq.n	8004ad4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0202 	mvn.w	r2, #2
 8004aa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8d2 	bl	8004c64 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8c4 	bl	8004c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8d5 	bl	8004c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d020      	beq.n	8004b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d01b      	beq.n	8004b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f06f 0204 	mvn.w	r2, #4
 8004af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f8ac 	bl	8004c64 <HAL_TIM_IC_CaptureCallback>
 8004b0c:	e005      	b.n	8004b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f89e 	bl	8004c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f8af 	bl	8004c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d020      	beq.n	8004b6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01b      	beq.n	8004b6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0208 	mvn.w	r2, #8
 8004b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2204      	movs	r2, #4
 8004b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f886 	bl	8004c64 <HAL_TIM_IC_CaptureCallback>
 8004b58:	e005      	b.n	8004b66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f878 	bl	8004c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f889 	bl	8004c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d020      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01b      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0210 	mvn.w	r2, #16
 8004b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f860 	bl	8004c64 <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f852 	bl	8004c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f863 	bl	8004c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00c      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d007      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0201 	mvn.w	r2, #1
 8004bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fc fae6 	bl	80011a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00c      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f8e6 	bl	8004dcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00c      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f834 	bl	8004c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00c      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d007      	beq.n	8004c48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0220 	mvn.w	r2, #32
 8004c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f8b8 	bl	8004db8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a3a      	ldr	r2, [pc, #232]	@ (8004d9c <TIM_Base_SetConfig+0xfc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00f      	beq.n	8004cd8 <TIM_Base_SetConfig+0x38>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cbe:	d00b      	beq.n	8004cd8 <TIM_Base_SetConfig+0x38>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a37      	ldr	r2, [pc, #220]	@ (8004da0 <TIM_Base_SetConfig+0x100>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d007      	beq.n	8004cd8 <TIM_Base_SetConfig+0x38>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a36      	ldr	r2, [pc, #216]	@ (8004da4 <TIM_Base_SetConfig+0x104>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_Base_SetConfig+0x38>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a35      	ldr	r2, [pc, #212]	@ (8004da8 <TIM_Base_SetConfig+0x108>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d108      	bne.n	8004cea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a2b      	ldr	r2, [pc, #172]	@ (8004d9c <TIM_Base_SetConfig+0xfc>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d01b      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cf8:	d017      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a28      	ldr	r2, [pc, #160]	@ (8004da0 <TIM_Base_SetConfig+0x100>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a27      	ldr	r2, [pc, #156]	@ (8004da4 <TIM_Base_SetConfig+0x104>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00f      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a26      	ldr	r2, [pc, #152]	@ (8004da8 <TIM_Base_SetConfig+0x108>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a25      	ldr	r2, [pc, #148]	@ (8004dac <TIM_Base_SetConfig+0x10c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d007      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a24      	ldr	r2, [pc, #144]	@ (8004db0 <TIM_Base_SetConfig+0x110>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d003      	beq.n	8004d2a <TIM_Base_SetConfig+0x8a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a23      	ldr	r2, [pc, #140]	@ (8004db4 <TIM_Base_SetConfig+0x114>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d108      	bne.n	8004d3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a0e      	ldr	r2, [pc, #56]	@ (8004d9c <TIM_Base_SetConfig+0xfc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d103      	bne.n	8004d70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d105      	bne.n	8004d8e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f023 0201 	bic.w	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	611a      	str	r2, [r3, #16]
  }
}
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40010000 	.word	0x40010000
 8004da0:	40000400 	.word	0x40000400
 8004da4:	40000800 	.word	0x40000800
 8004da8:	40000c00 	.word	0x40000c00
 8004dac:	40014000 	.word	0x40014000
 8004db0:	40014400 	.word	0x40014400
 8004db4:	40014800 	.word	0x40014800

08004db8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e042      	b.n	8004e78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fd f97a 	bl	8002100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2224      	movs	r2, #36	@ 0x24
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f973 	bl	8005110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08a      	sub	sp, #40	@ 0x28
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d175      	bne.n	8004f8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_UART_Transmit+0x2c>
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e06e      	b.n	8004f8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2221      	movs	r2, #33	@ 0x21
 8004eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ebe:	f7fd fb05 	bl	80024cc <HAL_GetTick>
 8004ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	88fa      	ldrh	r2, [r7, #6]
 8004ece:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed8:	d108      	bne.n	8004eec <HAL_UART_Transmit+0x6c>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d104      	bne.n	8004eec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	e003      	b.n	8004ef4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ef4:	e02e      	b.n	8004f54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2180      	movs	r1, #128	@ 0x80
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f848 	bl	8004f96 <UART_WaitOnFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e03a      	b.n	8004f8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10b      	bne.n	8004f36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	3302      	adds	r3, #2
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	e007      	b.n	8004f46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	781a      	ldrb	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	3301      	adds	r3, #1
 8004f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1cb      	bne.n	8004ef6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2200      	movs	r2, #0
 8004f66:	2140      	movs	r1, #64	@ 0x40
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f814 	bl	8004f96 <UART_WaitOnFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e006      	b.n	8004f8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f8c:	2302      	movs	r3, #2
  }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b086      	sub	sp, #24
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	60b9      	str	r1, [r7, #8]
 8004fa0:	603b      	str	r3, [r7, #0]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa6:	e03b      	b.n	8005020 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d037      	beq.n	8005020 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb0:	f7fd fa8c 	bl	80024cc <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	6a3a      	ldr	r2, [r7, #32]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d302      	bcc.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e03a      	b.n	8005040 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d023      	beq.n	8005020 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b80      	cmp	r3, #128	@ 0x80
 8004fdc:	d020      	beq.n	8005020 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b40      	cmp	r3, #64	@ 0x40
 8004fe2:	d01d      	beq.n	8005020 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d116      	bne.n	8005020 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	617b      	str	r3, [r7, #20]
 8005006:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f81d 	bl	8005048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2208      	movs	r2, #8
 8005012:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e00f      	b.n	8005040 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4013      	ands	r3, r2
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	429a      	cmp	r2, r3
 800502e:	bf0c      	ite	eq
 8005030:	2301      	moveq	r3, #1
 8005032:	2300      	movne	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	429a      	cmp	r2, r3
 800503c:	d0b4      	beq.n	8004fa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005048:	b480      	push	{r7}
 800504a:	b095      	sub	sp, #84	@ 0x54
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	330c      	adds	r3, #12
 800506e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005070:	643a      	str	r2, [r7, #64]	@ 0x40
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800507e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e5      	bne.n	8005050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3314      	adds	r3, #20
 800508a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	61fb      	str	r3, [r7, #28]
   return(result);
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3314      	adds	r3, #20
 80050a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e5      	bne.n	8005084 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d119      	bne.n	80050f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f023 0310 	bic.w	r3, r3, #16
 80050d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050e0:	61ba      	str	r2, [r7, #24]
 80050e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6979      	ldr	r1, [r7, #20]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	613b      	str	r3, [r7, #16]
   return(result);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005102:	bf00      	nop
 8005104:	3754      	adds	r7, #84	@ 0x54
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005114:	b0c0      	sub	sp, #256	@ 0x100
 8005116:	af00      	add	r7, sp, #0
 8005118:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800512c:	68d9      	ldr	r1, [r3, #12]
 800512e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	ea40 0301 	orr.w	r3, r0, r1
 8005138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800513a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	431a      	orrs	r2, r3
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	431a      	orrs	r2, r3
 8005150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005168:	f021 010c 	bic.w	r1, r1, #12
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005176:	430b      	orrs	r3, r1
 8005178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518a:	6999      	ldr	r1, [r3, #24]
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	ea40 0301 	orr.w	r3, r0, r1
 8005196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	4b8f      	ldr	r3, [pc, #572]	@ (80053dc <UART_SetConfig+0x2cc>)
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d005      	beq.n	80051b0 <UART_SetConfig+0xa0>
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b8d      	ldr	r3, [pc, #564]	@ (80053e0 <UART_SetConfig+0x2d0>)
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d104      	bne.n	80051ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051b0:	f7fe fcac 	bl	8003b0c <HAL_RCC_GetPCLK2Freq>
 80051b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80051b8:	e003      	b.n	80051c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051ba:	f7fe fc93 	bl	8003ae4 <HAL_RCC_GetPCLK1Freq>
 80051be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051cc:	f040 810c 	bne.w	80053e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80051de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80051e2:	4622      	mov	r2, r4
 80051e4:	462b      	mov	r3, r5
 80051e6:	1891      	adds	r1, r2, r2
 80051e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80051ea:	415b      	adcs	r3, r3
 80051ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80051f2:	4621      	mov	r1, r4
 80051f4:	eb12 0801 	adds.w	r8, r2, r1
 80051f8:	4629      	mov	r1, r5
 80051fa:	eb43 0901 	adc.w	r9, r3, r1
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800520a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800520e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005212:	4690      	mov	r8, r2
 8005214:	4699      	mov	r9, r3
 8005216:	4623      	mov	r3, r4
 8005218:	eb18 0303 	adds.w	r3, r8, r3
 800521c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005220:	462b      	mov	r3, r5
 8005222:	eb49 0303 	adc.w	r3, r9, r3
 8005226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005236:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800523a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800523e:	460b      	mov	r3, r1
 8005240:	18db      	adds	r3, r3, r3
 8005242:	653b      	str	r3, [r7, #80]	@ 0x50
 8005244:	4613      	mov	r3, r2
 8005246:	eb42 0303 	adc.w	r3, r2, r3
 800524a:	657b      	str	r3, [r7, #84]	@ 0x54
 800524c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005254:	f7fb f81c 	bl	8000290 <__aeabi_uldivmod>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4b61      	ldr	r3, [pc, #388]	@ (80053e4 <UART_SetConfig+0x2d4>)
 800525e:	fba3 2302 	umull	r2, r3, r3, r2
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	011c      	lsls	r4, r3, #4
 8005266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800526a:	2200      	movs	r2, #0
 800526c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005270:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005278:	4642      	mov	r2, r8
 800527a:	464b      	mov	r3, r9
 800527c:	1891      	adds	r1, r2, r2
 800527e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005280:	415b      	adcs	r3, r3
 8005282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005288:	4641      	mov	r1, r8
 800528a:	eb12 0a01 	adds.w	sl, r2, r1
 800528e:	4649      	mov	r1, r9
 8005290:	eb43 0b01 	adc.w	fp, r3, r1
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052a8:	4692      	mov	sl, r2
 80052aa:	469b      	mov	fp, r3
 80052ac:	4643      	mov	r3, r8
 80052ae:	eb1a 0303 	adds.w	r3, sl, r3
 80052b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052b6:	464b      	mov	r3, r9
 80052b8:	eb4b 0303 	adc.w	r3, fp, r3
 80052bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052d4:	460b      	mov	r3, r1
 80052d6:	18db      	adds	r3, r3, r3
 80052d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80052da:	4613      	mov	r3, r2
 80052dc:	eb42 0303 	adc.w	r3, r2, r3
 80052e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80052e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80052ea:	f7fa ffd1 	bl	8000290 <__aeabi_uldivmod>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	4b3b      	ldr	r3, [pc, #236]	@ (80053e4 <UART_SetConfig+0x2d4>)
 80052f6:	fba3 2301 	umull	r2, r3, r3, r1
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	2264      	movs	r2, #100	@ 0x64
 80052fe:	fb02 f303 	mul.w	r3, r2, r3
 8005302:	1acb      	subs	r3, r1, r3
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800530a:	4b36      	ldr	r3, [pc, #216]	@ (80053e4 <UART_SetConfig+0x2d4>)
 800530c:	fba3 2302 	umull	r2, r3, r3, r2
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005318:	441c      	add	r4, r3
 800531a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800531e:	2200      	movs	r2, #0
 8005320:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005324:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800532c:	4642      	mov	r2, r8
 800532e:	464b      	mov	r3, r9
 8005330:	1891      	adds	r1, r2, r2
 8005332:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005334:	415b      	adcs	r3, r3
 8005336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800533c:	4641      	mov	r1, r8
 800533e:	1851      	adds	r1, r2, r1
 8005340:	6339      	str	r1, [r7, #48]	@ 0x30
 8005342:	4649      	mov	r1, r9
 8005344:	414b      	adcs	r3, r1
 8005346:	637b      	str	r3, [r7, #52]	@ 0x34
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005354:	4659      	mov	r1, fp
 8005356:	00cb      	lsls	r3, r1, #3
 8005358:	4651      	mov	r1, sl
 800535a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800535e:	4651      	mov	r1, sl
 8005360:	00ca      	lsls	r2, r1, #3
 8005362:	4610      	mov	r0, r2
 8005364:	4619      	mov	r1, r3
 8005366:	4603      	mov	r3, r0
 8005368:	4642      	mov	r2, r8
 800536a:	189b      	adds	r3, r3, r2
 800536c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005370:	464b      	mov	r3, r9
 8005372:	460a      	mov	r2, r1
 8005374:	eb42 0303 	adc.w	r3, r2, r3
 8005378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005388:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800538c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005390:	460b      	mov	r3, r1
 8005392:	18db      	adds	r3, r3, r3
 8005394:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005396:	4613      	mov	r3, r2
 8005398:	eb42 0303 	adc.w	r3, r2, r3
 800539c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800539e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053a6:	f7fa ff73 	bl	8000290 <__aeabi_uldivmod>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	4b0d      	ldr	r3, [pc, #52]	@ (80053e4 <UART_SetConfig+0x2d4>)
 80053b0:	fba3 1302 	umull	r1, r3, r3, r2
 80053b4:	095b      	lsrs	r3, r3, #5
 80053b6:	2164      	movs	r1, #100	@ 0x64
 80053b8:	fb01 f303 	mul.w	r3, r1, r3
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	3332      	adds	r3, #50	@ 0x32
 80053c2:	4a08      	ldr	r2, [pc, #32]	@ (80053e4 <UART_SetConfig+0x2d4>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	f003 0207 	and.w	r2, r3, #7
 80053ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4422      	add	r2, r4
 80053d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053d8:	e106      	b.n	80055e8 <UART_SetConfig+0x4d8>
 80053da:	bf00      	nop
 80053dc:	40011000 	.word	0x40011000
 80053e0:	40011400 	.word	0x40011400
 80053e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ec:	2200      	movs	r2, #0
 80053ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80053f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80053fa:	4642      	mov	r2, r8
 80053fc:	464b      	mov	r3, r9
 80053fe:	1891      	adds	r1, r2, r2
 8005400:	6239      	str	r1, [r7, #32]
 8005402:	415b      	adcs	r3, r3
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24
 8005406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800540a:	4641      	mov	r1, r8
 800540c:	1854      	adds	r4, r2, r1
 800540e:	4649      	mov	r1, r9
 8005410:	eb43 0501 	adc.w	r5, r3, r1
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	00eb      	lsls	r3, r5, #3
 800541e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005422:	00e2      	lsls	r2, r4, #3
 8005424:	4614      	mov	r4, r2
 8005426:	461d      	mov	r5, r3
 8005428:	4643      	mov	r3, r8
 800542a:	18e3      	adds	r3, r4, r3
 800542c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005430:	464b      	mov	r3, r9
 8005432:	eb45 0303 	adc.w	r3, r5, r3
 8005436:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800543a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005446:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800544a:	f04f 0200 	mov.w	r2, #0
 800544e:	f04f 0300 	mov.w	r3, #0
 8005452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005456:	4629      	mov	r1, r5
 8005458:	008b      	lsls	r3, r1, #2
 800545a:	4621      	mov	r1, r4
 800545c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005460:	4621      	mov	r1, r4
 8005462:	008a      	lsls	r2, r1, #2
 8005464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005468:	f7fa ff12 	bl	8000290 <__aeabi_uldivmod>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4b60      	ldr	r3, [pc, #384]	@ (80055f4 <UART_SetConfig+0x4e4>)
 8005472:	fba3 2302 	umull	r2, r3, r3, r2
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	011c      	lsls	r4, r3, #4
 800547a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800547e:	2200      	movs	r2, #0
 8005480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005484:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800548c:	4642      	mov	r2, r8
 800548e:	464b      	mov	r3, r9
 8005490:	1891      	adds	r1, r2, r2
 8005492:	61b9      	str	r1, [r7, #24]
 8005494:	415b      	adcs	r3, r3
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800549c:	4641      	mov	r1, r8
 800549e:	1851      	adds	r1, r2, r1
 80054a0:	6139      	str	r1, [r7, #16]
 80054a2:	4649      	mov	r1, r9
 80054a4:	414b      	adcs	r3, r1
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	f04f 0200 	mov.w	r2, #0
 80054ac:	f04f 0300 	mov.w	r3, #0
 80054b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054b4:	4659      	mov	r1, fp
 80054b6:	00cb      	lsls	r3, r1, #3
 80054b8:	4651      	mov	r1, sl
 80054ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054be:	4651      	mov	r1, sl
 80054c0:	00ca      	lsls	r2, r1, #3
 80054c2:	4610      	mov	r0, r2
 80054c4:	4619      	mov	r1, r3
 80054c6:	4603      	mov	r3, r0
 80054c8:	4642      	mov	r2, r8
 80054ca:	189b      	adds	r3, r3, r2
 80054cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054d0:	464b      	mov	r3, r9
 80054d2:	460a      	mov	r2, r1
 80054d4:	eb42 0303 	adc.w	r3, r2, r3
 80054d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80054f4:	4649      	mov	r1, r9
 80054f6:	008b      	lsls	r3, r1, #2
 80054f8:	4641      	mov	r1, r8
 80054fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054fe:	4641      	mov	r1, r8
 8005500:	008a      	lsls	r2, r1, #2
 8005502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005506:	f7fa fec3 	bl	8000290 <__aeabi_uldivmod>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4611      	mov	r1, r2
 8005510:	4b38      	ldr	r3, [pc, #224]	@ (80055f4 <UART_SetConfig+0x4e4>)
 8005512:	fba3 2301 	umull	r2, r3, r3, r1
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	2264      	movs	r2, #100	@ 0x64
 800551a:	fb02 f303 	mul.w	r3, r2, r3
 800551e:	1acb      	subs	r3, r1, r3
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	3332      	adds	r3, #50	@ 0x32
 8005524:	4a33      	ldr	r2, [pc, #204]	@ (80055f4 <UART_SetConfig+0x4e4>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005530:	441c      	add	r4, r3
 8005532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005536:	2200      	movs	r2, #0
 8005538:	673b      	str	r3, [r7, #112]	@ 0x70
 800553a:	677a      	str	r2, [r7, #116]	@ 0x74
 800553c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005540:	4642      	mov	r2, r8
 8005542:	464b      	mov	r3, r9
 8005544:	1891      	adds	r1, r2, r2
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	415b      	adcs	r3, r3
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005550:	4641      	mov	r1, r8
 8005552:	1851      	adds	r1, r2, r1
 8005554:	6039      	str	r1, [r7, #0]
 8005556:	4649      	mov	r1, r9
 8005558:	414b      	adcs	r3, r1
 800555a:	607b      	str	r3, [r7, #4]
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	f04f 0300 	mov.w	r3, #0
 8005564:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005568:	4659      	mov	r1, fp
 800556a:	00cb      	lsls	r3, r1, #3
 800556c:	4651      	mov	r1, sl
 800556e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005572:	4651      	mov	r1, sl
 8005574:	00ca      	lsls	r2, r1, #3
 8005576:	4610      	mov	r0, r2
 8005578:	4619      	mov	r1, r3
 800557a:	4603      	mov	r3, r0
 800557c:	4642      	mov	r2, r8
 800557e:	189b      	adds	r3, r3, r2
 8005580:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005582:	464b      	mov	r3, r9
 8005584:	460a      	mov	r2, r1
 8005586:	eb42 0303 	adc.w	r3, r2, r3
 800558a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800558c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	663b      	str	r3, [r7, #96]	@ 0x60
 8005596:	667a      	str	r2, [r7, #100]	@ 0x64
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055a4:	4649      	mov	r1, r9
 80055a6:	008b      	lsls	r3, r1, #2
 80055a8:	4641      	mov	r1, r8
 80055aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ae:	4641      	mov	r1, r8
 80055b0:	008a      	lsls	r2, r1, #2
 80055b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80055b6:	f7fa fe6b 	bl	8000290 <__aeabi_uldivmod>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4b0d      	ldr	r3, [pc, #52]	@ (80055f4 <UART_SetConfig+0x4e4>)
 80055c0:	fba3 1302 	umull	r1, r3, r3, r2
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	2164      	movs	r1, #100	@ 0x64
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	3332      	adds	r3, #50	@ 0x32
 80055d2:	4a08      	ldr	r2, [pc, #32]	@ (80055f4 <UART_SetConfig+0x4e4>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	f003 020f 	and.w	r2, r3, #15
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4422      	add	r2, r4
 80055e6:	609a      	str	r2, [r3, #8]
}
 80055e8:	bf00      	nop
 80055ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80055ee:	46bd      	mov	sp, r7
 80055f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055f4:	51eb851f 	.word	0x51eb851f

080055f8 <__NVIC_SetPriority>:
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	6039      	str	r1, [r7, #0]
 8005602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005608:	2b00      	cmp	r3, #0
 800560a:	db0a      	blt.n	8005622 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	b2da      	uxtb	r2, r3
 8005610:	490c      	ldr	r1, [pc, #48]	@ (8005644 <__NVIC_SetPriority+0x4c>)
 8005612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005616:	0112      	lsls	r2, r2, #4
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	440b      	add	r3, r1
 800561c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005620:	e00a      	b.n	8005638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	b2da      	uxtb	r2, r3
 8005626:	4908      	ldr	r1, [pc, #32]	@ (8005648 <__NVIC_SetPriority+0x50>)
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	3b04      	subs	r3, #4
 8005630:	0112      	lsls	r2, r2, #4
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	440b      	add	r3, r1
 8005636:	761a      	strb	r2, [r3, #24]
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	e000e100 	.word	0xe000e100
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005650:	4b05      	ldr	r3, [pc, #20]	@ (8005668 <SysTick_Handler+0x1c>)
 8005652:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005654:	f001 fd74 	bl	8007140 <xTaskGetSchedulerState>
 8005658:	4603      	mov	r3, r0
 800565a:	2b01      	cmp	r3, #1
 800565c:	d001      	beq.n	8005662 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800565e:	f002 fb6b 	bl	8007d38 <xPortSysTickHandler>
  }
}
 8005662:	bf00      	nop
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	e000e010 	.word	0xe000e010

0800566c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005670:	2100      	movs	r1, #0
 8005672:	f06f 0004 	mvn.w	r0, #4
 8005676:	f7ff ffbf 	bl	80055f8 <__NVIC_SetPriority>
#endif
}
 800567a:	bf00      	nop
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005686:	f3ef 8305 	mrs	r3, IPSR
 800568a:	603b      	str	r3, [r7, #0]
  return(result);
 800568c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005692:	f06f 0305 	mvn.w	r3, #5
 8005696:	607b      	str	r3, [r7, #4]
 8005698:	e00c      	b.n	80056b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800569a:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <osKernelInitialize+0x44>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d105      	bne.n	80056ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056a2:	4b08      	ldr	r3, [pc, #32]	@ (80056c4 <osKernelInitialize+0x44>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	607b      	str	r3, [r7, #4]
 80056ac:	e002      	b.n	80056b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80056ae:	f04f 33ff 	mov.w	r3, #4294967295
 80056b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056b4:	687b      	ldr	r3, [r7, #4]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	200004ec 	.word	0x200004ec

080056c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ce:	f3ef 8305 	mrs	r3, IPSR
 80056d2:	603b      	str	r3, [r7, #0]
  return(result);
 80056d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80056da:	f06f 0305 	mvn.w	r3, #5
 80056de:	607b      	str	r3, [r7, #4]
 80056e0:	e010      	b.n	8005704 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005710 <osKernelStart+0x48>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d109      	bne.n	80056fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056ea:	f7ff ffbf 	bl	800566c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056ee:	4b08      	ldr	r3, [pc, #32]	@ (8005710 <osKernelStart+0x48>)
 80056f0:	2202      	movs	r2, #2
 80056f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80056f4:	f001 f8c0 	bl	8006878 <vTaskStartScheduler>
      stat = osOK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	607b      	str	r3, [r7, #4]
 80056fc:	e002      	b.n	8005704 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005702:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005704:	687b      	ldr	r3, [r7, #4]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	200004ec 	.word	0x200004ec

08005714 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b08e      	sub	sp, #56	@ 0x38
 8005718:	af04      	add	r7, sp, #16
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005720:	2300      	movs	r3, #0
 8005722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005724:	f3ef 8305 	mrs	r3, IPSR
 8005728:	617b      	str	r3, [r7, #20]
  return(result);
 800572a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800572c:	2b00      	cmp	r3, #0
 800572e:	d17e      	bne.n	800582e <osThreadNew+0x11a>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d07b      	beq.n	800582e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005736:	2380      	movs	r3, #128	@ 0x80
 8005738:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800573a:	2318      	movs	r3, #24
 800573c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005742:	f04f 33ff 	mov.w	r3, #4294967295
 8005746:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d045      	beq.n	80057da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <osThreadNew+0x48>
        name = attr->name;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <osThreadNew+0x6e>
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	2b38      	cmp	r3, #56	@ 0x38
 8005774:	d805      	bhi.n	8005782 <osThreadNew+0x6e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <osThreadNew+0x72>
        return (NULL);
 8005782:	2300      	movs	r3, #0
 8005784:	e054      	b.n	8005830 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	089b      	lsrs	r3, r3, #2
 8005794:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00e      	beq.n	80057bc <osThreadNew+0xa8>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	2ba7      	cmp	r3, #167	@ 0xa7
 80057a4:	d90a      	bls.n	80057bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d006      	beq.n	80057bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <osThreadNew+0xa8>
        mem = 1;
 80057b6:	2301      	movs	r3, #1
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	e010      	b.n	80057de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10c      	bne.n	80057de <osThreadNew+0xca>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d108      	bne.n	80057de <osThreadNew+0xca>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <osThreadNew+0xca>
          mem = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	61bb      	str	r3, [r7, #24]
 80057d8:	e001      	b.n	80057de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d110      	bne.n	8005806 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057ec:	9202      	str	r2, [sp, #8]
 80057ee:	9301      	str	r3, [sp, #4]
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6a3a      	ldr	r2, [r7, #32]
 80057f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fdfe 	bl	80063fc <xTaskCreateStatic>
 8005800:	4603      	mov	r3, r0
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	e013      	b.n	800582e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d110      	bne.n	800582e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	b29a      	uxth	r2, r3
 8005810:	f107 0310 	add.w	r3, r7, #16
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fe4c 	bl	80064bc <xTaskCreate>
 8005824:	4603      	mov	r3, r0
 8005826:	2b01      	cmp	r3, #1
 8005828:	d001      	beq.n	800582e <osThreadNew+0x11a>
            hTask = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800582e:	693b      	ldr	r3, [r7, #16]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3728      	adds	r7, #40	@ 0x28
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4a07      	ldr	r2, [pc, #28]	@ (8005864 <vApplicationGetIdleTaskMemory+0x2c>)
 8005848:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4a06      	ldr	r2, [pc, #24]	@ (8005868 <vApplicationGetIdleTaskMemory+0x30>)
 800584e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2280      	movs	r2, #128	@ 0x80
 8005854:	601a      	str	r2, [r3, #0]
}
 8005856:	bf00      	nop
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	200004f0 	.word	0x200004f0
 8005868:	20000598 	.word	0x20000598

0800586c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4a07      	ldr	r2, [pc, #28]	@ (8005898 <vApplicationGetTimerTaskMemory+0x2c>)
 800587c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	4a06      	ldr	r2, [pc, #24]	@ (800589c <vApplicationGetTimerTaskMemory+0x30>)
 8005882:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800588a:	601a      	str	r2, [r3, #0]
}
 800588c:	bf00      	nop
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	20000798 	.word	0x20000798
 800589c:	20000840 	.word	0x20000840

080058a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f103 0208 	add.w	r2, r3, #8
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f04f 32ff 	mov.w	r2, #4294967295
 80058b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f103 0208 	add.w	r2, r3, #8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f103 0208 	add.w	r2, r3, #8
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	601a      	str	r2, [r3, #0]
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005942:	b480      	push	{r7}
 8005944:	b085      	sub	sp, #20
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005958:	d103      	bne.n	8005962 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	e00c      	b.n	800597c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3308      	adds	r3, #8
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	e002      	b.n	8005970 <vListInsert+0x2e>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	429a      	cmp	r2, r3
 800597a:	d2f6      	bcs.n	800596a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	601a      	str	r2, [r3, #0]
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6892      	ldr	r2, [r2, #8]
 80059ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6852      	ldr	r2, [r2, #4]
 80059d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d103      	bne.n	80059e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	1e5a      	subs	r2, r3, #1
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10b      	bne.n	8005a34 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a2e:	bf00      	nop
 8005a30:	bf00      	nop
 8005a32:	e7fd      	b.n	8005a30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a34:	f002 f8f0 	bl	8007c18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a40:	68f9      	ldr	r1, [r7, #12]
 8005a42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	441a      	add	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a64:	3b01      	subs	r3, #1
 8005a66:	68f9      	ldr	r1, [r7, #12]
 8005a68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005a6a:	fb01 f303 	mul.w	r3, r1, r3
 8005a6e:	441a      	add	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	22ff      	movs	r2, #255	@ 0xff
 8005a78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	22ff      	movs	r2, #255	@ 0xff
 8005a80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d114      	bne.n	8005ab4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d01a      	beq.n	8005ac8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3310      	adds	r3, #16
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f98c 	bl	8006db4 <xTaskRemoveFromEventList>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d012      	beq.n	8005ac8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad8 <xQueueGenericReset+0xd0>)
 8005aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	e009      	b.n	8005ac8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3310      	adds	r3, #16
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff fef1 	bl	80058a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3324      	adds	r3, #36	@ 0x24
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff feec 	bl	80058a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ac8:	f002 f8d8 	bl	8007c7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005acc:	2301      	movs	r3, #1
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08e      	sub	sp, #56	@ 0x38
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10b      	bne.n	8005b08 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10b      	bne.n	8005b26 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop
 8005b24:	e7fd      	b.n	8005b22 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <xQueueGenericCreateStatic+0x56>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <xQueueGenericCreateStatic+0x5a>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <xQueueGenericCreateStatic+0x5c>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10b      	bne.n	8005b54 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	623b      	str	r3, [r7, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	e7fd      	b.n	8005b50 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <xQueueGenericCreateStatic+0x84>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <xQueueGenericCreateStatic+0x88>
 8005b60:	2301      	movs	r3, #1
 8005b62:	e000      	b.n	8005b66 <xQueueGenericCreateStatic+0x8a>
 8005b64:	2300      	movs	r3, #0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10b      	bne.n	8005b82 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	61fb      	str	r3, [r7, #28]
}
 8005b7c:	bf00      	nop
 8005b7e:	bf00      	nop
 8005b80:	e7fd      	b.n	8005b7e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b82:	2350      	movs	r3, #80	@ 0x50
 8005b84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b50      	cmp	r3, #80	@ 0x50
 8005b8a:	d00b      	beq.n	8005ba4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	61bb      	str	r3, [r7, #24]
}
 8005b9e:	bf00      	nop
 8005ba0:	bf00      	nop
 8005ba2:	e7fd      	b.n	8005ba0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ba4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00d      	beq.n	8005bcc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f805 	bl	8005bd6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3730      	adds	r7, #48	@ 0x30
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	607a      	str	r2, [r7, #4]
 8005be2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d103      	bne.n	8005bf2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	e002      	b.n	8005bf8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c04:	2101      	movs	r1, #1
 8005c06:	69b8      	ldr	r0, [r7, #24]
 8005c08:	f7ff fefe 	bl	8005a08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	78fa      	ldrb	r2, [r7, #3]
 8005c10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c14:	bf00      	nop
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08e      	sub	sp, #56	@ 0x38
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10b      	bne.n	8005c50 <xQueueGenericSend+0x34>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	e7fd      	b.n	8005c4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d103      	bne.n	8005c5e <xQueueGenericSend+0x42>
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <xQueueGenericSend+0x46>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <xQueueGenericSend+0x48>
 8005c62:	2300      	movs	r3, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10b      	bne.n	8005c80 <xQueueGenericSend+0x64>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c7a:	bf00      	nop
 8005c7c:	bf00      	nop
 8005c7e:	e7fd      	b.n	8005c7c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d103      	bne.n	8005c8e <xQueueGenericSend+0x72>
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <xQueueGenericSend+0x76>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <xQueueGenericSend+0x78>
 8005c92:	2300      	movs	r3, #0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10b      	bne.n	8005cb0 <xQueueGenericSend+0x94>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	623b      	str	r3, [r7, #32]
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	e7fd      	b.n	8005cac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cb0:	f001 fa46 	bl	8007140 <xTaskGetSchedulerState>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d102      	bne.n	8005cc0 <xQueueGenericSend+0xa4>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <xQueueGenericSend+0xa8>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <xQueueGenericSend+0xaa>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10b      	bne.n	8005ce2 <xQueueGenericSend+0xc6>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	61fb      	str	r3, [r7, #28]
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	e7fd      	b.n	8005cde <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ce2:	f001 ff99 	bl	8007c18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d302      	bcc.n	8005cf8 <xQueueGenericSend+0xdc>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d129      	bne.n	8005d4c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cfe:	f000 fa0f 	bl	8006120 <prvCopyDataToQueue>
 8005d02:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d010      	beq.n	8005d2e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0e:	3324      	adds	r3, #36	@ 0x24
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 f84f 	bl	8006db4 <xTaskRemoveFromEventList>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d013      	beq.n	8005d44 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e1c <xQueueGenericSend+0x200>)
 8005d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	e00a      	b.n	8005d44 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d34:	4b39      	ldr	r3, [pc, #228]	@ (8005e1c <xQueueGenericSend+0x200>)
 8005d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d44:	f001 ff9a 	bl	8007c7c <vPortExitCritical>
				return pdPASS;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e063      	b.n	8005e14 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d103      	bne.n	8005d5a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d52:	f001 ff93 	bl	8007c7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	e05c      	b.n	8005e14 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d106      	bne.n	8005d6e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d60:	f107 0314 	add.w	r3, r7, #20
 8005d64:	4618      	mov	r0, r3
 8005d66:	f001 f889 	bl	8006e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d6e:	f001 ff85 	bl	8007c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d72:	f000 fdf1 	bl	8006958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d76:	f001 ff4f 	bl	8007c18 <vPortEnterCritical>
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d80:	b25b      	sxtb	r3, r3
 8005d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d86:	d103      	bne.n	8005d90 <xQueueGenericSend+0x174>
 8005d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d96:	b25b      	sxtb	r3, r3
 8005d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9c:	d103      	bne.n	8005da6 <xQueueGenericSend+0x18a>
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005da6:	f001 ff69 	bl	8007c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005daa:	1d3a      	adds	r2, r7, #4
 8005dac:	f107 0314 	add.w	r3, r7, #20
 8005db0:	4611      	mov	r1, r2
 8005db2:	4618      	mov	r0, r3
 8005db4:	f001 f878 	bl	8006ea8 <xTaskCheckForTimeOut>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d124      	bne.n	8005e08 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dc0:	f000 faa6 	bl	8006310 <prvIsQueueFull>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d018      	beq.n	8005dfc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dcc:	3310      	adds	r3, #16
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 ff9c 	bl	8006d10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005dd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dda:	f000 fa31 	bl	8006240 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dde:	f000 fdc9 	bl	8006974 <xTaskResumeAll>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f47f af7c 	bne.w	8005ce2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005dea:	4b0c      	ldr	r3, [pc, #48]	@ (8005e1c <xQueueGenericSend+0x200>)
 8005dec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	e772      	b.n	8005ce2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dfe:	f000 fa1f 	bl	8006240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e02:	f000 fdb7 	bl	8006974 <xTaskResumeAll>
 8005e06:	e76c      	b.n	8005ce2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e0a:	f000 fa19 	bl	8006240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e0e:	f000 fdb1 	bl	8006974 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3738      	adds	r7, #56	@ 0x38
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	e000ed04 	.word	0xe000ed04

08005e20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b090      	sub	sp, #64	@ 0x40
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10b      	bne.n	8005e50 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e4a:	bf00      	nop
 8005e4c:	bf00      	nop
 8005e4e:	e7fd      	b.n	8005e4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d103      	bne.n	8005e5e <xQueueGenericSendFromISR+0x3e>
 8005e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <xQueueGenericSendFromISR+0x42>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <xQueueGenericSendFromISR+0x44>
 8005e62:	2300      	movs	r3, #0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10b      	bne.n	8005e80 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e7a:	bf00      	nop
 8005e7c:	bf00      	nop
 8005e7e:	e7fd      	b.n	8005e7c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d103      	bne.n	8005e8e <xQueueGenericSendFromISR+0x6e>
 8005e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <xQueueGenericSendFromISR+0x72>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e000      	b.n	8005e94 <xQueueGenericSendFromISR+0x74>
 8005e92:	2300      	movs	r3, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10b      	bne.n	8005eb0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	623b      	str	r3, [r7, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	bf00      	nop
 8005eae:	e7fd      	b.n	8005eac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eb0:	f001 ff92 	bl	8007dd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005eb4:	f3ef 8211 	mrs	r2, BASEPRI
 8005eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	61fa      	str	r2, [r7, #28]
 8005eca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ece:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d302      	bcc.n	8005ee2 <xQueueGenericSendFromISR+0xc2>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d12f      	bne.n	8005f42 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ee8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005ef8:	f000 f912 	bl	8006120 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005efc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f04:	d112      	bne.n	8005f2c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d016      	beq.n	8005f3c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f10:	3324      	adds	r3, #36	@ 0x24
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 ff4e 	bl	8006db4 <xTaskRemoveFromEventList>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00e      	beq.n	8005f3c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00b      	beq.n	8005f3c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	e007      	b.n	8005f3c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f30:	3301      	adds	r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	b25a      	sxtb	r2, r3
 8005f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005f40:	e001      	b.n	8005f46 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f48:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3740      	adds	r7, #64	@ 0x40
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08c      	sub	sp, #48	@ 0x30
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10b      	bne.n	8005f8e <xQueueReceive+0x32>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	623b      	str	r3, [r7, #32]
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	e7fd      	b.n	8005f8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d103      	bne.n	8005f9c <xQueueReceive+0x40>
 8005f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <xQueueReceive+0x44>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e000      	b.n	8005fa2 <xQueueReceive+0x46>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10b      	bne.n	8005fbe <xQueueReceive+0x62>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	61fb      	str	r3, [r7, #28]
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	e7fd      	b.n	8005fba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fbe:	f001 f8bf 	bl	8007140 <xTaskGetSchedulerState>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d102      	bne.n	8005fce <xQueueReceive+0x72>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <xQueueReceive+0x76>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e000      	b.n	8005fd4 <xQueueReceive+0x78>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10b      	bne.n	8005ff0 <xQueueReceive+0x94>
	__asm volatile
 8005fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fdc:	f383 8811 	msr	BASEPRI, r3
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	61bb      	str	r3, [r7, #24]
}
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
 8005fee:	e7fd      	b.n	8005fec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ff0:	f001 fe12 	bl	8007c18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01f      	beq.n	8006040 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006004:	f000 f8f6 	bl	80061f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	1e5a      	subs	r2, r3, #1
 800600c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800600e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d00f      	beq.n	8006038 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601a:	3310      	adds	r3, #16
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fec9 	bl	8006db4 <xTaskRemoveFromEventList>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006028:	4b3c      	ldr	r3, [pc, #240]	@ (800611c <xQueueReceive+0x1c0>)
 800602a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006038:	f001 fe20 	bl	8007c7c <vPortExitCritical>
				return pdPASS;
 800603c:	2301      	movs	r3, #1
 800603e:	e069      	b.n	8006114 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006046:	f001 fe19 	bl	8007c7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800604a:	2300      	movs	r3, #0
 800604c:	e062      	b.n	8006114 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006054:	f107 0310 	add.w	r3, r7, #16
 8006058:	4618      	mov	r0, r3
 800605a:	f000 ff0f 	bl	8006e7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800605e:	2301      	movs	r3, #1
 8006060:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006062:	f001 fe0b 	bl	8007c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006066:	f000 fc77 	bl	8006958 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800606a:	f001 fdd5 	bl	8007c18 <vPortEnterCritical>
 800606e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006070:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006074:	b25b      	sxtb	r3, r3
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d103      	bne.n	8006084 <xQueueReceive+0x128>
 800607c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006086:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800608a:	b25b      	sxtb	r3, r3
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d103      	bne.n	800609a <xQueueReceive+0x13e>
 8006092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800609a:	f001 fdef 	bl	8007c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800609e:	1d3a      	adds	r2, r7, #4
 80060a0:	f107 0310 	add.w	r3, r7, #16
 80060a4:	4611      	mov	r1, r2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 fefe 	bl	8006ea8 <xTaskCheckForTimeOut>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d123      	bne.n	80060fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060b4:	f000 f916 	bl	80062e4 <prvIsQueueEmpty>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d017      	beq.n	80060ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c0:	3324      	adds	r3, #36	@ 0x24
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fe22 	bl	8006d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060ce:	f000 f8b7 	bl	8006240 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060d2:	f000 fc4f 	bl	8006974 <xTaskResumeAll>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d189      	bne.n	8005ff0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80060dc:	4b0f      	ldr	r3, [pc, #60]	@ (800611c <xQueueReceive+0x1c0>)
 80060de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	e780      	b.n	8005ff0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f0:	f000 f8a6 	bl	8006240 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060f4:	f000 fc3e 	bl	8006974 <xTaskResumeAll>
 80060f8:	e77a      	b.n	8005ff0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060fc:	f000 f8a0 	bl	8006240 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006100:	f000 fc38 	bl	8006974 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006104:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006106:	f000 f8ed 	bl	80062e4 <prvIsQueueEmpty>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	f43f af6f 	beq.w	8005ff0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006112:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006114:	4618      	mov	r0, r3
 8006116:	3730      	adds	r7, #48	@ 0x30
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	e000ed04 	.word	0xe000ed04

08006120 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006134:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10d      	bne.n	800615a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d14d      	bne.n	80061e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	4618      	mov	r0, r3
 800614c:	f001 f816 	bl	800717c <xTaskPriorityDisinherit>
 8006150:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	609a      	str	r2, [r3, #8]
 8006158:	e043      	b.n	80061e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d119      	bne.n	8006194 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6858      	ldr	r0, [r3, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006168:	461a      	mov	r2, r3
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	f002 fa6d 	bl	800864a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006178:	441a      	add	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	429a      	cmp	r2, r3
 8006188:	d32b      	bcc.n	80061e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	605a      	str	r2, [r3, #4]
 8006192:	e026      	b.n	80061e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	68d8      	ldr	r0, [r3, #12]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619c:	461a      	mov	r2, r3
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	f002 fa53 	bl	800864a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ac:	425b      	negs	r3, r3
 80061ae:	441a      	add	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d207      	bcs.n	80061d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c8:	425b      	negs	r3, r3
 80061ca:	441a      	add	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d105      	bne.n	80061e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d002      	beq.n	80061e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	3b01      	subs	r3, #1
 80061e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80061ea:	697b      	ldr	r3, [r7, #20]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d018      	beq.n	8006238 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620e:	441a      	add	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	429a      	cmp	r2, r3
 800621e:	d303      	bcc.n	8006228 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68d9      	ldr	r1, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006230:	461a      	mov	r2, r3
 8006232:	6838      	ldr	r0, [r7, #0]
 8006234:	f002 fa09 	bl	800864a <memcpy>
	}
}
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006248:	f001 fce6 	bl	8007c18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006252:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006254:	e011      	b.n	800627a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d012      	beq.n	8006284 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	3324      	adds	r3, #36	@ 0x24
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fda6 	bl	8006db4 <xTaskRemoveFromEventList>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800626e:	f000 fe7f 	bl	8006f70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006272:	7bfb      	ldrb	r3, [r7, #15]
 8006274:	3b01      	subs	r3, #1
 8006276:	b2db      	uxtb	r3, r3
 8006278:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800627a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800627e:	2b00      	cmp	r3, #0
 8006280:	dce9      	bgt.n	8006256 <prvUnlockQueue+0x16>
 8006282:	e000      	b.n	8006286 <prvUnlockQueue+0x46>
					break;
 8006284:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	22ff      	movs	r2, #255	@ 0xff
 800628a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800628e:	f001 fcf5 	bl	8007c7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006292:	f001 fcc1 	bl	8007c18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800629c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800629e:	e011      	b.n	80062c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d012      	beq.n	80062ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	3310      	adds	r3, #16
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fd81 	bl	8006db4 <xTaskRemoveFromEventList>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062b8:	f000 fe5a 	bl	8006f70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	3b01      	subs	r3, #1
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	dce9      	bgt.n	80062a0 <prvUnlockQueue+0x60>
 80062cc:	e000      	b.n	80062d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	22ff      	movs	r2, #255	@ 0xff
 80062d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80062d8:	f001 fcd0 	bl	8007c7c <vPortExitCritical>
}
 80062dc:	bf00      	nop
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062ec:	f001 fc94 	bl	8007c18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062f8:	2301      	movs	r3, #1
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	e001      	b.n	8006302 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006302:	f001 fcbb 	bl	8007c7c <vPortExitCritical>

	return xReturn;
 8006306:	68fb      	ldr	r3, [r7, #12]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006318:	f001 fc7e 	bl	8007c18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006324:	429a      	cmp	r2, r3
 8006326:	d102      	bne.n	800632e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006328:	2301      	movs	r3, #1
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	e001      	b.n	8006332 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006332:	f001 fca3 	bl	8007c7c <vPortExitCritical>

	return xReturn;
 8006336:	68fb      	ldr	r3, [r7, #12]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	e014      	b.n	800637a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006350:	4a0f      	ldr	r2, [pc, #60]	@ (8006390 <vQueueAddToRegistry+0x50>)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10b      	bne.n	8006374 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800635c:	490c      	ldr	r1, [pc, #48]	@ (8006390 <vQueueAddToRegistry+0x50>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006366:	4a0a      	ldr	r2, [pc, #40]	@ (8006390 <vQueueAddToRegistry+0x50>)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	00db      	lsls	r3, r3, #3
 800636c:	4413      	add	r3, r2
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006372:	e006      	b.n	8006382 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b07      	cmp	r3, #7
 800637e:	d9e7      	bls.n	8006350 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	20000c40 	.word	0x20000c40

08006394 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063a4:	f001 fc38 	bl	8007c18 <vPortEnterCritical>
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063ae:	b25b      	sxtb	r3, r3
 80063b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b4:	d103      	bne.n	80063be <vQueueWaitForMessageRestricted+0x2a>
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063c4:	b25b      	sxtb	r3, r3
 80063c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ca:	d103      	bne.n	80063d4 <vQueueWaitForMessageRestricted+0x40>
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063d4:	f001 fc52 	bl	8007c7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d106      	bne.n	80063ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	3324      	adds	r3, #36	@ 0x24
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	68b9      	ldr	r1, [r7, #8]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f000 fcb7 	bl	8006d5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80063ee:	6978      	ldr	r0, [r7, #20]
 80063f0:	f7ff ff26 	bl	8006240 <prvUnlockQueue>
	}
 80063f4:	bf00      	nop
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08e      	sub	sp, #56	@ 0x38
 8006400:	af04      	add	r7, sp, #16
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800640a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10b      	bne.n	8006428 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	623b      	str	r3, [r7, #32]
}
 8006422:	bf00      	nop
 8006424:	bf00      	nop
 8006426:	e7fd      	b.n	8006424 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10b      	bne.n	8006446 <xTaskCreateStatic+0x4a>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	61fb      	str	r3, [r7, #28]
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	e7fd      	b.n	8006442 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006446:	23a8      	movs	r3, #168	@ 0xa8
 8006448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2ba8      	cmp	r3, #168	@ 0xa8
 800644e:	d00b      	beq.n	8006468 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	61bb      	str	r3, [r7, #24]
}
 8006462:	bf00      	nop
 8006464:	bf00      	nop
 8006466:	e7fd      	b.n	8006464 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006468:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01e      	beq.n	80064ae <xTaskCreateStatic+0xb2>
 8006470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01b      	beq.n	80064ae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006478:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800647e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006482:	2202      	movs	r2, #2
 8006484:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006488:	2300      	movs	r3, #0
 800648a:	9303      	str	r3, [sp, #12]
 800648c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648e:	9302      	str	r3, [sp, #8]
 8006490:	f107 0314 	add.w	r3, r7, #20
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f851 	bl	8006548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064a8:	f000 f8f6 	bl	8006698 <prvAddNewTaskToReadyList>
 80064ac:	e001      	b.n	80064b2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064b2:	697b      	ldr	r3, [r7, #20]
	}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3728      	adds	r7, #40	@ 0x28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08c      	sub	sp, #48	@ 0x30
 80064c0:	af04      	add	r7, sp, #16
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	4613      	mov	r3, r2
 80064ca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4618      	mov	r0, r3
 80064d2:	f001 fcc3 	bl	8007e5c <pvPortMalloc>
 80064d6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00e      	beq.n	80064fc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064de:	20a8      	movs	r0, #168	@ 0xa8
 80064e0:	f001 fcbc 	bl	8007e5c <pvPortMalloc>
 80064e4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80064f2:	e005      	b.n	8006500 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064f4:	6978      	ldr	r0, [r7, #20]
 80064f6:	f001 fd7f 	bl	8007ff8 <vPortFree>
 80064fa:	e001      	b.n	8006500 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d017      	beq.n	8006536 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800650e:	88fa      	ldrh	r2, [r7, #6]
 8006510:	2300      	movs	r3, #0
 8006512:	9303      	str	r3, [sp, #12]
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	9302      	str	r3, [sp, #8]
 8006518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651a:	9301      	str	r3, [sp, #4]
 800651c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 f80f 	bl	8006548 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800652a:	69f8      	ldr	r0, [r7, #28]
 800652c:	f000 f8b4 	bl	8006698 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006530:	2301      	movs	r3, #1
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e002      	b.n	800653c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006536:	f04f 33ff 	mov.w	r3, #4294967295
 800653a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800653c:	69bb      	ldr	r3, [r7, #24]
	}
 800653e:	4618      	mov	r0, r3
 8006540:	3720      	adds	r7, #32
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006558:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	461a      	mov	r2, r3
 8006560:	21a5      	movs	r1, #165	@ 0xa5
 8006562:	f001 ffa0 	bl	80084a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006570:	3b01      	subs	r3, #1
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	f023 0307 	bic.w	r3, r3, #7
 800657e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	617b      	str	r3, [r7, #20]
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	e7fd      	b.n	800659e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d01f      	beq.n	80065e8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065a8:	2300      	movs	r3, #0
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	e012      	b.n	80065d4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	7819      	ldrb	r1, [r3, #0]
 80065b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	3334      	adds	r3, #52	@ 0x34
 80065be:	460a      	mov	r2, r1
 80065c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d006      	beq.n	80065dc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	3301      	adds	r3, #1
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d9e9      	bls.n	80065ae <prvInitialiseNewTask+0x66>
 80065da:	e000      	b.n	80065de <prvInitialiseNewTask+0x96>
			{
				break;
 80065dc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065e6:	e003      	b.n	80065f0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f2:	2b37      	cmp	r3, #55	@ 0x37
 80065f4:	d901      	bls.n	80065fa <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065f6:	2337      	movs	r3, #55	@ 0x37
 80065f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006604:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006608:	2200      	movs	r2, #0
 800660a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800660c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660e:	3304      	adds	r3, #4
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff f965 	bl	80058e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	3318      	adds	r3, #24
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff f960 	bl	80058e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006624:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006628:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006634:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006638:	2200      	movs	r2, #0
 800663a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800663e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006640:	2200      	movs	r2, #0
 8006642:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006648:	3354      	adds	r3, #84	@ 0x54
 800664a:	224c      	movs	r2, #76	@ 0x4c
 800664c:	2100      	movs	r1, #0
 800664e:	4618      	mov	r0, r3
 8006650:	f001 ff29 	bl	80084a6 <memset>
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	4a0d      	ldr	r2, [pc, #52]	@ (800668c <prvInitialiseNewTask+0x144>)
 8006658:	659a      	str	r2, [r3, #88]	@ 0x58
 800665a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665c:	4a0c      	ldr	r2, [pc, #48]	@ (8006690 <prvInitialiseNewTask+0x148>)
 800665e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006662:	4a0c      	ldr	r2, [pc, #48]	@ (8006694 <prvInitialiseNewTask+0x14c>)
 8006664:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006666:	683a      	ldr	r2, [r7, #0]
 8006668:	68f9      	ldr	r1, [r7, #12]
 800666a:	69b8      	ldr	r0, [r7, #24]
 800666c:	f001 f9a4 	bl	80079b8 <pxPortInitialiseStack>
 8006670:	4602      	mov	r2, r0
 8006672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006674:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d002      	beq.n	8006682 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800667c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006680:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006682:	bf00      	nop
 8006684:	3720      	adds	r7, #32
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20004ed4 	.word	0x20004ed4
 8006690:	20004f3c 	.word	0x20004f3c
 8006694:	20004fa4 	.word	0x20004fa4

08006698 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066a0:	f001 faba 	bl	8007c18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066a4:	4b2d      	ldr	r3, [pc, #180]	@ (800675c <prvAddNewTaskToReadyList+0xc4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	4a2c      	ldr	r2, [pc, #176]	@ (800675c <prvAddNewTaskToReadyList+0xc4>)
 80066ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d109      	bne.n	80066ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066bc:	4b27      	ldr	r3, [pc, #156]	@ (800675c <prvAddNewTaskToReadyList+0xc4>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d110      	bne.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066c4:	f000 fc78 	bl	8006fb8 <prvInitialiseTaskLists>
 80066c8:	e00d      	b.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066ca:	4b26      	ldr	r3, [pc, #152]	@ (8006764 <prvAddNewTaskToReadyList+0xcc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d109      	bne.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066d2:	4b23      	ldr	r3, [pc, #140]	@ (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066dc:	429a      	cmp	r2, r3
 80066de:	d802      	bhi.n	80066e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006760 <prvAddNewTaskToReadyList+0xc8>)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066e6:	4b20      	ldr	r3, [pc, #128]	@ (8006768 <prvAddNewTaskToReadyList+0xd0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3301      	adds	r3, #1
 80066ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006768 <prvAddNewTaskToReadyList+0xd0>)
 80066ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006768 <prvAddNewTaskToReadyList+0xd0>)
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fc:	4b1b      	ldr	r3, [pc, #108]	@ (800676c <prvAddNewTaskToReadyList+0xd4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d903      	bls.n	800670c <prvAddNewTaskToReadyList+0x74>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006708:	4a18      	ldr	r2, [pc, #96]	@ (800676c <prvAddNewTaskToReadyList+0xd4>)
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4a15      	ldr	r2, [pc, #84]	@ (8006770 <prvAddNewTaskToReadyList+0xd8>)
 800671a:	441a      	add	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7ff f8e9 	bl	80058fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006728:	f001 faa8 	bl	8007c7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800672c:	4b0d      	ldr	r3, [pc, #52]	@ (8006764 <prvAddNewTaskToReadyList+0xcc>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00e      	beq.n	8006752 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006734:	4b0a      	ldr	r3, [pc, #40]	@ (8006760 <prvAddNewTaskToReadyList+0xc8>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673e:	429a      	cmp	r2, r3
 8006740:	d207      	bcs.n	8006752 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006742:	4b0c      	ldr	r3, [pc, #48]	@ (8006774 <prvAddNewTaskToReadyList+0xdc>)
 8006744:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	f3bf 8f4f 	dsb	sy
 800674e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20001154 	.word	0x20001154
 8006760:	20000c80 	.word	0x20000c80
 8006764:	20001160 	.word	0x20001160
 8006768:	20001170 	.word	0x20001170
 800676c:	2000115c 	.word	0x2000115c
 8006770:	20000c84 	.word	0x20000c84
 8006774:	e000ed04 	.word	0xe000ed04

08006778 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006778:	b580      	push	{r7, lr}
 800677a:	b08a      	sub	sp, #40	@ 0x28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006782:	2300      	movs	r3, #0
 8006784:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10b      	bne.n	80067a4 <vTaskDelayUntil+0x2c>
	__asm volatile
 800678c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006790:	f383 8811 	msr	BASEPRI, r3
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	f3bf 8f4f 	dsb	sy
 800679c:	617b      	str	r3, [r7, #20]
}
 800679e:	bf00      	nop
 80067a0:	bf00      	nop
 80067a2:	e7fd      	b.n	80067a0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10b      	bne.n	80067c2 <vTaskDelayUntil+0x4a>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	613b      	str	r3, [r7, #16]
}
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	e7fd      	b.n	80067be <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80067c2:	4b2a      	ldr	r3, [pc, #168]	@ (800686c <vTaskDelayUntil+0xf4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00b      	beq.n	80067e2 <vTaskDelayUntil+0x6a>
	__asm volatile
 80067ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ce:	f383 8811 	msr	BASEPRI, r3
 80067d2:	f3bf 8f6f 	isb	sy
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	60fb      	str	r3, [r7, #12]
}
 80067dc:	bf00      	nop
 80067de:	bf00      	nop
 80067e0:	e7fd      	b.n	80067de <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80067e2:	f000 f8b9 	bl	8006958 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80067e6:	4b22      	ldr	r3, [pc, #136]	@ (8006870 <vTaskDelayUntil+0xf8>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	4413      	add	r3, r2
 80067f4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6a3a      	ldr	r2, [r7, #32]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d20b      	bcs.n	8006818 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	429a      	cmp	r2, r3
 8006808:	d211      	bcs.n	800682e <vTaskDelayUntil+0xb6>
 800680a:	69fa      	ldr	r2, [r7, #28]
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	429a      	cmp	r2, r3
 8006810:	d90d      	bls.n	800682e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006812:	2301      	movs	r3, #1
 8006814:	627b      	str	r3, [r7, #36]	@ 0x24
 8006816:	e00a      	b.n	800682e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	429a      	cmp	r2, r3
 8006820:	d303      	bcc.n	800682a <vTaskDelayUntil+0xb2>
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	429a      	cmp	r2, r3
 8006828:	d901      	bls.n	800682e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800682a:	2301      	movs	r3, #1
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	2b00      	cmp	r3, #0
 8006838:	d006      	beq.n	8006848 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800683a:	69fa      	ldr	r2, [r7, #28]
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	2100      	movs	r1, #0
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fd0a 	bl	800725c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006848:	f000 f894 	bl	8006974 <xTaskResumeAll>
 800684c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d107      	bne.n	8006864 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006854:	4b07      	ldr	r3, [pc, #28]	@ (8006874 <vTaskDelayUntil+0xfc>)
 8006856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006864:	bf00      	nop
 8006866:	3728      	adds	r7, #40	@ 0x28
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	2000117c 	.word	0x2000117c
 8006870:	20001158 	.word	0x20001158
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	@ 0x28
 800687c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800687e:	2300      	movs	r3, #0
 8006880:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006882:	2300      	movs	r3, #0
 8006884:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006886:	463a      	mov	r2, r7
 8006888:	1d39      	adds	r1, r7, #4
 800688a:	f107 0308 	add.w	r3, r7, #8
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe ffd2 	bl	8005838 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	9202      	str	r2, [sp, #8]
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	2300      	movs	r3, #0
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	2300      	movs	r3, #0
 80068a4:	460a      	mov	r2, r1
 80068a6:	4924      	ldr	r1, [pc, #144]	@ (8006938 <vTaskStartScheduler+0xc0>)
 80068a8:	4824      	ldr	r0, [pc, #144]	@ (800693c <vTaskStartScheduler+0xc4>)
 80068aa:	f7ff fda7 	bl	80063fc <xTaskCreateStatic>
 80068ae:	4603      	mov	r3, r0
 80068b0:	4a23      	ldr	r2, [pc, #140]	@ (8006940 <vTaskStartScheduler+0xc8>)
 80068b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068b4:	4b22      	ldr	r3, [pc, #136]	@ (8006940 <vTaskStartScheduler+0xc8>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068bc:	2301      	movs	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e001      	b.n	80068c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d102      	bne.n	80068d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80068cc:	f000 fd1a 	bl	8007304 <xTimerCreateTimerTask>
 80068d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d11b      	bne.n	8006910 <vTaskStartScheduler+0x98>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	613b      	str	r3, [r7, #16]
}
 80068ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068ec:	4b15      	ldr	r3, [pc, #84]	@ (8006944 <vTaskStartScheduler+0xcc>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3354      	adds	r3, #84	@ 0x54
 80068f2:	4a15      	ldr	r2, [pc, #84]	@ (8006948 <vTaskStartScheduler+0xd0>)
 80068f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068f6:	4b15      	ldr	r3, [pc, #84]	@ (800694c <vTaskStartScheduler+0xd4>)
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295
 80068fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068fe:	4b14      	ldr	r3, [pc, #80]	@ (8006950 <vTaskStartScheduler+0xd8>)
 8006900:	2201      	movs	r2, #1
 8006902:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006904:	4b13      	ldr	r3, [pc, #76]	@ (8006954 <vTaskStartScheduler+0xdc>)
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800690a:	f001 f8e1 	bl	8007ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800690e:	e00f      	b.n	8006930 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	d10b      	bne.n	8006930 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	60fb      	str	r3, [r7, #12]
}
 800692a:	bf00      	nop
 800692c:	bf00      	nop
 800692e:	e7fd      	b.n	800692c <vTaskStartScheduler+0xb4>
}
 8006930:	bf00      	nop
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	080096f8 	.word	0x080096f8
 800693c:	08006f89 	.word	0x08006f89
 8006940:	20001178 	.word	0x20001178
 8006944:	20000c80 	.word	0x20000c80
 8006948:	20000020 	.word	0x20000020
 800694c:	20001174 	.word	0x20001174
 8006950:	20001160 	.word	0x20001160
 8006954:	20001158 	.word	0x20001158

08006958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006958:	b480      	push	{r7}
 800695a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800695c:	4b04      	ldr	r3, [pc, #16]	@ (8006970 <vTaskSuspendAll+0x18>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	4a03      	ldr	r2, [pc, #12]	@ (8006970 <vTaskSuspendAll+0x18>)
 8006964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006966:	bf00      	nop
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	2000117c 	.word	0x2000117c

08006974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800697e:	2300      	movs	r3, #0
 8006980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006982:	4b42      	ldr	r3, [pc, #264]	@ (8006a8c <xTaskResumeAll+0x118>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10b      	bne.n	80069a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	603b      	str	r3, [r7, #0]
}
 800699c:	bf00      	nop
 800699e:	bf00      	nop
 80069a0:	e7fd      	b.n	800699e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069a2:	f001 f939 	bl	8007c18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069a6:	4b39      	ldr	r3, [pc, #228]	@ (8006a8c <xTaskResumeAll+0x118>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	4a37      	ldr	r2, [pc, #220]	@ (8006a8c <xTaskResumeAll+0x118>)
 80069ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069b0:	4b36      	ldr	r3, [pc, #216]	@ (8006a8c <xTaskResumeAll+0x118>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d162      	bne.n	8006a7e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069b8:	4b35      	ldr	r3, [pc, #212]	@ (8006a90 <xTaskResumeAll+0x11c>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d05e      	beq.n	8006a7e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069c0:	e02f      	b.n	8006a22 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c2:	4b34      	ldr	r3, [pc, #208]	@ (8006a94 <xTaskResumeAll+0x120>)
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3318      	adds	r3, #24
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fe fff0 	bl	80059b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3304      	adds	r3, #4
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe ffeb 	bl	80059b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006a98 <xTaskResumeAll+0x124>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d903      	bls.n	80069f2 <xTaskResumeAll+0x7e>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006a98 <xTaskResumeAll+0x124>)
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4a27      	ldr	r2, [pc, #156]	@ (8006a9c <xTaskResumeAll+0x128>)
 8006a00:	441a      	add	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3304      	adds	r3, #4
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f7fe ff76 	bl	80058fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a12:	4b23      	ldr	r3, [pc, #140]	@ (8006aa0 <xTaskResumeAll+0x12c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d302      	bcc.n	8006a22 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006a1c:	4b21      	ldr	r3, [pc, #132]	@ (8006aa4 <xTaskResumeAll+0x130>)
 8006a1e:	2201      	movs	r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a22:	4b1c      	ldr	r3, [pc, #112]	@ (8006a94 <xTaskResumeAll+0x120>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1cb      	bne.n	80069c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a30:	f000 fb66 	bl	8007100 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a34:	4b1c      	ldr	r3, [pc, #112]	@ (8006aa8 <xTaskResumeAll+0x134>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d010      	beq.n	8006a62 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a40:	f000 f846 	bl	8006ad0 <xTaskIncrementTick>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d002      	beq.n	8006a50 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006a4a:	4b16      	ldr	r3, [pc, #88]	@ (8006aa4 <xTaskResumeAll+0x130>)
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1f1      	bne.n	8006a40 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006a5c:	4b12      	ldr	r3, [pc, #72]	@ (8006aa8 <xTaskResumeAll+0x134>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a62:	4b10      	ldr	r3, [pc, #64]	@ (8006aa4 <xTaskResumeAll+0x130>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d009      	beq.n	8006a7e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006aac <xTaskResumeAll+0x138>)
 8006a70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a7e:	f001 f8fd 	bl	8007c7c <vPortExitCritical>

	return xAlreadyYielded;
 8006a82:	68bb      	ldr	r3, [r7, #8]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	2000117c 	.word	0x2000117c
 8006a90:	20001154 	.word	0x20001154
 8006a94:	20001114 	.word	0x20001114
 8006a98:	2000115c 	.word	0x2000115c
 8006a9c:	20000c84 	.word	0x20000c84
 8006aa0:	20000c80 	.word	0x20000c80
 8006aa4:	20001168 	.word	0x20001168
 8006aa8:	20001164 	.word	0x20001164
 8006aac:	e000ed04 	.word	0xe000ed04

08006ab0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006ab6:	4b05      	ldr	r3, [pc, #20]	@ (8006acc <xTaskGetTickCount+0x1c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006abc:	687b      	ldr	r3, [r7, #4]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20001158 	.word	0x20001158

08006ad0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ada:	4b4f      	ldr	r3, [pc, #316]	@ (8006c18 <xTaskIncrementTick+0x148>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 8090 	bne.w	8006c04 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ae4:	4b4d      	ldr	r3, [pc, #308]	@ (8006c1c <xTaskIncrementTick+0x14c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006aec:	4a4b      	ldr	r2, [pc, #300]	@ (8006c1c <xTaskIncrementTick+0x14c>)
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d121      	bne.n	8006b3c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006af8:	4b49      	ldr	r3, [pc, #292]	@ (8006c20 <xTaskIncrementTick+0x150>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00b      	beq.n	8006b1a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	603b      	str	r3, [r7, #0]
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	e7fd      	b.n	8006b16 <xTaskIncrementTick+0x46>
 8006b1a:	4b41      	ldr	r3, [pc, #260]	@ (8006c20 <xTaskIncrementTick+0x150>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	4b40      	ldr	r3, [pc, #256]	@ (8006c24 <xTaskIncrementTick+0x154>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a3e      	ldr	r2, [pc, #248]	@ (8006c20 <xTaskIncrementTick+0x150>)
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	4a3e      	ldr	r2, [pc, #248]	@ (8006c24 <xTaskIncrementTick+0x154>)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c28 <xTaskIncrementTick+0x158>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3301      	adds	r3, #1
 8006b34:	4a3c      	ldr	r2, [pc, #240]	@ (8006c28 <xTaskIncrementTick+0x158>)
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	f000 fae2 	bl	8007100 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8006c2c <xTaskIncrementTick+0x15c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d349      	bcc.n	8006bda <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b46:	4b36      	ldr	r3, [pc, #216]	@ (8006c20 <xTaskIncrementTick+0x150>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d104      	bne.n	8006b5a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b50:	4b36      	ldr	r3, [pc, #216]	@ (8006c2c <xTaskIncrementTick+0x15c>)
 8006b52:	f04f 32ff 	mov.w	r2, #4294967295
 8006b56:	601a      	str	r2, [r3, #0]
					break;
 8006b58:	e03f      	b.n	8006bda <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b5a:	4b31      	ldr	r3, [pc, #196]	@ (8006c20 <xTaskIncrementTick+0x150>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d203      	bcs.n	8006b7a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b72:	4a2e      	ldr	r2, [pc, #184]	@ (8006c2c <xTaskIncrementTick+0x15c>)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b78:	e02f      	b.n	8006bda <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe ff18 	bl	80059b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d004      	beq.n	8006b96 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	3318      	adds	r3, #24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe ff0f 	bl	80059b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b9a:	4b25      	ldr	r3, [pc, #148]	@ (8006c30 <xTaskIncrementTick+0x160>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d903      	bls.n	8006baa <xTaskIncrementTick+0xda>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba6:	4a22      	ldr	r2, [pc, #136]	@ (8006c30 <xTaskIncrementTick+0x160>)
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bae:	4613      	mov	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8006c34 <xTaskIncrementTick+0x164>)
 8006bb8:	441a      	add	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f7fe fe9a 	bl	80058fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bca:	4b1b      	ldr	r3, [pc, #108]	@ (8006c38 <xTaskIncrementTick+0x168>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d3b8      	bcc.n	8006b46 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bd8:	e7b5      	b.n	8006b46 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bda:	4b17      	ldr	r3, [pc, #92]	@ (8006c38 <xTaskIncrementTick+0x168>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be0:	4914      	ldr	r1, [pc, #80]	@ (8006c34 <xTaskIncrementTick+0x164>)
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	440b      	add	r3, r1
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d901      	bls.n	8006bf6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006bf6:	4b11      	ldr	r3, [pc, #68]	@ (8006c3c <xTaskIncrementTick+0x16c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
 8006c02:	e004      	b.n	8006c0e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c04:	4b0e      	ldr	r3, [pc, #56]	@ (8006c40 <xTaskIncrementTick+0x170>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8006c40 <xTaskIncrementTick+0x170>)
 8006c0c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c0e:	697b      	ldr	r3, [r7, #20]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	2000117c 	.word	0x2000117c
 8006c1c:	20001158 	.word	0x20001158
 8006c20:	2000110c 	.word	0x2000110c
 8006c24:	20001110 	.word	0x20001110
 8006c28:	2000116c 	.word	0x2000116c
 8006c2c:	20001174 	.word	0x20001174
 8006c30:	2000115c 	.word	0x2000115c
 8006c34:	20000c84 	.word	0x20000c84
 8006c38:	20000c80 	.word	0x20000c80
 8006c3c:	20001168 	.word	0x20001168
 8006c40:	20001164 	.word	0x20001164

08006c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8006cf8 <vTaskSwitchContext+0xb4>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c52:	4b2a      	ldr	r3, [pc, #168]	@ (8006cfc <vTaskSwitchContext+0xb8>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c58:	e047      	b.n	8006cea <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006c5a:	4b28      	ldr	r3, [pc, #160]	@ (8006cfc <vTaskSwitchContext+0xb8>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c60:	4b27      	ldr	r3, [pc, #156]	@ (8006d00 <vTaskSwitchContext+0xbc>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	e011      	b.n	8006c8c <vTaskSwitchContext+0x48>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10b      	bne.n	8006c86 <vTaskSwitchContext+0x42>
	__asm volatile
 8006c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c72:	f383 8811 	msr	BASEPRI, r3
 8006c76:	f3bf 8f6f 	isb	sy
 8006c7a:	f3bf 8f4f 	dsb	sy
 8006c7e:	607b      	str	r3, [r7, #4]
}
 8006c80:	bf00      	nop
 8006c82:	bf00      	nop
 8006c84:	e7fd      	b.n	8006c82 <vTaskSwitchContext+0x3e>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	491d      	ldr	r1, [pc, #116]	@ (8006d04 <vTaskSwitchContext+0xc0>)
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	440b      	add	r3, r1
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0e3      	beq.n	8006c68 <vTaskSwitchContext+0x24>
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a16      	ldr	r2, [pc, #88]	@ (8006d04 <vTaskSwitchContext+0xc0>)
 8006cac:	4413      	add	r3, r2
 8006cae:	60bb      	str	r3, [r7, #8]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	605a      	str	r2, [r3, #4]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d104      	bne.n	8006cd0 <vTaskSwitchContext+0x8c>
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	605a      	str	r2, [r3, #4]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8006d08 <vTaskSwitchContext+0xc4>)
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	4a09      	ldr	r2, [pc, #36]	@ (8006d00 <vTaskSwitchContext+0xbc>)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ce0:	4b09      	ldr	r3, [pc, #36]	@ (8006d08 <vTaskSwitchContext+0xc4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3354      	adds	r3, #84	@ 0x54
 8006ce6:	4a09      	ldr	r2, [pc, #36]	@ (8006d0c <vTaskSwitchContext+0xc8>)
 8006ce8:	6013      	str	r3, [r2, #0]
}
 8006cea:	bf00      	nop
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	2000117c 	.word	0x2000117c
 8006cfc:	20001168 	.word	0x20001168
 8006d00:	2000115c 	.word	0x2000115c
 8006d04:	20000c84 	.word	0x20000c84
 8006d08:	20000c80 	.word	0x20000c80
 8006d0c:	20000020 	.word	0x20000020

08006d10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10b      	bne.n	8006d38 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	60fb      	str	r3, [r7, #12]
}
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	e7fd      	b.n	8006d34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d38:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <vTaskPlaceOnEventList+0x48>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3318      	adds	r3, #24
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7fe fdfe 	bl	8005942 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d46:	2101      	movs	r1, #1
 8006d48:	6838      	ldr	r0, [r7, #0]
 8006d4a:	f000 fa87 	bl	800725c <prvAddCurrentTaskToDelayedList>
}
 8006d4e:	bf00      	nop
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	20000c80 	.word	0x20000c80

08006d5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	617b      	str	r3, [r7, #20]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d86:	4b0a      	ldr	r3, [pc, #40]	@ (8006db0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	3318      	adds	r3, #24
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7fe fdb3 	bl	80058fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006da0:	6879      	ldr	r1, [r7, #4]
 8006da2:	68b8      	ldr	r0, [r7, #8]
 8006da4:	f000 fa5a 	bl	800725c <prvAddCurrentTaskToDelayedList>
	}
 8006da8:	bf00      	nop
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20000c80 	.word	0x20000c80

08006db4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	60fb      	str	r3, [r7, #12]
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	3318      	adds	r3, #24
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe fde4 	bl	80059b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dec:	4b1d      	ldr	r3, [pc, #116]	@ (8006e64 <xTaskRemoveFromEventList+0xb0>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d11d      	bne.n	8006e30 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fe fddb 	bl	80059b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e02:	4b19      	ldr	r3, [pc, #100]	@ (8006e68 <xTaskRemoveFromEventList+0xb4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d903      	bls.n	8006e12 <xTaskRemoveFromEventList+0x5e>
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	4a16      	ldr	r2, [pc, #88]	@ (8006e68 <xTaskRemoveFromEventList+0xb4>)
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e16:	4613      	mov	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4a13      	ldr	r2, [pc, #76]	@ (8006e6c <xTaskRemoveFromEventList+0xb8>)
 8006e20:	441a      	add	r2, r3
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	3304      	adds	r3, #4
 8006e26:	4619      	mov	r1, r3
 8006e28:	4610      	mov	r0, r2
 8006e2a:	f7fe fd66 	bl	80058fa <vListInsertEnd>
 8006e2e:	e005      	b.n	8006e3c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	3318      	adds	r3, #24
 8006e34:	4619      	mov	r1, r3
 8006e36:	480e      	ldr	r0, [pc, #56]	@ (8006e70 <xTaskRemoveFromEventList+0xbc>)
 8006e38:	f7fe fd5f 	bl	80058fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e40:	4b0c      	ldr	r3, [pc, #48]	@ (8006e74 <xTaskRemoveFromEventList+0xc0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d905      	bls.n	8006e56 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e78 <xTaskRemoveFromEventList+0xc4>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	e001      	b.n	8006e5a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e5a:	697b      	ldr	r3, [r7, #20]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	2000117c 	.word	0x2000117c
 8006e68:	2000115c 	.word	0x2000115c
 8006e6c:	20000c84 	.word	0x20000c84
 8006e70:	20001114 	.word	0x20001114
 8006e74:	20000c80 	.word	0x20000c80
 8006e78:	20001168 	.word	0x20001168

08006e7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e84:	4b06      	ldr	r3, [pc, #24]	@ (8006ea0 <vTaskInternalSetTimeOutState+0x24>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ea4 <vTaskInternalSetTimeOutState+0x28>)
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	605a      	str	r2, [r3, #4]
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	2000116c 	.word	0x2000116c
 8006ea4:	20001158 	.word	0x20001158

08006ea8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10b      	bne.n	8006ed0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	613b      	str	r3, [r7, #16]
}
 8006eca:	bf00      	nop
 8006ecc:	bf00      	nop
 8006ece:	e7fd      	b.n	8006ecc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10b      	bne.n	8006eee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	60fb      	str	r3, [r7, #12]
}
 8006ee8:	bf00      	nop
 8006eea:	bf00      	nop
 8006eec:	e7fd      	b.n	8006eea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006eee:	f000 fe93 	bl	8007c18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f68 <xTaskCheckForTimeOut+0xc0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0a:	d102      	bne.n	8006f12 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61fb      	str	r3, [r7, #28]
 8006f10:	e023      	b.n	8006f5a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4b15      	ldr	r3, [pc, #84]	@ (8006f6c <xTaskCheckForTimeOut+0xc4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d007      	beq.n	8006f2e <xTaskCheckForTimeOut+0x86>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d302      	bcc.n	8006f2e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	61fb      	str	r3, [r7, #28]
 8006f2c:	e015      	b.n	8006f5a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d20b      	bcs.n	8006f50 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	1ad2      	subs	r2, r2, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f7ff ff99 	bl	8006e7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61fb      	str	r3, [r7, #28]
 8006f4e:	e004      	b.n	8006f5a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f56:	2301      	movs	r3, #1
 8006f58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f5a:	f000 fe8f 	bl	8007c7c <vPortExitCritical>

	return xReturn;
 8006f5e:	69fb      	ldr	r3, [r7, #28]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20001158 	.word	0x20001158
 8006f6c:	2000116c 	.word	0x2000116c

08006f70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f74:	4b03      	ldr	r3, [pc, #12]	@ (8006f84 <vTaskMissedYield+0x14>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
}
 8006f7a:	bf00      	nop
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	20001168 	.word	0x20001168

08006f88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f90:	f000 f852 	bl	8007038 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f94:	4b06      	ldr	r3, [pc, #24]	@ (8006fb0 <prvIdleTask+0x28>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d9f9      	bls.n	8006f90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f9c:	4b05      	ldr	r3, [pc, #20]	@ (8006fb4 <prvIdleTask+0x2c>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006fac:	e7f0      	b.n	8006f90 <prvIdleTask+0x8>
 8006fae:	bf00      	nop
 8006fb0:	20000c84 	.word	0x20000c84
 8006fb4:	e000ed04 	.word	0xe000ed04

08006fb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	607b      	str	r3, [r7, #4]
 8006fc2:	e00c      	b.n	8006fde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	4413      	add	r3, r2
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4a12      	ldr	r2, [pc, #72]	@ (8007018 <prvInitialiseTaskLists+0x60>)
 8006fd0:	4413      	add	r3, r2
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fe fc64 	bl	80058a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	607b      	str	r3, [r7, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b37      	cmp	r3, #55	@ 0x37
 8006fe2:	d9ef      	bls.n	8006fc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fe4:	480d      	ldr	r0, [pc, #52]	@ (800701c <prvInitialiseTaskLists+0x64>)
 8006fe6:	f7fe fc5b 	bl	80058a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fea:	480d      	ldr	r0, [pc, #52]	@ (8007020 <prvInitialiseTaskLists+0x68>)
 8006fec:	f7fe fc58 	bl	80058a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ff0:	480c      	ldr	r0, [pc, #48]	@ (8007024 <prvInitialiseTaskLists+0x6c>)
 8006ff2:	f7fe fc55 	bl	80058a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006ff6:	480c      	ldr	r0, [pc, #48]	@ (8007028 <prvInitialiseTaskLists+0x70>)
 8006ff8:	f7fe fc52 	bl	80058a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ffc:	480b      	ldr	r0, [pc, #44]	@ (800702c <prvInitialiseTaskLists+0x74>)
 8006ffe:	f7fe fc4f 	bl	80058a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007002:	4b0b      	ldr	r3, [pc, #44]	@ (8007030 <prvInitialiseTaskLists+0x78>)
 8007004:	4a05      	ldr	r2, [pc, #20]	@ (800701c <prvInitialiseTaskLists+0x64>)
 8007006:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007008:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <prvInitialiseTaskLists+0x7c>)
 800700a:	4a05      	ldr	r2, [pc, #20]	@ (8007020 <prvInitialiseTaskLists+0x68>)
 800700c:	601a      	str	r2, [r3, #0]
}
 800700e:	bf00      	nop
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	20000c84 	.word	0x20000c84
 800701c:	200010e4 	.word	0x200010e4
 8007020:	200010f8 	.word	0x200010f8
 8007024:	20001114 	.word	0x20001114
 8007028:	20001128 	.word	0x20001128
 800702c:	20001140 	.word	0x20001140
 8007030:	2000110c 	.word	0x2000110c
 8007034:	20001110 	.word	0x20001110

08007038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800703e:	e019      	b.n	8007074 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007040:	f000 fdea 	bl	8007c18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007044:	4b10      	ldr	r3, [pc, #64]	@ (8007088 <prvCheckTasksWaitingTermination+0x50>)
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3304      	adds	r3, #4
 8007050:	4618      	mov	r0, r3
 8007052:	f7fe fcaf 	bl	80059b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007056:	4b0d      	ldr	r3, [pc, #52]	@ (800708c <prvCheckTasksWaitingTermination+0x54>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3b01      	subs	r3, #1
 800705c:	4a0b      	ldr	r2, [pc, #44]	@ (800708c <prvCheckTasksWaitingTermination+0x54>)
 800705e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007060:	4b0b      	ldr	r3, [pc, #44]	@ (8007090 <prvCheckTasksWaitingTermination+0x58>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3b01      	subs	r3, #1
 8007066:	4a0a      	ldr	r2, [pc, #40]	@ (8007090 <prvCheckTasksWaitingTermination+0x58>)
 8007068:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800706a:	f000 fe07 	bl	8007c7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f810 	bl	8007094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007074:	4b06      	ldr	r3, [pc, #24]	@ (8007090 <prvCheckTasksWaitingTermination+0x58>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e1      	bne.n	8007040 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800707c:	bf00      	nop
 800707e:	bf00      	nop
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20001128 	.word	0x20001128
 800708c:	20001154 	.word	0x20001154
 8007090:	2000113c 	.word	0x2000113c

08007094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3354      	adds	r3, #84	@ 0x54
 80070a0:	4618      	mov	r0, r3
 80070a2:	f001 fa19 	bl	80084d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d108      	bne.n	80070c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 ff9f 	bl	8007ff8 <vPortFree>
				vPortFree( pxTCB );
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 ff9c 	bl	8007ff8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070c0:	e019      	b.n	80070f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d103      	bne.n	80070d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 ff93 	bl	8007ff8 <vPortFree>
	}
 80070d2:	e010      	b.n	80070f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d00b      	beq.n	80070f6 <prvDeleteTCB+0x62>
	__asm volatile
 80070de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	60fb      	str	r3, [r7, #12]
}
 80070f0:	bf00      	nop
 80070f2:	bf00      	nop
 80070f4:	e7fd      	b.n	80070f2 <prvDeleteTCB+0x5e>
	}
 80070f6:	bf00      	nop
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007106:	4b0c      	ldr	r3, [pc, #48]	@ (8007138 <prvResetNextTaskUnblockTime+0x38>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d104      	bne.n	800711a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007110:	4b0a      	ldr	r3, [pc, #40]	@ (800713c <prvResetNextTaskUnblockTime+0x3c>)
 8007112:	f04f 32ff 	mov.w	r2, #4294967295
 8007116:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007118:	e008      	b.n	800712c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800711a:	4b07      	ldr	r3, [pc, #28]	@ (8007138 <prvResetNextTaskUnblockTime+0x38>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	4a04      	ldr	r2, [pc, #16]	@ (800713c <prvResetNextTaskUnblockTime+0x3c>)
 800712a:	6013      	str	r3, [r2, #0]
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	2000110c 	.word	0x2000110c
 800713c:	20001174 	.word	0x20001174

08007140 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007146:	4b0b      	ldr	r3, [pc, #44]	@ (8007174 <xTaskGetSchedulerState+0x34>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d102      	bne.n	8007154 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800714e:	2301      	movs	r3, #1
 8007150:	607b      	str	r3, [r7, #4]
 8007152:	e008      	b.n	8007166 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007154:	4b08      	ldr	r3, [pc, #32]	@ (8007178 <xTaskGetSchedulerState+0x38>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d102      	bne.n	8007162 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800715c:	2302      	movs	r3, #2
 800715e:	607b      	str	r3, [r7, #4]
 8007160:	e001      	b.n	8007166 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007166:	687b      	ldr	r3, [r7, #4]
	}
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	20001160 	.word	0x20001160
 8007178:	2000117c 	.word	0x2000117c

0800717c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d058      	beq.n	8007244 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007192:	4b2f      	ldr	r3, [pc, #188]	@ (8007250 <xTaskPriorityDisinherit+0xd4>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	429a      	cmp	r2, r3
 800719a:	d00b      	beq.n	80071b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	60fb      	str	r3, [r7, #12]
}
 80071ae:	bf00      	nop
 80071b0:	bf00      	nop
 80071b2:	e7fd      	b.n	80071b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10b      	bne.n	80071d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	60bb      	str	r3, [r7, #8]
}
 80071ce:	bf00      	nop
 80071d0:	bf00      	nop
 80071d2:	e7fd      	b.n	80071d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d8:	1e5a      	subs	r2, r3, #1
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d02c      	beq.n	8007244 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d128      	bne.n	8007244 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fbdc 	bl	80059b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007214:	4b0f      	ldr	r3, [pc, #60]	@ (8007254 <xTaskPriorityDisinherit+0xd8>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	429a      	cmp	r2, r3
 800721a:	d903      	bls.n	8007224 <xTaskPriorityDisinherit+0xa8>
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007220:	4a0c      	ldr	r2, [pc, #48]	@ (8007254 <xTaskPriorityDisinherit+0xd8>)
 8007222:	6013      	str	r3, [r2, #0]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4a09      	ldr	r2, [pc, #36]	@ (8007258 <xTaskPriorityDisinherit+0xdc>)
 8007232:	441a      	add	r2, r3
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	3304      	adds	r3, #4
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f7fe fb5d 	bl	80058fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007240:	2301      	movs	r3, #1
 8007242:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007244:	697b      	ldr	r3, [r7, #20]
	}
 8007246:	4618      	mov	r0, r3
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000c80 	.word	0x20000c80
 8007254:	2000115c 	.word	0x2000115c
 8007258:	20000c84 	.word	0x20000c84

0800725c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007266:	4b21      	ldr	r3, [pc, #132]	@ (80072ec <prvAddCurrentTaskToDelayedList+0x90>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800726c:	4b20      	ldr	r3, [pc, #128]	@ (80072f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3304      	adds	r3, #4
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fb9e 	bl	80059b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727e:	d10a      	bne.n	8007296 <prvAddCurrentTaskToDelayedList+0x3a>
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d007      	beq.n	8007296 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007286:	4b1a      	ldr	r3, [pc, #104]	@ (80072f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3304      	adds	r3, #4
 800728c:	4619      	mov	r1, r3
 800728e:	4819      	ldr	r0, [pc, #100]	@ (80072f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007290:	f7fe fb33 	bl	80058fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007294:	e026      	b.n	80072e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4413      	add	r3, r2
 800729c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800729e:	4b14      	ldr	r3, [pc, #80]	@ (80072f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d209      	bcs.n	80072c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072ae:	4b12      	ldr	r3, [pc, #72]	@ (80072f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b0f      	ldr	r3, [pc, #60]	@ (80072f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3304      	adds	r3, #4
 80072b8:	4619      	mov	r1, r3
 80072ba:	4610      	mov	r0, r2
 80072bc:	f7fe fb41 	bl	8005942 <vListInsert>
}
 80072c0:	e010      	b.n	80072e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072c2:	4b0e      	ldr	r3, [pc, #56]	@ (80072fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	4b0a      	ldr	r3, [pc, #40]	@ (80072f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3304      	adds	r3, #4
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f7fe fb37 	bl	8005942 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80072d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007300 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d202      	bcs.n	80072e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80072de:	4a08      	ldr	r2, [pc, #32]	@ (8007300 <prvAddCurrentTaskToDelayedList+0xa4>)
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	6013      	str	r3, [r2, #0]
}
 80072e4:	bf00      	nop
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20001158 	.word	0x20001158
 80072f0:	20000c80 	.word	0x20000c80
 80072f4:	20001140 	.word	0x20001140
 80072f8:	20001110 	.word	0x20001110
 80072fc:	2000110c 	.word	0x2000110c
 8007300:	20001174 	.word	0x20001174

08007304 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08a      	sub	sp, #40	@ 0x28
 8007308:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800730e:	f000 fb13 	bl	8007938 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007312:	4b1d      	ldr	r3, [pc, #116]	@ (8007388 <xTimerCreateTimerTask+0x84>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d021      	beq.n	800735e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800731e:	2300      	movs	r3, #0
 8007320:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007322:	1d3a      	adds	r2, r7, #4
 8007324:	f107 0108 	add.w	r1, r7, #8
 8007328:	f107 030c 	add.w	r3, r7, #12
 800732c:	4618      	mov	r0, r3
 800732e:	f7fe fa9d 	bl	800586c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	9202      	str	r2, [sp, #8]
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	2302      	movs	r3, #2
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	2300      	movs	r3, #0
 8007342:	460a      	mov	r2, r1
 8007344:	4911      	ldr	r1, [pc, #68]	@ (800738c <xTimerCreateTimerTask+0x88>)
 8007346:	4812      	ldr	r0, [pc, #72]	@ (8007390 <xTimerCreateTimerTask+0x8c>)
 8007348:	f7ff f858 	bl	80063fc <xTaskCreateStatic>
 800734c:	4603      	mov	r3, r0
 800734e:	4a11      	ldr	r2, [pc, #68]	@ (8007394 <xTimerCreateTimerTask+0x90>)
 8007350:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007352:	4b10      	ldr	r3, [pc, #64]	@ (8007394 <xTimerCreateTimerTask+0x90>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800735a:	2301      	movs	r3, #1
 800735c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10b      	bne.n	800737c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	613b      	str	r3, [r7, #16]
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800737c:	697b      	ldr	r3, [r7, #20]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	200011b0 	.word	0x200011b0
 800738c:	08009700 	.word	0x08009700
 8007390:	080074d1 	.word	0x080074d1
 8007394:	200011b4 	.word	0x200011b4

08007398 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	@ 0x28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10b      	bne.n	80073c8 <xTimerGenericCommand+0x30>
	__asm volatile
 80073b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	623b      	str	r3, [r7, #32]
}
 80073c2:	bf00      	nop
 80073c4:	bf00      	nop
 80073c6:	e7fd      	b.n	80073c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073c8:	4b19      	ldr	r3, [pc, #100]	@ (8007430 <xTimerGenericCommand+0x98>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d02a      	beq.n	8007426 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b05      	cmp	r3, #5
 80073e0:	dc18      	bgt.n	8007414 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073e2:	f7ff fead 	bl	8007140 <xTaskGetSchedulerState>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d109      	bne.n	8007400 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073ec:	4b10      	ldr	r3, [pc, #64]	@ (8007430 <xTimerGenericCommand+0x98>)
 80073ee:	6818      	ldr	r0, [r3, #0]
 80073f0:	f107 0110 	add.w	r1, r7, #16
 80073f4:	2300      	movs	r3, #0
 80073f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073f8:	f7fe fc10 	bl	8005c1c <xQueueGenericSend>
 80073fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80073fe:	e012      	b.n	8007426 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007400:	4b0b      	ldr	r3, [pc, #44]	@ (8007430 <xTimerGenericCommand+0x98>)
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	f107 0110 	add.w	r1, r7, #16
 8007408:	2300      	movs	r3, #0
 800740a:	2200      	movs	r2, #0
 800740c:	f7fe fc06 	bl	8005c1c <xQueueGenericSend>
 8007410:	6278      	str	r0, [r7, #36]	@ 0x24
 8007412:	e008      	b.n	8007426 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007414:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <xTimerGenericCommand+0x98>)
 8007416:	6818      	ldr	r0, [r3, #0]
 8007418:	f107 0110 	add.w	r1, r7, #16
 800741c:	2300      	movs	r3, #0
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	f7fe fcfe 	bl	8005e20 <xQueueGenericSendFromISR>
 8007424:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007428:	4618      	mov	r0, r3
 800742a:	3728      	adds	r7, #40	@ 0x28
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	200011b0 	.word	0x200011b0

08007434 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af02      	add	r7, sp, #8
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800743e:	4b23      	ldr	r3, [pc, #140]	@ (80074cc <prvProcessExpiredTimer+0x98>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	3304      	adds	r3, #4
 800744c:	4618      	mov	r0, r3
 800744e:	f7fe fab1 	bl	80059b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007458:	f003 0304 	and.w	r3, r3, #4
 800745c:	2b00      	cmp	r3, #0
 800745e:	d023      	beq.n	80074a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	699a      	ldr	r2, [r3, #24]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	18d1      	adds	r1, r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	6978      	ldr	r0, [r7, #20]
 800746e:	f000 f8d5 	bl	800761c <prvInsertTimerInActiveList>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d020      	beq.n	80074ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007478:	2300      	movs	r3, #0
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	2300      	movs	r3, #0
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	2100      	movs	r1, #0
 8007482:	6978      	ldr	r0, [r7, #20]
 8007484:	f7ff ff88 	bl	8007398 <xTimerGenericCommand>
 8007488:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d114      	bne.n	80074ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	60fb      	str	r3, [r7, #12]
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	e7fd      	b.n	80074a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074ae:	f023 0301 	bic.w	r3, r3, #1
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	6978      	ldr	r0, [r7, #20]
 80074c0:	4798      	blx	r3
}
 80074c2:	bf00      	nop
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	200011a8 	.word	0x200011a8

080074d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074d8:	f107 0308 	add.w	r3, r7, #8
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 f859 	bl	8007594 <prvGetNextExpireTime>
 80074e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	4619      	mov	r1, r3
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 f805 	bl	80074f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80074ee:	f000 f8d7 	bl	80076a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074f2:	bf00      	nop
 80074f4:	e7f0      	b.n	80074d8 <prvTimerTask+0x8>
	...

080074f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007502:	f7ff fa29 	bl	8006958 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007506:	f107 0308 	add.w	r3, r7, #8
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f866 	bl	80075dc <prvSampleTimeNow>
 8007510:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d130      	bne.n	800757a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10a      	bne.n	8007534 <prvProcessTimerOrBlockTask+0x3c>
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	429a      	cmp	r2, r3
 8007524:	d806      	bhi.n	8007534 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007526:	f7ff fa25 	bl	8006974 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800752a:	68f9      	ldr	r1, [r7, #12]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f7ff ff81 	bl	8007434 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007532:	e024      	b.n	800757e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d008      	beq.n	800754c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800753a:	4b13      	ldr	r3, [pc, #76]	@ (8007588 <prvProcessTimerOrBlockTask+0x90>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <prvProcessTimerOrBlockTask+0x50>
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <prvProcessTimerOrBlockTask+0x52>
 8007548:	2300      	movs	r3, #0
 800754a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800754c:	4b0f      	ldr	r3, [pc, #60]	@ (800758c <prvProcessTimerOrBlockTask+0x94>)
 800754e:	6818      	ldr	r0, [r3, #0]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	4619      	mov	r1, r3
 800755a:	f7fe ff1b 	bl	8006394 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800755e:	f7ff fa09 	bl	8006974 <xTaskResumeAll>
 8007562:	4603      	mov	r3, r0
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007568:	4b09      	ldr	r3, [pc, #36]	@ (8007590 <prvProcessTimerOrBlockTask+0x98>)
 800756a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	f3bf 8f6f 	isb	sy
}
 8007578:	e001      	b.n	800757e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800757a:	f7ff f9fb 	bl	8006974 <xTaskResumeAll>
}
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	200011ac 	.word	0x200011ac
 800758c:	200011b0 	.word	0x200011b0
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800759c:	4b0e      	ldr	r3, [pc, #56]	@ (80075d8 <prvGetNextExpireTime+0x44>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <prvGetNextExpireTime+0x16>
 80075a6:	2201      	movs	r2, #1
 80075a8:	e000      	b.n	80075ac <prvGetNextExpireTime+0x18>
 80075aa:	2200      	movs	r2, #0
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d105      	bne.n	80075c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075b8:	4b07      	ldr	r3, [pc, #28]	@ (80075d8 <prvGetNextExpireTime+0x44>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	60fb      	str	r3, [r7, #12]
 80075c2:	e001      	b.n	80075c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075c8:	68fb      	ldr	r3, [r7, #12]
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3714      	adds	r7, #20
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	200011a8 	.word	0x200011a8

080075dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075e4:	f7ff fa64 	bl	8006ab0 <xTaskGetTickCount>
 80075e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80075ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007618 <prvSampleTimeNow+0x3c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d205      	bcs.n	8007600 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075f4:	f000 f93a 	bl	800786c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	e002      	b.n	8007606 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007606:	4a04      	ldr	r2, [pc, #16]	@ (8007618 <prvSampleTimeNow+0x3c>)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800760c:	68fb      	ldr	r3, [r7, #12]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200011b8 	.word	0x200011b8

0800761c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	429a      	cmp	r2, r3
 8007640:	d812      	bhi.n	8007668 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	1ad2      	subs	r2, r2, r3
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	429a      	cmp	r2, r3
 800764e:	d302      	bcc.n	8007656 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007650:	2301      	movs	r3, #1
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	e01b      	b.n	800768e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007656:	4b10      	ldr	r3, [pc, #64]	@ (8007698 <prvInsertTimerInActiveList+0x7c>)
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3304      	adds	r3, #4
 800765e:	4619      	mov	r1, r3
 8007660:	4610      	mov	r0, r2
 8007662:	f7fe f96e 	bl	8005942 <vListInsert>
 8007666:	e012      	b.n	800768e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	429a      	cmp	r2, r3
 800766e:	d206      	bcs.n	800767e <prvInsertTimerInActiveList+0x62>
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	429a      	cmp	r2, r3
 8007676:	d302      	bcc.n	800767e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007678:	2301      	movs	r3, #1
 800767a:	617b      	str	r3, [r7, #20]
 800767c:	e007      	b.n	800768e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800767e:	4b07      	ldr	r3, [pc, #28]	@ (800769c <prvInsertTimerInActiveList+0x80>)
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3304      	adds	r3, #4
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f7fe f95a 	bl	8005942 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800768e:	697b      	ldr	r3, [r7, #20]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	200011ac 	.word	0x200011ac
 800769c:	200011a8 	.word	0x200011a8

080076a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08e      	sub	sp, #56	@ 0x38
 80076a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076a6:	e0ce      	b.n	8007846 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	da19      	bge.n	80076e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076ae:	1d3b      	adds	r3, r7, #4
 80076b0:	3304      	adds	r3, #4
 80076b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10b      	bne.n	80076d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	61fb      	str	r3, [r7, #28]
}
 80076cc:	bf00      	nop
 80076ce:	bf00      	nop
 80076d0:	e7fd      	b.n	80076ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076d8:	6850      	ldr	r0, [r2, #4]
 80076da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076dc:	6892      	ldr	r2, [r2, #8]
 80076de:	4611      	mov	r1, r2
 80076e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f2c0 80ae 	blt.w	8007846 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f8:	3304      	adds	r3, #4
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe f95a 	bl	80059b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007700:	463b      	mov	r3, r7
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff ff6a 	bl	80075dc <prvSampleTimeNow>
 8007708:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b09      	cmp	r3, #9
 800770e:	f200 8097 	bhi.w	8007840 <prvProcessReceivedCommands+0x1a0>
 8007712:	a201      	add	r2, pc, #4	@ (adr r2, 8007718 <prvProcessReceivedCommands+0x78>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	08007741 	.word	0x08007741
 800771c:	08007741 	.word	0x08007741
 8007720:	08007741 	.word	0x08007741
 8007724:	080077b7 	.word	0x080077b7
 8007728:	080077cb 	.word	0x080077cb
 800772c:	08007817 	.word	0x08007817
 8007730:	08007741 	.word	0x08007741
 8007734:	08007741 	.word	0x08007741
 8007738:	080077b7 	.word	0x080077b7
 800773c:	080077cb 	.word	0x080077cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007742:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007746:	f043 0301 	orr.w	r3, r3, #1
 800774a:	b2da      	uxtb	r2, r3
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	18d1      	adds	r1, r2, r3
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800775e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007760:	f7ff ff5c 	bl	800761c <prvInsertTimerInActiveList>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d06c      	beq.n	8007844 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800776a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007770:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007774:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d061      	beq.n	8007844 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	441a      	add	r2, r3
 8007788:	2300      	movs	r3, #0
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	2300      	movs	r3, #0
 800778e:	2100      	movs	r1, #0
 8007790:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007792:	f7ff fe01 	bl	8007398 <xTimerGenericCommand>
 8007796:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d152      	bne.n	8007844 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	61bb      	str	r3, [r7, #24]
}
 80077b0:	bf00      	nop
 80077b2:	bf00      	nop
 80077b4:	e7fd      	b.n	80077b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077bc:	f023 0301 	bic.w	r3, r3, #1
 80077c0:	b2da      	uxtb	r2, r3
 80077c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80077c8:	e03d      	b.n	8007846 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077d0:	f043 0301 	orr.w	r3, r3, #1
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10b      	bne.n	8007802 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	617b      	str	r3, [r7, #20]
}
 80077fc:	bf00      	nop
 80077fe:	bf00      	nop
 8007800:	e7fd      	b.n	80077fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007804:	699a      	ldr	r2, [r3, #24]
 8007806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007808:	18d1      	adds	r1, r2, r3
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800780e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007810:	f7ff ff04 	bl	800761c <prvInsertTimerInActiveList>
					break;
 8007814:	e017      	b.n	8007846 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007818:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d103      	bne.n	800782c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007826:	f000 fbe7 	bl	8007ff8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800782a:	e00c      	b.n	8007846 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800782c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007832:	f023 0301 	bic.w	r3, r3, #1
 8007836:	b2da      	uxtb	r2, r3
 8007838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800783a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800783e:	e002      	b.n	8007846 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007840:	bf00      	nop
 8007842:	e000      	b.n	8007846 <prvProcessReceivedCommands+0x1a6>
					break;
 8007844:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007846:	4b08      	ldr	r3, [pc, #32]	@ (8007868 <prvProcessReceivedCommands+0x1c8>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	1d39      	adds	r1, r7, #4
 800784c:	2200      	movs	r2, #0
 800784e:	4618      	mov	r0, r3
 8007850:	f7fe fb84 	bl	8005f5c <xQueueReceive>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	f47f af26 	bne.w	80076a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800785c:	bf00      	nop
 800785e:	bf00      	nop
 8007860:	3730      	adds	r7, #48	@ 0x30
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	200011b0 	.word	0x200011b0

0800786c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007872:	e049      	b.n	8007908 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007874:	4b2e      	ldr	r3, [pc, #184]	@ (8007930 <prvSwitchTimerLists+0xc4>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800787e:	4b2c      	ldr	r3, [pc, #176]	@ (8007930 <prvSwitchTimerLists+0xc4>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3304      	adds	r3, #4
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe f891 	bl	80059b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d02f      	beq.n	8007908 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	4413      	add	r3, r2
 80078b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d90e      	bls.n	80078d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007930 <prvSwitchTimerLists+0xc4>)
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3304      	adds	r3, #4
 80078ce:	4619      	mov	r1, r3
 80078d0:	4610      	mov	r0, r2
 80078d2:	f7fe f836 	bl	8005942 <vListInsert>
 80078d6:	e017      	b.n	8007908 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078d8:	2300      	movs	r3, #0
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	2300      	movs	r3, #0
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	2100      	movs	r1, #0
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f7ff fd58 	bl	8007398 <xTimerGenericCommand>
 80078e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10b      	bne.n	8007908 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	603b      	str	r3, [r7, #0]
}
 8007902:	bf00      	nop
 8007904:	bf00      	nop
 8007906:	e7fd      	b.n	8007904 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007908:	4b09      	ldr	r3, [pc, #36]	@ (8007930 <prvSwitchTimerLists+0xc4>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1b0      	bne.n	8007874 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007912:	4b07      	ldr	r3, [pc, #28]	@ (8007930 <prvSwitchTimerLists+0xc4>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007918:	4b06      	ldr	r3, [pc, #24]	@ (8007934 <prvSwitchTimerLists+0xc8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a04      	ldr	r2, [pc, #16]	@ (8007930 <prvSwitchTimerLists+0xc4>)
 800791e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007920:	4a04      	ldr	r2, [pc, #16]	@ (8007934 <prvSwitchTimerLists+0xc8>)
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	6013      	str	r3, [r2, #0]
}
 8007926:	bf00      	nop
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	200011a8 	.word	0x200011a8
 8007934:	200011ac 	.word	0x200011ac

08007938 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800793e:	f000 f96b 	bl	8007c18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007942:	4b15      	ldr	r3, [pc, #84]	@ (8007998 <prvCheckForValidListAndQueue+0x60>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d120      	bne.n	800798c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800794a:	4814      	ldr	r0, [pc, #80]	@ (800799c <prvCheckForValidListAndQueue+0x64>)
 800794c:	f7fd ffa8 	bl	80058a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007950:	4813      	ldr	r0, [pc, #76]	@ (80079a0 <prvCheckForValidListAndQueue+0x68>)
 8007952:	f7fd ffa5 	bl	80058a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007956:	4b13      	ldr	r3, [pc, #76]	@ (80079a4 <prvCheckForValidListAndQueue+0x6c>)
 8007958:	4a10      	ldr	r2, [pc, #64]	@ (800799c <prvCheckForValidListAndQueue+0x64>)
 800795a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800795c:	4b12      	ldr	r3, [pc, #72]	@ (80079a8 <prvCheckForValidListAndQueue+0x70>)
 800795e:	4a10      	ldr	r2, [pc, #64]	@ (80079a0 <prvCheckForValidListAndQueue+0x68>)
 8007960:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007962:	2300      	movs	r3, #0
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	4b11      	ldr	r3, [pc, #68]	@ (80079ac <prvCheckForValidListAndQueue+0x74>)
 8007968:	4a11      	ldr	r2, [pc, #68]	@ (80079b0 <prvCheckForValidListAndQueue+0x78>)
 800796a:	2110      	movs	r1, #16
 800796c:	200a      	movs	r0, #10
 800796e:	f7fe f8b5 	bl	8005adc <xQueueGenericCreateStatic>
 8007972:	4603      	mov	r3, r0
 8007974:	4a08      	ldr	r2, [pc, #32]	@ (8007998 <prvCheckForValidListAndQueue+0x60>)
 8007976:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007978:	4b07      	ldr	r3, [pc, #28]	@ (8007998 <prvCheckForValidListAndQueue+0x60>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007980:	4b05      	ldr	r3, [pc, #20]	@ (8007998 <prvCheckForValidListAndQueue+0x60>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	490b      	ldr	r1, [pc, #44]	@ (80079b4 <prvCheckForValidListAndQueue+0x7c>)
 8007986:	4618      	mov	r0, r3
 8007988:	f7fe fcda 	bl	8006340 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800798c:	f000 f976 	bl	8007c7c <vPortExitCritical>
}
 8007990:	bf00      	nop
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	200011b0 	.word	0x200011b0
 800799c:	20001180 	.word	0x20001180
 80079a0:	20001194 	.word	0x20001194
 80079a4:	200011a8 	.word	0x200011a8
 80079a8:	200011ac 	.word	0x200011ac
 80079ac:	2000125c 	.word	0x2000125c
 80079b0:	200011bc 	.word	0x200011bc
 80079b4:	08009708 	.word	0x08009708

080079b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3b04      	subs	r3, #4
 80079c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3b04      	subs	r3, #4
 80079d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f023 0201 	bic.w	r2, r3, #1
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3b04      	subs	r3, #4
 80079e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80079e8:	4a0c      	ldr	r2, [pc, #48]	@ (8007a1c <pxPortInitialiseStack+0x64>)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3b14      	subs	r3, #20
 80079f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	3b04      	subs	r3, #4
 80079fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f06f 0202 	mvn.w	r2, #2
 8007a06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3b20      	subs	r3, #32
 8007a0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3714      	adds	r7, #20
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	08007a21 	.word	0x08007a21

08007a20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007a2a:	4b13      	ldr	r3, [pc, #76]	@ (8007a78 <prvTaskExitError+0x58>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a32:	d00b      	beq.n	8007a4c <prvTaskExitError+0x2c>
	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	60fb      	str	r3, [r7, #12]
}
 8007a46:	bf00      	nop
 8007a48:	bf00      	nop
 8007a4a:	e7fd      	b.n	8007a48 <prvTaskExitError+0x28>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	60bb      	str	r3, [r7, #8]
}
 8007a5e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a60:	bf00      	nop
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0fc      	beq.n	8007a62 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a68:	bf00      	nop
 8007a6a:	bf00      	nop
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	20000010 	.word	0x20000010
 8007a7c:	00000000 	.word	0x00000000

08007a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a80:	4b07      	ldr	r3, [pc, #28]	@ (8007aa0 <pxCurrentTCBConst2>)
 8007a82:	6819      	ldr	r1, [r3, #0]
 8007a84:	6808      	ldr	r0, [r1, #0]
 8007a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	f380 8809 	msr	PSP, r0
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f04f 0000 	mov.w	r0, #0
 8007a96:	f380 8811 	msr	BASEPRI, r0
 8007a9a:	4770      	bx	lr
 8007a9c:	f3af 8000 	nop.w

08007aa0 <pxCurrentTCBConst2>:
 8007aa0:	20000c80 	.word	0x20000c80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007aa4:	bf00      	nop
 8007aa6:	bf00      	nop

08007aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007aa8:	4808      	ldr	r0, [pc, #32]	@ (8007acc <prvPortStartFirstTask+0x24>)
 8007aaa:	6800      	ldr	r0, [r0, #0]
 8007aac:	6800      	ldr	r0, [r0, #0]
 8007aae:	f380 8808 	msr	MSP, r0
 8007ab2:	f04f 0000 	mov.w	r0, #0
 8007ab6:	f380 8814 	msr	CONTROL, r0
 8007aba:	b662      	cpsie	i
 8007abc:	b661      	cpsie	f
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	df00      	svc	0
 8007ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007aca:	bf00      	nop
 8007acc:	e000ed08 	.word	0xe000ed08

08007ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007ad6:	4b47      	ldr	r3, [pc, #284]	@ (8007bf4 <xPortStartScheduler+0x124>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a47      	ldr	r2, [pc, #284]	@ (8007bf8 <xPortStartScheduler+0x128>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d10b      	bne.n	8007af8 <xPortStartScheduler+0x28>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	613b      	str	r3, [r7, #16]
}
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	e7fd      	b.n	8007af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007af8:	4b3e      	ldr	r3, [pc, #248]	@ (8007bf4 <xPortStartScheduler+0x124>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a3f      	ldr	r2, [pc, #252]	@ (8007bfc <xPortStartScheduler+0x12c>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d10b      	bne.n	8007b1a <xPortStartScheduler+0x4a>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	60fb      	str	r3, [r7, #12]
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	e7fd      	b.n	8007b16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b1a:	4b39      	ldr	r3, [pc, #228]	@ (8007c00 <xPortStartScheduler+0x130>)
 8007b1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	22ff      	movs	r2, #255	@ 0xff
 8007b2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	4b31      	ldr	r3, [pc, #196]	@ (8007c04 <xPortStartScheduler+0x134>)
 8007b40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b42:	4b31      	ldr	r3, [pc, #196]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b44:	2207      	movs	r2, #7
 8007b46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b48:	e009      	b.n	8007b5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007b4a:	4b2f      	ldr	r3, [pc, #188]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	4a2d      	ldr	r2, [pc, #180]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b66:	2b80      	cmp	r3, #128	@ 0x80
 8007b68:	d0ef      	beq.n	8007b4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b6a:	4b27      	ldr	r3, [pc, #156]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f1c3 0307 	rsb	r3, r3, #7
 8007b72:	2b04      	cmp	r3, #4
 8007b74:	d00b      	beq.n	8007b8e <xPortStartScheduler+0xbe>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	60bb      	str	r3, [r7, #8]
}
 8007b88:	bf00      	nop
 8007b8a:	bf00      	nop
 8007b8c:	e7fd      	b.n	8007b8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b8e:	4b1e      	ldr	r3, [pc, #120]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	021b      	lsls	r3, r3, #8
 8007b94:	4a1c      	ldr	r2, [pc, #112]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b98:	4b1b      	ldr	r3, [pc, #108]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ba0:	4a19      	ldr	r2, [pc, #100]	@ (8007c08 <xPortStartScheduler+0x138>)
 8007ba2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007bac:	4b17      	ldr	r3, [pc, #92]	@ (8007c0c <xPortStartScheduler+0x13c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a16      	ldr	r2, [pc, #88]	@ (8007c0c <xPortStartScheduler+0x13c>)
 8007bb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007bb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007bb8:	4b14      	ldr	r3, [pc, #80]	@ (8007c0c <xPortStartScheduler+0x13c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a13      	ldr	r2, [pc, #76]	@ (8007c0c <xPortStartScheduler+0x13c>)
 8007bbe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007bc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007bc4:	f000 f8da 	bl	8007d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007bc8:	4b11      	ldr	r3, [pc, #68]	@ (8007c10 <xPortStartScheduler+0x140>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007bce:	f000 f8f9 	bl	8007dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007bd2:	4b10      	ldr	r3, [pc, #64]	@ (8007c14 <xPortStartScheduler+0x144>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8007c14 <xPortStartScheduler+0x144>)
 8007bd8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007bdc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007bde:	f7ff ff63 	bl	8007aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007be2:	f7ff f82f 	bl	8006c44 <vTaskSwitchContext>
	prvTaskExitError();
 8007be6:	f7ff ff1b 	bl	8007a20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3718      	adds	r7, #24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	e000ed00 	.word	0xe000ed00
 8007bf8:	410fc271 	.word	0x410fc271
 8007bfc:	410fc270 	.word	0x410fc270
 8007c00:	e000e400 	.word	0xe000e400
 8007c04:	200012ac 	.word	0x200012ac
 8007c08:	200012b0 	.word	0x200012b0
 8007c0c:	e000ed20 	.word	0xe000ed20
 8007c10:	20000010 	.word	0x20000010
 8007c14:	e000ef34 	.word	0xe000ef34

08007c18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	607b      	str	r3, [r7, #4]
}
 8007c30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c32:	4b10      	ldr	r3, [pc, #64]	@ (8007c74 <vPortEnterCritical+0x5c>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3301      	adds	r3, #1
 8007c38:	4a0e      	ldr	r2, [pc, #56]	@ (8007c74 <vPortEnterCritical+0x5c>)
 8007c3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <vPortEnterCritical+0x5c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d110      	bne.n	8007c66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c44:	4b0c      	ldr	r3, [pc, #48]	@ (8007c78 <vPortEnterCritical+0x60>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00b      	beq.n	8007c66 <vPortEnterCritical+0x4e>
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	603b      	str	r3, [r7, #0]
}
 8007c60:	bf00      	nop
 8007c62:	bf00      	nop
 8007c64:	e7fd      	b.n	8007c62 <vPortEnterCritical+0x4a>
	}
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20000010 	.word	0x20000010
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c82:	4b12      	ldr	r3, [pc, #72]	@ (8007ccc <vPortExitCritical+0x50>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10b      	bne.n	8007ca2 <vPortExitCritical+0x26>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	607b      	str	r3, [r7, #4]
}
 8007c9c:	bf00      	nop
 8007c9e:	bf00      	nop
 8007ca0:	e7fd      	b.n	8007c9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <vPortExitCritical+0x50>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	4a08      	ldr	r2, [pc, #32]	@ (8007ccc <vPortExitCritical+0x50>)
 8007caa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007cac:	4b07      	ldr	r3, [pc, #28]	@ (8007ccc <vPortExitCritical+0x50>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d105      	bne.n	8007cc0 <vPortExitCritical+0x44>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	f383 8811 	msr	BASEPRI, r3
}
 8007cbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	20000010 	.word	0x20000010

08007cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007cd0:	f3ef 8009 	mrs	r0, PSP
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	4b15      	ldr	r3, [pc, #84]	@ (8007d30 <pxCurrentTCBConst>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	f01e 0f10 	tst.w	lr, #16
 8007ce0:	bf08      	it	eq
 8007ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cea:	6010      	str	r0, [r2, #0]
 8007cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007cf4:	f380 8811 	msr	BASEPRI, r0
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f7fe ffa0 	bl	8006c44 <vTaskSwitchContext>
 8007d04:	f04f 0000 	mov.w	r0, #0
 8007d08:	f380 8811 	msr	BASEPRI, r0
 8007d0c:	bc09      	pop	{r0, r3}
 8007d0e:	6819      	ldr	r1, [r3, #0]
 8007d10:	6808      	ldr	r0, [r1, #0]
 8007d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d16:	f01e 0f10 	tst.w	lr, #16
 8007d1a:	bf08      	it	eq
 8007d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d20:	f380 8809 	msr	PSP, r0
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	f3af 8000 	nop.w

08007d30 <pxCurrentTCBConst>:
 8007d30:	20000c80 	.word	0x20000c80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop

08007d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	607b      	str	r3, [r7, #4]
}
 8007d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007d52:	f7fe febd 	bl	8006ad0 <xTaskIncrementTick>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d003      	beq.n	8007d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d5c:	4b06      	ldr	r3, [pc, #24]	@ (8007d78 <xPortSysTickHandler+0x40>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	2300      	movs	r3, #0
 8007d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	f383 8811 	msr	BASEPRI, r3
}
 8007d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	e000ed04 	.word	0xe000ed04

08007d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d80:	4b0b      	ldr	r3, [pc, #44]	@ (8007db0 <vPortSetupTimerInterrupt+0x34>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d86:	4b0b      	ldr	r3, [pc, #44]	@ (8007db4 <vPortSetupTimerInterrupt+0x38>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007db8 <vPortSetupTimerInterrupt+0x3c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a0a      	ldr	r2, [pc, #40]	@ (8007dbc <vPortSetupTimerInterrupt+0x40>)
 8007d92:	fba2 2303 	umull	r2, r3, r2, r3
 8007d96:	099b      	lsrs	r3, r3, #6
 8007d98:	4a09      	ldr	r2, [pc, #36]	@ (8007dc0 <vPortSetupTimerInterrupt+0x44>)
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d9e:	4b04      	ldr	r3, [pc, #16]	@ (8007db0 <vPortSetupTimerInterrupt+0x34>)
 8007da0:	2207      	movs	r2, #7
 8007da2:	601a      	str	r2, [r3, #0]
}
 8007da4:	bf00      	nop
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	e000e010 	.word	0xe000e010
 8007db4:	e000e018 	.word	0xe000e018
 8007db8:	20000004 	.word	0x20000004
 8007dbc:	10624dd3 	.word	0x10624dd3
 8007dc0:	e000e014 	.word	0xe000e014

08007dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007dd4 <vPortEnableVFP+0x10>
 8007dc8:	6801      	ldr	r1, [r0, #0]
 8007dca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007dce:	6001      	str	r1, [r0, #0]
 8007dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007dd2:	bf00      	nop
 8007dd4:	e000ed88 	.word	0xe000ed88

08007dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007dde:	f3ef 8305 	mrs	r3, IPSR
 8007de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b0f      	cmp	r3, #15
 8007de8:	d915      	bls.n	8007e16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dea:	4a18      	ldr	r2, [pc, #96]	@ (8007e4c <vPortValidateInterruptPriority+0x74>)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4413      	add	r3, r2
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007df4:	4b16      	ldr	r3, [pc, #88]	@ (8007e50 <vPortValidateInterruptPriority+0x78>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	7afa      	ldrb	r2, [r7, #11]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d20b      	bcs.n	8007e16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	607b      	str	r3, [r7, #4]
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	e7fd      	b.n	8007e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e16:	4b0f      	ldr	r3, [pc, #60]	@ (8007e54 <vPortValidateInterruptPriority+0x7c>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e58 <vPortValidateInterruptPriority+0x80>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d90b      	bls.n	8007e3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	603b      	str	r3, [r7, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	e7fd      	b.n	8007e3a <vPortValidateInterruptPriority+0x62>
	}
 8007e3e:	bf00      	nop
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	e000e3f0 	.word	0xe000e3f0
 8007e50:	200012ac 	.word	0x200012ac
 8007e54:	e000ed0c 	.word	0xe000ed0c
 8007e58:	200012b0 	.word	0x200012b0

08007e5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08a      	sub	sp, #40	@ 0x28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e64:	2300      	movs	r3, #0
 8007e66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e68:	f7fe fd76 	bl	8006958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e6c:	4b5c      	ldr	r3, [pc, #368]	@ (8007fe0 <pvPortMalloc+0x184>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e74:	f000 f924 	bl	80080c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e78:	4b5a      	ldr	r3, [pc, #360]	@ (8007fe4 <pvPortMalloc+0x188>)
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f040 8095 	bne.w	8007fb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01e      	beq.n	8007eca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e8c:	2208      	movs	r2, #8
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4413      	add	r3, r2
 8007e92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d015      	beq.n	8007eca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f023 0307 	bic.w	r3, r3, #7
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00b      	beq.n	8007eca <pvPortMalloc+0x6e>
	__asm volatile
 8007eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb6:	f383 8811 	msr	BASEPRI, r3
 8007eba:	f3bf 8f6f 	isb	sy
 8007ebe:	f3bf 8f4f 	dsb	sy
 8007ec2:	617b      	str	r3, [r7, #20]
}
 8007ec4:	bf00      	nop
 8007ec6:	bf00      	nop
 8007ec8:	e7fd      	b.n	8007ec6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d06f      	beq.n	8007fb0 <pvPortMalloc+0x154>
 8007ed0:	4b45      	ldr	r3, [pc, #276]	@ (8007fe8 <pvPortMalloc+0x18c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d86a      	bhi.n	8007fb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007eda:	4b44      	ldr	r3, [pc, #272]	@ (8007fec <pvPortMalloc+0x190>)
 8007edc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ede:	4b43      	ldr	r3, [pc, #268]	@ (8007fec <pvPortMalloc+0x190>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ee4:	e004      	b.n	8007ef0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d903      	bls.n	8007f02 <pvPortMalloc+0xa6>
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1f1      	bne.n	8007ee6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f02:	4b37      	ldr	r3, [pc, #220]	@ (8007fe0 <pvPortMalloc+0x184>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d051      	beq.n	8007fb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2208      	movs	r2, #8
 8007f12:	4413      	add	r3, r2
 8007f14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	6a3b      	ldr	r3, [r7, #32]
 8007f1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	1ad2      	subs	r2, r2, r3
 8007f26:	2308      	movs	r3, #8
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d920      	bls.n	8007f70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4413      	add	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00b      	beq.n	8007f58 <pvPortMalloc+0xfc>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	613b      	str	r3, [r7, #16]
}
 8007f52:	bf00      	nop
 8007f54:	bf00      	nop
 8007f56:	e7fd      	b.n	8007f54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	1ad2      	subs	r2, r2, r3
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f6a:	69b8      	ldr	r0, [r7, #24]
 8007f6c:	f000 f90a 	bl	8008184 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f70:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe8 <pvPortMalloc+0x18c>)
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8007fe8 <pvPortMalloc+0x18c>)
 8007f7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007fe8 <pvPortMalloc+0x18c>)
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	4b1b      	ldr	r3, [pc, #108]	@ (8007ff0 <pvPortMalloc+0x194>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d203      	bcs.n	8007f92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f8a:	4b17      	ldr	r3, [pc, #92]	@ (8007fe8 <pvPortMalloc+0x18c>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a18      	ldr	r2, [pc, #96]	@ (8007ff0 <pvPortMalloc+0x194>)
 8007f90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	4b13      	ldr	r3, [pc, #76]	@ (8007fe4 <pvPortMalloc+0x188>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007fa6:	4b13      	ldr	r3, [pc, #76]	@ (8007ff4 <pvPortMalloc+0x198>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3301      	adds	r3, #1
 8007fac:	4a11      	ldr	r2, [pc, #68]	@ (8007ff4 <pvPortMalloc+0x198>)
 8007fae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fb0:	f7fe fce0 	bl	8006974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <pvPortMalloc+0x17a>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	60fb      	str	r3, [r7, #12]
}
 8007fd0:	bf00      	nop
 8007fd2:	bf00      	nop
 8007fd4:	e7fd      	b.n	8007fd2 <pvPortMalloc+0x176>
	return pvReturn;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3728      	adds	r7, #40	@ 0x28
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}
 8007fe0:	20004ebc 	.word	0x20004ebc
 8007fe4:	20004ed0 	.word	0x20004ed0
 8007fe8:	20004ec0 	.word	0x20004ec0
 8007fec:	20004eb4 	.word	0x20004eb4
 8007ff0:	20004ec4 	.word	0x20004ec4
 8007ff4:	20004ec8 	.word	0x20004ec8

08007ff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d04f      	beq.n	80080aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800800a:	2308      	movs	r3, #8
 800800c:	425b      	negs	r3, r3
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	4413      	add	r3, r2
 8008012:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	4b25      	ldr	r3, [pc, #148]	@ (80080b4 <vPortFree+0xbc>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4013      	ands	r3, r2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10b      	bne.n	800803e <vPortFree+0x46>
	__asm volatile
 8008026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	60fb      	str	r3, [r7, #12]
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	e7fd      	b.n	800803a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00b      	beq.n	800805e <vPortFree+0x66>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	60bb      	str	r3, [r7, #8]
}
 8008058:	bf00      	nop
 800805a:	bf00      	nop
 800805c:	e7fd      	b.n	800805a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	4b14      	ldr	r3, [pc, #80]	@ (80080b4 <vPortFree+0xbc>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4013      	ands	r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d01e      	beq.n	80080aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d11a      	bne.n	80080aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	4b0e      	ldr	r3, [pc, #56]	@ (80080b4 <vPortFree+0xbc>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	43db      	mvns	r3, r3
 800807e:	401a      	ands	r2, r3
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008084:	f7fe fc68 	bl	8006958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	4b0a      	ldr	r3, [pc, #40]	@ (80080b8 <vPortFree+0xc0>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4413      	add	r3, r2
 8008092:	4a09      	ldr	r2, [pc, #36]	@ (80080b8 <vPortFree+0xc0>)
 8008094:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008096:	6938      	ldr	r0, [r7, #16]
 8008098:	f000 f874 	bl	8008184 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800809c:	4b07      	ldr	r3, [pc, #28]	@ (80080bc <vPortFree+0xc4>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3301      	adds	r3, #1
 80080a2:	4a06      	ldr	r2, [pc, #24]	@ (80080bc <vPortFree+0xc4>)
 80080a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80080a6:	f7fe fc65 	bl	8006974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080aa:	bf00      	nop
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20004ed0 	.word	0x20004ed0
 80080b8:	20004ec0 	.word	0x20004ec0
 80080bc:	20004ecc 	.word	0x20004ecc

080080c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80080ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80080cc:	4b27      	ldr	r3, [pc, #156]	@ (800816c <prvHeapInit+0xac>)
 80080ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f003 0307 	and.w	r3, r3, #7
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00c      	beq.n	80080f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	3307      	adds	r3, #7
 80080de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 0307 	bic.w	r3, r3, #7
 80080e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080e8:	68ba      	ldr	r2, [r7, #8]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	4a1f      	ldr	r2, [pc, #124]	@ (800816c <prvHeapInit+0xac>)
 80080f0:	4413      	add	r3, r2
 80080f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008170 <prvHeapInit+0xb0>)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008170 <prvHeapInit+0xb0>)
 8008100:	2200      	movs	r2, #0
 8008102:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	4413      	add	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800810c:	2208      	movs	r2, #8
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	1a9b      	subs	r3, r3, r2
 8008112:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0307 	bic.w	r3, r3, #7
 800811a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4a15      	ldr	r2, [pc, #84]	@ (8008174 <prvHeapInit+0xb4>)
 8008120:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008122:	4b14      	ldr	r3, [pc, #80]	@ (8008174 <prvHeapInit+0xb4>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2200      	movs	r2, #0
 8008128:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800812a:	4b12      	ldr	r3, [pc, #72]	@ (8008174 <prvHeapInit+0xb4>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2200      	movs	r2, #0
 8008130:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	1ad2      	subs	r2, r2, r3
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008140:	4b0c      	ldr	r3, [pc, #48]	@ (8008174 <prvHeapInit+0xb4>)
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	4a0a      	ldr	r2, [pc, #40]	@ (8008178 <prvHeapInit+0xb8>)
 800814e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	4a09      	ldr	r2, [pc, #36]	@ (800817c <prvHeapInit+0xbc>)
 8008156:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008158:	4b09      	ldr	r3, [pc, #36]	@ (8008180 <prvHeapInit+0xc0>)
 800815a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800815e:	601a      	str	r2, [r3, #0]
}
 8008160:	bf00      	nop
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	200012b4 	.word	0x200012b4
 8008170:	20004eb4 	.word	0x20004eb4
 8008174:	20004ebc 	.word	0x20004ebc
 8008178:	20004ec4 	.word	0x20004ec4
 800817c:	20004ec0 	.word	0x20004ec0
 8008180:	20004ed0 	.word	0x20004ed0

08008184 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800818c:	4b28      	ldr	r3, [pc, #160]	@ (8008230 <prvInsertBlockIntoFreeList+0xac>)
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	e002      	b.n	8008198 <prvInsertBlockIntoFreeList+0x14>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d8f7      	bhi.n	8008192 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	4413      	add	r3, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d108      	bne.n	80081c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	441a      	add	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	441a      	add	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d118      	bne.n	800820c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b15      	ldr	r3, [pc, #84]	@ (8008234 <prvInsertBlockIntoFreeList+0xb0>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d00d      	beq.n	8008202 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685a      	ldr	r2, [r3, #4]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	441a      	add	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	e008      	b.n	8008214 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008202:	4b0c      	ldr	r3, [pc, #48]	@ (8008234 <prvInsertBlockIntoFreeList+0xb0>)
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	e003      	b.n	8008214 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	429a      	cmp	r2, r3
 800821a:	d002      	beq.n	8008222 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008222:	bf00      	nop
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	20004eb4 	.word	0x20004eb4
 8008234:	20004ebc 	.word	0x20004ebc

08008238 <std>:
 8008238:	2300      	movs	r3, #0
 800823a:	b510      	push	{r4, lr}
 800823c:	4604      	mov	r4, r0
 800823e:	e9c0 3300 	strd	r3, r3, [r0]
 8008242:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008246:	6083      	str	r3, [r0, #8]
 8008248:	8181      	strh	r1, [r0, #12]
 800824a:	6643      	str	r3, [r0, #100]	@ 0x64
 800824c:	81c2      	strh	r2, [r0, #14]
 800824e:	6183      	str	r3, [r0, #24]
 8008250:	4619      	mov	r1, r3
 8008252:	2208      	movs	r2, #8
 8008254:	305c      	adds	r0, #92	@ 0x5c
 8008256:	f000 f926 	bl	80084a6 <memset>
 800825a:	4b0d      	ldr	r3, [pc, #52]	@ (8008290 <std+0x58>)
 800825c:	6263      	str	r3, [r4, #36]	@ 0x24
 800825e:	4b0d      	ldr	r3, [pc, #52]	@ (8008294 <std+0x5c>)
 8008260:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008262:	4b0d      	ldr	r3, [pc, #52]	@ (8008298 <std+0x60>)
 8008264:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008266:	4b0d      	ldr	r3, [pc, #52]	@ (800829c <std+0x64>)
 8008268:	6323      	str	r3, [r4, #48]	@ 0x30
 800826a:	4b0d      	ldr	r3, [pc, #52]	@ (80082a0 <std+0x68>)
 800826c:	6224      	str	r4, [r4, #32]
 800826e:	429c      	cmp	r4, r3
 8008270:	d006      	beq.n	8008280 <std+0x48>
 8008272:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008276:	4294      	cmp	r4, r2
 8008278:	d002      	beq.n	8008280 <std+0x48>
 800827a:	33d0      	adds	r3, #208	@ 0xd0
 800827c:	429c      	cmp	r4, r3
 800827e:	d105      	bne.n	800828c <std+0x54>
 8008280:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008288:	f000 b9dc 	b.w	8008644 <__retarget_lock_init_recursive>
 800828c:	bd10      	pop	{r4, pc}
 800828e:	bf00      	nop
 8008290:	08008421 	.word	0x08008421
 8008294:	08008443 	.word	0x08008443
 8008298:	0800847b 	.word	0x0800847b
 800829c:	0800849f 	.word	0x0800849f
 80082a0:	20004ed4 	.word	0x20004ed4

080082a4 <stdio_exit_handler>:
 80082a4:	4a02      	ldr	r2, [pc, #8]	@ (80082b0 <stdio_exit_handler+0xc>)
 80082a6:	4903      	ldr	r1, [pc, #12]	@ (80082b4 <stdio_exit_handler+0x10>)
 80082a8:	4803      	ldr	r0, [pc, #12]	@ (80082b8 <stdio_exit_handler+0x14>)
 80082aa:	f000 b869 	b.w	8008380 <_fwalk_sglue>
 80082ae:	bf00      	nop
 80082b0:	20000014 	.word	0x20000014
 80082b4:	080091b1 	.word	0x080091b1
 80082b8:	20000024 	.word	0x20000024

080082bc <cleanup_stdio>:
 80082bc:	6841      	ldr	r1, [r0, #4]
 80082be:	4b0c      	ldr	r3, [pc, #48]	@ (80082f0 <cleanup_stdio+0x34>)
 80082c0:	4299      	cmp	r1, r3
 80082c2:	b510      	push	{r4, lr}
 80082c4:	4604      	mov	r4, r0
 80082c6:	d001      	beq.n	80082cc <cleanup_stdio+0x10>
 80082c8:	f000 ff72 	bl	80091b0 <_fflush_r>
 80082cc:	68a1      	ldr	r1, [r4, #8]
 80082ce:	4b09      	ldr	r3, [pc, #36]	@ (80082f4 <cleanup_stdio+0x38>)
 80082d0:	4299      	cmp	r1, r3
 80082d2:	d002      	beq.n	80082da <cleanup_stdio+0x1e>
 80082d4:	4620      	mov	r0, r4
 80082d6:	f000 ff6b 	bl	80091b0 <_fflush_r>
 80082da:	68e1      	ldr	r1, [r4, #12]
 80082dc:	4b06      	ldr	r3, [pc, #24]	@ (80082f8 <cleanup_stdio+0x3c>)
 80082de:	4299      	cmp	r1, r3
 80082e0:	d004      	beq.n	80082ec <cleanup_stdio+0x30>
 80082e2:	4620      	mov	r0, r4
 80082e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082e8:	f000 bf62 	b.w	80091b0 <_fflush_r>
 80082ec:	bd10      	pop	{r4, pc}
 80082ee:	bf00      	nop
 80082f0:	20004ed4 	.word	0x20004ed4
 80082f4:	20004f3c 	.word	0x20004f3c
 80082f8:	20004fa4 	.word	0x20004fa4

080082fc <global_stdio_init.part.0>:
 80082fc:	b510      	push	{r4, lr}
 80082fe:	4b0b      	ldr	r3, [pc, #44]	@ (800832c <global_stdio_init.part.0+0x30>)
 8008300:	4c0b      	ldr	r4, [pc, #44]	@ (8008330 <global_stdio_init.part.0+0x34>)
 8008302:	4a0c      	ldr	r2, [pc, #48]	@ (8008334 <global_stdio_init.part.0+0x38>)
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	4620      	mov	r0, r4
 8008308:	2200      	movs	r2, #0
 800830a:	2104      	movs	r1, #4
 800830c:	f7ff ff94 	bl	8008238 <std>
 8008310:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008314:	2201      	movs	r2, #1
 8008316:	2109      	movs	r1, #9
 8008318:	f7ff ff8e 	bl	8008238 <std>
 800831c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008320:	2202      	movs	r2, #2
 8008322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008326:	2112      	movs	r1, #18
 8008328:	f7ff bf86 	b.w	8008238 <std>
 800832c:	2000500c 	.word	0x2000500c
 8008330:	20004ed4 	.word	0x20004ed4
 8008334:	080082a5 	.word	0x080082a5

08008338 <__sfp_lock_acquire>:
 8008338:	4801      	ldr	r0, [pc, #4]	@ (8008340 <__sfp_lock_acquire+0x8>)
 800833a:	f000 b984 	b.w	8008646 <__retarget_lock_acquire_recursive>
 800833e:	bf00      	nop
 8008340:	20005015 	.word	0x20005015

08008344 <__sfp_lock_release>:
 8008344:	4801      	ldr	r0, [pc, #4]	@ (800834c <__sfp_lock_release+0x8>)
 8008346:	f000 b97f 	b.w	8008648 <__retarget_lock_release_recursive>
 800834a:	bf00      	nop
 800834c:	20005015 	.word	0x20005015

08008350 <__sinit>:
 8008350:	b510      	push	{r4, lr}
 8008352:	4604      	mov	r4, r0
 8008354:	f7ff fff0 	bl	8008338 <__sfp_lock_acquire>
 8008358:	6a23      	ldr	r3, [r4, #32]
 800835a:	b11b      	cbz	r3, 8008364 <__sinit+0x14>
 800835c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008360:	f7ff bff0 	b.w	8008344 <__sfp_lock_release>
 8008364:	4b04      	ldr	r3, [pc, #16]	@ (8008378 <__sinit+0x28>)
 8008366:	6223      	str	r3, [r4, #32]
 8008368:	4b04      	ldr	r3, [pc, #16]	@ (800837c <__sinit+0x2c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1f5      	bne.n	800835c <__sinit+0xc>
 8008370:	f7ff ffc4 	bl	80082fc <global_stdio_init.part.0>
 8008374:	e7f2      	b.n	800835c <__sinit+0xc>
 8008376:	bf00      	nop
 8008378:	080082bd 	.word	0x080082bd
 800837c:	2000500c 	.word	0x2000500c

08008380 <_fwalk_sglue>:
 8008380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008384:	4607      	mov	r7, r0
 8008386:	4688      	mov	r8, r1
 8008388:	4614      	mov	r4, r2
 800838a:	2600      	movs	r6, #0
 800838c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008390:	f1b9 0901 	subs.w	r9, r9, #1
 8008394:	d505      	bpl.n	80083a2 <_fwalk_sglue+0x22>
 8008396:	6824      	ldr	r4, [r4, #0]
 8008398:	2c00      	cmp	r4, #0
 800839a:	d1f7      	bne.n	800838c <_fwalk_sglue+0xc>
 800839c:	4630      	mov	r0, r6
 800839e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083a2:	89ab      	ldrh	r3, [r5, #12]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d907      	bls.n	80083b8 <_fwalk_sglue+0x38>
 80083a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083ac:	3301      	adds	r3, #1
 80083ae:	d003      	beq.n	80083b8 <_fwalk_sglue+0x38>
 80083b0:	4629      	mov	r1, r5
 80083b2:	4638      	mov	r0, r7
 80083b4:	47c0      	blx	r8
 80083b6:	4306      	orrs	r6, r0
 80083b8:	3568      	adds	r5, #104	@ 0x68
 80083ba:	e7e9      	b.n	8008390 <_fwalk_sglue+0x10>

080083bc <iprintf>:
 80083bc:	b40f      	push	{r0, r1, r2, r3}
 80083be:	b507      	push	{r0, r1, r2, lr}
 80083c0:	4906      	ldr	r1, [pc, #24]	@ (80083dc <iprintf+0x20>)
 80083c2:	ab04      	add	r3, sp, #16
 80083c4:	6808      	ldr	r0, [r1, #0]
 80083c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ca:	6881      	ldr	r1, [r0, #8]
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	f000 fbc5 	bl	8008b5c <_vfiprintf_r>
 80083d2:	b003      	add	sp, #12
 80083d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d8:	b004      	add	sp, #16
 80083da:	4770      	bx	lr
 80083dc:	20000020 	.word	0x20000020

080083e0 <siprintf>:
 80083e0:	b40e      	push	{r1, r2, r3}
 80083e2:	b500      	push	{lr}
 80083e4:	b09c      	sub	sp, #112	@ 0x70
 80083e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80083e8:	9002      	str	r0, [sp, #8]
 80083ea:	9006      	str	r0, [sp, #24]
 80083ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80083f0:	4809      	ldr	r0, [pc, #36]	@ (8008418 <siprintf+0x38>)
 80083f2:	9107      	str	r1, [sp, #28]
 80083f4:	9104      	str	r1, [sp, #16]
 80083f6:	4909      	ldr	r1, [pc, #36]	@ (800841c <siprintf+0x3c>)
 80083f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80083fc:	9105      	str	r1, [sp, #20]
 80083fe:	6800      	ldr	r0, [r0, #0]
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	a902      	add	r1, sp, #8
 8008404:	f000 fa84 	bl	8008910 <_svfiprintf_r>
 8008408:	9b02      	ldr	r3, [sp, #8]
 800840a:	2200      	movs	r2, #0
 800840c:	701a      	strb	r2, [r3, #0]
 800840e:	b01c      	add	sp, #112	@ 0x70
 8008410:	f85d eb04 	ldr.w	lr, [sp], #4
 8008414:	b003      	add	sp, #12
 8008416:	4770      	bx	lr
 8008418:	20000020 	.word	0x20000020
 800841c:	ffff0208 	.word	0xffff0208

08008420 <__sread>:
 8008420:	b510      	push	{r4, lr}
 8008422:	460c      	mov	r4, r1
 8008424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008428:	f000 f8be 	bl	80085a8 <_read_r>
 800842c:	2800      	cmp	r0, #0
 800842e:	bfab      	itete	ge
 8008430:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008432:	89a3      	ldrhlt	r3, [r4, #12]
 8008434:	181b      	addge	r3, r3, r0
 8008436:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800843a:	bfac      	ite	ge
 800843c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800843e:	81a3      	strhlt	r3, [r4, #12]
 8008440:	bd10      	pop	{r4, pc}

08008442 <__swrite>:
 8008442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008446:	461f      	mov	r7, r3
 8008448:	898b      	ldrh	r3, [r1, #12]
 800844a:	05db      	lsls	r3, r3, #23
 800844c:	4605      	mov	r5, r0
 800844e:	460c      	mov	r4, r1
 8008450:	4616      	mov	r6, r2
 8008452:	d505      	bpl.n	8008460 <__swrite+0x1e>
 8008454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008458:	2302      	movs	r3, #2
 800845a:	2200      	movs	r2, #0
 800845c:	f000 f892 	bl	8008584 <_lseek_r>
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800846a:	81a3      	strh	r3, [r4, #12]
 800846c:	4632      	mov	r2, r6
 800846e:	463b      	mov	r3, r7
 8008470:	4628      	mov	r0, r5
 8008472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008476:	f000 b8a9 	b.w	80085cc <_write_r>

0800847a <__sseek>:
 800847a:	b510      	push	{r4, lr}
 800847c:	460c      	mov	r4, r1
 800847e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008482:	f000 f87f 	bl	8008584 <_lseek_r>
 8008486:	1c43      	adds	r3, r0, #1
 8008488:	89a3      	ldrh	r3, [r4, #12]
 800848a:	bf15      	itete	ne
 800848c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800848e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008492:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008496:	81a3      	strheq	r3, [r4, #12]
 8008498:	bf18      	it	ne
 800849a:	81a3      	strhne	r3, [r4, #12]
 800849c:	bd10      	pop	{r4, pc}

0800849e <__sclose>:
 800849e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a2:	f000 b809 	b.w	80084b8 <_close_r>

080084a6 <memset>:
 80084a6:	4402      	add	r2, r0
 80084a8:	4603      	mov	r3, r0
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d100      	bne.n	80084b0 <memset+0xa>
 80084ae:	4770      	bx	lr
 80084b0:	f803 1b01 	strb.w	r1, [r3], #1
 80084b4:	e7f9      	b.n	80084aa <memset+0x4>
	...

080084b8 <_close_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4d06      	ldr	r5, [pc, #24]	@ (80084d4 <_close_r+0x1c>)
 80084bc:	2300      	movs	r3, #0
 80084be:	4604      	mov	r4, r0
 80084c0:	4608      	mov	r0, r1
 80084c2:	602b      	str	r3, [r5, #0]
 80084c4:	f7f9 ff25 	bl	8002312 <_close>
 80084c8:	1c43      	adds	r3, r0, #1
 80084ca:	d102      	bne.n	80084d2 <_close_r+0x1a>
 80084cc:	682b      	ldr	r3, [r5, #0]
 80084ce:	b103      	cbz	r3, 80084d2 <_close_r+0x1a>
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	bd38      	pop	{r3, r4, r5, pc}
 80084d4:	20005010 	.word	0x20005010

080084d8 <_reclaim_reent>:
 80084d8:	4b29      	ldr	r3, [pc, #164]	@ (8008580 <_reclaim_reent+0xa8>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4283      	cmp	r3, r0
 80084de:	b570      	push	{r4, r5, r6, lr}
 80084e0:	4604      	mov	r4, r0
 80084e2:	d04b      	beq.n	800857c <_reclaim_reent+0xa4>
 80084e4:	69c3      	ldr	r3, [r0, #28]
 80084e6:	b1ab      	cbz	r3, 8008514 <_reclaim_reent+0x3c>
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	b16b      	cbz	r3, 8008508 <_reclaim_reent+0x30>
 80084ec:	2500      	movs	r5, #0
 80084ee:	69e3      	ldr	r3, [r4, #28]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	5959      	ldr	r1, [r3, r5]
 80084f4:	2900      	cmp	r1, #0
 80084f6:	d13b      	bne.n	8008570 <_reclaim_reent+0x98>
 80084f8:	3504      	adds	r5, #4
 80084fa:	2d80      	cmp	r5, #128	@ 0x80
 80084fc:	d1f7      	bne.n	80084ee <_reclaim_reent+0x16>
 80084fe:	69e3      	ldr	r3, [r4, #28]
 8008500:	4620      	mov	r0, r4
 8008502:	68d9      	ldr	r1, [r3, #12]
 8008504:	f000 f8b0 	bl	8008668 <_free_r>
 8008508:	69e3      	ldr	r3, [r4, #28]
 800850a:	6819      	ldr	r1, [r3, #0]
 800850c:	b111      	cbz	r1, 8008514 <_reclaim_reent+0x3c>
 800850e:	4620      	mov	r0, r4
 8008510:	f000 f8aa 	bl	8008668 <_free_r>
 8008514:	6961      	ldr	r1, [r4, #20]
 8008516:	b111      	cbz	r1, 800851e <_reclaim_reent+0x46>
 8008518:	4620      	mov	r0, r4
 800851a:	f000 f8a5 	bl	8008668 <_free_r>
 800851e:	69e1      	ldr	r1, [r4, #28]
 8008520:	b111      	cbz	r1, 8008528 <_reclaim_reent+0x50>
 8008522:	4620      	mov	r0, r4
 8008524:	f000 f8a0 	bl	8008668 <_free_r>
 8008528:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800852a:	b111      	cbz	r1, 8008532 <_reclaim_reent+0x5a>
 800852c:	4620      	mov	r0, r4
 800852e:	f000 f89b 	bl	8008668 <_free_r>
 8008532:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008534:	b111      	cbz	r1, 800853c <_reclaim_reent+0x64>
 8008536:	4620      	mov	r0, r4
 8008538:	f000 f896 	bl	8008668 <_free_r>
 800853c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800853e:	b111      	cbz	r1, 8008546 <_reclaim_reent+0x6e>
 8008540:	4620      	mov	r0, r4
 8008542:	f000 f891 	bl	8008668 <_free_r>
 8008546:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008548:	b111      	cbz	r1, 8008550 <_reclaim_reent+0x78>
 800854a:	4620      	mov	r0, r4
 800854c:	f000 f88c 	bl	8008668 <_free_r>
 8008550:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008552:	b111      	cbz	r1, 800855a <_reclaim_reent+0x82>
 8008554:	4620      	mov	r0, r4
 8008556:	f000 f887 	bl	8008668 <_free_r>
 800855a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800855c:	b111      	cbz	r1, 8008564 <_reclaim_reent+0x8c>
 800855e:	4620      	mov	r0, r4
 8008560:	f000 f882 	bl	8008668 <_free_r>
 8008564:	6a23      	ldr	r3, [r4, #32]
 8008566:	b14b      	cbz	r3, 800857c <_reclaim_reent+0xa4>
 8008568:	4620      	mov	r0, r4
 800856a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800856e:	4718      	bx	r3
 8008570:	680e      	ldr	r6, [r1, #0]
 8008572:	4620      	mov	r0, r4
 8008574:	f000 f878 	bl	8008668 <_free_r>
 8008578:	4631      	mov	r1, r6
 800857a:	e7bb      	b.n	80084f4 <_reclaim_reent+0x1c>
 800857c:	bd70      	pop	{r4, r5, r6, pc}
 800857e:	bf00      	nop
 8008580:	20000020 	.word	0x20000020

08008584 <_lseek_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4d07      	ldr	r5, [pc, #28]	@ (80085a4 <_lseek_r+0x20>)
 8008588:	4604      	mov	r4, r0
 800858a:	4608      	mov	r0, r1
 800858c:	4611      	mov	r1, r2
 800858e:	2200      	movs	r2, #0
 8008590:	602a      	str	r2, [r5, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	f7f9 fee4 	bl	8002360 <_lseek>
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	d102      	bne.n	80085a2 <_lseek_r+0x1e>
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	b103      	cbz	r3, 80085a2 <_lseek_r+0x1e>
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	20005010 	.word	0x20005010

080085a8 <_read_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d07      	ldr	r5, [pc, #28]	@ (80085c8 <_read_r+0x20>)
 80085ac:	4604      	mov	r4, r0
 80085ae:	4608      	mov	r0, r1
 80085b0:	4611      	mov	r1, r2
 80085b2:	2200      	movs	r2, #0
 80085b4:	602a      	str	r2, [r5, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	f7f9 fe8e 	bl	80022d8 <_read>
 80085bc:	1c43      	adds	r3, r0, #1
 80085be:	d102      	bne.n	80085c6 <_read_r+0x1e>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	b103      	cbz	r3, 80085c6 <_read_r+0x1e>
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	20005010 	.word	0x20005010

080085cc <_write_r>:
 80085cc:	b538      	push	{r3, r4, r5, lr}
 80085ce:	4d07      	ldr	r5, [pc, #28]	@ (80085ec <_write_r+0x20>)
 80085d0:	4604      	mov	r4, r0
 80085d2:	4608      	mov	r0, r1
 80085d4:	4611      	mov	r1, r2
 80085d6:	2200      	movs	r2, #0
 80085d8:	602a      	str	r2, [r5, #0]
 80085da:	461a      	mov	r2, r3
 80085dc:	f7f8 f9e6 	bl	80009ac <_write>
 80085e0:	1c43      	adds	r3, r0, #1
 80085e2:	d102      	bne.n	80085ea <_write_r+0x1e>
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	b103      	cbz	r3, 80085ea <_write_r+0x1e>
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	bd38      	pop	{r3, r4, r5, pc}
 80085ec:	20005010 	.word	0x20005010

080085f0 <__errno>:
 80085f0:	4b01      	ldr	r3, [pc, #4]	@ (80085f8 <__errno+0x8>)
 80085f2:	6818      	ldr	r0, [r3, #0]
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	20000020 	.word	0x20000020

080085fc <__libc_init_array>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	4d0d      	ldr	r5, [pc, #52]	@ (8008634 <__libc_init_array+0x38>)
 8008600:	4c0d      	ldr	r4, [pc, #52]	@ (8008638 <__libc_init_array+0x3c>)
 8008602:	1b64      	subs	r4, r4, r5
 8008604:	10a4      	asrs	r4, r4, #2
 8008606:	2600      	movs	r6, #0
 8008608:	42a6      	cmp	r6, r4
 800860a:	d109      	bne.n	8008620 <__libc_init_array+0x24>
 800860c:	4d0b      	ldr	r5, [pc, #44]	@ (800863c <__libc_init_array+0x40>)
 800860e:	4c0c      	ldr	r4, [pc, #48]	@ (8008640 <__libc_init_array+0x44>)
 8008610:	f000 ff92 	bl	8009538 <_init>
 8008614:	1b64      	subs	r4, r4, r5
 8008616:	10a4      	asrs	r4, r4, #2
 8008618:	2600      	movs	r6, #0
 800861a:	42a6      	cmp	r6, r4
 800861c:	d105      	bne.n	800862a <__libc_init_array+0x2e>
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	f855 3b04 	ldr.w	r3, [r5], #4
 8008624:	4798      	blx	r3
 8008626:	3601      	adds	r6, #1
 8008628:	e7ee      	b.n	8008608 <__libc_init_array+0xc>
 800862a:	f855 3b04 	ldr.w	r3, [r5], #4
 800862e:	4798      	blx	r3
 8008630:	3601      	adds	r6, #1
 8008632:	e7f2      	b.n	800861a <__libc_init_array+0x1e>
 8008634:	080097ac 	.word	0x080097ac
 8008638:	080097ac 	.word	0x080097ac
 800863c:	080097ac 	.word	0x080097ac
 8008640:	080097b0 	.word	0x080097b0

08008644 <__retarget_lock_init_recursive>:
 8008644:	4770      	bx	lr

08008646 <__retarget_lock_acquire_recursive>:
 8008646:	4770      	bx	lr

08008648 <__retarget_lock_release_recursive>:
 8008648:	4770      	bx	lr

0800864a <memcpy>:
 800864a:	440a      	add	r2, r1
 800864c:	4291      	cmp	r1, r2
 800864e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008652:	d100      	bne.n	8008656 <memcpy+0xc>
 8008654:	4770      	bx	lr
 8008656:	b510      	push	{r4, lr}
 8008658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800865c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008660:	4291      	cmp	r1, r2
 8008662:	d1f9      	bne.n	8008658 <memcpy+0xe>
 8008664:	bd10      	pop	{r4, pc}
	...

08008668 <_free_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4605      	mov	r5, r0
 800866c:	2900      	cmp	r1, #0
 800866e:	d041      	beq.n	80086f4 <_free_r+0x8c>
 8008670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008674:	1f0c      	subs	r4, r1, #4
 8008676:	2b00      	cmp	r3, #0
 8008678:	bfb8      	it	lt
 800867a:	18e4      	addlt	r4, r4, r3
 800867c:	f000 f8e0 	bl	8008840 <__malloc_lock>
 8008680:	4a1d      	ldr	r2, [pc, #116]	@ (80086f8 <_free_r+0x90>)
 8008682:	6813      	ldr	r3, [r2, #0]
 8008684:	b933      	cbnz	r3, 8008694 <_free_r+0x2c>
 8008686:	6063      	str	r3, [r4, #4]
 8008688:	6014      	str	r4, [r2, #0]
 800868a:	4628      	mov	r0, r5
 800868c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008690:	f000 b8dc 	b.w	800884c <__malloc_unlock>
 8008694:	42a3      	cmp	r3, r4
 8008696:	d908      	bls.n	80086aa <_free_r+0x42>
 8008698:	6820      	ldr	r0, [r4, #0]
 800869a:	1821      	adds	r1, r4, r0
 800869c:	428b      	cmp	r3, r1
 800869e:	bf01      	itttt	eq
 80086a0:	6819      	ldreq	r1, [r3, #0]
 80086a2:	685b      	ldreq	r3, [r3, #4]
 80086a4:	1809      	addeq	r1, r1, r0
 80086a6:	6021      	streq	r1, [r4, #0]
 80086a8:	e7ed      	b.n	8008686 <_free_r+0x1e>
 80086aa:	461a      	mov	r2, r3
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	b10b      	cbz	r3, 80086b4 <_free_r+0x4c>
 80086b0:	42a3      	cmp	r3, r4
 80086b2:	d9fa      	bls.n	80086aa <_free_r+0x42>
 80086b4:	6811      	ldr	r1, [r2, #0]
 80086b6:	1850      	adds	r0, r2, r1
 80086b8:	42a0      	cmp	r0, r4
 80086ba:	d10b      	bne.n	80086d4 <_free_r+0x6c>
 80086bc:	6820      	ldr	r0, [r4, #0]
 80086be:	4401      	add	r1, r0
 80086c0:	1850      	adds	r0, r2, r1
 80086c2:	4283      	cmp	r3, r0
 80086c4:	6011      	str	r1, [r2, #0]
 80086c6:	d1e0      	bne.n	800868a <_free_r+0x22>
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	6053      	str	r3, [r2, #4]
 80086ce:	4408      	add	r0, r1
 80086d0:	6010      	str	r0, [r2, #0]
 80086d2:	e7da      	b.n	800868a <_free_r+0x22>
 80086d4:	d902      	bls.n	80086dc <_free_r+0x74>
 80086d6:	230c      	movs	r3, #12
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	e7d6      	b.n	800868a <_free_r+0x22>
 80086dc:	6820      	ldr	r0, [r4, #0]
 80086de:	1821      	adds	r1, r4, r0
 80086e0:	428b      	cmp	r3, r1
 80086e2:	bf04      	itt	eq
 80086e4:	6819      	ldreq	r1, [r3, #0]
 80086e6:	685b      	ldreq	r3, [r3, #4]
 80086e8:	6063      	str	r3, [r4, #4]
 80086ea:	bf04      	itt	eq
 80086ec:	1809      	addeq	r1, r1, r0
 80086ee:	6021      	streq	r1, [r4, #0]
 80086f0:	6054      	str	r4, [r2, #4]
 80086f2:	e7ca      	b.n	800868a <_free_r+0x22>
 80086f4:	bd38      	pop	{r3, r4, r5, pc}
 80086f6:	bf00      	nop
 80086f8:	2000501c 	.word	0x2000501c

080086fc <sbrk_aligned>:
 80086fc:	b570      	push	{r4, r5, r6, lr}
 80086fe:	4e0f      	ldr	r6, [pc, #60]	@ (800873c <sbrk_aligned+0x40>)
 8008700:	460c      	mov	r4, r1
 8008702:	6831      	ldr	r1, [r6, #0]
 8008704:	4605      	mov	r5, r0
 8008706:	b911      	cbnz	r1, 800870e <sbrk_aligned+0x12>
 8008708:	f000 fe28 	bl	800935c <_sbrk_r>
 800870c:	6030      	str	r0, [r6, #0]
 800870e:	4621      	mov	r1, r4
 8008710:	4628      	mov	r0, r5
 8008712:	f000 fe23 	bl	800935c <_sbrk_r>
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	d103      	bne.n	8008722 <sbrk_aligned+0x26>
 800871a:	f04f 34ff 	mov.w	r4, #4294967295
 800871e:	4620      	mov	r0, r4
 8008720:	bd70      	pop	{r4, r5, r6, pc}
 8008722:	1cc4      	adds	r4, r0, #3
 8008724:	f024 0403 	bic.w	r4, r4, #3
 8008728:	42a0      	cmp	r0, r4
 800872a:	d0f8      	beq.n	800871e <sbrk_aligned+0x22>
 800872c:	1a21      	subs	r1, r4, r0
 800872e:	4628      	mov	r0, r5
 8008730:	f000 fe14 	bl	800935c <_sbrk_r>
 8008734:	3001      	adds	r0, #1
 8008736:	d1f2      	bne.n	800871e <sbrk_aligned+0x22>
 8008738:	e7ef      	b.n	800871a <sbrk_aligned+0x1e>
 800873a:	bf00      	nop
 800873c:	20005018 	.word	0x20005018

08008740 <_malloc_r>:
 8008740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008744:	1ccd      	adds	r5, r1, #3
 8008746:	f025 0503 	bic.w	r5, r5, #3
 800874a:	3508      	adds	r5, #8
 800874c:	2d0c      	cmp	r5, #12
 800874e:	bf38      	it	cc
 8008750:	250c      	movcc	r5, #12
 8008752:	2d00      	cmp	r5, #0
 8008754:	4606      	mov	r6, r0
 8008756:	db01      	blt.n	800875c <_malloc_r+0x1c>
 8008758:	42a9      	cmp	r1, r5
 800875a:	d904      	bls.n	8008766 <_malloc_r+0x26>
 800875c:	230c      	movs	r3, #12
 800875e:	6033      	str	r3, [r6, #0]
 8008760:	2000      	movs	r0, #0
 8008762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008766:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800883c <_malloc_r+0xfc>
 800876a:	f000 f869 	bl	8008840 <__malloc_lock>
 800876e:	f8d8 3000 	ldr.w	r3, [r8]
 8008772:	461c      	mov	r4, r3
 8008774:	bb44      	cbnz	r4, 80087c8 <_malloc_r+0x88>
 8008776:	4629      	mov	r1, r5
 8008778:	4630      	mov	r0, r6
 800877a:	f7ff ffbf 	bl	80086fc <sbrk_aligned>
 800877e:	1c43      	adds	r3, r0, #1
 8008780:	4604      	mov	r4, r0
 8008782:	d158      	bne.n	8008836 <_malloc_r+0xf6>
 8008784:	f8d8 4000 	ldr.w	r4, [r8]
 8008788:	4627      	mov	r7, r4
 800878a:	2f00      	cmp	r7, #0
 800878c:	d143      	bne.n	8008816 <_malloc_r+0xd6>
 800878e:	2c00      	cmp	r4, #0
 8008790:	d04b      	beq.n	800882a <_malloc_r+0xea>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	4639      	mov	r1, r7
 8008796:	4630      	mov	r0, r6
 8008798:	eb04 0903 	add.w	r9, r4, r3
 800879c:	f000 fdde 	bl	800935c <_sbrk_r>
 80087a0:	4581      	cmp	r9, r0
 80087a2:	d142      	bne.n	800882a <_malloc_r+0xea>
 80087a4:	6821      	ldr	r1, [r4, #0]
 80087a6:	1a6d      	subs	r5, r5, r1
 80087a8:	4629      	mov	r1, r5
 80087aa:	4630      	mov	r0, r6
 80087ac:	f7ff ffa6 	bl	80086fc <sbrk_aligned>
 80087b0:	3001      	adds	r0, #1
 80087b2:	d03a      	beq.n	800882a <_malloc_r+0xea>
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	442b      	add	r3, r5
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	f8d8 3000 	ldr.w	r3, [r8]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	bb62      	cbnz	r2, 800881c <_malloc_r+0xdc>
 80087c2:	f8c8 7000 	str.w	r7, [r8]
 80087c6:	e00f      	b.n	80087e8 <_malloc_r+0xa8>
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	1b52      	subs	r2, r2, r5
 80087cc:	d420      	bmi.n	8008810 <_malloc_r+0xd0>
 80087ce:	2a0b      	cmp	r2, #11
 80087d0:	d917      	bls.n	8008802 <_malloc_r+0xc2>
 80087d2:	1961      	adds	r1, r4, r5
 80087d4:	42a3      	cmp	r3, r4
 80087d6:	6025      	str	r5, [r4, #0]
 80087d8:	bf18      	it	ne
 80087da:	6059      	strne	r1, [r3, #4]
 80087dc:	6863      	ldr	r3, [r4, #4]
 80087de:	bf08      	it	eq
 80087e0:	f8c8 1000 	streq.w	r1, [r8]
 80087e4:	5162      	str	r2, [r4, r5]
 80087e6:	604b      	str	r3, [r1, #4]
 80087e8:	4630      	mov	r0, r6
 80087ea:	f000 f82f 	bl	800884c <__malloc_unlock>
 80087ee:	f104 000b 	add.w	r0, r4, #11
 80087f2:	1d23      	adds	r3, r4, #4
 80087f4:	f020 0007 	bic.w	r0, r0, #7
 80087f8:	1ac2      	subs	r2, r0, r3
 80087fa:	bf1c      	itt	ne
 80087fc:	1a1b      	subne	r3, r3, r0
 80087fe:	50a3      	strne	r3, [r4, r2]
 8008800:	e7af      	b.n	8008762 <_malloc_r+0x22>
 8008802:	6862      	ldr	r2, [r4, #4]
 8008804:	42a3      	cmp	r3, r4
 8008806:	bf0c      	ite	eq
 8008808:	f8c8 2000 	streq.w	r2, [r8]
 800880c:	605a      	strne	r2, [r3, #4]
 800880e:	e7eb      	b.n	80087e8 <_malloc_r+0xa8>
 8008810:	4623      	mov	r3, r4
 8008812:	6864      	ldr	r4, [r4, #4]
 8008814:	e7ae      	b.n	8008774 <_malloc_r+0x34>
 8008816:	463c      	mov	r4, r7
 8008818:	687f      	ldr	r7, [r7, #4]
 800881a:	e7b6      	b.n	800878a <_malloc_r+0x4a>
 800881c:	461a      	mov	r2, r3
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	42a3      	cmp	r3, r4
 8008822:	d1fb      	bne.n	800881c <_malloc_r+0xdc>
 8008824:	2300      	movs	r3, #0
 8008826:	6053      	str	r3, [r2, #4]
 8008828:	e7de      	b.n	80087e8 <_malloc_r+0xa8>
 800882a:	230c      	movs	r3, #12
 800882c:	6033      	str	r3, [r6, #0]
 800882e:	4630      	mov	r0, r6
 8008830:	f000 f80c 	bl	800884c <__malloc_unlock>
 8008834:	e794      	b.n	8008760 <_malloc_r+0x20>
 8008836:	6005      	str	r5, [r0, #0]
 8008838:	e7d6      	b.n	80087e8 <_malloc_r+0xa8>
 800883a:	bf00      	nop
 800883c:	2000501c 	.word	0x2000501c

08008840 <__malloc_lock>:
 8008840:	4801      	ldr	r0, [pc, #4]	@ (8008848 <__malloc_lock+0x8>)
 8008842:	f7ff bf00 	b.w	8008646 <__retarget_lock_acquire_recursive>
 8008846:	bf00      	nop
 8008848:	20005014 	.word	0x20005014

0800884c <__malloc_unlock>:
 800884c:	4801      	ldr	r0, [pc, #4]	@ (8008854 <__malloc_unlock+0x8>)
 800884e:	f7ff befb 	b.w	8008648 <__retarget_lock_release_recursive>
 8008852:	bf00      	nop
 8008854:	20005014 	.word	0x20005014

08008858 <__ssputs_r>:
 8008858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800885c:	688e      	ldr	r6, [r1, #8]
 800885e:	461f      	mov	r7, r3
 8008860:	42be      	cmp	r6, r7
 8008862:	680b      	ldr	r3, [r1, #0]
 8008864:	4682      	mov	sl, r0
 8008866:	460c      	mov	r4, r1
 8008868:	4690      	mov	r8, r2
 800886a:	d82d      	bhi.n	80088c8 <__ssputs_r+0x70>
 800886c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008870:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008874:	d026      	beq.n	80088c4 <__ssputs_r+0x6c>
 8008876:	6965      	ldr	r5, [r4, #20]
 8008878:	6909      	ldr	r1, [r1, #16]
 800887a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800887e:	eba3 0901 	sub.w	r9, r3, r1
 8008882:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008886:	1c7b      	adds	r3, r7, #1
 8008888:	444b      	add	r3, r9
 800888a:	106d      	asrs	r5, r5, #1
 800888c:	429d      	cmp	r5, r3
 800888e:	bf38      	it	cc
 8008890:	461d      	movcc	r5, r3
 8008892:	0553      	lsls	r3, r2, #21
 8008894:	d527      	bpl.n	80088e6 <__ssputs_r+0x8e>
 8008896:	4629      	mov	r1, r5
 8008898:	f7ff ff52 	bl	8008740 <_malloc_r>
 800889c:	4606      	mov	r6, r0
 800889e:	b360      	cbz	r0, 80088fa <__ssputs_r+0xa2>
 80088a0:	6921      	ldr	r1, [r4, #16]
 80088a2:	464a      	mov	r2, r9
 80088a4:	f7ff fed1 	bl	800864a <memcpy>
 80088a8:	89a3      	ldrh	r3, [r4, #12]
 80088aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	6126      	str	r6, [r4, #16]
 80088b6:	6165      	str	r5, [r4, #20]
 80088b8:	444e      	add	r6, r9
 80088ba:	eba5 0509 	sub.w	r5, r5, r9
 80088be:	6026      	str	r6, [r4, #0]
 80088c0:	60a5      	str	r5, [r4, #8]
 80088c2:	463e      	mov	r6, r7
 80088c4:	42be      	cmp	r6, r7
 80088c6:	d900      	bls.n	80088ca <__ssputs_r+0x72>
 80088c8:	463e      	mov	r6, r7
 80088ca:	6820      	ldr	r0, [r4, #0]
 80088cc:	4632      	mov	r2, r6
 80088ce:	4641      	mov	r1, r8
 80088d0:	f000 fd2a 	bl	8009328 <memmove>
 80088d4:	68a3      	ldr	r3, [r4, #8]
 80088d6:	1b9b      	subs	r3, r3, r6
 80088d8:	60a3      	str	r3, [r4, #8]
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	4433      	add	r3, r6
 80088de:	6023      	str	r3, [r4, #0]
 80088e0:	2000      	movs	r0, #0
 80088e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e6:	462a      	mov	r2, r5
 80088e8:	f000 fd48 	bl	800937c <_realloc_r>
 80088ec:	4606      	mov	r6, r0
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d1e0      	bne.n	80088b4 <__ssputs_r+0x5c>
 80088f2:	6921      	ldr	r1, [r4, #16]
 80088f4:	4650      	mov	r0, sl
 80088f6:	f7ff feb7 	bl	8008668 <_free_r>
 80088fa:	230c      	movs	r3, #12
 80088fc:	f8ca 3000 	str.w	r3, [sl]
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008906:	81a3      	strh	r3, [r4, #12]
 8008908:	f04f 30ff 	mov.w	r0, #4294967295
 800890c:	e7e9      	b.n	80088e2 <__ssputs_r+0x8a>
	...

08008910 <_svfiprintf_r>:
 8008910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008914:	4698      	mov	r8, r3
 8008916:	898b      	ldrh	r3, [r1, #12]
 8008918:	061b      	lsls	r3, r3, #24
 800891a:	b09d      	sub	sp, #116	@ 0x74
 800891c:	4607      	mov	r7, r0
 800891e:	460d      	mov	r5, r1
 8008920:	4614      	mov	r4, r2
 8008922:	d510      	bpl.n	8008946 <_svfiprintf_r+0x36>
 8008924:	690b      	ldr	r3, [r1, #16]
 8008926:	b973      	cbnz	r3, 8008946 <_svfiprintf_r+0x36>
 8008928:	2140      	movs	r1, #64	@ 0x40
 800892a:	f7ff ff09 	bl	8008740 <_malloc_r>
 800892e:	6028      	str	r0, [r5, #0]
 8008930:	6128      	str	r0, [r5, #16]
 8008932:	b930      	cbnz	r0, 8008942 <_svfiprintf_r+0x32>
 8008934:	230c      	movs	r3, #12
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	b01d      	add	sp, #116	@ 0x74
 800893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008942:	2340      	movs	r3, #64	@ 0x40
 8008944:	616b      	str	r3, [r5, #20]
 8008946:	2300      	movs	r3, #0
 8008948:	9309      	str	r3, [sp, #36]	@ 0x24
 800894a:	2320      	movs	r3, #32
 800894c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008950:	f8cd 800c 	str.w	r8, [sp, #12]
 8008954:	2330      	movs	r3, #48	@ 0x30
 8008956:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008af4 <_svfiprintf_r+0x1e4>
 800895a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800895e:	f04f 0901 	mov.w	r9, #1
 8008962:	4623      	mov	r3, r4
 8008964:	469a      	mov	sl, r3
 8008966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800896a:	b10a      	cbz	r2, 8008970 <_svfiprintf_r+0x60>
 800896c:	2a25      	cmp	r2, #37	@ 0x25
 800896e:	d1f9      	bne.n	8008964 <_svfiprintf_r+0x54>
 8008970:	ebba 0b04 	subs.w	fp, sl, r4
 8008974:	d00b      	beq.n	800898e <_svfiprintf_r+0x7e>
 8008976:	465b      	mov	r3, fp
 8008978:	4622      	mov	r2, r4
 800897a:	4629      	mov	r1, r5
 800897c:	4638      	mov	r0, r7
 800897e:	f7ff ff6b 	bl	8008858 <__ssputs_r>
 8008982:	3001      	adds	r0, #1
 8008984:	f000 80a7 	beq.w	8008ad6 <_svfiprintf_r+0x1c6>
 8008988:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800898a:	445a      	add	r2, fp
 800898c:	9209      	str	r2, [sp, #36]	@ 0x24
 800898e:	f89a 3000 	ldrb.w	r3, [sl]
 8008992:	2b00      	cmp	r3, #0
 8008994:	f000 809f 	beq.w	8008ad6 <_svfiprintf_r+0x1c6>
 8008998:	2300      	movs	r3, #0
 800899a:	f04f 32ff 	mov.w	r2, #4294967295
 800899e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089a2:	f10a 0a01 	add.w	sl, sl, #1
 80089a6:	9304      	str	r3, [sp, #16]
 80089a8:	9307      	str	r3, [sp, #28]
 80089aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80089b0:	4654      	mov	r4, sl
 80089b2:	2205      	movs	r2, #5
 80089b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b8:	484e      	ldr	r0, [pc, #312]	@ (8008af4 <_svfiprintf_r+0x1e4>)
 80089ba:	f7f7 fc19 	bl	80001f0 <memchr>
 80089be:	9a04      	ldr	r2, [sp, #16]
 80089c0:	b9d8      	cbnz	r0, 80089fa <_svfiprintf_r+0xea>
 80089c2:	06d0      	lsls	r0, r2, #27
 80089c4:	bf44      	itt	mi
 80089c6:	2320      	movmi	r3, #32
 80089c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089cc:	0711      	lsls	r1, r2, #28
 80089ce:	bf44      	itt	mi
 80089d0:	232b      	movmi	r3, #43	@ 0x2b
 80089d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089d6:	f89a 3000 	ldrb.w	r3, [sl]
 80089da:	2b2a      	cmp	r3, #42	@ 0x2a
 80089dc:	d015      	beq.n	8008a0a <_svfiprintf_r+0xfa>
 80089de:	9a07      	ldr	r2, [sp, #28]
 80089e0:	4654      	mov	r4, sl
 80089e2:	2000      	movs	r0, #0
 80089e4:	f04f 0c0a 	mov.w	ip, #10
 80089e8:	4621      	mov	r1, r4
 80089ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ee:	3b30      	subs	r3, #48	@ 0x30
 80089f0:	2b09      	cmp	r3, #9
 80089f2:	d94b      	bls.n	8008a8c <_svfiprintf_r+0x17c>
 80089f4:	b1b0      	cbz	r0, 8008a24 <_svfiprintf_r+0x114>
 80089f6:	9207      	str	r2, [sp, #28]
 80089f8:	e014      	b.n	8008a24 <_svfiprintf_r+0x114>
 80089fa:	eba0 0308 	sub.w	r3, r0, r8
 80089fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008a02:	4313      	orrs	r3, r2
 8008a04:	9304      	str	r3, [sp, #16]
 8008a06:	46a2      	mov	sl, r4
 8008a08:	e7d2      	b.n	80089b0 <_svfiprintf_r+0xa0>
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	1d19      	adds	r1, r3, #4
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	9103      	str	r1, [sp, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	bfbb      	ittet	lt
 8008a16:	425b      	neglt	r3, r3
 8008a18:	f042 0202 	orrlt.w	r2, r2, #2
 8008a1c:	9307      	strge	r3, [sp, #28]
 8008a1e:	9307      	strlt	r3, [sp, #28]
 8008a20:	bfb8      	it	lt
 8008a22:	9204      	strlt	r2, [sp, #16]
 8008a24:	7823      	ldrb	r3, [r4, #0]
 8008a26:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a28:	d10a      	bne.n	8008a40 <_svfiprintf_r+0x130>
 8008a2a:	7863      	ldrb	r3, [r4, #1]
 8008a2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a2e:	d132      	bne.n	8008a96 <_svfiprintf_r+0x186>
 8008a30:	9b03      	ldr	r3, [sp, #12]
 8008a32:	1d1a      	adds	r2, r3, #4
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	9203      	str	r2, [sp, #12]
 8008a38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a3c:	3402      	adds	r4, #2
 8008a3e:	9305      	str	r3, [sp, #20]
 8008a40:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b04 <_svfiprintf_r+0x1f4>
 8008a44:	7821      	ldrb	r1, [r4, #0]
 8008a46:	2203      	movs	r2, #3
 8008a48:	4650      	mov	r0, sl
 8008a4a:	f7f7 fbd1 	bl	80001f0 <memchr>
 8008a4e:	b138      	cbz	r0, 8008a60 <_svfiprintf_r+0x150>
 8008a50:	9b04      	ldr	r3, [sp, #16]
 8008a52:	eba0 000a 	sub.w	r0, r0, sl
 8008a56:	2240      	movs	r2, #64	@ 0x40
 8008a58:	4082      	lsls	r2, r0
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	3401      	adds	r4, #1
 8008a5e:	9304      	str	r3, [sp, #16]
 8008a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a64:	4824      	ldr	r0, [pc, #144]	@ (8008af8 <_svfiprintf_r+0x1e8>)
 8008a66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a6a:	2206      	movs	r2, #6
 8008a6c:	f7f7 fbc0 	bl	80001f0 <memchr>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d036      	beq.n	8008ae2 <_svfiprintf_r+0x1d2>
 8008a74:	4b21      	ldr	r3, [pc, #132]	@ (8008afc <_svfiprintf_r+0x1ec>)
 8008a76:	bb1b      	cbnz	r3, 8008ac0 <_svfiprintf_r+0x1b0>
 8008a78:	9b03      	ldr	r3, [sp, #12]
 8008a7a:	3307      	adds	r3, #7
 8008a7c:	f023 0307 	bic.w	r3, r3, #7
 8008a80:	3308      	adds	r3, #8
 8008a82:	9303      	str	r3, [sp, #12]
 8008a84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a86:	4433      	add	r3, r6
 8008a88:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a8a:	e76a      	b.n	8008962 <_svfiprintf_r+0x52>
 8008a8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a90:	460c      	mov	r4, r1
 8008a92:	2001      	movs	r0, #1
 8008a94:	e7a8      	b.n	80089e8 <_svfiprintf_r+0xd8>
 8008a96:	2300      	movs	r3, #0
 8008a98:	3401      	adds	r4, #1
 8008a9a:	9305      	str	r3, [sp, #20]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	f04f 0c0a 	mov.w	ip, #10
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008aa8:	3a30      	subs	r2, #48	@ 0x30
 8008aaa:	2a09      	cmp	r2, #9
 8008aac:	d903      	bls.n	8008ab6 <_svfiprintf_r+0x1a6>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0c6      	beq.n	8008a40 <_svfiprintf_r+0x130>
 8008ab2:	9105      	str	r1, [sp, #20]
 8008ab4:	e7c4      	b.n	8008a40 <_svfiprintf_r+0x130>
 8008ab6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008aba:	4604      	mov	r4, r0
 8008abc:	2301      	movs	r3, #1
 8008abe:	e7f0      	b.n	8008aa2 <_svfiprintf_r+0x192>
 8008ac0:	ab03      	add	r3, sp, #12
 8008ac2:	9300      	str	r3, [sp, #0]
 8008ac4:	462a      	mov	r2, r5
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b00 <_svfiprintf_r+0x1f0>)
 8008ac8:	a904      	add	r1, sp, #16
 8008aca:	4638      	mov	r0, r7
 8008acc:	f3af 8000 	nop.w
 8008ad0:	1c42      	adds	r2, r0, #1
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	d1d6      	bne.n	8008a84 <_svfiprintf_r+0x174>
 8008ad6:	89ab      	ldrh	r3, [r5, #12]
 8008ad8:	065b      	lsls	r3, r3, #25
 8008ada:	f53f af2d 	bmi.w	8008938 <_svfiprintf_r+0x28>
 8008ade:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ae0:	e72c      	b.n	800893c <_svfiprintf_r+0x2c>
 8008ae2:	ab03      	add	r3, sp, #12
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	462a      	mov	r2, r5
 8008ae8:	4b05      	ldr	r3, [pc, #20]	@ (8008b00 <_svfiprintf_r+0x1f0>)
 8008aea:	a904      	add	r1, sp, #16
 8008aec:	4638      	mov	r0, r7
 8008aee:	f000 f9bb 	bl	8008e68 <_printf_i>
 8008af2:	e7ed      	b.n	8008ad0 <_svfiprintf_r+0x1c0>
 8008af4:	08009770 	.word	0x08009770
 8008af8:	0800977a 	.word	0x0800977a
 8008afc:	00000000 	.word	0x00000000
 8008b00:	08008859 	.word	0x08008859
 8008b04:	08009776 	.word	0x08009776

08008b08 <__sfputc_r>:
 8008b08:	6893      	ldr	r3, [r2, #8]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	b410      	push	{r4}
 8008b10:	6093      	str	r3, [r2, #8]
 8008b12:	da08      	bge.n	8008b26 <__sfputc_r+0x1e>
 8008b14:	6994      	ldr	r4, [r2, #24]
 8008b16:	42a3      	cmp	r3, r4
 8008b18:	db01      	blt.n	8008b1e <__sfputc_r+0x16>
 8008b1a:	290a      	cmp	r1, #10
 8008b1c:	d103      	bne.n	8008b26 <__sfputc_r+0x1e>
 8008b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b22:	f000 bb6d 	b.w	8009200 <__swbuf_r>
 8008b26:	6813      	ldr	r3, [r2, #0]
 8008b28:	1c58      	adds	r0, r3, #1
 8008b2a:	6010      	str	r0, [r2, #0]
 8008b2c:	7019      	strb	r1, [r3, #0]
 8008b2e:	4608      	mov	r0, r1
 8008b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b34:	4770      	bx	lr

08008b36 <__sfputs_r>:
 8008b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b38:	4606      	mov	r6, r0
 8008b3a:	460f      	mov	r7, r1
 8008b3c:	4614      	mov	r4, r2
 8008b3e:	18d5      	adds	r5, r2, r3
 8008b40:	42ac      	cmp	r4, r5
 8008b42:	d101      	bne.n	8008b48 <__sfputs_r+0x12>
 8008b44:	2000      	movs	r0, #0
 8008b46:	e007      	b.n	8008b58 <__sfputs_r+0x22>
 8008b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b4c:	463a      	mov	r2, r7
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f7ff ffda 	bl	8008b08 <__sfputc_r>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d1f3      	bne.n	8008b40 <__sfputs_r+0xa>
 8008b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b5c <_vfiprintf_r>:
 8008b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b60:	460d      	mov	r5, r1
 8008b62:	b09d      	sub	sp, #116	@ 0x74
 8008b64:	4614      	mov	r4, r2
 8008b66:	4698      	mov	r8, r3
 8008b68:	4606      	mov	r6, r0
 8008b6a:	b118      	cbz	r0, 8008b74 <_vfiprintf_r+0x18>
 8008b6c:	6a03      	ldr	r3, [r0, #32]
 8008b6e:	b90b      	cbnz	r3, 8008b74 <_vfiprintf_r+0x18>
 8008b70:	f7ff fbee 	bl	8008350 <__sinit>
 8008b74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b76:	07d9      	lsls	r1, r3, #31
 8008b78:	d405      	bmi.n	8008b86 <_vfiprintf_r+0x2a>
 8008b7a:	89ab      	ldrh	r3, [r5, #12]
 8008b7c:	059a      	lsls	r2, r3, #22
 8008b7e:	d402      	bmi.n	8008b86 <_vfiprintf_r+0x2a>
 8008b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b82:	f7ff fd60 	bl	8008646 <__retarget_lock_acquire_recursive>
 8008b86:	89ab      	ldrh	r3, [r5, #12]
 8008b88:	071b      	lsls	r3, r3, #28
 8008b8a:	d501      	bpl.n	8008b90 <_vfiprintf_r+0x34>
 8008b8c:	692b      	ldr	r3, [r5, #16]
 8008b8e:	b99b      	cbnz	r3, 8008bb8 <_vfiprintf_r+0x5c>
 8008b90:	4629      	mov	r1, r5
 8008b92:	4630      	mov	r0, r6
 8008b94:	f000 fb72 	bl	800927c <__swsetup_r>
 8008b98:	b170      	cbz	r0, 8008bb8 <_vfiprintf_r+0x5c>
 8008b9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b9c:	07dc      	lsls	r4, r3, #31
 8008b9e:	d504      	bpl.n	8008baa <_vfiprintf_r+0x4e>
 8008ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba4:	b01d      	add	sp, #116	@ 0x74
 8008ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008baa:	89ab      	ldrh	r3, [r5, #12]
 8008bac:	0598      	lsls	r0, r3, #22
 8008bae:	d4f7      	bmi.n	8008ba0 <_vfiprintf_r+0x44>
 8008bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bb2:	f7ff fd49 	bl	8008648 <__retarget_lock_release_recursive>
 8008bb6:	e7f3      	b.n	8008ba0 <_vfiprintf_r+0x44>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bbc:	2320      	movs	r3, #32
 8008bbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bc6:	2330      	movs	r3, #48	@ 0x30
 8008bc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d78 <_vfiprintf_r+0x21c>
 8008bcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bd0:	f04f 0901 	mov.w	r9, #1
 8008bd4:	4623      	mov	r3, r4
 8008bd6:	469a      	mov	sl, r3
 8008bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bdc:	b10a      	cbz	r2, 8008be2 <_vfiprintf_r+0x86>
 8008bde:	2a25      	cmp	r2, #37	@ 0x25
 8008be0:	d1f9      	bne.n	8008bd6 <_vfiprintf_r+0x7a>
 8008be2:	ebba 0b04 	subs.w	fp, sl, r4
 8008be6:	d00b      	beq.n	8008c00 <_vfiprintf_r+0xa4>
 8008be8:	465b      	mov	r3, fp
 8008bea:	4622      	mov	r2, r4
 8008bec:	4629      	mov	r1, r5
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff ffa1 	bl	8008b36 <__sfputs_r>
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	f000 80a7 	beq.w	8008d48 <_vfiprintf_r+0x1ec>
 8008bfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008bfc:	445a      	add	r2, fp
 8008bfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c00:	f89a 3000 	ldrb.w	r3, [sl]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 809f 	beq.w	8008d48 <_vfiprintf_r+0x1ec>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c14:	f10a 0a01 	add.w	sl, sl, #1
 8008c18:	9304      	str	r3, [sp, #16]
 8008c1a:	9307      	str	r3, [sp, #28]
 8008c1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c20:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c22:	4654      	mov	r4, sl
 8008c24:	2205      	movs	r2, #5
 8008c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c2a:	4853      	ldr	r0, [pc, #332]	@ (8008d78 <_vfiprintf_r+0x21c>)
 8008c2c:	f7f7 fae0 	bl	80001f0 <memchr>
 8008c30:	9a04      	ldr	r2, [sp, #16]
 8008c32:	b9d8      	cbnz	r0, 8008c6c <_vfiprintf_r+0x110>
 8008c34:	06d1      	lsls	r1, r2, #27
 8008c36:	bf44      	itt	mi
 8008c38:	2320      	movmi	r3, #32
 8008c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c3e:	0713      	lsls	r3, r2, #28
 8008c40:	bf44      	itt	mi
 8008c42:	232b      	movmi	r3, #43	@ 0x2b
 8008c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c48:	f89a 3000 	ldrb.w	r3, [sl]
 8008c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c4e:	d015      	beq.n	8008c7c <_vfiprintf_r+0x120>
 8008c50:	9a07      	ldr	r2, [sp, #28]
 8008c52:	4654      	mov	r4, sl
 8008c54:	2000      	movs	r0, #0
 8008c56:	f04f 0c0a 	mov.w	ip, #10
 8008c5a:	4621      	mov	r1, r4
 8008c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c60:	3b30      	subs	r3, #48	@ 0x30
 8008c62:	2b09      	cmp	r3, #9
 8008c64:	d94b      	bls.n	8008cfe <_vfiprintf_r+0x1a2>
 8008c66:	b1b0      	cbz	r0, 8008c96 <_vfiprintf_r+0x13a>
 8008c68:	9207      	str	r2, [sp, #28]
 8008c6a:	e014      	b.n	8008c96 <_vfiprintf_r+0x13a>
 8008c6c:	eba0 0308 	sub.w	r3, r0, r8
 8008c70:	fa09 f303 	lsl.w	r3, r9, r3
 8008c74:	4313      	orrs	r3, r2
 8008c76:	9304      	str	r3, [sp, #16]
 8008c78:	46a2      	mov	sl, r4
 8008c7a:	e7d2      	b.n	8008c22 <_vfiprintf_r+0xc6>
 8008c7c:	9b03      	ldr	r3, [sp, #12]
 8008c7e:	1d19      	adds	r1, r3, #4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	9103      	str	r1, [sp, #12]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	bfbb      	ittet	lt
 8008c88:	425b      	neglt	r3, r3
 8008c8a:	f042 0202 	orrlt.w	r2, r2, #2
 8008c8e:	9307      	strge	r3, [sp, #28]
 8008c90:	9307      	strlt	r3, [sp, #28]
 8008c92:	bfb8      	it	lt
 8008c94:	9204      	strlt	r2, [sp, #16]
 8008c96:	7823      	ldrb	r3, [r4, #0]
 8008c98:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c9a:	d10a      	bne.n	8008cb2 <_vfiprintf_r+0x156>
 8008c9c:	7863      	ldrb	r3, [r4, #1]
 8008c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ca0:	d132      	bne.n	8008d08 <_vfiprintf_r+0x1ac>
 8008ca2:	9b03      	ldr	r3, [sp, #12]
 8008ca4:	1d1a      	adds	r2, r3, #4
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	9203      	str	r2, [sp, #12]
 8008caa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cae:	3402      	adds	r4, #2
 8008cb0:	9305      	str	r3, [sp, #20]
 8008cb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d88 <_vfiprintf_r+0x22c>
 8008cb6:	7821      	ldrb	r1, [r4, #0]
 8008cb8:	2203      	movs	r2, #3
 8008cba:	4650      	mov	r0, sl
 8008cbc:	f7f7 fa98 	bl	80001f0 <memchr>
 8008cc0:	b138      	cbz	r0, 8008cd2 <_vfiprintf_r+0x176>
 8008cc2:	9b04      	ldr	r3, [sp, #16]
 8008cc4:	eba0 000a 	sub.w	r0, r0, sl
 8008cc8:	2240      	movs	r2, #64	@ 0x40
 8008cca:	4082      	lsls	r2, r0
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	3401      	adds	r4, #1
 8008cd0:	9304      	str	r3, [sp, #16]
 8008cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd6:	4829      	ldr	r0, [pc, #164]	@ (8008d7c <_vfiprintf_r+0x220>)
 8008cd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008cdc:	2206      	movs	r2, #6
 8008cde:	f7f7 fa87 	bl	80001f0 <memchr>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d03f      	beq.n	8008d66 <_vfiprintf_r+0x20a>
 8008ce6:	4b26      	ldr	r3, [pc, #152]	@ (8008d80 <_vfiprintf_r+0x224>)
 8008ce8:	bb1b      	cbnz	r3, 8008d32 <_vfiprintf_r+0x1d6>
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	3307      	adds	r3, #7
 8008cee:	f023 0307 	bic.w	r3, r3, #7
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	9303      	str	r3, [sp, #12]
 8008cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cf8:	443b      	add	r3, r7
 8008cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cfc:	e76a      	b.n	8008bd4 <_vfiprintf_r+0x78>
 8008cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d02:	460c      	mov	r4, r1
 8008d04:	2001      	movs	r0, #1
 8008d06:	e7a8      	b.n	8008c5a <_vfiprintf_r+0xfe>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	3401      	adds	r4, #1
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	f04f 0c0a 	mov.w	ip, #10
 8008d14:	4620      	mov	r0, r4
 8008d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d1a:	3a30      	subs	r2, #48	@ 0x30
 8008d1c:	2a09      	cmp	r2, #9
 8008d1e:	d903      	bls.n	8008d28 <_vfiprintf_r+0x1cc>
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0c6      	beq.n	8008cb2 <_vfiprintf_r+0x156>
 8008d24:	9105      	str	r1, [sp, #20]
 8008d26:	e7c4      	b.n	8008cb2 <_vfiprintf_r+0x156>
 8008d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	2301      	movs	r3, #1
 8008d30:	e7f0      	b.n	8008d14 <_vfiprintf_r+0x1b8>
 8008d32:	ab03      	add	r3, sp, #12
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	462a      	mov	r2, r5
 8008d38:	4b12      	ldr	r3, [pc, #72]	@ (8008d84 <_vfiprintf_r+0x228>)
 8008d3a:	a904      	add	r1, sp, #16
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f3af 8000 	nop.w
 8008d42:	4607      	mov	r7, r0
 8008d44:	1c78      	adds	r0, r7, #1
 8008d46:	d1d6      	bne.n	8008cf6 <_vfiprintf_r+0x19a>
 8008d48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d4a:	07d9      	lsls	r1, r3, #31
 8008d4c:	d405      	bmi.n	8008d5a <_vfiprintf_r+0x1fe>
 8008d4e:	89ab      	ldrh	r3, [r5, #12]
 8008d50:	059a      	lsls	r2, r3, #22
 8008d52:	d402      	bmi.n	8008d5a <_vfiprintf_r+0x1fe>
 8008d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d56:	f7ff fc77 	bl	8008648 <__retarget_lock_release_recursive>
 8008d5a:	89ab      	ldrh	r3, [r5, #12]
 8008d5c:	065b      	lsls	r3, r3, #25
 8008d5e:	f53f af1f 	bmi.w	8008ba0 <_vfiprintf_r+0x44>
 8008d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d64:	e71e      	b.n	8008ba4 <_vfiprintf_r+0x48>
 8008d66:	ab03      	add	r3, sp, #12
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	462a      	mov	r2, r5
 8008d6c:	4b05      	ldr	r3, [pc, #20]	@ (8008d84 <_vfiprintf_r+0x228>)
 8008d6e:	a904      	add	r1, sp, #16
 8008d70:	4630      	mov	r0, r6
 8008d72:	f000 f879 	bl	8008e68 <_printf_i>
 8008d76:	e7e4      	b.n	8008d42 <_vfiprintf_r+0x1e6>
 8008d78:	08009770 	.word	0x08009770
 8008d7c:	0800977a 	.word	0x0800977a
 8008d80:	00000000 	.word	0x00000000
 8008d84:	08008b37 	.word	0x08008b37
 8008d88:	08009776 	.word	0x08009776

08008d8c <_printf_common>:
 8008d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d90:	4616      	mov	r6, r2
 8008d92:	4698      	mov	r8, r3
 8008d94:	688a      	ldr	r2, [r1, #8]
 8008d96:	690b      	ldr	r3, [r1, #16]
 8008d98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	bfb8      	it	lt
 8008da0:	4613      	movlt	r3, r2
 8008da2:	6033      	str	r3, [r6, #0]
 8008da4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008da8:	4607      	mov	r7, r0
 8008daa:	460c      	mov	r4, r1
 8008dac:	b10a      	cbz	r2, 8008db2 <_printf_common+0x26>
 8008dae:	3301      	adds	r3, #1
 8008db0:	6033      	str	r3, [r6, #0]
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	0699      	lsls	r1, r3, #26
 8008db6:	bf42      	ittt	mi
 8008db8:	6833      	ldrmi	r3, [r6, #0]
 8008dba:	3302      	addmi	r3, #2
 8008dbc:	6033      	strmi	r3, [r6, #0]
 8008dbe:	6825      	ldr	r5, [r4, #0]
 8008dc0:	f015 0506 	ands.w	r5, r5, #6
 8008dc4:	d106      	bne.n	8008dd4 <_printf_common+0x48>
 8008dc6:	f104 0a19 	add.w	sl, r4, #25
 8008dca:	68e3      	ldr	r3, [r4, #12]
 8008dcc:	6832      	ldr	r2, [r6, #0]
 8008dce:	1a9b      	subs	r3, r3, r2
 8008dd0:	42ab      	cmp	r3, r5
 8008dd2:	dc26      	bgt.n	8008e22 <_printf_common+0x96>
 8008dd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008dd8:	6822      	ldr	r2, [r4, #0]
 8008dda:	3b00      	subs	r3, #0
 8008ddc:	bf18      	it	ne
 8008dde:	2301      	movne	r3, #1
 8008de0:	0692      	lsls	r2, r2, #26
 8008de2:	d42b      	bmi.n	8008e3c <_printf_common+0xb0>
 8008de4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008de8:	4641      	mov	r1, r8
 8008dea:	4638      	mov	r0, r7
 8008dec:	47c8      	blx	r9
 8008dee:	3001      	adds	r0, #1
 8008df0:	d01e      	beq.n	8008e30 <_printf_common+0xa4>
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	6922      	ldr	r2, [r4, #16]
 8008df6:	f003 0306 	and.w	r3, r3, #6
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	bf02      	ittt	eq
 8008dfe:	68e5      	ldreq	r5, [r4, #12]
 8008e00:	6833      	ldreq	r3, [r6, #0]
 8008e02:	1aed      	subeq	r5, r5, r3
 8008e04:	68a3      	ldr	r3, [r4, #8]
 8008e06:	bf0c      	ite	eq
 8008e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e0c:	2500      	movne	r5, #0
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	bfc4      	itt	gt
 8008e12:	1a9b      	subgt	r3, r3, r2
 8008e14:	18ed      	addgt	r5, r5, r3
 8008e16:	2600      	movs	r6, #0
 8008e18:	341a      	adds	r4, #26
 8008e1a:	42b5      	cmp	r5, r6
 8008e1c:	d11a      	bne.n	8008e54 <_printf_common+0xc8>
 8008e1e:	2000      	movs	r0, #0
 8008e20:	e008      	b.n	8008e34 <_printf_common+0xa8>
 8008e22:	2301      	movs	r3, #1
 8008e24:	4652      	mov	r2, sl
 8008e26:	4641      	mov	r1, r8
 8008e28:	4638      	mov	r0, r7
 8008e2a:	47c8      	blx	r9
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	d103      	bne.n	8008e38 <_printf_common+0xac>
 8008e30:	f04f 30ff 	mov.w	r0, #4294967295
 8008e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e38:	3501      	adds	r5, #1
 8008e3a:	e7c6      	b.n	8008dca <_printf_common+0x3e>
 8008e3c:	18e1      	adds	r1, r4, r3
 8008e3e:	1c5a      	adds	r2, r3, #1
 8008e40:	2030      	movs	r0, #48	@ 0x30
 8008e42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e46:	4422      	add	r2, r4
 8008e48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e50:	3302      	adds	r3, #2
 8008e52:	e7c7      	b.n	8008de4 <_printf_common+0x58>
 8008e54:	2301      	movs	r3, #1
 8008e56:	4622      	mov	r2, r4
 8008e58:	4641      	mov	r1, r8
 8008e5a:	4638      	mov	r0, r7
 8008e5c:	47c8      	blx	r9
 8008e5e:	3001      	adds	r0, #1
 8008e60:	d0e6      	beq.n	8008e30 <_printf_common+0xa4>
 8008e62:	3601      	adds	r6, #1
 8008e64:	e7d9      	b.n	8008e1a <_printf_common+0x8e>
	...

08008e68 <_printf_i>:
 8008e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e6c:	7e0f      	ldrb	r7, [r1, #24]
 8008e6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e70:	2f78      	cmp	r7, #120	@ 0x78
 8008e72:	4691      	mov	r9, r2
 8008e74:	4680      	mov	r8, r0
 8008e76:	460c      	mov	r4, r1
 8008e78:	469a      	mov	sl, r3
 8008e7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e7e:	d807      	bhi.n	8008e90 <_printf_i+0x28>
 8008e80:	2f62      	cmp	r7, #98	@ 0x62
 8008e82:	d80a      	bhi.n	8008e9a <_printf_i+0x32>
 8008e84:	2f00      	cmp	r7, #0
 8008e86:	f000 80d2 	beq.w	800902e <_printf_i+0x1c6>
 8008e8a:	2f58      	cmp	r7, #88	@ 0x58
 8008e8c:	f000 80b9 	beq.w	8009002 <_printf_i+0x19a>
 8008e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e98:	e03a      	b.n	8008f10 <_printf_i+0xa8>
 8008e9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e9e:	2b15      	cmp	r3, #21
 8008ea0:	d8f6      	bhi.n	8008e90 <_printf_i+0x28>
 8008ea2:	a101      	add	r1, pc, #4	@ (adr r1, 8008ea8 <_printf_i+0x40>)
 8008ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ea8:	08008f01 	.word	0x08008f01
 8008eac:	08008f15 	.word	0x08008f15
 8008eb0:	08008e91 	.word	0x08008e91
 8008eb4:	08008e91 	.word	0x08008e91
 8008eb8:	08008e91 	.word	0x08008e91
 8008ebc:	08008e91 	.word	0x08008e91
 8008ec0:	08008f15 	.word	0x08008f15
 8008ec4:	08008e91 	.word	0x08008e91
 8008ec8:	08008e91 	.word	0x08008e91
 8008ecc:	08008e91 	.word	0x08008e91
 8008ed0:	08008e91 	.word	0x08008e91
 8008ed4:	08009015 	.word	0x08009015
 8008ed8:	08008f3f 	.word	0x08008f3f
 8008edc:	08008fcf 	.word	0x08008fcf
 8008ee0:	08008e91 	.word	0x08008e91
 8008ee4:	08008e91 	.word	0x08008e91
 8008ee8:	08009037 	.word	0x08009037
 8008eec:	08008e91 	.word	0x08008e91
 8008ef0:	08008f3f 	.word	0x08008f3f
 8008ef4:	08008e91 	.word	0x08008e91
 8008ef8:	08008e91 	.word	0x08008e91
 8008efc:	08008fd7 	.word	0x08008fd7
 8008f00:	6833      	ldr	r3, [r6, #0]
 8008f02:	1d1a      	adds	r2, r3, #4
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6032      	str	r2, [r6, #0]
 8008f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f10:	2301      	movs	r3, #1
 8008f12:	e09d      	b.n	8009050 <_printf_i+0x1e8>
 8008f14:	6833      	ldr	r3, [r6, #0]
 8008f16:	6820      	ldr	r0, [r4, #0]
 8008f18:	1d19      	adds	r1, r3, #4
 8008f1a:	6031      	str	r1, [r6, #0]
 8008f1c:	0606      	lsls	r6, r0, #24
 8008f1e:	d501      	bpl.n	8008f24 <_printf_i+0xbc>
 8008f20:	681d      	ldr	r5, [r3, #0]
 8008f22:	e003      	b.n	8008f2c <_printf_i+0xc4>
 8008f24:	0645      	lsls	r5, r0, #25
 8008f26:	d5fb      	bpl.n	8008f20 <_printf_i+0xb8>
 8008f28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f2c:	2d00      	cmp	r5, #0
 8008f2e:	da03      	bge.n	8008f38 <_printf_i+0xd0>
 8008f30:	232d      	movs	r3, #45	@ 0x2d
 8008f32:	426d      	negs	r5, r5
 8008f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f38:	4859      	ldr	r0, [pc, #356]	@ (80090a0 <_printf_i+0x238>)
 8008f3a:	230a      	movs	r3, #10
 8008f3c:	e011      	b.n	8008f62 <_printf_i+0xfa>
 8008f3e:	6821      	ldr	r1, [r4, #0]
 8008f40:	6833      	ldr	r3, [r6, #0]
 8008f42:	0608      	lsls	r0, r1, #24
 8008f44:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f48:	d402      	bmi.n	8008f50 <_printf_i+0xe8>
 8008f4a:	0649      	lsls	r1, r1, #25
 8008f4c:	bf48      	it	mi
 8008f4e:	b2ad      	uxthmi	r5, r5
 8008f50:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f52:	4853      	ldr	r0, [pc, #332]	@ (80090a0 <_printf_i+0x238>)
 8008f54:	6033      	str	r3, [r6, #0]
 8008f56:	bf14      	ite	ne
 8008f58:	230a      	movne	r3, #10
 8008f5a:	2308      	moveq	r3, #8
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f62:	6866      	ldr	r6, [r4, #4]
 8008f64:	60a6      	str	r6, [r4, #8]
 8008f66:	2e00      	cmp	r6, #0
 8008f68:	bfa2      	ittt	ge
 8008f6a:	6821      	ldrge	r1, [r4, #0]
 8008f6c:	f021 0104 	bicge.w	r1, r1, #4
 8008f70:	6021      	strge	r1, [r4, #0]
 8008f72:	b90d      	cbnz	r5, 8008f78 <_printf_i+0x110>
 8008f74:	2e00      	cmp	r6, #0
 8008f76:	d04b      	beq.n	8009010 <_printf_i+0x1a8>
 8008f78:	4616      	mov	r6, r2
 8008f7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f7e:	fb03 5711 	mls	r7, r3, r1, r5
 8008f82:	5dc7      	ldrb	r7, [r0, r7]
 8008f84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f88:	462f      	mov	r7, r5
 8008f8a:	42bb      	cmp	r3, r7
 8008f8c:	460d      	mov	r5, r1
 8008f8e:	d9f4      	bls.n	8008f7a <_printf_i+0x112>
 8008f90:	2b08      	cmp	r3, #8
 8008f92:	d10b      	bne.n	8008fac <_printf_i+0x144>
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	07df      	lsls	r7, r3, #31
 8008f98:	d508      	bpl.n	8008fac <_printf_i+0x144>
 8008f9a:	6923      	ldr	r3, [r4, #16]
 8008f9c:	6861      	ldr	r1, [r4, #4]
 8008f9e:	4299      	cmp	r1, r3
 8008fa0:	bfde      	ittt	le
 8008fa2:	2330      	movle	r3, #48	@ 0x30
 8008fa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fac:	1b92      	subs	r2, r2, r6
 8008fae:	6122      	str	r2, [r4, #16]
 8008fb0:	f8cd a000 	str.w	sl, [sp]
 8008fb4:	464b      	mov	r3, r9
 8008fb6:	aa03      	add	r2, sp, #12
 8008fb8:	4621      	mov	r1, r4
 8008fba:	4640      	mov	r0, r8
 8008fbc:	f7ff fee6 	bl	8008d8c <_printf_common>
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d14a      	bne.n	800905a <_printf_i+0x1f2>
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	b004      	add	sp, #16
 8008fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	f043 0320 	orr.w	r3, r3, #32
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	4833      	ldr	r0, [pc, #204]	@ (80090a4 <_printf_i+0x23c>)
 8008fd8:	2778      	movs	r7, #120	@ 0x78
 8008fda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	6831      	ldr	r1, [r6, #0]
 8008fe2:	061f      	lsls	r7, r3, #24
 8008fe4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008fe8:	d402      	bmi.n	8008ff0 <_printf_i+0x188>
 8008fea:	065f      	lsls	r7, r3, #25
 8008fec:	bf48      	it	mi
 8008fee:	b2ad      	uxthmi	r5, r5
 8008ff0:	6031      	str	r1, [r6, #0]
 8008ff2:	07d9      	lsls	r1, r3, #31
 8008ff4:	bf44      	itt	mi
 8008ff6:	f043 0320 	orrmi.w	r3, r3, #32
 8008ffa:	6023      	strmi	r3, [r4, #0]
 8008ffc:	b11d      	cbz	r5, 8009006 <_printf_i+0x19e>
 8008ffe:	2310      	movs	r3, #16
 8009000:	e7ac      	b.n	8008f5c <_printf_i+0xf4>
 8009002:	4827      	ldr	r0, [pc, #156]	@ (80090a0 <_printf_i+0x238>)
 8009004:	e7e9      	b.n	8008fda <_printf_i+0x172>
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	f023 0320 	bic.w	r3, r3, #32
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	e7f6      	b.n	8008ffe <_printf_i+0x196>
 8009010:	4616      	mov	r6, r2
 8009012:	e7bd      	b.n	8008f90 <_printf_i+0x128>
 8009014:	6833      	ldr	r3, [r6, #0]
 8009016:	6825      	ldr	r5, [r4, #0]
 8009018:	6961      	ldr	r1, [r4, #20]
 800901a:	1d18      	adds	r0, r3, #4
 800901c:	6030      	str	r0, [r6, #0]
 800901e:	062e      	lsls	r6, r5, #24
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	d501      	bpl.n	8009028 <_printf_i+0x1c0>
 8009024:	6019      	str	r1, [r3, #0]
 8009026:	e002      	b.n	800902e <_printf_i+0x1c6>
 8009028:	0668      	lsls	r0, r5, #25
 800902a:	d5fb      	bpl.n	8009024 <_printf_i+0x1bc>
 800902c:	8019      	strh	r1, [r3, #0]
 800902e:	2300      	movs	r3, #0
 8009030:	6123      	str	r3, [r4, #16]
 8009032:	4616      	mov	r6, r2
 8009034:	e7bc      	b.n	8008fb0 <_printf_i+0x148>
 8009036:	6833      	ldr	r3, [r6, #0]
 8009038:	1d1a      	adds	r2, r3, #4
 800903a:	6032      	str	r2, [r6, #0]
 800903c:	681e      	ldr	r6, [r3, #0]
 800903e:	6862      	ldr	r2, [r4, #4]
 8009040:	2100      	movs	r1, #0
 8009042:	4630      	mov	r0, r6
 8009044:	f7f7 f8d4 	bl	80001f0 <memchr>
 8009048:	b108      	cbz	r0, 800904e <_printf_i+0x1e6>
 800904a:	1b80      	subs	r0, r0, r6
 800904c:	6060      	str	r0, [r4, #4]
 800904e:	6863      	ldr	r3, [r4, #4]
 8009050:	6123      	str	r3, [r4, #16]
 8009052:	2300      	movs	r3, #0
 8009054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009058:	e7aa      	b.n	8008fb0 <_printf_i+0x148>
 800905a:	6923      	ldr	r3, [r4, #16]
 800905c:	4632      	mov	r2, r6
 800905e:	4649      	mov	r1, r9
 8009060:	4640      	mov	r0, r8
 8009062:	47d0      	blx	sl
 8009064:	3001      	adds	r0, #1
 8009066:	d0ad      	beq.n	8008fc4 <_printf_i+0x15c>
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	079b      	lsls	r3, r3, #30
 800906c:	d413      	bmi.n	8009096 <_printf_i+0x22e>
 800906e:	68e0      	ldr	r0, [r4, #12]
 8009070:	9b03      	ldr	r3, [sp, #12]
 8009072:	4298      	cmp	r0, r3
 8009074:	bfb8      	it	lt
 8009076:	4618      	movlt	r0, r3
 8009078:	e7a6      	b.n	8008fc8 <_printf_i+0x160>
 800907a:	2301      	movs	r3, #1
 800907c:	4632      	mov	r2, r6
 800907e:	4649      	mov	r1, r9
 8009080:	4640      	mov	r0, r8
 8009082:	47d0      	blx	sl
 8009084:	3001      	adds	r0, #1
 8009086:	d09d      	beq.n	8008fc4 <_printf_i+0x15c>
 8009088:	3501      	adds	r5, #1
 800908a:	68e3      	ldr	r3, [r4, #12]
 800908c:	9903      	ldr	r1, [sp, #12]
 800908e:	1a5b      	subs	r3, r3, r1
 8009090:	42ab      	cmp	r3, r5
 8009092:	dcf2      	bgt.n	800907a <_printf_i+0x212>
 8009094:	e7eb      	b.n	800906e <_printf_i+0x206>
 8009096:	2500      	movs	r5, #0
 8009098:	f104 0619 	add.w	r6, r4, #25
 800909c:	e7f5      	b.n	800908a <_printf_i+0x222>
 800909e:	bf00      	nop
 80090a0:	08009781 	.word	0x08009781
 80090a4:	08009792 	.word	0x08009792

080090a8 <__sflush_r>:
 80090a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b0:	0716      	lsls	r6, r2, #28
 80090b2:	4605      	mov	r5, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	d454      	bmi.n	8009162 <__sflush_r+0xba>
 80090b8:	684b      	ldr	r3, [r1, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	dc02      	bgt.n	80090c4 <__sflush_r+0x1c>
 80090be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	dd48      	ble.n	8009156 <__sflush_r+0xae>
 80090c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090c6:	2e00      	cmp	r6, #0
 80090c8:	d045      	beq.n	8009156 <__sflush_r+0xae>
 80090ca:	2300      	movs	r3, #0
 80090cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090d0:	682f      	ldr	r7, [r5, #0]
 80090d2:	6a21      	ldr	r1, [r4, #32]
 80090d4:	602b      	str	r3, [r5, #0]
 80090d6:	d030      	beq.n	800913a <__sflush_r+0x92>
 80090d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	0759      	lsls	r1, r3, #29
 80090de:	d505      	bpl.n	80090ec <__sflush_r+0x44>
 80090e0:	6863      	ldr	r3, [r4, #4]
 80090e2:	1ad2      	subs	r2, r2, r3
 80090e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090e6:	b10b      	cbz	r3, 80090ec <__sflush_r+0x44>
 80090e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090ea:	1ad2      	subs	r2, r2, r3
 80090ec:	2300      	movs	r3, #0
 80090ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090f0:	6a21      	ldr	r1, [r4, #32]
 80090f2:	4628      	mov	r0, r5
 80090f4:	47b0      	blx	r6
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	d106      	bne.n	800910a <__sflush_r+0x62>
 80090fc:	6829      	ldr	r1, [r5, #0]
 80090fe:	291d      	cmp	r1, #29
 8009100:	d82b      	bhi.n	800915a <__sflush_r+0xb2>
 8009102:	4a2a      	ldr	r2, [pc, #168]	@ (80091ac <__sflush_r+0x104>)
 8009104:	410a      	asrs	r2, r1
 8009106:	07d6      	lsls	r6, r2, #31
 8009108:	d427      	bmi.n	800915a <__sflush_r+0xb2>
 800910a:	2200      	movs	r2, #0
 800910c:	6062      	str	r2, [r4, #4]
 800910e:	04d9      	lsls	r1, r3, #19
 8009110:	6922      	ldr	r2, [r4, #16]
 8009112:	6022      	str	r2, [r4, #0]
 8009114:	d504      	bpl.n	8009120 <__sflush_r+0x78>
 8009116:	1c42      	adds	r2, r0, #1
 8009118:	d101      	bne.n	800911e <__sflush_r+0x76>
 800911a:	682b      	ldr	r3, [r5, #0]
 800911c:	b903      	cbnz	r3, 8009120 <__sflush_r+0x78>
 800911e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009120:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009122:	602f      	str	r7, [r5, #0]
 8009124:	b1b9      	cbz	r1, 8009156 <__sflush_r+0xae>
 8009126:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800912a:	4299      	cmp	r1, r3
 800912c:	d002      	beq.n	8009134 <__sflush_r+0x8c>
 800912e:	4628      	mov	r0, r5
 8009130:	f7ff fa9a 	bl	8008668 <_free_r>
 8009134:	2300      	movs	r3, #0
 8009136:	6363      	str	r3, [r4, #52]	@ 0x34
 8009138:	e00d      	b.n	8009156 <__sflush_r+0xae>
 800913a:	2301      	movs	r3, #1
 800913c:	4628      	mov	r0, r5
 800913e:	47b0      	blx	r6
 8009140:	4602      	mov	r2, r0
 8009142:	1c50      	adds	r0, r2, #1
 8009144:	d1c9      	bne.n	80090da <__sflush_r+0x32>
 8009146:	682b      	ldr	r3, [r5, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d0c6      	beq.n	80090da <__sflush_r+0x32>
 800914c:	2b1d      	cmp	r3, #29
 800914e:	d001      	beq.n	8009154 <__sflush_r+0xac>
 8009150:	2b16      	cmp	r3, #22
 8009152:	d11e      	bne.n	8009192 <__sflush_r+0xea>
 8009154:	602f      	str	r7, [r5, #0]
 8009156:	2000      	movs	r0, #0
 8009158:	e022      	b.n	80091a0 <__sflush_r+0xf8>
 800915a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800915e:	b21b      	sxth	r3, r3
 8009160:	e01b      	b.n	800919a <__sflush_r+0xf2>
 8009162:	690f      	ldr	r7, [r1, #16]
 8009164:	2f00      	cmp	r7, #0
 8009166:	d0f6      	beq.n	8009156 <__sflush_r+0xae>
 8009168:	0793      	lsls	r3, r2, #30
 800916a:	680e      	ldr	r6, [r1, #0]
 800916c:	bf08      	it	eq
 800916e:	694b      	ldreq	r3, [r1, #20]
 8009170:	600f      	str	r7, [r1, #0]
 8009172:	bf18      	it	ne
 8009174:	2300      	movne	r3, #0
 8009176:	eba6 0807 	sub.w	r8, r6, r7
 800917a:	608b      	str	r3, [r1, #8]
 800917c:	f1b8 0f00 	cmp.w	r8, #0
 8009180:	dde9      	ble.n	8009156 <__sflush_r+0xae>
 8009182:	6a21      	ldr	r1, [r4, #32]
 8009184:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009186:	4643      	mov	r3, r8
 8009188:	463a      	mov	r2, r7
 800918a:	4628      	mov	r0, r5
 800918c:	47b0      	blx	r6
 800918e:	2800      	cmp	r0, #0
 8009190:	dc08      	bgt.n	80091a4 <__sflush_r+0xfc>
 8009192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	f04f 30ff 	mov.w	r0, #4294967295
 80091a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a4:	4407      	add	r7, r0
 80091a6:	eba8 0800 	sub.w	r8, r8, r0
 80091aa:	e7e7      	b.n	800917c <__sflush_r+0xd4>
 80091ac:	dfbffffe 	.word	0xdfbffffe

080091b0 <_fflush_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	690b      	ldr	r3, [r1, #16]
 80091b4:	4605      	mov	r5, r0
 80091b6:	460c      	mov	r4, r1
 80091b8:	b913      	cbnz	r3, 80091c0 <_fflush_r+0x10>
 80091ba:	2500      	movs	r5, #0
 80091bc:	4628      	mov	r0, r5
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	b118      	cbz	r0, 80091ca <_fflush_r+0x1a>
 80091c2:	6a03      	ldr	r3, [r0, #32]
 80091c4:	b90b      	cbnz	r3, 80091ca <_fflush_r+0x1a>
 80091c6:	f7ff f8c3 	bl	8008350 <__sinit>
 80091ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0f3      	beq.n	80091ba <_fflush_r+0xa>
 80091d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091d4:	07d0      	lsls	r0, r2, #31
 80091d6:	d404      	bmi.n	80091e2 <_fflush_r+0x32>
 80091d8:	0599      	lsls	r1, r3, #22
 80091da:	d402      	bmi.n	80091e2 <_fflush_r+0x32>
 80091dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091de:	f7ff fa32 	bl	8008646 <__retarget_lock_acquire_recursive>
 80091e2:	4628      	mov	r0, r5
 80091e4:	4621      	mov	r1, r4
 80091e6:	f7ff ff5f 	bl	80090a8 <__sflush_r>
 80091ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091ec:	07da      	lsls	r2, r3, #31
 80091ee:	4605      	mov	r5, r0
 80091f0:	d4e4      	bmi.n	80091bc <_fflush_r+0xc>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	059b      	lsls	r3, r3, #22
 80091f6:	d4e1      	bmi.n	80091bc <_fflush_r+0xc>
 80091f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091fa:	f7ff fa25 	bl	8008648 <__retarget_lock_release_recursive>
 80091fe:	e7dd      	b.n	80091bc <_fflush_r+0xc>

08009200 <__swbuf_r>:
 8009200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009202:	460e      	mov	r6, r1
 8009204:	4614      	mov	r4, r2
 8009206:	4605      	mov	r5, r0
 8009208:	b118      	cbz	r0, 8009212 <__swbuf_r+0x12>
 800920a:	6a03      	ldr	r3, [r0, #32]
 800920c:	b90b      	cbnz	r3, 8009212 <__swbuf_r+0x12>
 800920e:	f7ff f89f 	bl	8008350 <__sinit>
 8009212:	69a3      	ldr	r3, [r4, #24]
 8009214:	60a3      	str	r3, [r4, #8]
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	071a      	lsls	r2, r3, #28
 800921a:	d501      	bpl.n	8009220 <__swbuf_r+0x20>
 800921c:	6923      	ldr	r3, [r4, #16]
 800921e:	b943      	cbnz	r3, 8009232 <__swbuf_r+0x32>
 8009220:	4621      	mov	r1, r4
 8009222:	4628      	mov	r0, r5
 8009224:	f000 f82a 	bl	800927c <__swsetup_r>
 8009228:	b118      	cbz	r0, 8009232 <__swbuf_r+0x32>
 800922a:	f04f 37ff 	mov.w	r7, #4294967295
 800922e:	4638      	mov	r0, r7
 8009230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	6922      	ldr	r2, [r4, #16]
 8009236:	1a98      	subs	r0, r3, r2
 8009238:	6963      	ldr	r3, [r4, #20]
 800923a:	b2f6      	uxtb	r6, r6
 800923c:	4283      	cmp	r3, r0
 800923e:	4637      	mov	r7, r6
 8009240:	dc05      	bgt.n	800924e <__swbuf_r+0x4e>
 8009242:	4621      	mov	r1, r4
 8009244:	4628      	mov	r0, r5
 8009246:	f7ff ffb3 	bl	80091b0 <_fflush_r>
 800924a:	2800      	cmp	r0, #0
 800924c:	d1ed      	bne.n	800922a <__swbuf_r+0x2a>
 800924e:	68a3      	ldr	r3, [r4, #8]
 8009250:	3b01      	subs	r3, #1
 8009252:	60a3      	str	r3, [r4, #8]
 8009254:	6823      	ldr	r3, [r4, #0]
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	6022      	str	r2, [r4, #0]
 800925a:	701e      	strb	r6, [r3, #0]
 800925c:	6962      	ldr	r2, [r4, #20]
 800925e:	1c43      	adds	r3, r0, #1
 8009260:	429a      	cmp	r2, r3
 8009262:	d004      	beq.n	800926e <__swbuf_r+0x6e>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	07db      	lsls	r3, r3, #31
 8009268:	d5e1      	bpl.n	800922e <__swbuf_r+0x2e>
 800926a:	2e0a      	cmp	r6, #10
 800926c:	d1df      	bne.n	800922e <__swbuf_r+0x2e>
 800926e:	4621      	mov	r1, r4
 8009270:	4628      	mov	r0, r5
 8009272:	f7ff ff9d 	bl	80091b0 <_fflush_r>
 8009276:	2800      	cmp	r0, #0
 8009278:	d0d9      	beq.n	800922e <__swbuf_r+0x2e>
 800927a:	e7d6      	b.n	800922a <__swbuf_r+0x2a>

0800927c <__swsetup_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4b29      	ldr	r3, [pc, #164]	@ (8009324 <__swsetup_r+0xa8>)
 8009280:	4605      	mov	r5, r0
 8009282:	6818      	ldr	r0, [r3, #0]
 8009284:	460c      	mov	r4, r1
 8009286:	b118      	cbz	r0, 8009290 <__swsetup_r+0x14>
 8009288:	6a03      	ldr	r3, [r0, #32]
 800928a:	b90b      	cbnz	r3, 8009290 <__swsetup_r+0x14>
 800928c:	f7ff f860 	bl	8008350 <__sinit>
 8009290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009294:	0719      	lsls	r1, r3, #28
 8009296:	d422      	bmi.n	80092de <__swsetup_r+0x62>
 8009298:	06da      	lsls	r2, r3, #27
 800929a:	d407      	bmi.n	80092ac <__swsetup_r+0x30>
 800929c:	2209      	movs	r2, #9
 800929e:	602a      	str	r2, [r5, #0]
 80092a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092a4:	81a3      	strh	r3, [r4, #12]
 80092a6:	f04f 30ff 	mov.w	r0, #4294967295
 80092aa:	e033      	b.n	8009314 <__swsetup_r+0x98>
 80092ac:	0758      	lsls	r0, r3, #29
 80092ae:	d512      	bpl.n	80092d6 <__swsetup_r+0x5a>
 80092b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80092b2:	b141      	cbz	r1, 80092c6 <__swsetup_r+0x4a>
 80092b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092b8:	4299      	cmp	r1, r3
 80092ba:	d002      	beq.n	80092c2 <__swsetup_r+0x46>
 80092bc:	4628      	mov	r0, r5
 80092be:	f7ff f9d3 	bl	8008668 <_free_r>
 80092c2:	2300      	movs	r3, #0
 80092c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80092c6:	89a3      	ldrh	r3, [r4, #12]
 80092c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80092cc:	81a3      	strh	r3, [r4, #12]
 80092ce:	2300      	movs	r3, #0
 80092d0:	6063      	str	r3, [r4, #4]
 80092d2:	6923      	ldr	r3, [r4, #16]
 80092d4:	6023      	str	r3, [r4, #0]
 80092d6:	89a3      	ldrh	r3, [r4, #12]
 80092d8:	f043 0308 	orr.w	r3, r3, #8
 80092dc:	81a3      	strh	r3, [r4, #12]
 80092de:	6923      	ldr	r3, [r4, #16]
 80092e0:	b94b      	cbnz	r3, 80092f6 <__swsetup_r+0x7a>
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80092e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092ec:	d003      	beq.n	80092f6 <__swsetup_r+0x7a>
 80092ee:	4621      	mov	r1, r4
 80092f0:	4628      	mov	r0, r5
 80092f2:	f000 f897 	bl	8009424 <__smakebuf_r>
 80092f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fa:	f013 0201 	ands.w	r2, r3, #1
 80092fe:	d00a      	beq.n	8009316 <__swsetup_r+0x9a>
 8009300:	2200      	movs	r2, #0
 8009302:	60a2      	str	r2, [r4, #8]
 8009304:	6962      	ldr	r2, [r4, #20]
 8009306:	4252      	negs	r2, r2
 8009308:	61a2      	str	r2, [r4, #24]
 800930a:	6922      	ldr	r2, [r4, #16]
 800930c:	b942      	cbnz	r2, 8009320 <__swsetup_r+0xa4>
 800930e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009312:	d1c5      	bne.n	80092a0 <__swsetup_r+0x24>
 8009314:	bd38      	pop	{r3, r4, r5, pc}
 8009316:	0799      	lsls	r1, r3, #30
 8009318:	bf58      	it	pl
 800931a:	6962      	ldrpl	r2, [r4, #20]
 800931c:	60a2      	str	r2, [r4, #8]
 800931e:	e7f4      	b.n	800930a <__swsetup_r+0x8e>
 8009320:	2000      	movs	r0, #0
 8009322:	e7f7      	b.n	8009314 <__swsetup_r+0x98>
 8009324:	20000020 	.word	0x20000020

08009328 <memmove>:
 8009328:	4288      	cmp	r0, r1
 800932a:	b510      	push	{r4, lr}
 800932c:	eb01 0402 	add.w	r4, r1, r2
 8009330:	d902      	bls.n	8009338 <memmove+0x10>
 8009332:	4284      	cmp	r4, r0
 8009334:	4623      	mov	r3, r4
 8009336:	d807      	bhi.n	8009348 <memmove+0x20>
 8009338:	1e43      	subs	r3, r0, #1
 800933a:	42a1      	cmp	r1, r4
 800933c:	d008      	beq.n	8009350 <memmove+0x28>
 800933e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009342:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009346:	e7f8      	b.n	800933a <memmove+0x12>
 8009348:	4402      	add	r2, r0
 800934a:	4601      	mov	r1, r0
 800934c:	428a      	cmp	r2, r1
 800934e:	d100      	bne.n	8009352 <memmove+0x2a>
 8009350:	bd10      	pop	{r4, pc}
 8009352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800935a:	e7f7      	b.n	800934c <memmove+0x24>

0800935c <_sbrk_r>:
 800935c:	b538      	push	{r3, r4, r5, lr}
 800935e:	4d06      	ldr	r5, [pc, #24]	@ (8009378 <_sbrk_r+0x1c>)
 8009360:	2300      	movs	r3, #0
 8009362:	4604      	mov	r4, r0
 8009364:	4608      	mov	r0, r1
 8009366:	602b      	str	r3, [r5, #0]
 8009368:	f7f9 f808 	bl	800237c <_sbrk>
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d102      	bne.n	8009376 <_sbrk_r+0x1a>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	b103      	cbz	r3, 8009376 <_sbrk_r+0x1a>
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	bd38      	pop	{r3, r4, r5, pc}
 8009378:	20005010 	.word	0x20005010

0800937c <_realloc_r>:
 800937c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009380:	4680      	mov	r8, r0
 8009382:	4615      	mov	r5, r2
 8009384:	460c      	mov	r4, r1
 8009386:	b921      	cbnz	r1, 8009392 <_realloc_r+0x16>
 8009388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800938c:	4611      	mov	r1, r2
 800938e:	f7ff b9d7 	b.w	8008740 <_malloc_r>
 8009392:	b92a      	cbnz	r2, 80093a0 <_realloc_r+0x24>
 8009394:	f7ff f968 	bl	8008668 <_free_r>
 8009398:	2400      	movs	r4, #0
 800939a:	4620      	mov	r0, r4
 800939c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a0:	f000 f89e 	bl	80094e0 <_malloc_usable_size_r>
 80093a4:	4285      	cmp	r5, r0
 80093a6:	4606      	mov	r6, r0
 80093a8:	d802      	bhi.n	80093b0 <_realloc_r+0x34>
 80093aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80093ae:	d8f4      	bhi.n	800939a <_realloc_r+0x1e>
 80093b0:	4629      	mov	r1, r5
 80093b2:	4640      	mov	r0, r8
 80093b4:	f7ff f9c4 	bl	8008740 <_malloc_r>
 80093b8:	4607      	mov	r7, r0
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d0ec      	beq.n	8009398 <_realloc_r+0x1c>
 80093be:	42b5      	cmp	r5, r6
 80093c0:	462a      	mov	r2, r5
 80093c2:	4621      	mov	r1, r4
 80093c4:	bf28      	it	cs
 80093c6:	4632      	movcs	r2, r6
 80093c8:	f7ff f93f 	bl	800864a <memcpy>
 80093cc:	4621      	mov	r1, r4
 80093ce:	4640      	mov	r0, r8
 80093d0:	f7ff f94a 	bl	8008668 <_free_r>
 80093d4:	463c      	mov	r4, r7
 80093d6:	e7e0      	b.n	800939a <_realloc_r+0x1e>

080093d8 <__swhatbuf_r>:
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	460c      	mov	r4, r1
 80093dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e0:	2900      	cmp	r1, #0
 80093e2:	b096      	sub	sp, #88	@ 0x58
 80093e4:	4615      	mov	r5, r2
 80093e6:	461e      	mov	r6, r3
 80093e8:	da0d      	bge.n	8009406 <__swhatbuf_r+0x2e>
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093f0:	f04f 0100 	mov.w	r1, #0
 80093f4:	bf14      	ite	ne
 80093f6:	2340      	movne	r3, #64	@ 0x40
 80093f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093fc:	2000      	movs	r0, #0
 80093fe:	6031      	str	r1, [r6, #0]
 8009400:	602b      	str	r3, [r5, #0]
 8009402:	b016      	add	sp, #88	@ 0x58
 8009404:	bd70      	pop	{r4, r5, r6, pc}
 8009406:	466a      	mov	r2, sp
 8009408:	f000 f848 	bl	800949c <_fstat_r>
 800940c:	2800      	cmp	r0, #0
 800940e:	dbec      	blt.n	80093ea <__swhatbuf_r+0x12>
 8009410:	9901      	ldr	r1, [sp, #4]
 8009412:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009416:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800941a:	4259      	negs	r1, r3
 800941c:	4159      	adcs	r1, r3
 800941e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009422:	e7eb      	b.n	80093fc <__swhatbuf_r+0x24>

08009424 <__smakebuf_r>:
 8009424:	898b      	ldrh	r3, [r1, #12]
 8009426:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009428:	079d      	lsls	r5, r3, #30
 800942a:	4606      	mov	r6, r0
 800942c:	460c      	mov	r4, r1
 800942e:	d507      	bpl.n	8009440 <__smakebuf_r+0x1c>
 8009430:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	6123      	str	r3, [r4, #16]
 8009438:	2301      	movs	r3, #1
 800943a:	6163      	str	r3, [r4, #20]
 800943c:	b003      	add	sp, #12
 800943e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009440:	ab01      	add	r3, sp, #4
 8009442:	466a      	mov	r2, sp
 8009444:	f7ff ffc8 	bl	80093d8 <__swhatbuf_r>
 8009448:	9f00      	ldr	r7, [sp, #0]
 800944a:	4605      	mov	r5, r0
 800944c:	4639      	mov	r1, r7
 800944e:	4630      	mov	r0, r6
 8009450:	f7ff f976 	bl	8008740 <_malloc_r>
 8009454:	b948      	cbnz	r0, 800946a <__smakebuf_r+0x46>
 8009456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800945a:	059a      	lsls	r2, r3, #22
 800945c:	d4ee      	bmi.n	800943c <__smakebuf_r+0x18>
 800945e:	f023 0303 	bic.w	r3, r3, #3
 8009462:	f043 0302 	orr.w	r3, r3, #2
 8009466:	81a3      	strh	r3, [r4, #12]
 8009468:	e7e2      	b.n	8009430 <__smakebuf_r+0xc>
 800946a:	89a3      	ldrh	r3, [r4, #12]
 800946c:	6020      	str	r0, [r4, #0]
 800946e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009472:	81a3      	strh	r3, [r4, #12]
 8009474:	9b01      	ldr	r3, [sp, #4]
 8009476:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800947a:	b15b      	cbz	r3, 8009494 <__smakebuf_r+0x70>
 800947c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009480:	4630      	mov	r0, r6
 8009482:	f000 f81d 	bl	80094c0 <_isatty_r>
 8009486:	b128      	cbz	r0, 8009494 <__smakebuf_r+0x70>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	f023 0303 	bic.w	r3, r3, #3
 800948e:	f043 0301 	orr.w	r3, r3, #1
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	431d      	orrs	r5, r3
 8009498:	81a5      	strh	r5, [r4, #12]
 800949a:	e7cf      	b.n	800943c <__smakebuf_r+0x18>

0800949c <_fstat_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4d07      	ldr	r5, [pc, #28]	@ (80094bc <_fstat_r+0x20>)
 80094a0:	2300      	movs	r3, #0
 80094a2:	4604      	mov	r4, r0
 80094a4:	4608      	mov	r0, r1
 80094a6:	4611      	mov	r1, r2
 80094a8:	602b      	str	r3, [r5, #0]
 80094aa:	f7f8 ff3e 	bl	800232a <_fstat>
 80094ae:	1c43      	adds	r3, r0, #1
 80094b0:	d102      	bne.n	80094b8 <_fstat_r+0x1c>
 80094b2:	682b      	ldr	r3, [r5, #0]
 80094b4:	b103      	cbz	r3, 80094b8 <_fstat_r+0x1c>
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	bd38      	pop	{r3, r4, r5, pc}
 80094ba:	bf00      	nop
 80094bc:	20005010 	.word	0x20005010

080094c0 <_isatty_r>:
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	4d06      	ldr	r5, [pc, #24]	@ (80094dc <_isatty_r+0x1c>)
 80094c4:	2300      	movs	r3, #0
 80094c6:	4604      	mov	r4, r0
 80094c8:	4608      	mov	r0, r1
 80094ca:	602b      	str	r3, [r5, #0]
 80094cc:	f7f8 ff3d 	bl	800234a <_isatty>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d102      	bne.n	80094da <_isatty_r+0x1a>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	b103      	cbz	r3, 80094da <_isatty_r+0x1a>
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	20005010 	.word	0x20005010

080094e0 <_malloc_usable_size_r>:
 80094e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094e4:	1f18      	subs	r0, r3, #4
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	bfbc      	itt	lt
 80094ea:	580b      	ldrlt	r3, [r1, r0]
 80094ec:	18c0      	addlt	r0, r0, r3
 80094ee:	4770      	bx	lr

080094f0 <roundf>:
 80094f0:	ee10 0a10 	vmov	r0, s0
 80094f4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80094f8:	3a7f      	subs	r2, #127	@ 0x7f
 80094fa:	2a16      	cmp	r2, #22
 80094fc:	dc15      	bgt.n	800952a <roundf+0x3a>
 80094fe:	2a00      	cmp	r2, #0
 8009500:	da08      	bge.n	8009514 <roundf+0x24>
 8009502:	3201      	adds	r2, #1
 8009504:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8009508:	d101      	bne.n	800950e <roundf+0x1e>
 800950a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800950e:	ee00 3a10 	vmov	s0, r3
 8009512:	4770      	bx	lr
 8009514:	4907      	ldr	r1, [pc, #28]	@ (8009534 <roundf+0x44>)
 8009516:	4111      	asrs	r1, r2
 8009518:	4201      	tst	r1, r0
 800951a:	d0fa      	beq.n	8009512 <roundf+0x22>
 800951c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009520:	4113      	asrs	r3, r2
 8009522:	4403      	add	r3, r0
 8009524:	ea23 0301 	bic.w	r3, r3, r1
 8009528:	e7f1      	b.n	800950e <roundf+0x1e>
 800952a:	2a80      	cmp	r2, #128	@ 0x80
 800952c:	d1f1      	bne.n	8009512 <roundf+0x22>
 800952e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009532:	4770      	bx	lr
 8009534:	007fffff 	.word	0x007fffff

08009538 <_init>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	bf00      	nop
 800953c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953e:	bc08      	pop	{r3}
 8009540:	469e      	mov	lr, r3
 8009542:	4770      	bx	lr

08009544 <_fini>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	bf00      	nop
 8009548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800954a:	bc08      	pop	{r3}
 800954c:	469e      	mov	lr, r3
 800954e:	4770      	bx	lr

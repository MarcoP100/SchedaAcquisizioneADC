
blink411.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08008348  08008348  00009348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800859c  0800859c  0000a0bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800859c  0800859c  0000959c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085a4  080085a4  0000a0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085a4  080085a4  000095a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085a8  080085a8  000095a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  080085ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f60  200000bc  08008668  0000a0bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000501c  08008668  0000b01c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bd9d  00000000  00000000  0000a0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bfa  00000000  00000000  00025e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  00029a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001277  00000000  00000000  0002b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004e54  00000000  00000000  0002c4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a60e  00000000  00000000  00031313  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d4f4  00000000  00000000  0004b921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8e15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006be0  00000000  00000000  000e8e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000031  00000000  00000000  000efa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000bc 	.word	0x200000bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008330 	.word	0x08008330

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	08008330 	.word	0x08008330

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	mcp2515Int = false;
 8000584:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <main+0x4c>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f001 fc41 	bl	8001e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f82b 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8f3 	bl	800077c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000596:	f000 f891 	bl	80006bc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800059a:	f000 f8c5 	bl	8000728 <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059e:	f004 f955 	bl	800484c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskADC */
  TaskADCHandle = osThreadNew(StartTaskADC, NULL, &TaskADC_attributes);
 80005a2:	4a0b      	ldr	r2, [pc, #44]	@ (80005d0 <main+0x50>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <main+0x54>)
 80005a8:	f004 f99a 	bl	80048e0 <osThreadNew>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <main+0x58>)
 80005b0:	6013      	str	r3, [r2, #0]

  /* creation of TaskCAN */
  //TaskCANHandle = osThreadNew(StartTaskCAN, NULL, &TaskCAN_attributes);

  /* creation of TaskSPI */
  TaskSPIHandle = osThreadNew(StartTaskSPI, NULL, &TaskSPI_attributes);
 80005b2:	4a0a      	ldr	r2, [pc, #40]	@ (80005dc <main+0x5c>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <main+0x60>)
 80005b8:	f004 f992 	bl	80048e0 <osThreadNew>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <main+0x64>)
 80005c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c2:	f004 f967 	bl	8004894 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c6:	bf00      	nop
 80005c8:	e7fd      	b.n	80005c6 <main+0x46>
 80005ca:	bf00      	nop
 80005cc:	20000190 	.word	0x20000190
 80005d0:	08008508 	.word	0x08008508
 80005d4:	08000a79 	.word	0x08000a79
 80005d8:	20000178 	.word	0x20000178
 80005dc:	0800852c 	.word	0x0800852c
 80005e0:	08000ba5 	.word	0x08000ba5
 80005e4:	2000017c 	.word	0x2000017c

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f007 f81d 	bl	8007636 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <SystemClock_Config+0xd0>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <SystemClock_Config+0xd0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000658:	2310      	movs	r3, #16
 800065a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800065c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000660:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000662:	2304      	movs	r3, #4
 8000664:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000666:	2304      	movs	r3, #4
 8000668:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	4618      	mov	r0, r3
 8000670:	f001 feee 	bl	8002450 <HAL_RCC_OscConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067a:	f000 fb59 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	230f      	movs	r3, #15
 8000680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f002 f94f 	bl	8002940 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a8:	f000 fb42 	bl	8000d30 <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	@ 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	@ (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2220      	movs	r2, #32
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f002 fb29 	bl	8002d64 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 fb0a 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000d8 	.word	0x200000d8
 8000724:	40013000 	.word	0x40013000

08000728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_USART1_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_USART1_UART_Init+0x4c>)
 8000760:	f003 fc24 	bl	8003fac <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 fae1 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  
  /* USER CODE END USART1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000130 	.word	0x20000130
 8000778:	40011000 	.word	0x40011000

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b35      	ldr	r3, [pc, #212]	@ (800086c <MX_GPIO_Init+0xf0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a34      	ldr	r2, [pc, #208]	@ (800086c <MX_GPIO_Init+0xf0>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b32      	ldr	r3, [pc, #200]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0304 	and.w	r3, r3, #4
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b2e      	ldr	r3, [pc, #184]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a2d      	ldr	r2, [pc, #180]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b27      	ldr	r3, [pc, #156]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a26      	ldr	r2, [pc, #152]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b24      	ldr	r3, [pc, #144]	@ (800086c <MX_GPIO_Init+0xf0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedOnBoard_GPIO_Port, LedOnBoard_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ec:	4820      	ldr	r0, [pc, #128]	@ (8000870 <MX_GPIO_Init+0xf4>)
 80007ee:	f001 fdfd 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f8:	481e      	ldr	r0, [pc, #120]	@ (8000874 <MX_GPIO_Init+0xf8>)
 80007fa:	f001 fdf7 	bl	80023ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedOnBoard_Pin */
  GPIO_InitStruct.Pin = LedOnBoard_Pin;
 80007fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LedOnBoard_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	4816      	ldr	r0, [pc, #88]	@ (8000870 <MX_GPIO_Init+0xf4>)
 8000818:	f001 fc64 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	480f      	ldr	r0, [pc, #60]	@ (8000874 <MX_GPIO_Init+0xf8>)
 8000836:	f001 fc55 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_INT_Pin */
  GPIO_InitStruct.Pin = MCP2515_INT_Pin;
 800083a:	2340      	movs	r3, #64	@ 0x40
 800083c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000844:	2301      	movs	r3, #1
 8000846:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MCP2515_INT_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	4809      	ldr	r0, [pc, #36]	@ (8000874 <MX_GPIO_Init+0xf8>)
 8000850:	f001 fc48 	bl	80020e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2105      	movs	r1, #5
 8000858:	2017      	movs	r0, #23
 800085a:	f001 fbf7 	bl	800204c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800085e:	2017      	movs	r0, #23
 8000860:	f001 fc10 	bl	8002084 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40020800 	.word	0x40020800
 8000874:	40020400 	.word	0x40020400

08000878 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
    // Verifica che questo callback sia per il tuo hspi
    if (hspi == &hspi1) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <HAL_SPI_TxCpltCallback+0x20>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d103      	bne.n	8000890 <HAL_SPI_TxCpltCallback+0x18>
        MCP2515_SetTransmissionComplete(&mcp2515_1, 1);
 8000888:	2101      	movs	r1, #1
 800088a:	4804      	ldr	r0, [pc, #16]	@ (800089c <HAL_SPI_TxCpltCallback+0x24>)
 800088c:	f000 fb1e 	bl	8000ecc <MCP2515_SetTransmissionComplete>

        //BaseType_t xHigherPriorityTaskWoken = pdFALSE;
        //vTaskNotifyGiveFromISR(xTaskHandleSPI, &xHigherPriorityTaskWoken);
        //portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    }
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000d8 	.word	0x200000d8
 800089c:	20000180 	.word	0x20000180

080008a0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a05      	ldr	r2, [pc, #20]	@ (80008c0 <HAL_SPI_RxCpltCallback+0x20>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d103      	bne.n	80008b8 <HAL_SPI_RxCpltCallback+0x18>
      MCP2515_SetTransmissionComplete(&mcp2515_1, 1);
 80008b0:	2101      	movs	r1, #1
 80008b2:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <HAL_SPI_RxCpltCallback+0x24>)
 80008b4:	f000 fb0a 	bl	8000ecc <MCP2515_SetTransmissionComplete>
    }
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200000d8 	.word	0x200000d8
 80008c4:	20000180 	.word	0x20000180

080008c8 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    if (hspi == &hspi1) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <HAL_SPI_TxRxCpltCallback+0x20>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d103      	bne.n	80008e0 <HAL_SPI_TxRxCpltCallback+0x18>
      MCP2515_SetTransmissionComplete(&mcp2515_1, 1);
 80008d8:	2101      	movs	r1, #1
 80008da:	4804      	ldr	r0, [pc, #16]	@ (80008ec <HAL_SPI_TxRxCpltCallback+0x24>)
 80008dc:	f000 faf6 	bl	8000ecc <MCP2515_SetTransmissionComplete>
    }
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000d8 	.word	0x200000d8
 80008ec:	20000180 	.word	0x20000180

080008f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_6)
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	2b40      	cmp	r3, #64	@ 0x40
 80008fe:	d102      	bne.n	8000906 <HAL_GPIO_EXTI_Callback+0x16>
    {
        // Codice per gestire l'interrupt del MCP2515
        mcp2515Int = true;
 8000900:	4b04      	ldr	r3, [pc, #16]	@ (8000914 <HAL_GPIO_EXTI_Callback+0x24>)
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
        //printf("Interrupt\n");
    }
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000190 	.word	0x20000190

08000918 <__io_putchar>:


int __io_putchar(int ch) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    // Invia il carattere tramite USART (ad esempio huart1)
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000920:	1d39      	adds	r1, r7, #4
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	2201      	movs	r2, #1
 8000928:	4803      	ldr	r0, [pc, #12]	@ (8000938 <__io_putchar+0x20>)
 800092a:	f003 fb8f 	bl	800404c <HAL_UART_Transmit>
    return ch;
 800092e:	687b      	ldr	r3, [r7, #4]
  }
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000130 	.word	0x20000130

0800093c <_write>:

  int _write(int file, char *ptr, int len) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
      for (int i = 0; i < len; i++) {
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	e009      	b.n	8000962 <_write+0x26>
          __io_putchar(*ptr++);
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	60ba      	str	r2, [r7, #8]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff ffde 	bl	8000918 <__io_putchar>
      for (int i = 0; i < len; i++) {
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	429a      	cmp	r2, r3
 8000968:	dbf1      	blt.n	800094e <_write+0x12>
      }
      return len;
 800096a:	687b      	ldr	r3, [r7, #4]
  }
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <canMsgTx>:

    /* uso
    int arraySize = sizeof(writeMessage) / sizeof(writeMessage[0]);
    printByteArray(writeMessage, arraySize);*/
}
void canMsgTx(uint8_t* dataToSend, uint32_t* msgID, uint8_t extendedFormat, uint8_t dlc){
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	4611      	mov	r1, r2
 8000980:	461a      	mov	r2, r3
 8000982:	460b      	mov	r3, r1
 8000984:	71fb      	strb	r3, [r7, #7]
 8000986:	4613      	mov	r3, r2
 8000988:	71bb      	strb	r3, [r7, #6]
	static uint8_t indexTx = 0;
	uint8_t msgId_bf[4];

	if (extendedFormat){
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d025      	beq.n	80009dc <canMsgTx+0x68>
		  msgId_bf[0] = (*msgID >> 3) & 0xFF;  // Estrai il byte alto (MSB)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	753b      	strb	r3, [r7, #20]
		  msgId_bf[1] = (*msgID << 5) & 0xE0;         // Estrai il byte basso (LSB)
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	015b      	lsls	r3, r3, #5
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	757b      	strb	r3, [r7, #21]
		  msgId_bf[1] = msgId_bf[1] | 8;
 80009a6:	7d7b      	ldrb	r3, [r7, #21]
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	757b      	strb	r3, [r7, #21]
		  msgId_bf[1] = msgId_bf[1] | ((*msgID >> 28) & 0x02);
 80009b0:	7d7a      	ldrb	r2, [r7, #21]
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	0f1b      	lsrs	r3, r3, #28
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	757b      	strb	r3, [r7, #21]
		  msgId_bf[2] = (*msgID >> 19) & 0xFF;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	0cdb      	lsrs	r3, r3, #19
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	75bb      	strb	r3, [r7, #22]
		  msgId_bf[3] = (*msgID >> 11) & 0xFF;
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	0adb      	lsrs	r3, r3, #11
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	75fb      	strb	r3, [r7, #23]
 80009da:	e00a      	b.n	80009f2 <canMsgTx+0x7e>

	  } else{

		msgId_bf[0] = (*msgID >> 3) & 0xFF;  // Estrai il byte alto (MSB)
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	08db      	lsrs	r3, r3, #3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	753b      	strb	r3, [r7, #20]
		msgId_bf[1] = (*msgID << 5) & 0xE0;         // Estrai il byte basso (LSB)
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	015b      	lsls	r3, r3, #5
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	757b      	strb	r3, [r7, #21]
	  }


	  memcpy(canMessageTx[indexTx].msgID, msgId_bf, sizeof(msgId_bf));
 80009f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <canMsgTx+0xfc>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	4613      	mov	r3, r2
 80009fa:	011b      	lsls	r3, r3, #4
 80009fc:	1a9b      	subs	r3, r3, r2
 80009fe:	3308      	adds	r3, #8
 8000a00:	4a1c      	ldr	r2, [pc, #112]	@ (8000a74 <canMsgTx+0x100>)
 8000a02:	4413      	add	r3, r2
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	601a      	str	r2, [r3, #0]
	  memcpy(canMessageTx[indexTx].msgData, dataToSend, dlc);
 8000a08:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <canMsgTx+0xfc>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4613      	mov	r3, r2
 8000a10:	011b      	lsls	r3, r3, #4
 8000a12:	1a9b      	subs	r3, r3, r2
 8000a14:	4a17      	ldr	r2, [pc, #92]	@ (8000a74 <canMsgTx+0x100>)
 8000a16:	4413      	add	r3, r2
 8000a18:	79ba      	ldrb	r2, [r7, #6]
 8000a1a:	68f9      	ldr	r1, [r7, #12]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f006 fedc 	bl	80077da <memcpy>
	  canMessageTx[indexTx].dlc = dlc;
 8000a22:	4b13      	ldr	r3, [pc, #76]	@ (8000a70 <canMsgTx+0xfc>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	4619      	mov	r1, r3
 8000a28:	4a12      	ldr	r2, [pc, #72]	@ (8000a74 <canMsgTx+0x100>)
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	011b      	lsls	r3, r3, #4
 8000a2e:	1a5b      	subs	r3, r3, r1
 8000a30:	4413      	add	r3, r2
 8000a32:	330c      	adds	r3, #12
 8000a34:	79ba      	ldrb	r2, [r7, #6]
 8000a36:	701a      	strb	r2, [r3, #0]
	  canMessageTx[indexTx].newMsg = true;
 8000a38:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <canMsgTx+0xfc>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a74 <canMsgTx+0x100>)
 8000a40:	460b      	mov	r3, r1
 8000a42:	011b      	lsls	r3, r3, #4
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	4413      	add	r3, r2
 8000a48:	330d      	adds	r3, #13
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]

	  indexTx++;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <canMsgTx+0xfc>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	3301      	adds	r3, #1
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <canMsgTx+0xfc>)
 8000a58:	701a      	strb	r2, [r3, #0]
	  if (indexTx >= BUFFER_TX_SPI) {
 8000a5a:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <canMsgTx+0xfc>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b31      	cmp	r3, #49	@ 0x31
 8000a60:	d902      	bls.n	8000a68 <canMsgTx+0xf4>
		  indexTx = 0;
 8000a62:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <canMsgTx+0xfc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
	  }

}
 8000a68:	bf00      	nop
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000482 	.word	0x20000482
 8000a74:	20000194 	.word	0x20000194

08000a78 <StartTaskADC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskADC */
void StartTaskADC(void *argument)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08e      	sub	sp, #56	@ 0x38
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000a80:	f005 f8fc 	bl	8005c7c <xTaskGetTickCount>
 8000a84:	4603      	mov	r3, r0
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30
	const TickType_t xFrequency = 8;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	637b      	str	r3, [r7, #52]	@ 0x34
	static uint8_t dataToSend5[8] = {0x7E, 0xD4, 0x11, 0x89, 0xB5, 0x23, 0x6A, 0xFC};
	static uint8_t dataToSend6[8] = {0x4B, 0xC3, 0x9F, 0x02, 0x71, 0xD8, 0xA6, 0x5D};
	static uint8_t dataToSend7[8] = {0x99, 0x28, 0x73, 0xC4, 0xF6, 0x13, 0xB1, 0x2E};
	static uint8_t dataToSend8[8] = {0xEF, 0x5A, 0x64, 0x92, 0x3B, 0x87, 0xD3, 0x41};
	static uint8_t dataToSend9[8] = {0xAA, 0x38, 0x5C, 0x72, 0x49, 0xF1, 0xBE, 0x6D};
	uint32_t msgId1 = 0x200;
 8000a8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t msgId2 = 0x210;
 8000a92:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8000a96:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t msgId3 = 0x220;
 8000a98:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t msgId4 = 0x230;
 8000a9e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8000aa2:	623b      	str	r3, [r7, #32]
	uint32_t msgId5 = 0x240;
 8000aa4:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aa8:	61fb      	str	r3, [r7, #28]
	uint32_t msgId6 = 0x250;
 8000aaa:	f44f 7314 	mov.w	r3, #592	@ 0x250
 8000aae:	61bb      	str	r3, [r7, #24]
	uint32_t msgId7 = 0x260;
 8000ab0:	f44f 7318 	mov.w	r3, #608	@ 0x260
 8000ab4:	617b      	str	r3, [r7, #20]
	uint32_t msgId8 = 0x270;
 8000ab6:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8000aba:	613b      	str	r3, [r7, #16]
	uint32_t msgId9 = 0x280;
 8000abc:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000ac0:	60fb      	str	r3, [r7, #12]
	// start_time = HAL_GetTick();

  /* Infinite loop */
  for(;;)
  {
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000ac2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ac6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f004 ff3b 	bl	8005944 <vTaskDelayUntil>


	  //start_time = HAL_GetTick();  // Usa SysTick per ottenere il tempo attuale

	  if (result_mcp2515Init == MCP2515_OK){
 8000ace:	4b2b      	ldr	r3, [pc, #172]	@ (8000b7c <StartTaskADC+0x104>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1f5      	bne.n	8000ac2 <StartTaskADC+0x4a>

		  // Incrementa il contatore
		  dataToSend1[0]++;
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b80 <StartTaskADC+0x108>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	3301      	adds	r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4b28      	ldr	r3, [pc, #160]	@ (8000b80 <StartTaskADC+0x108>)
 8000ae0:	701a      	strb	r2, [r3, #0]
		  dataToSend2[0]--;
 8000ae2:	4b28      	ldr	r3, [pc, #160]	@ (8000b84 <StartTaskADC+0x10c>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b26      	ldr	r3, [pc, #152]	@ (8000b84 <StartTaskADC+0x10c>)
 8000aec:	701a      	strb	r2, [r3, #0]
		  dataToSend3[0]+=2;
 8000aee:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <StartTaskADC+0x110>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	3302      	adds	r3, #2
 8000af4:	b2da      	uxtb	r2, r3
 8000af6:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <StartTaskADC+0x110>)
 8000af8:	701a      	strb	r2, [r3, #0]

		  canMsgTx(dataToSend1, &msgId1, false, 8);
 8000afa:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000afe:	2308      	movs	r3, #8
 8000b00:	2200      	movs	r2, #0
 8000b02:	481f      	ldr	r0, [pc, #124]	@ (8000b80 <StartTaskADC+0x108>)
 8000b04:	f7ff ff36 	bl	8000974 <canMsgTx>
		  canMsgTx(dataToSend2, &msgId2, false, 8);
 8000b08:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	2200      	movs	r2, #0
 8000b10:	481c      	ldr	r0, [pc, #112]	@ (8000b84 <StartTaskADC+0x10c>)
 8000b12:	f7ff ff2f 	bl	8000974 <canMsgTx>
		  canMsgTx(dataToSend3, &msgId3, false, 8);
 8000b16:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000b1a:	2308      	movs	r3, #8
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	481a      	ldr	r0, [pc, #104]	@ (8000b88 <StartTaskADC+0x110>)
 8000b20:	f7ff ff28 	bl	8000974 <canMsgTx>
		  canMsgTx(dataToSend4, &msgId4, false, 8);
 8000b24:	f107 0120 	add.w	r1, r7, #32
 8000b28:	2308      	movs	r3, #8
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4817      	ldr	r0, [pc, #92]	@ (8000b8c <StartTaskADC+0x114>)
 8000b2e:	f7ff ff21 	bl	8000974 <canMsgTx>
		  canMsgTx(dataToSend5, &msgId5, false, 8);
 8000b32:	f107 011c 	add.w	r1, r7, #28
 8000b36:	2308      	movs	r3, #8
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4815      	ldr	r0, [pc, #84]	@ (8000b90 <StartTaskADC+0x118>)
 8000b3c:	f7ff ff1a 	bl	8000974 <canMsgTx>
		  canMsgTx(dataToSend6, &msgId6, false, 8);
 8000b40:	f107 0118 	add.w	r1, r7, #24
 8000b44:	2308      	movs	r3, #8
 8000b46:	2200      	movs	r2, #0
 8000b48:	4812      	ldr	r0, [pc, #72]	@ (8000b94 <StartTaskADC+0x11c>)
 8000b4a:	f7ff ff13 	bl	8000974 <canMsgTx>
		  canMsgTx(dataToSend7, &msgId7, false, 8);
 8000b4e:	f107 0114 	add.w	r1, r7, #20
 8000b52:	2308      	movs	r3, #8
 8000b54:	2200      	movs	r2, #0
 8000b56:	4810      	ldr	r0, [pc, #64]	@ (8000b98 <StartTaskADC+0x120>)
 8000b58:	f7ff ff0c 	bl	8000974 <canMsgTx>
		  canMsgTx(dataToSend8, &msgId8, false, 8);
 8000b5c:	f107 0110 	add.w	r1, r7, #16
 8000b60:	2308      	movs	r3, #8
 8000b62:	2200      	movs	r2, #0
 8000b64:	480d      	ldr	r0, [pc, #52]	@ (8000b9c <StartTaskADC+0x124>)
 8000b66:	f7ff ff05 	bl	8000974 <canMsgTx>
		  canMsgTx(dataToSend9, &msgId9, false, 8);
 8000b6a:	f107 010c 	add.w	r1, r7, #12
 8000b6e:	2308      	movs	r3, #8
 8000b70:	2200      	movs	r2, #0
 8000b72:	480b      	ldr	r0, [pc, #44]	@ (8000ba0 <StartTaskADC+0x128>)
 8000b74:	f7ff fefe 	bl	8000974 <canMsgTx>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8000b78:	e7a3      	b.n	8000ac2 <StartTaskADC+0x4a>
 8000b7a:	bf00      	nop
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	20000004 	.word	0x20000004
 8000b84:	2000000c 	.word	0x2000000c
 8000b88:	20000014 	.word	0x20000014
 8000b8c:	2000001c 	.word	0x2000001c
 8000b90:	20000024 	.word	0x20000024
 8000b94:	2000002c 	.word	0x2000002c
 8000b98:	20000034 	.word	0x20000034
 8000b9c:	2000003c 	.word	0x2000003c
 8000ba0:	20000044 	.word	0x20000044

08000ba4 <StartTaskSPI>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSPI */
void StartTaskSPI(void *argument)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	@ 0x30
 8000ba8:	af02      	add	r7, sp, #8
 8000baa:	6078      	str	r0, [r7, #4]
	MCP2515_MessageBuffer canMsg_buffer;


	// Inizializzazione del dispositivo MCP2515
	  //HAL_Delay(500);
	  initBuffer(&canMsg_buffer);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 fec1 	bl	8001938 <initBuffer>


	  uint8_t dummyData = 0x00;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	72fb      	strb	r3, [r7, #11]
	  HAL_SPI_Transmit(&hspi1, &dummyData, 1, HAL_MAX_DELAY); // Trasmissione dummy
 8000bba:	f107 010b 	add.w	r1, r7, #11
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	483f      	ldr	r0, [pc, #252]	@ (8000cc4 <StartTaskSPI+0x120>)
 8000bc6:	f002 f956 	bl	8002e76 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);  // CS alto
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bd0:	483d      	ldr	r0, [pc, #244]	@ (8000cc8 <StartTaskSPI+0x124>)
 8000bd2:	f001 fc0b 	bl	80023ec <HAL_GPIO_WritePin>


	  const char* resMcp2515_msg;
	  result_mcp2515Init = MCP2515_Init(&mcp2515_1, GPIOB, GPIO_PIN_13, &hspi1, CAN0_BAUDRATE, true);
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	9301      	str	r3, [sp, #4]
 8000bda:	2302      	movs	r3, #2
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	4b39      	ldr	r3, [pc, #228]	@ (8000cc4 <StartTaskSPI+0x120>)
 8000be0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be4:	4938      	ldr	r1, [pc, #224]	@ (8000cc8 <StartTaskSPI+0x124>)
 8000be6:	4839      	ldr	r0, [pc, #228]	@ (8000ccc <StartTaskSPI+0x128>)
 8000be8:	f000 f8a8 	bl	8000d3c <MCP2515_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b37      	ldr	r3, [pc, #220]	@ (8000cd0 <StartTaskSPI+0x12c>)
 8000bf2:	701a      	strb	r2, [r3, #0]
	  switch ( result_mcp2515Init){
 8000bf4:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <StartTaskSPI+0x12c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b09      	cmp	r3, #9
 8000bfa:	d835      	bhi.n	8000c68 <StartTaskSPI+0xc4>
 8000bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8000c04 <StartTaskSPI+0x60>)
 8000bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c02:	bf00      	nop
 8000c04:	08000c2d 	.word	0x08000c2d
 8000c08:	08000c33 	.word	0x08000c33
 8000c0c:	08000c39 	.word	0x08000c39
 8000c10:	08000c3f 	.word	0x08000c3f
 8000c14:	08000c45 	.word	0x08000c45
 8000c18:	08000c4b 	.word	0x08000c4b
 8000c1c:	08000c51 	.word	0x08000c51
 8000c20:	08000c57 	.word	0x08000c57
 8000c24:	08000c5d 	.word	0x08000c5d
 8000c28:	08000c63 	.word	0x08000c63

	    case MCP2515_OK:
	      resMcp2515_msg = "Inizializzazione mcp2515 ok\n";
 8000c2c:	4b29      	ldr	r3, [pc, #164]	@ (8000cd4 <StartTaskSPI+0x130>)
 8000c2e:	627b      	str	r3, [r7, #36]	@ 0x24
	      break;
 8000c30:	e01d      	b.n	8000c6e <StartTaskSPI+0xca>

	    case MCP2515_FAIL:
	      resMcp2515_msg = "Inizializzazione mcp2515 fallita\n";
 8000c32:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <StartTaskSPI+0x134>)
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
	      break;
 8000c36:	e01a      	b.n	8000c6e <StartTaskSPI+0xca>

	    case MCP2515_RESET_FAIL:
	      resMcp2515_msg = "Reset mcp2515 fallito\n";
 8000c38:	4b28      	ldr	r3, [pc, #160]	@ (8000cdc <StartTaskSPI+0x138>)
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
	      break;
 8000c3c:	e017      	b.n	8000c6e <StartTaskSPI+0xca>

	    case MCP2515_SET_BAUDRATE_FAIL:
	      resMcp2515_msg = "Set baudrate mcp2515 fallito\n";
 8000c3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <StartTaskSPI+0x13c>)
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
	      break;
 8000c42:	e014      	b.n	8000c6e <StartTaskSPI+0xca>

	    case MCP2515_SET_MODE_FAIL:
	      resMcp2515_msg = "Set modalita operativa mcp2515 fallita\n";
 8000c44:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <StartTaskSPI+0x140>)
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
	      break;
 8000c48:	e011      	b.n	8000c6e <StartTaskSPI+0xca>

	    case MCP2515_RESET_TIMEOUT:
	      resMcp2515_msg = "MCP2515_RESET_TIMEOUT\n";
 8000c4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ce8 <StartTaskSPI+0x144>)
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
	      break;
 8000c4e:	e00e      	b.n	8000c6e <StartTaskSPI+0xca>

	    case MCP2515_READ_TIMEOUT_1:
	      resMcp2515_msg = "MCP2515_READ_TIMEOUT_1\n";
 8000c50:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <StartTaskSPI+0x148>)
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
	      break;
 8000c54:	e00b      	b.n	8000c6e <StartTaskSPI+0xca>

	    case MCP2515_READ_TIMEOUT_2:
	      resMcp2515_msg = "MCP2515_READ_TIMEOUT_2\n";
 8000c56:	4b26      	ldr	r3, [pc, #152]	@ (8000cf0 <StartTaskSPI+0x14c>)
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
	      break;
 8000c5a:	e008      	b.n	8000c6e <StartTaskSPI+0xca>

	    case MCP2515_BAUDRATE_READ_FAIL:
	      resMcp2515_msg = "MCP2515_BAUDRATE_READ_FAIL\n";
 8000c5c:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <StartTaskSPI+0x150>)
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
	      break;
 8000c60:	e005      	b.n	8000c6e <StartTaskSPI+0xca>

	    case MCP2515_BAUDRATE_NOT_OK:
	      resMcp2515_msg = "MCP2515_BAUDRATE_NOT_OK\n";
 8000c62:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <StartTaskSPI+0x154>)
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
	      break;
 8000c66:	e002      	b.n	8000c6e <StartTaskSPI+0xca>

	    default:
	      resMcp2515_msg = "Errore non riconosciuto mcp2515\n";
 8000c68:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <StartTaskSPI+0x158>)
 8000c6a:	627b      	str	r3, [r7, #36]	@ 0x24
	      break;
 8000c6c:	bf00      	nop
	  }

	  HAL_UART_Transmit(&huart1, (uint8_t*)resMcp2515_msg, strlen(resMcp2515_msg), HAL_MAX_DELAY);
 8000c6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000c70:	f7ff fab6 	bl	80001e0 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000c7e:	4820      	ldr	r0, [pc, #128]	@ (8000d00 <StartTaskSPI+0x15c>)
 8000c80:	f003 f9e4 	bl	800404c <HAL_UART_Transmit>

	  uint8_t resultHandler = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	  uint8_t resultSend = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  /* Infinite loop */
  for(;;)
  {

	  //ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
	  if (result_mcp2515Init == MCP2515_OK){
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <StartTaskSPI+0x12c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1fb      	bne.n	8000c90 <StartTaskSPI+0xec>





		  resultHandler = MCP2515_InterruptHandler(&mcp2515_1, &mcp2515Int, &canMsg_buffer);
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4919      	ldr	r1, [pc, #100]	@ (8000d04 <StartTaskSPI+0x160>)
 8000ca0:	480a      	ldr	r0, [pc, #40]	@ (8000ccc <StartTaskSPI+0x128>)
 8000ca2:	f000 fd5d 	bl	8001760 <MCP2515_InterruptHandler>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
		  	  }*/



		  	resultSend = MCP2515_SendMessage(&mcp2515_1, &canMsg_buffer, canMessageTx);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4a15      	ldr	r2, [pc, #84]	@ (8000d08 <StartTaskSPI+0x164>)
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <StartTaskSPI+0x128>)
 8000cb6:	f000 fc6f 	bl	8001598 <MCP2515_SendMessage>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	  if (result_mcp2515Init == MCP2515_OK){
 8000cc0:	e7e6      	b.n	8000c90 <StartTaskSPI+0xec>
 8000cc2:	bf00      	nop
 8000cc4:	200000d8 	.word	0x200000d8
 8000cc8:	40020400 	.word	0x40020400
 8000ccc:	20000180 	.word	0x20000180
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	08008370 	.word	0x08008370
 8000cd8:	08008390 	.word	0x08008390
 8000cdc:	080083b4 	.word	0x080083b4
 8000ce0:	080083cc 	.word	0x080083cc
 8000ce4:	080083ec 	.word	0x080083ec
 8000ce8:	08008414 	.word	0x08008414
 8000cec:	0800842c 	.word	0x0800842c
 8000cf0:	08008444 	.word	0x08008444
 8000cf4:	0800845c 	.word	0x0800845c
 8000cf8:	08008478 	.word	0x08008478
 8000cfc:	08008494 	.word	0x08008494
 8000d00:	20000130 	.word	0x20000130
 8000d04:	20000190 	.word	0x20000190
 8000d08:	20000194 	.word	0x20000194

08000d0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a04      	ldr	r2, [pc, #16]	@ (8000d2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d101      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1e:	f001 f899 	bl	8001e54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40010000 	.word	0x40010000

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <Error_Handler+0x8>

08000d3c <MCP2515_Init>:
static uint8_t emptyTXBuffer[3] = {true, true,true};
uint8_t idDataEmpty[4] = {0x0, 0x0, 0x0, 0x0};
uint8_t dataEmpty[8] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,0x0};

// Costruttore
uint8_t MCP2515_Init(MCP2515_HandleTypeDef* hdev, GPIO_TypeDef* csPort,  uint16_t csPin, SPI_HandleTypeDef* hspi, uint8_t baudrate,uint8_t intTxEnable ) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	80fb      	strh	r3, [r7, #6]
    hdev->csPin = csPin;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	88fa      	ldrh	r2, [r7, #6]
 8000d50:	809a      	strh	r2, [r3, #4]
    hdev->csPort = csPort;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	68ba      	ldr	r2, [r7, #8]
 8000d56:	601a      	str	r2, [r3, #0]
    hdev->hspi = hspi;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	609a      	str	r2, [r3, #8]
    
    uint8_t result = MCP2515_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75fb      	strb	r3, [r7, #23]
    result = MCP2515_deviceInit(hdev, baudrate, intTxEnable);
 8000d62:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000d66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f000 f807 	bl	8000d80 <MCP2515_deviceInit>
 8000d72:	4603      	mov	r3, r0
 8000d74:	75fb      	strb	r3, [r7, #23]
    
    return result;
 8000d76:	7dfb      	ldrb	r3, [r7, #23]
       

}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <MCP2515_deviceInit>:

uint8_t MCP2515_deviceInit(MCP2515_HandleTypeDef* hdev, uint8_t baudrate, uint8_t intTxEnable) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	70fb      	strb	r3, [r7, #3]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	70bb      	strb	r3, [r7, #2]

    HAL_Delay(100);
 8000d90:	2064      	movs	r0, #100	@ 0x64
 8000d92:	f001 f87f 	bl	8001e94 <HAL_Delay>

    // Resetta il MCP2515
    uint8_t resultReset;
    //MCP2515_Reset(hdev);
    resultReset = MCP2515_Reset(hdev);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f000 f83a 	bl	8000e10 <MCP2515_Reset>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]
    if (resultReset != MCP2515_OK) {
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MCP2515_deviceInit+0x2a>
        return resultReset;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	e02e      	b.n	8000e08 <MCP2515_deviceInit+0x88>
    }

    // Imposta il baudrate
    uint8_t resultBaudrate;
    resultBaudrate = MCP2515_SetBaudrate(hdev, baudrate);
 8000daa:	78fb      	ldrb	r3, [r7, #3]
 8000dac:	4619      	mov	r1, r3
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f89c 	bl	8000eec <MCP2515_SetBaudrate>
 8000db4:	4603      	mov	r3, r0
 8000db6:	73bb      	strb	r3, [r7, #14]
    if (resultBaudrate != MCP2515_OK) {
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MCP2515_deviceInit+0x42>
        return resultBaudrate;
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	e022      	b.n	8000e08 <MCP2515_deviceInit+0x88>
    }
    
    // Imposta la modalità operativa
    uint8_t resultRun;
    resultRun = MCP2515_SetMode(hdev, MCP2515_NORMAL_MODE);
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f000 f9e1 	bl	800118c <MCP2515_SetMode>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	737b      	strb	r3, [r7, #13]
    if (resultRun != MCP2515_OK) {
 8000dce:	7b7b      	ldrb	r3, [r7, #13]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MCP2515_deviceInit+0x58>
        return MCP2515_SET_MODE_FAIL;
 8000dd4:	2304      	movs	r3, #4
 8000dd6:	e017      	b.n	8000e08 <MCP2515_deviceInit+0x88>
    }
    
    uint8_t resultResetInt;
    resultResetInt = MCP2515_ResetInt(hdev);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 fa1e 	bl	800121a <MCP2515_ResetInt>
 8000dde:	4603      	mov	r3, r0
 8000de0:	733b      	strb	r3, [r7, #12]
    if (resultResetInt != MCP2515_OK) {
 8000de2:	7b3b      	ldrb	r3, [r7, #12]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MCP2515_deviceInit+0x6c>
        return MCP2515_FAIL;
 8000de8:	2301      	movs	r3, #1
 8000dea:	e00d      	b.n	8000e08 <MCP2515_deviceInit+0x88>
    }
    // Imposta l'interrupt sui tx'
    if (intTxEnable){
 8000dec:	78bb      	ldrb	r3, [r7, #2]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d009      	beq.n	8000e06 <MCP2515_deviceInit+0x86>
        uint8_t resultIntTx;
        resultIntTx = MCP2515_SetIntTx(hdev);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 fa27 	bl	8001246 <MCP2515_SetIntTx>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	72fb      	strb	r3, [r7, #11]
        if (resultIntTx != MCP2515_OK) {
 8000dfc:	7afb      	ldrb	r3, [r7, #11]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MCP2515_deviceInit+0x86>
            return MCP2515_FAIL;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <MCP2515_deviceInit+0x88>
            printf("Errore nell'enable interrupt tx\n");
        }
    }


    return MCP2515_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <MCP2515_Reset>:

uint8_t MCP2515_Reset(MCP2515_HandleTypeDef* hdev) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    uint8_t resetCommand = MCP2515_RESET;
 8000e18:	23c0      	movs	r3, #192	@ 0xc0
 8000e1a:	737b      	strb	r3, [r7, #13]
    const uint32_t timeout = 10; // Timeout di 10 ms
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	617b      	str	r3, [r7, #20]
    

    hdev->transmissionComplete = 0;  // Resetta lo stato
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	731a      	strb	r2, [r3, #12]
    
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	889b      	ldrh	r3, [r3, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	4619      	mov	r1, r3
 8000e32:	f001 fadb 	bl	80023ec <HAL_GPIO_WritePin>
    //HAL_Delay(2);
    HAL_SPI_Transmit_IT(hdev->hspi, &resetCommand, 1); // Invia il comando di reset
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f107 010d 	add.w	r1, r7, #13
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 f95b 	bl	80030fc <HAL_SPI_Transmit_IT>
    uint32_t startTime = HAL_GetTick();
 8000e46:	f001 f819 	bl	8001e7c <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]
    // Attendi il completamento della trasmissione
    while (!hdev->transmissionComplete) {
 8000e4c:	e011      	b.n	8000e72 <MCP2515_Reset+0x62>
        if ((HAL_GetTick() - startTime) > timeout) {
 8000e4e:	f001 f815 	bl	8001e7c <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d209      	bcs.n	8000e72 <MCP2515_Reset+0x62>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	889b      	ldrh	r3, [r3, #4]
 8000e66:	2201      	movs	r2, #1
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f001 fabf 	bl	80023ec <HAL_GPIO_WritePin>
            return MCP2515_RESET_TIMEOUT; // Esci dalla funzione, indicando un errore o fallimento
 8000e6e:	2305      	movs	r3, #5
 8000e70:	e028      	b.n	8000ec4 <MCP2515_Reset+0xb4>
    while (!hdev->transmissionComplete) {
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7b1b      	ldrb	r3, [r3, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d0e9      	beq.n	8000e4e <MCP2515_Reset+0x3e>
        }
    }
    hdev->transmissionComplete = 0;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	731a      	strb	r2, [r3, #12]
    HAL_Delay(10);  // Attendi che il reset venga completato (10 ms è un valore standard)
 8000e80:	200a      	movs	r0, #10
 8000e82:	f001 f807 	bl	8001e94 <HAL_Delay>
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	889b      	ldrh	r3, [r3, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4619      	mov	r1, r3
 8000e92:	f001 faab 	bl	80023ec <HAL_GPIO_WritePin>

    

    uint8_t status_data;
    uint8_t resultRead;
    resultRead = MCP2515_ReadRegister(hdev,MCP2515_CANSTAT_MSG, &status_data);
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	210e      	movs	r1, #14
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f000 f8fe 	bl	80010a0 <MCP2515_ReadRegister>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	73fb      	strb	r3, [r7, #15]
    if (resultRead != MCP2515_OK)
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MCP2515_Reset+0xa2>
        return resultRead;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	e008      	b.n	8000ec4 <MCP2515_Reset+0xb4>
    // Verifica se il modo è stato impostato correttamente
    uint8_t currentMode = (status_data >> 5) & 0x07;
 8000eb2:	7b3b      	ldrb	r3, [r7, #12]
 8000eb4:	095b      	lsrs	r3, r3, #5
 8000eb6:	73bb      	strb	r3, [r7, #14]
    if (currentMode != MCP2515_CONFIGURATION_MODE) {
 8000eb8:	7bbb      	ldrb	r3, [r7, #14]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d001      	beq.n	8000ec2 <MCP2515_Reset+0xb2>
            return MCP2515_RESET_FAIL; }
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e000      	b.n	8000ec4 <MCP2515_Reset+0xb4>


    return MCP2515_OK;  // Restituisci un codice di successo
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <MCP2515_SetTransmissionComplete>:

void MCP2515_SetTransmissionComplete(MCP2515_HandleTypeDef* hdev, uint8_t transmissionComplete) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
    hdev->transmissionComplete = transmissionComplete;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	78fa      	ldrb	r2, [r7, #3]
 8000edc:	731a      	strb	r2, [r3, #12]
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
	...

08000eec <MCP2515_SetBaudrate>:


uint8_t MCP2515_SetBaudrate(MCP2515_HandleTypeDef* hdev, uint8_t baudrate) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
    const uint32_t timeout = 10; // Timeout di 10 ms
 8000ef8:	230a      	movs	r3, #10
 8000efa:	613b      	str	r3, [r7, #16]
    uint8_t CNF1, CNF2, CNF3;

    // composizione messaggi
    switch (baudrate) {
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d826      	bhi.n	8000f50 <MCP2515_SetBaudrate+0x64>
 8000f02:	a201      	add	r2, pc, #4	@ (adr r2, 8000f08 <MCP2515_SetBaudrate+0x1c>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f27 	.word	0x08000f27
 8000f10:	08000f35 	.word	0x08000f35
 8000f14:	08000f43 	.word	0x08000f43
        case CAN_BAUDRATE_125kbps:  // 125 kbps
            CNF1 = (MCP2515_SJW_DATA_125kbps << 6) | MCP2515_BRP_DATA_125kbps;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	75fb      	strb	r3, [r7, #23]
            CNF2 = (MCP2515_BTLMODE_DATA_125kbps << 7) | (MCP2515_SAM_DATA_125kbps << 6) | (MCP2515_PHSEG1_DATA_125kbps << 3) | MCP2515_PRSEG_DATA_125kbps;
 8000f1c:	23f0      	movs	r3, #240	@ 0xf0
 8000f1e:	75bb      	strb	r3, [r7, #22]
            CNF3 = (MCP2515_SOF_DATA_125kbps << 7) | (MCP2515_WAKFIL_DATA_125kbps << 6) | MCP2515_PHSEG2_DATA_125kbps;
 8000f20:	2386      	movs	r3, #134	@ 0x86
 8000f22:	757b      	strb	r3, [r7, #21]
            break;
 8000f24:	e016      	b.n	8000f54 <MCP2515_SetBaudrate+0x68>

        case CAN_BAUDRATE_250kbps:  // 250 kbps
            CNF1 = (MCP2515_SJW_DATA_250kbps << 6) | MCP2515_BRP_DATA_250kbps;
 8000f26:	2300      	movs	r3, #0
 8000f28:	75fb      	strb	r3, [r7, #23]
            CNF2 = (MCP2515_BTLMODE_DATA_250kbps << 7) | (MCP2515_SAM_DATA_250kbps << 6) | (MCP2515_PHSEG1_DATA_250kbps << 3) | MCP2515_PRSEG_DATA_250kbps;
 8000f2a:	23d5      	movs	r3, #213	@ 0xd5
 8000f2c:	75bb      	strb	r3, [r7, #22]
            CNF3 = (MCP2515_SOF_DATA_250kbps << 7) | (MCP2515_WAKFIL_DATA_250kbps << 6) | MCP2515_PHSEG2_DATA_250kbps;
 8000f2e:	2305      	movs	r3, #5
 8000f30:	757b      	strb	r3, [r7, #21]
            break;
 8000f32:	e00f      	b.n	8000f54 <MCP2515_SetBaudrate+0x68>

        case CAN_BAUDRATE_500kbps:  // 500 kbps
            CNF1 = (MCP2515_SJW_DATA_500kbps << 6) | MCP2515_BRP_DATA_500kbps;
 8000f34:	2300      	movs	r3, #0
 8000f36:	75fb      	strb	r3, [r7, #23]
            CNF2 = (MCP2515_BTLMODE_DATA_500kbps << 7) | (MCP2515_SAM_DATA_500kbps << 6) | (MCP2515_PHSEG1_DATA_500kbps << 3) | MCP2515_PRSEG_DATA_500kbps;
 8000f38:	238a      	movs	r3, #138	@ 0x8a
 8000f3a:	75bb      	strb	r3, [r7, #22]
            CNF3 = (MCP2515_SOF_DATA_500kbps << 7) | (MCP2515_WAKFIL_DATA_500kbps << 6) | MCP2515_PHSEG2_DATA_500kbps;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	757b      	strb	r3, [r7, #21]
            break;
 8000f40:	e008      	b.n	8000f54 <MCP2515_SetBaudrate+0x68>

        case CAN_BAUDRATE_1Mbps:  // 1 Mbps
            CNF1 = (MCP2515_SJW_DATA_1Mbps << 6) | MCP2515_BRP_DATA_1Mbps;
 8000f42:	2300      	movs	r3, #0
 8000f44:	75fb      	strb	r3, [r7, #23]
            CNF2 = (MCP2515_BTLMODE_DATA_1Mbps << 7) | (MCP2515_SAM_DATA_1Mbps << 6) | (MCP2515_PHSEG1_DATA_1Mbps << 3) | MCP2515_PRSEG_DATA_1Mbps;
 8000f46:	23d8      	movs	r3, #216	@ 0xd8
 8000f48:	75bb      	strb	r3, [r7, #22]
            CNF3 = (MCP2515_SOF_DATA_1Mbps << 7) | (MCP2515_WAKFIL_DATA_1Mbps << 6) | MCP2515_PHSEG2_DATA_1Mbps;
 8000f4a:	2380      	movs	r3, #128	@ 0x80
 8000f4c:	757b      	strb	r3, [r7, #21]
            break;
 8000f4e:	e001      	b.n	8000f54 <MCP2515_SetBaudrate+0x68>

        default:
            return MCP2515_SET_BAUDRATE_FAIL;  // Baud rate non supportato
 8000f50:	2303      	movs	r3, #3
 8000f52:	e055      	b.n	8001000 <MCP2515_SetBaudrate+0x114>

    //printf("CNF1: 0x%02X, CNF2: 0x%02X, CNF3: 0x%02X\n", CNF1, CNF2, CNF3);


    // Scrivi i registri e attendi la conferma
    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CNF1_MSG, CNF1, timeout) != MCP2515_OK)
 8000f54:	7dfa      	ldrb	r2, [r7, #23]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	212a      	movs	r1, #42	@ 0x2a
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f854 	bl	8001008 <MCP2515_WriteRegisterWithTimeout>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MCP2515_SetBaudrate+0x7e>
        return MCP2515_SET_BAUDRATE_FAIL;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e04a      	b.n	8001000 <MCP2515_SetBaudrate+0x114>

    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CNF2_MSG, CNF2, timeout) != MCP2515_OK)
 8000f6a:	7dba      	ldrb	r2, [r7, #22]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	2129      	movs	r1, #41	@ 0x29
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 f849 	bl	8001008 <MCP2515_WriteRegisterWithTimeout>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MCP2515_SetBaudrate+0x94>
        return MCP2515_SET_BAUDRATE_FAIL;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e03f      	b.n	8001000 <MCP2515_SetBaudrate+0x114>

    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CNF3_MSG, CNF3, timeout) != MCP2515_OK)
 8000f80:	7d7a      	ldrb	r2, [r7, #21]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	2128      	movs	r1, #40	@ 0x28
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f83e 	bl	8001008 <MCP2515_WriteRegisterWithTimeout>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MCP2515_SetBaudrate+0xaa>
        return MCP2515_SET_BAUDRATE_FAIL;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e034      	b.n	8001000 <MCP2515_SetBaudrate+0x114>

    // verifica scrittura
    uint8_t result_read_cnf1, result_read_cnf2, result_read_cnf3;
    uint8_t read_cnf1, read_cnf2, read_cnf3;
    // Leggi i registri CNF1, CNF2, CNF3
    result_read_cnf1 = MCP2515_ReadRegister(hdev,MCP2515_CNF1_MSG, &read_cnf1);
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	212a      	movs	r1, #42	@ 0x2a
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f87e 	bl	80010a0 <MCP2515_ReadRegister>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
    result_read_cnf2 = MCP2515_ReadRegister(hdev,MCP2515_CNF2_MSG, &read_cnf2);
 8000fa8:	f107 030b 	add.w	r3, r7, #11
 8000fac:	461a      	mov	r2, r3
 8000fae:	2129      	movs	r1, #41	@ 0x29
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f875 	bl	80010a0 <MCP2515_ReadRegister>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73bb      	strb	r3, [r7, #14]
    result_read_cnf3 = MCP2515_ReadRegister(hdev,MCP2515_CNF3_MSG, &read_cnf3);
 8000fba:	f107 030a 	add.w	r3, r7, #10
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	2128      	movs	r1, #40	@ 0x28
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f86c 	bl	80010a0 <MCP2515_ReadRegister>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	737b      	strb	r3, [r7, #13]

    if (result_read_cnf1 != MCP2515_OK ||
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d105      	bne.n	8000fde <MCP2515_SetBaudrate+0xf2>
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <MCP2515_SetBaudrate+0xf2>
        result_read_cnf2 != MCP2515_OK ||
 8000fd8:	7b7b      	ldrb	r3, [r7, #13]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MCP2515_SetBaudrate+0xf6>
        result_read_cnf3 != MCP2515_OK) {
            return MCP2515_BAUDRATE_READ_FAIL;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	e00e      	b.n	8001000 <MCP2515_SetBaudrate+0x114>

        }

    // Confronta con i valori attesi
    if (read_cnf1 != CNF1 || 
 8000fe2:	7b3b      	ldrb	r3, [r7, #12]
 8000fe4:	7dfa      	ldrb	r2, [r7, #23]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d107      	bne.n	8000ffa <MCP2515_SetBaudrate+0x10e>
        read_cnf2 != CNF2 || 
 8000fea:	7afb      	ldrb	r3, [r7, #11]
    if (read_cnf1 != CNF1 || 
 8000fec:	7dba      	ldrb	r2, [r7, #22]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d103      	bne.n	8000ffa <MCP2515_SetBaudrate+0x10e>
        read_cnf3 != CNF3) {
 8000ff2:	7abb      	ldrb	r3, [r7, #10]
        read_cnf2 != CNF2 || 
 8000ff4:	7d7a      	ldrb	r2, [r7, #21]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d001      	beq.n	8000ffe <MCP2515_SetBaudrate+0x112>
            return MCP2515_BAUDRATE_NOT_OK;
 8000ffa:	2309      	movs	r3, #9
 8000ffc:	e000      	b.n	8001000 <MCP2515_SetBaudrate+0x114>
    }

    return MCP2515_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <MCP2515_WriteRegisterWithTimeout>:

uint8_t MCP2515_WriteRegisterWithTimeout(MCP2515_HandleTypeDef* hdev, uint8_t address, uint8_t value, uint32_t timeout){
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	460b      	mov	r3, r1
 8001014:	72fb      	strb	r3, [r7, #11]
 8001016:	4613      	mov	r3, r2
 8001018:	72bb      	strb	r3, [r7, #10]
    uint32_t startTime;
    
    uint8_t writeMessage[3];
    writeMessage[0] = MCP2515_WRITE;
 800101a:	2302      	movs	r3, #2
 800101c:	743b      	strb	r3, [r7, #16]
    writeMessage[1] = address;
 800101e:	7afb      	ldrb	r3, [r7, #11]
 8001020:	747b      	strb	r3, [r7, #17]
    writeMessage[2] = value;
 8001022:	7abb      	ldrb	r3, [r7, #10]
 8001024:	74bb      	strb	r3, [r7, #18]
    /*printf("value: 0x%02X\n", value);
    int arraySize = sizeof(writeMessage) / sizeof(writeMessage[0]);
    printByteArray(writeMessage, arraySize);*/

    
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	889b      	ldrh	r3, [r3, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	f001 f9db 	bl	80023ec <HAL_GPIO_WritePin>
    hdev->transmissionComplete = 0;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2200      	movs	r2, #0
 800103a:	731a      	strb	r2, [r3, #12]
    HAL_SPI_Transmit_IT(hdev->hspi, writeMessage, 3);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f107 0110 	add.w	r1, r7, #16
 8001044:	2203      	movs	r2, #3
 8001046:	4618      	mov	r0, r3
 8001048:	f002 f858 	bl	80030fc <HAL_SPI_Transmit_IT>

    startTime = HAL_GetTick();
 800104c:	f000 ff16 	bl	8001e7c <HAL_GetTick>
 8001050:	6178      	str	r0, [r7, #20]
    while (!hdev->transmissionComplete) {
 8001052:	e011      	b.n	8001078 <MCP2515_WriteRegisterWithTimeout+0x70>
        if ((HAL_GetTick() - startTime) > timeout) {
 8001054:	f000 ff12 	bl	8001e7c <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	d209      	bcs.n	8001078 <MCP2515_WriteRegisterWithTimeout+0x70>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	889b      	ldrh	r3, [r3, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	f001 f9bc 	bl	80023ec <HAL_GPIO_WritePin>
            return MCP2515_FAIL; // Timeout raggiunto
 8001074:	2301      	movs	r3, #1
 8001076:	e00f      	b.n	8001098 <MCP2515_WriteRegisterWithTimeout+0x90>
    while (!hdev->transmissionComplete) {
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	7b1b      	ldrb	r3, [r3, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d0e9      	beq.n	8001054 <MCP2515_WriteRegisterWithTimeout+0x4c>
        }
    }
    hdev->transmissionComplete = 0;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2200      	movs	r2, #0
 8001084:	731a      	strb	r2, [r3, #12]
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	889b      	ldrh	r3, [r3, #4]
 800108e:	2201      	movs	r2, #1
 8001090:	4619      	mov	r1, r3
 8001092:	f001 f9ab 	bl	80023ec <HAL_GPIO_WritePin>
    
    return MCP2515_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3718      	adds	r7, #24
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <MCP2515_ReadRegister>:


uint8_t MCP2515_ReadRegister(MCP2515_HandleTypeDef* hdev, uint8_t address, uint8_t* data){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	460b      	mov	r3, r1
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	72fb      	strb	r3, [r7, #11]
    uint32_t startTime;
    const uint32_t timeout = 10; // Timeout di 10 ms
 80010ae:	230a      	movs	r3, #10
 80010b0:	61fb      	str	r3, [r7, #28]
    uint8_t readMessage[2];
    readMessage[0] = MCP2515_READ;
 80010b2:	2303      	movs	r3, #3
 80010b4:	753b      	strb	r3, [r7, #20]
    readMessage[1] = address;
 80010b6:	7afb      	ldrb	r3, [r7, #11]
 80010b8:	757b      	strb	r3, [r7, #21]

    uint8_t dummyData = 0x00;  // Dato dummy per generare i clock necessari
 80010ba:	2300      	movs	r3, #0
 80010bc:	74fb      	strb	r3, [r7, #19]
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	889b      	ldrh	r3, [r3, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	f001 f98f 	bl	80023ec <HAL_GPIO_WritePin>
    hdev->transmissionComplete = 0;  // Resetta lo stato
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	731a      	strb	r2, [r3, #12]
    // Trasmetti il comando di lettura e l'indirizzo
    HAL_SPI_Transmit_IT(hdev->hspi, readMessage, 2);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f107 0114 	add.w	r1, r7, #20
 80010dc:	2202      	movs	r2, #2
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 f80c 	bl	80030fc <HAL_SPI_Transmit_IT>
    startTime = HAL_GetTick();
 80010e4:	f000 feca 	bl	8001e7c <HAL_GetTick>
 80010e8:	61b8      	str	r0, [r7, #24]
    // Attendi che la trasmissione sia completata
    while (!hdev->transmissionComplete) {
 80010ea:	e014      	b.n	8001116 <MCP2515_ReadRegister+0x76>
        if ((HAL_GetTick() - startTime) > timeout) {
 80010ec:	f000 fec6 	bl	8001e7c <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d20c      	bcs.n	8001116 <MCP2515_ReadRegister+0x76>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	889b      	ldrh	r3, [r3, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f001 f970 	bl	80023ec <HAL_GPIO_WritePin>
            printf("Timeout trasmission read");
 800110c:	481e      	ldr	r0, [pc, #120]	@ (8001188 <MCP2515_ReadRegister+0xe8>)
 800110e:	f006 fa3d 	bl	800758c <iprintf>
            return MCP2515_READ_TIMEOUT_1; // Timeout raggiunto
 8001112:	2306      	movs	r3, #6
 8001114:	e034      	b.n	8001180 <MCP2515_ReadRegister+0xe0>
    while (!hdev->transmissionComplete) {
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	7b1b      	ldrb	r3, [r3, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0e6      	beq.n	80010ec <MCP2515_ReadRegister+0x4c>
        }
    }
    hdev->transmissionComplete = 0;  // Resetta lo stato
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2200      	movs	r2, #0
 8001122:	731a      	strb	r2, [r3, #12]
    // Ricevi il dato dal registro
    HAL_SPI_TransmitReceive_IT(hdev->hspi, &dummyData, data, 1);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6898      	ldr	r0, [r3, #8]
 8001128:	f107 0113 	add.w	r1, r7, #19
 800112c:	2301      	movs	r3, #1
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	f002 f86c 	bl	800320c <HAL_SPI_TransmitReceive_IT>
    startTime = HAL_GetTick();
 8001134:	f000 fea2 	bl	8001e7c <HAL_GetTick>
 8001138:	61b8      	str	r0, [r7, #24]
    // Attendi che la ricezione sia completata
    while (!hdev->transmissionComplete) {
 800113a:	e011      	b.n	8001160 <MCP2515_ReadRegister+0xc0>
        if ((HAL_GetTick() - startTime) > timeout) {
 800113c:	f000 fe9e 	bl	8001e7c <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	429a      	cmp	r2, r3
 800114a:	d209      	bcs.n	8001160 <MCP2515_ReadRegister+0xc0>
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	889b      	ldrh	r3, [r3, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	4619      	mov	r1, r3
 8001158:	f001 f948 	bl	80023ec <HAL_GPIO_WritePin>
            return MCP2515_READ_TIMEOUT_2; // Timeout raggiunto
 800115c:	2307      	movs	r3, #7
 800115e:	e00f      	b.n	8001180 <MCP2515_ReadRegister+0xe0>
    while (!hdev->transmissionComplete) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	7b1b      	ldrb	r3, [r3, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0e9      	beq.n	800113c <MCP2515_ReadRegister+0x9c>
        }
    }
    hdev->transmissionComplete = 0;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	731a      	strb	r2, [r3, #12]
    HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	889b      	ldrh	r3, [r3, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	f001 f937 	bl	80023ec <HAL_GPIO_WritePin>
    return MCP2515_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	080084b8 	.word	0x080084b8

0800118c <MCP2515_SetMode>:


uint8_t MCP2515_SetMode(MCP2515_HandleTypeDef* hdev, uint8_t mode) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
    const uint32_t timeout = 10; // Timeout di 10 ms
 8001198:	230a      	movs	r3, #10
 800119a:	60fb      	str	r3, [r7, #12]
    uint8_t status_data;
    uint8_t canctrl_data;
    uint8_t valueToSend;

    // Leggi il valore corrente per preservare gli altri bit
    if (MCP2515_ReadRegister(hdev, MCP2515_CANCTRL_MSG, &canctrl_data) != MCP2515_OK)
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	461a      	mov	r2, r3
 80011a2:	210f      	movs	r1, #15
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff7b 	bl	80010a0 <MCP2515_ReadRegister>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MCP2515_SetMode+0x28>
        return MCP2515_FAIL;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e02e      	b.n	8001212 <MCP2515_SetMode+0x86>

    // Preserva gli altri bit e imposta quelli relativi alla trasmissione
    valueToSend = canctrl_data;
 80011b4:	7a3b      	ldrb	r3, [r7, #8]
 80011b6:	72fb      	strb	r3, [r7, #11]
    valueToSend &= ~(0x7 << 5);
 80011b8:	7afb      	ldrb	r3, [r7, #11]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	72fb      	strb	r3, [r7, #11]
    valueToSend |= (mode << 5);
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	015b      	lsls	r3, r3, #5
 80011c4:	b25a      	sxtb	r2, r3
 80011c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	72fb      	strb	r3, [r7, #11]

    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CANCTRL_MSG, valueToSend, timeout) != MCP2515_OK)
 80011d0:	7afa      	ldrb	r2, [r7, #11]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	210f      	movs	r1, #15
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff16 	bl	8001008 <MCP2515_WriteRegisterWithTimeout>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MCP2515_SetMode+0x5a>
        return MCP2515_FAIL;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e015      	b.n	8001212 <MCP2515_SetMode+0x86>

    if (MCP2515_ReadRegister(hdev,MCP2515_CANSTAT_MSG, &status_data) != MCP2515_OK)
 80011e6:	f107 0309 	add.w	r3, r7, #9
 80011ea:	461a      	mov	r2, r3
 80011ec:	210e      	movs	r1, #14
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff56 	bl	80010a0 <MCP2515_ReadRegister>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MCP2515_SetMode+0x72>
        return MCP2515_FAIL;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e009      	b.n	8001212 <MCP2515_SetMode+0x86>
    // Verifica se il modo è stato impostato correttamente
    uint8_t currentMode = (status_data >> 5) & 0x07;
 80011fe:	7a7b      	ldrb	r3, [r7, #9]
 8001200:	095b      	lsrs	r3, r3, #5
 8001202:	72bb      	strb	r3, [r7, #10]
    if (currentMode == mode) {
 8001204:	7aba      	ldrb	r2, [r7, #10]
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	429a      	cmp	r2, r3
 800120a:	d101      	bne.n	8001210 <MCP2515_SetMode+0x84>
        return MCP2515_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	e000      	b.n	8001212 <MCP2515_SetMode+0x86>
    }else
        return MCP2515_FAIL; 
 8001210:	2301      	movs	r3, #1
    
    return 
    MCP2515_FAIL;
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <MCP2515_ResetInt>:

uint8_t MCP2515_ResetInt(MCP2515_HandleTypeDef* hdev) {
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
	const uint32_t timeout = 5; // Timeout di 10 ms
 8001222:	2305      	movs	r3, #5
 8001224:	60fb      	str	r3, [r7, #12]
	if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CANINTE_MSG, 0x0, timeout) != MCP2515_OK) // rivedere se si vogliono attivare altri enable
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	212b      	movs	r1, #43	@ 0x2b
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff feeb 	bl	8001008 <MCP2515_WriteRegisterWithTimeout>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MCP2515_ResetInt+0x22>
	   return MCP2515_FAIL;
 8001238:	2301      	movs	r3, #1
 800123a:	e000      	b.n	800123e <MCP2515_ResetInt+0x24>
	return MCP2515_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <MCP2515_SetIntTx>:





uint8_t MCP2515_SetIntTx(MCP2515_HandleTypeDef* hdev) {
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
    const uint32_t timeout = 5; // Timeout di 10 ms
 800124e:	2305      	movs	r3, #5
 8001250:	60fb      	str	r3, [r7, #12]
    uint8_t caninte_data;
    uint8_t intTx_value = 0x1C;
 8001252:	231c      	movs	r3, #28
 8001254:	72fb      	strb	r3, [r7, #11]
    
    // Leggi il valore corrente di CANINTE per preservare gli altri bit
    if (MCP2515_ReadRegister(hdev, MCP2515_CANINTE_MSG, &caninte_data) != MCP2515_OK)
 8001256:	f107 0309 	add.w	r3, r7, #9
 800125a:	461a      	mov	r2, r3
 800125c:	212b      	movs	r1, #43	@ 0x2b
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff1e 	bl	80010a0 <MCP2515_ReadRegister>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MCP2515_SetIntTx+0x28>
        return MCP2515_FAIL;
 800126a:	2301      	movs	r3, #1
 800126c:	e024      	b.n	80012b8 <MCP2515_SetIntTx+0x72>

    // Preserva gli altri bit e imposta quelli relativi alla trasmissione
    uint8_t valueToSend = caninte_data | intTx_value;
 800126e:	7a7a      	ldrb	r2, [r7, #9]
 8001270:	7afb      	ldrb	r3, [r7, #11]
 8001272:	4313      	orrs	r3, r2
 8001274:	72bb      	strb	r3, [r7, #10]

    if (MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CANINTE_MSG, valueToSend, timeout) != MCP2515_OK) // rivedere se si vogliono attivare altri enable
 8001276:	7aba      	ldrb	r2, [r7, #10]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	212b      	movs	r1, #43	@ 0x2b
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fec3 	bl	8001008 <MCP2515_WriteRegisterWithTimeout>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MCP2515_SetIntTx+0x46>
        return MCP2515_FAIL;
 8001288:	2301      	movs	r3, #1
 800128a:	e015      	b.n	80012b8 <MCP2515_SetIntTx+0x72>

    if (MCP2515_ReadRegister(hdev,MCP2515_CANINTE_MSG, &caninte_data) != MCP2515_OK)
 800128c:	f107 0309 	add.w	r3, r7, #9
 8001290:	461a      	mov	r2, r3
 8001292:	212b      	movs	r1, #43	@ 0x2b
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff03 	bl	80010a0 <MCP2515_ReadRegister>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MCP2515_SetIntTx+0x5e>
        return MCP2515_FAIL;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e009      	b.n	80012b8 <MCP2515_SetIntTx+0x72>

    // Controlla se i bit desiderati sono stati impostati
    if ((caninte_data & intTx_value) == intTx_value) {
 80012a4:	7a7a      	ldrb	r2, [r7, #9]
 80012a6:	7afb      	ldrb	r3, [r7, #11]
 80012a8:	4013      	ands	r3, r2
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	7afa      	ldrb	r2, [r7, #11]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d101      	bne.n	80012b6 <MCP2515_SetIntTx+0x70>
        return MCP2515_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <MCP2515_SetIntTx+0x72>
    }else
        return MCP2515_FAIL; 
 80012b6:	2301      	movs	r3, #1

    return MCP2515_FAIL;
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <MCP2515_LoadTXBuffer>:

void MCP2515_LoadTXBuffer(MCP2515_HandleTypeDef* hdev, MCP2515_MessageBuffer* msgBuffer, uint8_t start) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	4613      	mov	r3, r2
 80012cc:	71fb      	strb	r3, [r7, #7]
    static uint8_t writeMessage[4];

    switch (msgBuffer->status){
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	7c5b      	ldrb	r3, [r3, #17]
 80012d2:	2b0a      	cmp	r3, #10
 80012d4:	f200 8144 	bhi.w	8001560 <MCP2515_LoadTXBuffer+0x2a0>
 80012d8:	a201      	add	r2, pc, #4	@ (adr r2, 80012e0 <MCP2515_LoadTXBuffer+0x20>)
 80012da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012de:	bf00      	nop
 80012e0:	0800130d 	.word	0x0800130d
 80012e4:	08001323 	.word	0x08001323
 80012e8:	08001397 	.word	0x08001397
 80012ec:	080013c5 	.word	0x080013c5
 80012f0:	080013ed 	.word	0x080013ed
 80012f4:	08001415 	.word	0x08001415
 80012f8:	0800144f 	.word	0x0800144f
 80012fc:	080014bb 	.word	0x080014bb
 8001300:	08001525 	.word	0x08001525
 8001304:	0800154b 	.word	0x0800154b
 8001308:	08001553 	.word	0x08001553

        case TRANSMISSION_IDLE:
            if (start == 1){
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b01      	cmp	r3, #1
 8001310:	f040 812a 	bne.w	8001568 <MCP2515_LoadTXBuffer+0x2a8>
                msgBuffer->status = TRANSMISSION_SET_VALUE;
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2201      	movs	r2, #1
 8001318:	745a      	strb	r2, [r3, #17]
                hdev->transmissionComplete = 0;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	731a      	strb	r2, [r3, #12]
            }
            
            break;
 8001320:	e122      	b.n	8001568 <MCP2515_LoadTXBuffer+0x2a8>

        case TRANSMISSION_SET_VALUE:
            switch (msgBuffer->buffer){
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d020      	beq.n	800136c <MCP2515_LoadTXBuffer+0xac>
 800132a:	2b02      	cmp	r3, #2
 800132c:	dc2b      	bgt.n	8001386 <MCP2515_LoadTXBuffer+0xc6>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <MCP2515_LoadTXBuffer+0x78>
 8001332:	2b01      	cmp	r3, #1
 8001334:	d00d      	beq.n	8001352 <MCP2515_LoadTXBuffer+0x92>
                    msgBuffer->txTXREQAddress = MCP2515_TXB2CTRL;
                    //printf("buffer2\n");
                    break;

                default:
                    break;
 8001336:	e026      	b.n	8001386 <MCP2515_LoadTXBuffer+0xc6>
                    msgBuffer->loadIDCmd = MCP2515_LOAD_TX_ID_0;
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	2240      	movs	r2, #64	@ 0x40
 800133c:	735a      	strb	r2, [r3, #13]
                    msgBuffer->loadDataCmd = MCP2515_LOAD_TX_DATA_0;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2241      	movs	r2, #65	@ 0x41
 8001342:	739a      	strb	r2, [r3, #14]
                    msgBuffer->txDLCAddress = MCP2515_TXB0DLC;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2235      	movs	r2, #53	@ 0x35
 8001348:	73da      	strb	r2, [r3, #15]
                    msgBuffer->txTXREQAddress = MCP2515_TXB0CTRL;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2230      	movs	r2, #48	@ 0x30
 800134e:	741a      	strb	r2, [r3, #16]
                    break;
 8001350:	e01a      	b.n	8001388 <MCP2515_LoadTXBuffer+0xc8>
                    msgBuffer->loadIDCmd = MCP2515_LOAD_TX_ID_1;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2242      	movs	r2, #66	@ 0x42
 8001356:	735a      	strb	r2, [r3, #13]
                    msgBuffer->loadDataCmd = MCP2515_LOAD_TX_DATA_1;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2243      	movs	r2, #67	@ 0x43
 800135c:	739a      	strb	r2, [r3, #14]
                    msgBuffer->txDLCAddress = MCP2515_TXB1DLC;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	2245      	movs	r2, #69	@ 0x45
 8001362:	73da      	strb	r2, [r3, #15]
                    msgBuffer->txTXREQAddress = MCP2515_TXB1CTRL;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2240      	movs	r2, #64	@ 0x40
 8001368:	741a      	strb	r2, [r3, #16]
                    break;
 800136a:	e00d      	b.n	8001388 <MCP2515_LoadTXBuffer+0xc8>
                    msgBuffer->loadIDCmd = MCP2515_LOAD_TX_ID_2;
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2244      	movs	r2, #68	@ 0x44
 8001370:	735a      	strb	r2, [r3, #13]
                    msgBuffer->loadDataCmd = MCP2515_LOAD_TX_DATA_2;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	2245      	movs	r2, #69	@ 0x45
 8001376:	739a      	strb	r2, [r3, #14]
                    msgBuffer->txDLCAddress = MCP2515_TXB2DLC;
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2255      	movs	r2, #85	@ 0x55
 800137c:	73da      	strb	r2, [r3, #15]
                    msgBuffer->txTXREQAddress = MCP2515_TXB2CTRL;
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	2250      	movs	r2, #80	@ 0x50
 8001382:	741a      	strb	r2, [r3, #16]
                    break;
 8001384:	e000      	b.n	8001388 <MCP2515_LoadTXBuffer+0xc8>
                    break;
 8001386:	bf00      	nop
            }

            msgBuffer->status = TRANSMISSION_ID_CMD;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	2202      	movs	r2, #2
 800138c:	745a      	strb	r2, [r3, #17]
            hdev->transmissionComplete = 0;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	731a      	strb	r2, [r3, #12]
            break;
 8001394:	e0f5      	b.n	8001582 <MCP2515_LoadTXBuffer+0x2c2>

        case TRANSMISSION_ID_CMD:
            HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6818      	ldr	r0, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	889b      	ldrh	r3, [r3, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	4619      	mov	r1, r3
 80013a2:	f001 f823 	bl	80023ec <HAL_GPIO_WritePin>
            hdev->transmissionComplete = 0;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	731a      	strb	r2, [r3, #12]
            //printf("ID_ADDR: 0x%02X"\n, msgBuffer->loadIDCmd);
            HAL_SPI_Transmit_IT(hdev->hspi, &msgBuffer->loadIDCmd, 1);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6898      	ldr	r0, [r3, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	330d      	adds	r3, #13
 80013b4:	2201      	movs	r2, #1
 80013b6:	4619      	mov	r1, r3
 80013b8:	f001 fea0 	bl	80030fc <HAL_SPI_Transmit_IT>
            msgBuffer->status = TRANSMISSION_ID_VALUE;
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	2203      	movs	r2, #3
 80013c0:	745a      	strb	r2, [r3, #17]
            
            break;
 80013c2:	e0de      	b.n	8001582 <MCP2515_LoadTXBuffer+0x2c2>

        case TRANSMISSION_ID_VALUE:
            
             if (hdev->transmissionComplete == 1) {
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	7b1b      	ldrb	r3, [r3, #12]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	f040 80cf 	bne.w	800156c <MCP2515_LoadTXBuffer+0x2ac>
            	 // HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
                hdev->transmissionComplete = 0;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	731a      	strb	r2, [r3, #12]
                //HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
                HAL_SPI_Transmit_IT(hdev->hspi, msgBuffer->idData, 4);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6898      	ldr	r0, [r3, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2204      	movs	r2, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	f001 fe8c 	bl	80030fc <HAL_SPI_Transmit_IT>
                msgBuffer->status = TRANSMISSION_DATA_CMD;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2204      	movs	r2, #4
 80013e8:	745a      	strb	r2, [r3, #17]
            }
            
            break;
 80013ea:	e0bf      	b.n	800156c <MCP2515_LoadTXBuffer+0x2ac>

        case TRANSMISSION_DATA_CMD:
            
             if (hdev->transmissionComplete == 1) {
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	7b1b      	ldrb	r3, [r3, #12]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	f040 80bd 	bne.w	8001570 <MCP2515_LoadTXBuffer+0x2b0>
            	// HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
                hdev->transmissionComplete = 0;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	731a      	strb	r2, [r3, #12]
                //HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
                HAL_SPI_Transmit_IT(hdev->hspi, &msgBuffer->loadDataCmd, 1);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	6898      	ldr	r0, [r3, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	330e      	adds	r3, #14
 8001404:	2201      	movs	r2, #1
 8001406:	4619      	mov	r1, r3
 8001408:	f001 fe78 	bl	80030fc <HAL_SPI_Transmit_IT>
                msgBuffer->status = TRANSMISSION_DATA_VALUE;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	2205      	movs	r2, #5
 8001410:	745a      	strb	r2, [r3, #17]
            }
            
            break;
 8001412:	e0ad      	b.n	8001570 <MCP2515_LoadTXBuffer+0x2b0>

        case TRANSMISSION_DATA_VALUE:
            
             if (hdev->transmissionComplete == 1) {
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	7b1b      	ldrb	r3, [r3, #12]
 8001418:	2b01      	cmp	r3, #1
 800141a:	f040 80ab 	bne.w	8001574 <MCP2515_LoadTXBuffer+0x2b4>
            	// HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
                hdev->transmissionComplete = 0;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	731a      	strb	r2, [r3, #12]
                /*uint8_t lenghtMsg = msgBuffer->length;
                if (lenghtMsg == 0){
                	lenghtMsg = 1;
                }*/

                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	889b      	ldrh	r3, [r3, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	4619      	mov	r1, r3
 8001430:	f000 ffdc 	bl	80023ec <HAL_GPIO_WritePin>

                HAL_SPI_Transmit_IT(hdev->hspi, msgBuffer->data, msgBuffer->length);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6898      	ldr	r0, [r3, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	7b1b      	ldrb	r3, [r3, #12]
 8001440:	461a      	mov	r2, r3
 8001442:	f001 fe5b 	bl	80030fc <HAL_SPI_Transmit_IT>
                msgBuffer->status = TRANSMISSION_DLC;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	2206      	movs	r2, #6
 800144a:	745a      	strb	r2, [r3, #17]
            }
            
            break;
 800144c:	e092      	b.n	8001574 <MCP2515_LoadTXBuffer+0x2b4>

        case TRANSMISSION_DLC:
            
            
             if (hdev->transmissionComplete == 1) {
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	7b1b      	ldrb	r3, [r3, #12]
 8001452:	2b01      	cmp	r3, #1
 8001454:	f040 8090 	bne.w	8001578 <MCP2515_LoadTXBuffer+0x2b8>
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	889b      	ldrh	r3, [r3, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	4619      	mov	r1, r3
 8001464:	f000 ffc2 	bl	80023ec <HAL_GPIO_WritePin>
                writeMessage[0] = MCP2515_WRITE;
 8001468:	4b48      	ldr	r3, [pc, #288]	@ (800158c <MCP2515_LoadTXBuffer+0x2cc>)
 800146a:	2202      	movs	r2, #2
 800146c:	701a      	strb	r2, [r3, #0]
                writeMessage[1] = msgBuffer->txDLCAddress;
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	7bda      	ldrb	r2, [r3, #15]
 8001472:	4b46      	ldr	r3, [pc, #280]	@ (800158c <MCP2515_LoadTXBuffer+0x2cc>)
 8001474:	705a      	strb	r2, [r3, #1]
                if (msgBuffer->length <= 8)
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	7b1b      	ldrb	r3, [r3, #12]
 800147a:	2b08      	cmp	r3, #8
 800147c:	d804      	bhi.n	8001488 <MCP2515_LoadTXBuffer+0x1c8>
                    writeMessage[2] = msgBuffer->length;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	7b1a      	ldrb	r2, [r3, #12]
 8001482:	4b42      	ldr	r3, [pc, #264]	@ (800158c <MCP2515_LoadTXBuffer+0x2cc>)
 8001484:	709a      	strb	r2, [r3, #2]
 8001486:	e002      	b.n	800148e <MCP2515_LoadTXBuffer+0x1ce>
                else 
                    writeMessage[2] = 8;
 8001488:	4b40      	ldr	r3, [pc, #256]	@ (800158c <MCP2515_LoadTXBuffer+0x2cc>)
 800148a:	2208      	movs	r2, #8
 800148c:	709a      	strb	r2, [r3, #2]
                //printf("0: 0x%02X, 1: 0x%02X, 2: 0x%02X\n", writeMessage[0], writeMessage[1], writeMessage[2]);
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	889b      	ldrh	r3, [r3, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	f000 ffa7 	bl	80023ec <HAL_GPIO_WritePin>
                hdev->transmissionComplete = 0;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	731a      	strb	r2, [r3, #12]
                HAL_SPI_Transmit_IT(hdev->hspi, writeMessage, 3);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2203      	movs	r2, #3
 80014aa:	4938      	ldr	r1, [pc, #224]	@ (800158c <MCP2515_LoadTXBuffer+0x2cc>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fe25 	bl	80030fc <HAL_SPI_Transmit_IT>
                msgBuffer->status = TRANSMISSION_TXREQ;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2207      	movs	r2, #7
 80014b6:	745a      	strb	r2, [r3, #17]
            }
            
            break;
 80014b8:	e05e      	b.n	8001578 <MCP2515_LoadTXBuffer+0x2b8>

        case TRANSMISSION_TXREQ:
            
            
            
            if (hdev->transmissionComplete == 1) {
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	7b1b      	ldrb	r3, [r3, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d15c      	bne.n	800157c <MCP2515_LoadTXBuffer+0x2bc>
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS basso
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	889b      	ldrh	r3, [r3, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4619      	mov	r1, r3
 80014ce:	f000 ff8d 	bl	80023ec <HAL_GPIO_WritePin>
                writeMessage[0] = MCP2515_BIT_MODIFY;
 80014d2:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <MCP2515_LoadTXBuffer+0x2cc>)
 80014d4:	2205      	movs	r2, #5
 80014d6:	701a      	strb	r2, [r3, #0]
                writeMessage[1] = msgBuffer->txTXREQAddress;
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	7c1a      	ldrb	r2, [r3, #16]
 80014dc:	4b2b      	ldr	r3, [pc, #172]	@ (800158c <MCP2515_LoadTXBuffer+0x2cc>)
 80014de:	705a      	strb	r2, [r3, #1]
                writeMessage[2] = MCP2515_TXREQ_MASK;
 80014e0:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <MCP2515_LoadTXBuffer+0x2cc>)
 80014e2:	2208      	movs	r2, #8
 80014e4:	709a      	strb	r2, [r3, #2]
                writeMessage[3] = MCP2515_TXREQ_SET;
 80014e6:	4b29      	ldr	r3, [pc, #164]	@ (800158c <MCP2515_LoadTXBuffer+0x2cc>)
 80014e8:	2208      	movs	r2, #8
 80014ea:	70da      	strb	r2, [r3, #3]

                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_RESET);  // CS basso
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	889b      	ldrh	r3, [r3, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	f000 ff78 	bl	80023ec <HAL_GPIO_WritePin>
                hdev->transmissionComplete = 0;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2200      	movs	r2, #0
 8001500:	731a      	strb	r2, [r3, #12]
                HAL_SPI_Transmit_IT(hdev->hspi, writeMessage, 4);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2204      	movs	r2, #4
 8001508:	4920      	ldr	r1, [pc, #128]	@ (800158c <MCP2515_LoadTXBuffer+0x2cc>)
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fdf6 	bl	80030fc <HAL_SPI_Transmit_IT>
                emptyTXBuffer[msgBuffer->buffer] = false;
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <MCP2515_LoadTXBuffer+0x2d0>)
 8001518:	2100      	movs	r1, #0
 800151a:	5499      	strb	r1, [r3, r2]
                msgBuffer->status = TRANSMISSION_END;
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2208      	movs	r2, #8
 8001520:	745a      	strb	r2, [r3, #17]
                
            }
            
            break;
 8001522:	e02b      	b.n	800157c <MCP2515_LoadTXBuffer+0x2bc>

        case TRANSMISSION_END:
            if (hdev->transmissionComplete == 1) {
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	7b1b      	ldrb	r3, [r3, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d129      	bne.n	8001580 <MCP2515_LoadTXBuffer+0x2c0>
                HAL_GPIO_WritePin(hdev->csPort, hdev->csPin, GPIO_PIN_SET);  // CS alto
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	889b      	ldrh	r3, [r3, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f000 ff58 	bl	80023ec <HAL_GPIO_WritePin>
                hdev->transmissionComplete = 0;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	731a      	strb	r2, [r3, #12]
                //MCP2515_ReadRegister(hdev,0x2b, &data);
                //MCP2515_ReadRegister(hdev,0x2c, &data);
                //MCP2515_ReadRegister(hdev,MCP2515_TXB0CTRL, &data);
                //printf("Value: 0x%02X\n",data );*/

                msgBuffer->status = TRANSMISSION_RESET;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2209      	movs	r2, #9
 8001546:	745a      	strb	r2, [r3, #17]


            }
            break;
 8001548:	e01a      	b.n	8001580 <MCP2515_LoadTXBuffer+0x2c0>

        case TRANSMISSION_RESET:
        	msgBuffer->status = TRANSMISSION_IDLE;
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	2200      	movs	r2, #0
 800154e:	745a      	strb	r2, [r3, #17]
        	break;
 8001550:	e017      	b.n	8001582 <MCP2515_LoadTXBuffer+0x2c2>

        case TRANSMISSION_ERROR:
            printf("Errore trasmissione");
 8001552:	4810      	ldr	r0, [pc, #64]	@ (8001594 <MCP2515_LoadTXBuffer+0x2d4>)
 8001554:	f006 f81a 	bl	800758c <iprintf>
            msgBuffer->status = TRANSMISSION_IDLE;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2200      	movs	r2, #0
 800155c:	745a      	strb	r2, [r3, #17]
            
            break;
 800155e:	e010      	b.n	8001582 <MCP2515_LoadTXBuffer+0x2c2>

        default:
            msgBuffer->status = TRANSMISSION_IDLE;  
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2200      	movs	r2, #0
 8001564:	745a      	strb	r2, [r3, #17]
            break;
 8001566:	e00c      	b.n	8001582 <MCP2515_LoadTXBuffer+0x2c2>
            break;
 8001568:	bf00      	nop
 800156a:	e00a      	b.n	8001582 <MCP2515_LoadTXBuffer+0x2c2>
            break;
 800156c:	bf00      	nop
 800156e:	e008      	b.n	8001582 <MCP2515_LoadTXBuffer+0x2c2>
            break;
 8001570:	bf00      	nop
 8001572:	e006      	b.n	8001582 <MCP2515_LoadTXBuffer+0x2c2>
            break;
 8001574:	bf00      	nop
 8001576:	e004      	b.n	8001582 <MCP2515_LoadTXBuffer+0x2c2>
            break;
 8001578:	bf00      	nop
 800157a:	e002      	b.n	8001582 <MCP2515_LoadTXBuffer+0x2c2>
            break;
 800157c:	bf00      	nop
 800157e:	e000      	b.n	8001582 <MCP2515_LoadTXBuffer+0x2c2>
            break;
 8001580:	bf00      	nop
        
    }

    return;
 8001582:	bf00      	nop

}
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000490 	.word	0x20000490
 8001590:	2000004c 	.word	0x2000004c
 8001594:	080084d4 	.word	0x080084d4

08001598 <MCP2515_SendMessage>:

uint8_t MCP2515_SendMessage(MCP2515_HandleTypeDef* hdev, MCP2515_MessageBuffer* msgBuffer, MCP2515_canMessage* canMessageTx){
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
	static uint8_t indexMsg = 0;
	uint8_t readyToSend = false;
 80015a4:	2300      	movs	r3, #0
 80015a6:	75fb      	strb	r3, [r7, #23]
	uint8_t result = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	75bb      	strb	r3, [r7, #22]

    if (emptyTXBuffer[MCP2515_TX_BUFFER_0] ||
 80015ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001758 <MCP2515_SendMessage+0x1c0>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d107      	bne.n	80015c4 <MCP2515_SendMessage+0x2c>
    		emptyTXBuffer[MCP2515_TX_BUFFER_1] ||
 80015b4:	4b68      	ldr	r3, [pc, #416]	@ (8001758 <MCP2515_SendMessage+0x1c0>)
 80015b6:	785b      	ldrb	r3, [r3, #1]
    if (emptyTXBuffer[MCP2515_TX_BUFFER_0] ||
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d103      	bne.n	80015c4 <MCP2515_SendMessage+0x2c>
			emptyTXBuffer[MCP2515_TX_BUFFER_2]){
 80015bc:	4b66      	ldr	r3, [pc, #408]	@ (8001758 <MCP2515_SendMessage+0x1c0>)
 80015be:	789b      	ldrb	r3, [r3, #2]
    		emptyTXBuffer[MCP2515_TX_BUFFER_1] ||
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MCP2515_SendMessage+0x30>
        readyToSend = true;
 80015c4:	2301      	movs	r3, #1
 80015c6:	75fb      	strb	r3, [r7, #23]
    }



    if (msgBuffer->status ==  TRANSMISSION_RESET){
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	7c5b      	ldrb	r3, [r3, #17]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d120      	bne.n	8001612 <MCP2515_SendMessage+0x7a>
    	canMessageTx[indexMsg].sending = false;
 80015d0:	4b62      	ldr	r3, [pc, #392]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4613      	mov	r3, r2
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	1a9b      	subs	r3, r3, r2
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	2200      	movs	r2, #0
 80015e2:	739a      	strb	r2, [r3, #14]
    	canMessageTx[indexMsg].newMsg = false;
 80015e4:	4b5d      	ldr	r3, [pc, #372]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4613      	mov	r3, r2
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	2200      	movs	r2, #0
 80015f6:	735a      	strb	r2, [r3, #13]
    	indexMsg ++;
 80015f8:	4b58      	ldr	r3, [pc, #352]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b56      	ldr	r3, [pc, #344]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 8001602:	701a      	strb	r2, [r3, #0]
    	if (indexMsg >= BUFFER_TX_SPI){
 8001604:	4b55      	ldr	r3, [pc, #340]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b31      	cmp	r3, #49	@ 0x31
 800160a:	d902      	bls.n	8001612 <MCP2515_SendMessage+0x7a>
    		indexMsg = 0;}
 800160c:	4b53      	ldr	r3, [pc, #332]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
    }

    if (readyToSend && 
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 8084 	beq.w	8001722 <MCP2515_SendMessage+0x18a>
        hdev->hspi->State == HAL_SPI_STATE_READY &&
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001622:	b2db      	uxtb	r3, r3
    if (readyToSend && 
 8001624:	2b01      	cmp	r3, #1
 8001626:	d17c      	bne.n	8001722 <MCP2515_SendMessage+0x18a>
		msgBuffer->status ==  TRANSMISSION_IDLE &&
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	7c5b      	ldrb	r3, [r3, #17]
        hdev->hspi->State == HAL_SPI_STATE_READY &&
 800162c:	2b00      	cmp	r3, #0
 800162e:	d178      	bne.n	8001722 <MCP2515_SendMessage+0x18a>
		canMessageTx[indexMsg].newMsg) {
 8001630:	4b4a      	ldr	r3, [pc, #296]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4613      	mov	r3, r2
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	7b5b      	ldrb	r3, [r3, #13]
		msgBuffer->status ==  TRANSMISSION_IDLE &&
 8001642:	2b00      	cmp	r3, #0
 8001644:	d06d      	beq.n	8001722 <MCP2515_SendMessage+0x18a>

    	if (emptyTXBuffer[MCP2515_TX_BUFFER_0]){
 8001646:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <MCP2515_SendMessage+0x1c0>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <MCP2515_SendMessage+0xbe>
    		msgBuffer->buffer = MCP2515_TX_BUFFER_0;
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
 8001654:	e012      	b.n	800167c <MCP2515_SendMessage+0xe4>
		}
    	else if (emptyTXBuffer[MCP2515_TX_BUFFER_1]){
 8001656:	4b40      	ldr	r3, [pc, #256]	@ (8001758 <MCP2515_SendMessage+0x1c0>)
 8001658:	785b      	ldrb	r3, [r3, #1]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <MCP2515_SendMessage+0xce>
    		msgBuffer->buffer = MCP2515_TX_BUFFER_1;
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	e00a      	b.n	800167c <MCP2515_SendMessage+0xe4>
		}
    	else if (emptyTXBuffer[MCP2515_TX_BUFFER_2]){
 8001666:	4b3c      	ldr	r3, [pc, #240]	@ (8001758 <MCP2515_SendMessage+0x1c0>)
 8001668:	789b      	ldrb	r3, [r3, #2]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <MCP2515_SendMessage+0xde>
    		msgBuffer->buffer = MCP2515_TX_BUFFER_2;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2202      	movs	r2, #2
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e002      	b.n	800167c <MCP2515_SendMessage+0xe4>
		}
    	else{
    		msgBuffer->buffer = MCP2515_TX_BUFFER_NONE;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	2203      	movs	r2, #3
 800167a:	701a      	strb	r2, [r3, #0]
    	}

    	msgBuffer->idData = canMessageTx[indexMsg].msgID;
 800167c:	4b37      	ldr	r3, [pc, #220]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4613      	mov	r3, r2
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	1a9b      	subs	r3, r3, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	f103 0208 	add.w	r2, r3, #8
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	605a      	str	r2, [r3, #4]
    	msgBuffer->data = canMessageTx[indexMsg].msgData;
 8001694:	4b31      	ldr	r3, [pc, #196]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4613      	mov	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	609a      	str	r2, [r3, #8]
    	msgBuffer->length = canMessageTx[indexMsg].dlc;
 80016aa:	4b2c      	ldr	r3, [pc, #176]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	4613      	mov	r3, r2
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	7b1a      	ldrb	r2, [r3, #12]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	731a      	strb	r2, [r3, #12]
    	if (msgBuffer->length != 8){
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	7b1b      	ldrb	r3, [r3, #12]
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d018      	beq.n	80016fa <MCP2515_SendMessage+0x162>
    		if (canMessageTx[indexMsg].dlc != 8){
 80016c8:	4b24      	ldr	r3, [pc, #144]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4613      	mov	r3, r2
 80016d0:	011b      	lsls	r3, r3, #4
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	7b1b      	ldrb	r3, [r3, #12]
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d00a      	beq.n	80016f4 <MCP2515_SendMessage+0x15c>
    			result = canMessageTx[indexMsg].dlc;}
 80016de:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	4613      	mov	r3, r2
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	7b1b      	ldrb	r3, [r3, #12]
 80016f0:	75bb      	strb	r3, [r7, #22]
 80016f2:	e004      	b.n	80016fe <MCP2515_SendMessage+0x166>
    		else result=100;
 80016f4:	2364      	movs	r3, #100	@ 0x64
 80016f6:	75bb      	strb	r3, [r7, #22]
 80016f8:	e001      	b.n	80016fe <MCP2515_SendMessage+0x166>
    	}else result = 101;
 80016fa:	2365      	movs	r3, #101	@ 0x65
 80016fc:	75bb      	strb	r3, [r7, #22]

		canMessageTx[indexMsg].sending = true;
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	4613      	mov	r3, r2
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	2201      	movs	r2, #1
 8001710:	739a      	strb	r2, [r3, #14]
        MCP2515_LoadTXBuffer(hdev, msgBuffer, true);
 8001712:	2201      	movs	r2, #1
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f7ff fdd2 	bl	80012c0 <MCP2515_LoadTXBuffer>
        readyToSend = false;
 800171c:	2300      	movs	r3, #0
 800171e:	75fb      	strb	r3, [r7, #23]
 8001720:	e014      	b.n	800174c <MCP2515_SendMessage+0x1b4>
        //result = 0;
	}

    else{
        
    	MCP2515_LoadTXBuffer(hdev, msgBuffer, false);
 8001722:	2200      	movs	r2, #0
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff fdca 	bl	80012c0 <MCP2515_LoadTXBuffer>
        //printf("readyToSend: %d\n", readyToSend);
        //printf("SPI State: %d (HAL_SPI_STATE_READY = %d)\n", hdev->hspi->State, HAL_SPI_STATE_READY);
        //printf("Message Buffer Status: %d (TRANSMISSION_IDLE = %d)\n", msgBuffer->status, TRANSMISSION_IDLE);
    	if (canMessageTx[indexMsg].newMsg != 0)
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <MCP2515_SendMessage+0x1c4>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4613      	mov	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	7b5b      	ldrb	r3, [r3, #13]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <MCP2515_SendMessage+0x1b0>
    		result = 1;
 8001742:	2301      	movs	r3, #1
 8001744:	75bb      	strb	r3, [r7, #22]
 8001746:	e001      	b.n	800174c <MCP2515_SendMessage+0x1b4>
    	else result = 2;
 8001748:	2302      	movs	r3, #2
 800174a:	75bb      	strb	r3, [r7, #22]
    }
    return result;
 800174c:	7dbb      	ldrb	r3, [r7, #22]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	2000004c 	.word	0x2000004c
 800175c:	20000494 	.word	0x20000494

08001760 <MCP2515_InterruptHandler>:


uint8_t MCP2515_InterruptHandler(MCP2515_HandleTypeDef* hdev, volatile uint8_t* intFlag, MCP2515_MessageBuffer* msgBuffer){
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b08b      	sub	sp, #44	@ 0x2c
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
	const uint8_t timeout = 10; // Timeout di 10 ms
 800176c:	230a      	movs	r3, #10
 800176e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t result_read_TXBnCTRL[3] = {0x0,0x0,0x0};
 8001772:	4a6e      	ldr	r2, [pc, #440]	@ (800192c <MCP2515_InterruptHandler+0x1cc>)
 8001774:	f107 0320 	add.w	r3, r7, #32
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	4611      	mov	r1, r2
 800177c:	8019      	strh	r1, [r3, #0]
 800177e:	3302      	adds	r3, #2
 8001780:	0c12      	lsrs	r2, r2, #16
 8001782:	701a      	strb	r2, [r3, #0]
    // Verifica che la trasmissione non sia in corso, che l'interrupt sia attivo, e che l'SPI sia pronto
    if (msgBuffer->status ==  TRANSMISSION_IDLE &&
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7c5b      	ldrb	r3, [r3, #17]
 8001788:	2b00      	cmp	r3, #0
 800178a:	f040 80b9 	bne.w	8001900 <MCP2515_InterruptHandler+0x1a0>
    	*intFlag
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b2db      	uxtb	r3, r3
    if (msgBuffer->status ==  TRANSMISSION_IDLE &&
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80b3 	beq.w	8001900 <MCP2515_InterruptHandler+0x1a0>
		&& hdev->hspi->State == HAL_SPI_STATE_READY
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	f040 80ab 	bne.w	8001900 <MCP2515_InterruptHandler+0x1a0>
		){
        //printf("flag1: %d\n", *intFlag);
        // Resetta il flag dell'interrupt per evitare riattivazioni indesiderate
        *intFlag = false;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
        //printf("status: %d\n", msgBuffer->status);
        //printf("transmissionOn: %d\n", transmissionOn);
        // Legge il registro CANINTF per verificare quali interrupt sono attivi
        uint8_t result_read_canintf;
        uint8_t read_canintf;
        result_read_canintf = MCP2515_ReadRegister(hdev,MCP2515_CANINTF_MSG, &read_canintf);
 80017b0:	f107 031f 	add.w	r3, r7, #31
 80017b4:	461a      	mov	r2, r3
 80017b6:	212c      	movs	r1, #44	@ 0x2c
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f7ff fc71 	bl	80010a0 <MCP2515_ReadRegister>
 80017be:	4603      	mov	r3, r0
 80017c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

        if (result_read_canintf != MCP2515_OK) {
 80017c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MCP2515_InterruptHandler+0x70>
            // Gestisci l'errore se la lettura fallisce
            //printf("Errore nella lettura del registro CANINTF\n");
            return 10;
 80017cc:	230a      	movs	r3, #10
 80017ce:	e0a8      	b.n	8001922 <MCP2515_InterruptHandler+0x1c2>
        }

        uint8_t canintf_val = read_canintf;
 80017d0:	7ffb      	ldrb	r3, [r7, #31]
 80017d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        uint8_t TXxIF_val[3];

        uint8_t read_TXBnCTRL[3];
        uint8_t TXBnCTRL_addr[3] = {MCP2515_TXB0CTRL, MCP2515_TXB1CTRL, MCP2515_TXB2CTRL};
 80017d6:	4a56      	ldr	r2, [pc, #344]	@ (8001930 <MCP2515_InterruptHandler+0x1d0>)
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	4611      	mov	r1, r2
 80017e0:	8019      	strh	r1, [r3, #0]
 80017e2:	3302      	adds	r3, #2
 80017e4:	0c12      	lsrs	r2, r2, #16
 80017e6:	701a      	strb	r2, [r3, #0]
        uint8_t TXREQ_val[3];

        for (uint8_t i=0; i < 3; i++){
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017ee:	e074      	b.n	80018da <MCP2515_InterruptHandler+0x17a>
            // Estrai il bit TXxIF corrispondente dal registro CANINTF
            TXxIF_val[i] = (read_canintf >> (i + 2)) & 0x01;
 80017f0:	7ffb      	ldrb	r3, [r7, #31]
 80017f2:	461a      	mov	r2, r3
 80017f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017f8:	3302      	adds	r3, #2
 80017fa:	fa42 f303 	asr.w	r3, r2, r3
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001804:	f002 0201 	and.w	r2, r2, #1
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	3328      	adds	r3, #40	@ 0x28
 800180c:	443b      	add	r3, r7
 800180e:	f803 2c0c 	strb.w	r2, [r3, #-12]
            //printf("TXxIF_val[%d]: %d\n", i, TXxIF_val[i]);

            if (TXxIF_val[i]) {
 8001812:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001816:	3328      	adds	r3, #40	@ 0x28
 8001818:	443b      	add	r3, r7
 800181a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d056      	beq.n	80018d0 <MCP2515_InterruptHandler+0x170>
                canintf_val &= ~(1 << (2+i));
 8001822:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001826:	3302      	adds	r3, #2
 8001828:	2201      	movs	r2, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	b25b      	sxtb	r3, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	b25a      	sxtb	r2, r3
 8001834:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001838:	4013      	ands	r3, r2
 800183a:	b25b      	sxtb	r3, r3
 800183c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                // Se il bit TXxIF è impostato
                // Leggi il registro TXBnCTRL per verificare lo stato di TXREQ
                result_read_TXBnCTRL[i] = MCP2515_ReadRegister(hdev,TXBnCTRL_addr[i], &read_TXBnCTRL[i]);
 8001840:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001844:	3328      	adds	r3, #40	@ 0x28
 8001846:	443b      	add	r3, r7
 8001848:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 800184c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001850:	f107 0218 	add.w	r2, r7, #24
 8001854:	4413      	add	r3, r2
 8001856:	f897 4026 	ldrb.w	r4, [r7, #38]	@ 0x26
 800185a:	461a      	mov	r2, r3
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f7ff fc1f 	bl	80010a0 <MCP2515_ReadRegister>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800186a:	443b      	add	r3, r7
 800186c:	f803 2c08 	strb.w	r2, [r3, #-8]


                if (result_read_TXBnCTRL[i] != MCP2515_OK) {
 8001870:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001874:	3328      	adds	r3, #40	@ 0x28
 8001876:	443b      	add	r3, r7
 8001878:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MCP2515_InterruptHandler+0x124>
					if (!TXREQ_val[i]) { // Se TXREQ è 0, il buffer è vuoto
					   emptyTXBuffer[i] = true;

					}else
						emptyTXBuffer[i] = true;*/
                	return 11;
 8001880:	230b      	movs	r3, #11
 8001882:	e04e      	b.n	8001922 <MCP2515_InterruptHandler+0x1c2>
                }

                // Verifica lo stato di TXREQ
                TXREQ_val[i] = (read_TXBnCTRL[i] >> (3 + i)) & 0x01;
 8001884:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001888:	3328      	adds	r3, #40	@ 0x28
 800188a:	443b      	add	r3, r7
 800188c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001890:	461a      	mov	r2, r3
 8001892:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001896:	3303      	adds	r3, #3
 8001898:	fa42 f303 	asr.w	r3, r2, r3
 800189c:	b2da      	uxtb	r2, r3
 800189e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018a2:	f002 0201 	and.w	r2, r2, #1
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	3328      	adds	r3, #40	@ 0x28
 80018aa:	443b      	add	r3, r7
 80018ac:	f803 2c18 	strb.w	r2, [r3, #-24]
                //printf("TXREQ_val: %d\n", TXREQ_val[i]);

                if (!TXREQ_val[i]) { // Se TXREQ è 0, il buffer è vuoto
 80018b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018b4:	3328      	adds	r3, #40	@ 0x28
 80018b6:	443b      	add	r3, r7
 80018b8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d105      	bne.n	80018cc <MCP2515_InterruptHandler+0x16c>
                   emptyTXBuffer[i] = true;
 80018c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001934 <MCP2515_InterruptHandler+0x1d4>)
 80018c6:	2101      	movs	r1, #1
 80018c8:	54d1      	strb	r1, [r2, r3]
 80018ca:	e001      	b.n	80018d0 <MCP2515_InterruptHandler+0x170>
                	                if (!TXREQ_val[i]) { // Se TXREQ è 0, il buffer è vuoto
                	                   emptyTXBuffer[i] = true;

                	                }else
                	                	emptyTXBuffer[i] = true;*/
                	return 12;
 80018cc:	230c      	movs	r3, #12
 80018ce:	e028      	b.n	8001922 <MCP2515_InterruptHandler+0x1c2>
        for (uint8_t i=0; i < 3; i++){
 80018d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018d4:	3301      	adds	r3, #1
 80018d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80018da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d986      	bls.n	80017f0 <MCP2515_InterruptHandler+0x90>

            }
        }
        // reset dei flag interrupt

        canintf_val &= ~(0x7 << 2);
 80018e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018e6:	f023 031c 	bic.w	r3, r3, #28
 80018ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        MCP2515_WriteRegisterWithTimeout(hdev,MCP2515_CANINTF_MSG, canintf_val, timeout);
 80018ee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80018f2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80018f6:	212c      	movs	r1, #44	@ 0x2c
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff fb85 	bl	8001008 <MCP2515_WriteRegisterWithTimeout>
		){
 80018fe:	e00f      	b.n	8001920 <MCP2515_InterruptHandler+0x1c0>
    }else{

    	if (*intFlag){
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <MCP2515_InterruptHandler+0x1bc>

			if (hdev->hspi->State != HAL_SPI_STATE_READY){
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d003      	beq.n	8001920 <MCP2515_InterruptHandler+0x1c0>
				return 13;
 8001918:	230d      	movs	r3, #13
 800191a:	e002      	b.n	8001922 <MCP2515_InterruptHandler+0x1c2>
			}
    	}else return 14;
 800191c:	230e      	movs	r3, #14
 800191e:	e000      	b.n	8001922 <MCP2515_InterruptHandler+0x1c2>

    }
    //*result = result_read_TXBnCTRL[1];
    return MCP2515_OK;
 8001920:	2300      	movs	r3, #0

}
 8001922:	4618      	mov	r0, r3
 8001924:	372c      	adds	r7, #44	@ 0x2c
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	080084e8 	.word	0x080084e8
 8001930:	080084ec 	.word	0x080084ec
 8001934:	2000004c 	.word	0x2000004c

08001938 <initBuffer>:

void initBuffer(MCP2515_MessageBuffer* msgBuffer){
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
	msgBuffer->buffer = MCP2515_TX_BUFFER_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2203      	movs	r2, #3
 8001944:	701a      	strb	r2, [r3, #0]
	msgBuffer->idData = idDataEmpty;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a0e      	ldr	r2, [pc, #56]	@ (8001984 <initBuffer+0x4c>)
 800194a:	605a      	str	r2, [r3, #4]
    msgBuffer->data = dataEmpty;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a0e      	ldr	r2, [pc, #56]	@ (8001988 <initBuffer+0x50>)
 8001950:	609a      	str	r2, [r3, #8]
    msgBuffer->length = 0;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	731a      	strb	r2, [r3, #12]
    msgBuffer->loadIDCmd = 0x0;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	735a      	strb	r2, [r3, #13]
    msgBuffer->loadDataCmd= 0x0;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	739a      	strb	r2, [r3, #14]
    msgBuffer->txDLCAddress = 0x0;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	73da      	strb	r2, [r3, #15]
    msgBuffer->txTXREQAddress = 0x0;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	741a      	strb	r2, [r3, #16]
    msgBuffer->status = TRANSMISSION_IDLE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	745a      	strb	r2, [r3, #17]

}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000484 	.word	0x20000484
 8001988:	20000488 	.word	0x20000488

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_MspInit+0x54>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <HAL_MspInit+0x54>)
 800199c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <HAL_MspInit+0x54>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <HAL_MspInit+0x54>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a0a      	ldr	r2, [pc, #40]	@ (80019e0 <HAL_MspInit+0x54>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <HAL_MspInit+0x54>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	210f      	movs	r1, #15
 80019ce:	f06f 0001 	mvn.w	r0, #1
 80019d2:	f000 fb3b 	bl	800204c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a25      	ldr	r2, [pc, #148]	@ (8001a98 <HAL_SPI_MspInit+0xb4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d143      	bne.n	8001a8e <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <HAL_SPI_MspInit+0xb8>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	4a23      	ldr	r2, [pc, #140]	@ (8001a9c <HAL_SPI_MspInit+0xb8>)
 8001a10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a16:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <HAL_SPI_MspInit+0xb8>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	4b1d      	ldr	r3, [pc, #116]	@ (8001a9c <HAL_SPI_MspInit+0xb8>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a9c <HAL_SPI_MspInit+0xb8>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <HAL_SPI_MspInit+0xb8>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001a3e:	2328      	movs	r3, #40	@ 0x28
 8001a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a4e:	2305      	movs	r3, #5
 8001a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	4619      	mov	r1, r3
 8001a58:	4811      	ldr	r0, [pc, #68]	@ (8001aa0 <HAL_SPI_MspInit+0xbc>)
 8001a5a:	f000 fb43 	bl	80020e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a5e:	2310      	movs	r3, #16
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a6e:	2305      	movs	r3, #5
 8001a70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4809      	ldr	r0, [pc, #36]	@ (8001aa0 <HAL_SPI_MspInit+0xbc>)
 8001a7a:	f000 fb33 	bl	80020e4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2105      	movs	r1, #5
 8001a82:	2023      	movs	r0, #35	@ 0x23
 8001a84:	f000 fae2 	bl	800204c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a88:	2023      	movs	r0, #35	@ 0x23
 8001a8a:	f000 fafb 	bl	8002084 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	@ 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40013000 	.word	0x40013000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020400 	.word	0x40020400

08001aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	@ 0x28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a19      	ldr	r2, [pc, #100]	@ (8001b28 <HAL_UART_MspInit+0x84>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d12c      	bne.n	8001b20 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
 8001aca:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <HAL_UART_MspInit+0x88>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	4a17      	ldr	r2, [pc, #92]	@ (8001b2c <HAL_UART_MspInit+0x88>)
 8001ad0:	f043 0310 	orr.w	r3, r3, #16
 8001ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ad6:	4b15      	ldr	r3, [pc, #84]	@ (8001b2c <HAL_UART_MspInit+0x88>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <HAL_UART_MspInit+0x88>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aea:	4a10      	ldr	r2, [pc, #64]	@ (8001b2c <HAL_UART_MspInit+0x88>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <HAL_UART_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001afe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b10:	2307      	movs	r3, #7
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <HAL_UART_MspInit+0x8c>)
 8001b1c:	f000 fae2 	bl	80020e4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b20:	bf00      	nop
 8001b22:	3728      	adds	r7, #40	@ 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40011000 	.word	0x40011000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020000 	.word	0x40020000

08001b34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	@ 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <HAL_InitTick+0xd4>)
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c08 <HAL_InitTick+0xd4>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b54:	4b2c      	ldr	r3, [pc, #176]	@ (8001c08 <HAL_InitTick+0xd4>)
 8001b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b60:	f107 020c 	add.w	r2, r7, #12
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f001 f8c8 	bl	8002d00 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001b70:	f001 f8b2 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 8001b74:	4603      	mov	r3, r0
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7c:	4a23      	ldr	r2, [pc, #140]	@ (8001c0c <HAL_InitTick+0xd8>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0c9b      	lsrs	r3, r3, #18
 8001b84:	3b01      	subs	r3, #1
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b88:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <HAL_InitTick+0xdc>)
 8001b8a:	4a22      	ldr	r2, [pc, #136]	@ (8001c14 <HAL_InitTick+0xe0>)
 8001b8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b8e:	4b20      	ldr	r3, [pc, #128]	@ (8001c10 <HAL_InitTick+0xdc>)
 8001b90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b96:	4a1e      	ldr	r2, [pc, #120]	@ (8001c10 <HAL_InitTick+0xdc>)
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <HAL_InitTick+0xdc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <HAL_InitTick+0xdc>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba8:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <HAL_InitTick+0xdc>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001bae:	4818      	ldr	r0, [pc, #96]	@ (8001c10 <HAL_InitTick+0xdc>)
 8001bb0:	f001 ff88 	bl	8003ac4 <HAL_TIM_Base_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001bba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d11b      	bne.n	8001bfa <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001bc2:	4813      	ldr	r0, [pc, #76]	@ (8001c10 <HAL_InitTick+0xdc>)
 8001bc4:	f001 ffd8 	bl	8003b78 <HAL_TIM_Base_Start_IT>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001bce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d111      	bne.n	8001bfa <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bd6:	2019      	movs	r0, #25
 8001bd8:	f000 fa54 	bl	8002084 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	d808      	bhi.n	8001bf4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001be2:	2200      	movs	r2, #0
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	2019      	movs	r0, #25
 8001be8:	f000 fa30 	bl	800204c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bec:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <HAL_InitTick+0xe4>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e002      	b.n	8001bfa <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3730      	adds	r7, #48	@ 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	431bde83 	.word	0x431bde83
 8001c10:	20000498 	.word	0x20000498
 8001c14:	40010000 	.word	0x40010000
 8001c18:	20000054 	.word	0x20000054

08001c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <NMI_Handler+0x4>

08001c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c28:	bf00      	nop
 8001c2a:	e7fd      	b.n	8001c28 <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <MemManage_Handler+0x4>

08001c34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c38:	bf00      	nop
 8001c3a:	e7fd      	b.n	8001c38 <BusFault_Handler+0x4>

08001c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c40:	bf00      	nop
 8001c42:	e7fd      	b.n	8001c40 <UsageFault_Handler+0x4>

08001c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCP2515_INT_Pin);
 8001c56:	2040      	movs	r0, #64	@ 0x40
 8001c58:	f000 fbe2 	bl	8002420 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c66:	f001 ffe9 	bl	8003c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000498 	.word	0x20000498

08001c74 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c78:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <SPI1_IRQHandler+0x10>)
 8001c7a:	f001 fb59 	bl	8003330 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200000d8 	.word	0x200000d8

08001c88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e00a      	b.n	8001cb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c9a:	f3af 8000 	nop.w
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60ba      	str	r2, [r7, #8]
 8001ca6:	b2ca      	uxtb	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf0      	blt.n	8001c9a <_read+0x12>
  }

  return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cea:	605a      	str	r2, [r3, #4]
  return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_isatty>:

int _isatty(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d34:	4a14      	ldr	r2, [pc, #80]	@ (8001d88 <_sbrk+0x5c>)
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <_sbrk+0x60>)
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d40:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <_sbrk+0x64>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <_sbrk+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d5c:	f005 fd10 	bl	8007780 <__errno>
 8001d60:	4603      	mov	r3, r0
 8001d62:	220c      	movs	r2, #12
 8001d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e009      	b.n	8001d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d72:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a05      	ldr	r2, [pc, #20]	@ (8001d90 <_sbrk+0x64>)
 8001d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20020000 	.word	0x20020000
 8001d8c:	00000400 	.word	0x00000400
 8001d90:	200004e0 	.word	0x200004e0
 8001d94:	20005020 	.word	0x20005020

08001d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <SystemInit+0x20>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001da2:	4a05      	ldr	r2, [pc, #20]	@ (8001db8 <SystemInit+0x20>)
 8001da4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001da8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001df4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dc0:	f7ff ffea 	bl	8001d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc4:	480c      	ldr	r0, [pc, #48]	@ (8001df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dc6:	490d      	ldr	r1, [pc, #52]	@ (8001dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dcc:	e002      	b.n	8001dd4 <LoopCopyDataInit>

08001dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd2:	3304      	adds	r3, #4

08001dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd8:	d3f9      	bcc.n	8001dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dda:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8001e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de0:	e001      	b.n	8001de6 <LoopFillZerobss>

08001de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de4:	3204      	adds	r2, #4

08001de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de8:	d3fb      	bcc.n	8001de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dea:	f005 fccf 	bl	800778c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dee:	f7fe fbc7 	bl	8000580 <main>
  bx  lr    
 8001df2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dfc:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001e00:	080085ac 	.word	0x080085ac
  ldr r2, =_sbss
 8001e04:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001e08:	2000501c 	.word	0x2000501c

08001e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC_IRQHandler>
	...

08001e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <HAL_Init+0x40>)
 8001e1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <HAL_Init+0x40>)
 8001e26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e2c:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a07      	ldr	r2, [pc, #28]	@ (8001e50 <HAL_Init+0x40>)
 8001e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e38:	2003      	movs	r0, #3
 8001e3a:	f000 f8fc 	bl	8002036 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3e:	200f      	movs	r0, #15
 8001e40:	f7ff fe78 	bl	8001b34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e44:	f7ff fda2 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023c00 	.word	0x40023c00

08001e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e58:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_IncTick+0x20>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <HAL_IncTick+0x24>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <HAL_IncTick+0x24>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000058 	.word	0x20000058
 8001e78:	200004e4 	.word	0x200004e4

08001e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_GetTick+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	200004e4 	.word	0x200004e4

08001e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff ffee 	bl	8001e7c <HAL_GetTick>
 8001ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d005      	beq.n	8001eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_Delay+0x44>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eba:	bf00      	nop
 8001ebc:	f7ff ffde 	bl	8001e7c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d8f7      	bhi.n	8001ebc <HAL_Delay+0x28>
  {
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000058 	.word	0x20000058

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	@ (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4907      	ldr	r1, [pc, #28]	@ (8001f78 <__NVIC_EnableIRQ+0x38>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	@ (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	@ (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	@ 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ff4c 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800205e:	f7ff ff61 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 8002062:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	6978      	ldr	r0, [r7, #20]
 800206a:	f7ff ffb1 	bl	8001fd0 <NVIC_EncodePriority>
 800206e:	4602      	mov	r2, r0
 8002070:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff80 	bl	8001f7c <__NVIC_SetPriority>
}
 800207c:	bf00      	nop
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff ff54 	bl	8001f40 <__NVIC_EnableIRQ>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d004      	beq.n	80020be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00c      	b.n	80020d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2205      	movs	r2, #5
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	@ 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e159      	b.n	80023b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 8148 	bne.w	80023ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d005      	beq.n	8002136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002132:	2b02      	cmp	r3, #2
 8002134:	d130      	bne.n	8002198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 0201 	and.w	r2, r3, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d017      	beq.n	80021d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d123      	bne.n	8002228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a2 	beq.w	80023ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b57      	ldr	r3, [pc, #348]	@ (80023cc <HAL_GPIO_Init+0x2e8>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	4a56      	ldr	r2, [pc, #344]	@ (80023cc <HAL_GPIO_Init+0x2e8>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002278:	6453      	str	r3, [r2, #68]	@ 0x44
 800227a:	4b54      	ldr	r3, [pc, #336]	@ (80023cc <HAL_GPIO_Init+0x2e8>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002286:	4a52      	ldr	r2, [pc, #328]	@ (80023d0 <HAL_GPIO_Init+0x2ec>)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a49      	ldr	r2, [pc, #292]	@ (80023d4 <HAL_GPIO_Init+0x2f0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x202>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a48      	ldr	r2, [pc, #288]	@ (80023d8 <HAL_GPIO_Init+0x2f4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x1fe>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a47      	ldr	r2, [pc, #284]	@ (80023dc <HAL_GPIO_Init+0x2f8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x1fa>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a46      	ldr	r2, [pc, #280]	@ (80023e0 <HAL_GPIO_Init+0x2fc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x1f6>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a45      	ldr	r2, [pc, #276]	@ (80023e4 <HAL_GPIO_Init+0x300>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x1f2>
 80022d2:	2304      	movs	r3, #4
 80022d4:	e008      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022d6:	2307      	movs	r3, #7
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022da:	2303      	movs	r3, #3
 80022dc:	e004      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022de:	2302      	movs	r3, #2
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022e6:	2300      	movs	r3, #0
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	f002 0203 	and.w	r2, r2, #3
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	4093      	lsls	r3, r2
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f8:	4935      	ldr	r1, [pc, #212]	@ (80023d0 <HAL_GPIO_Init+0x2ec>)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	3302      	adds	r3, #2
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002306:	4b38      	ldr	r3, [pc, #224]	@ (80023e8 <HAL_GPIO_Init+0x304>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232a:	4a2f      	ldr	r2, [pc, #188]	@ (80023e8 <HAL_GPIO_Init+0x304>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002330:	4b2d      	ldr	r3, [pc, #180]	@ (80023e8 <HAL_GPIO_Init+0x304>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002354:	4a24      	ldr	r2, [pc, #144]	@ (80023e8 <HAL_GPIO_Init+0x304>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800235a:	4b23      	ldr	r3, [pc, #140]	@ (80023e8 <HAL_GPIO_Init+0x304>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800237e:	4a1a      	ldr	r2, [pc, #104]	@ (80023e8 <HAL_GPIO_Init+0x304>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002384:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <HAL_GPIO_Init+0x304>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a8:	4a0f      	ldr	r2, [pc, #60]	@ (80023e8 <HAL_GPIO_Init+0x304>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3301      	adds	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b0f      	cmp	r3, #15
 80023b8:	f67f aea2 	bls.w	8002100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3724      	adds	r7, #36	@ 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40013800 	.word	0x40013800
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40020400 	.word	0x40020400
 80023dc:	40020800 	.word	0x40020800
 80023e0:	40020c00 	.word	0x40020c00
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40013c00 	.word	0x40013c00

080023ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
 80023f8:	4613      	mov	r3, r2
 80023fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023fc:	787b      	ldrb	r3, [r7, #1]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002408:	e003      	b.n	8002412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800240a:	887b      	ldrh	r3, [r7, #2]
 800240c:	041a      	lsls	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	619a      	str	r2, [r3, #24]
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800242a:	4b08      	ldr	r3, [pc, #32]	@ (800244c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800242c:	695a      	ldr	r2, [r3, #20]
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	4013      	ands	r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002436:	4a05      	ldr	r2, [pc, #20]	@ (800244c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fa56 	bl	80008f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40013c00 	.word	0x40013c00

08002450 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e267      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d075      	beq.n	800255a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246e:	4b88      	ldr	r3, [pc, #544]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b04      	cmp	r3, #4
 8002478:	d00c      	beq.n	8002494 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247a:	4b85      	ldr	r3, [pc, #532]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002482:	2b08      	cmp	r3, #8
 8002484:	d112      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002486:	4b82      	ldr	r3, [pc, #520]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800248e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002492:	d10b      	bne.n	80024ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002494:	4b7e      	ldr	r3, [pc, #504]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d05b      	beq.n	8002558 <HAL_RCC_OscConfig+0x108>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d157      	bne.n	8002558 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e242      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b4:	d106      	bne.n	80024c4 <HAL_RCC_OscConfig+0x74>
 80024b6:	4b76      	ldr	r3, [pc, #472]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a75      	ldr	r2, [pc, #468]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	e01d      	b.n	8002500 <HAL_RCC_OscConfig+0xb0>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x98>
 80024ce:	4b70      	ldr	r3, [pc, #448]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a6f      	ldr	r2, [pc, #444]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	4b6d      	ldr	r3, [pc, #436]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a6c      	ldr	r2, [pc, #432]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e00b      	b.n	8002500 <HAL_RCC_OscConfig+0xb0>
 80024e8:	4b69      	ldr	r3, [pc, #420]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a68      	ldr	r2, [pc, #416]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b66      	ldr	r3, [pc, #408]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a65      	ldr	r2, [pc, #404]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff fcb8 	bl	8001e7c <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff fcb4 	bl	8001e7c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	@ 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e207      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	4b5b      	ldr	r3, [pc, #364]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0xc0>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002530:	f7ff fca4 	bl	8001e7c <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002538:	f7ff fca0 	bl	8001e7c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	@ 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1f3      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	4b51      	ldr	r3, [pc, #324]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0xe8>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d063      	beq.n	800262e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002566:	4b4a      	ldr	r3, [pc, #296]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002572:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257a:	2b08      	cmp	r3, #8
 800257c:	d11c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257e:	4b44      	ldr	r3, [pc, #272]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d116      	bne.n	80025b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258a:	4b41      	ldr	r3, [pc, #260]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d005      	beq.n	80025a2 <HAL_RCC_OscConfig+0x152>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d001      	beq.n	80025a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e1c7      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4937      	ldr	r1, [pc, #220]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025b6:	e03a      	b.n	800262e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d020      	beq.n	8002602 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025c0:	4b34      	ldr	r3, [pc, #208]	@ (8002694 <HAL_RCC_OscConfig+0x244>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7ff fc59 	bl	8001e7c <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ce:	f7ff fc55 	bl	8001e7c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e1a8      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ec:	4b28      	ldr	r3, [pc, #160]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4925      	ldr	r1, [pc, #148]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]
 8002600:	e015      	b.n	800262e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002602:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <HAL_RCC_OscConfig+0x244>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7ff fc38 	bl	8001e7c <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002610:	f7ff fc34 	bl	8001e7c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e187      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d036      	beq.n	80026a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d016      	beq.n	8002670 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <HAL_RCC_OscConfig+0x248>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002648:	f7ff fc18 	bl	8001e7c <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002650:	f7ff fc14 	bl	8001e7c <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e167      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_RCC_OscConfig+0x240>)
 8002664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x200>
 800266e:	e01b      	b.n	80026a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_RCC_OscConfig+0x248>)
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7ff fc01 	bl	8001e7c <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	e00e      	b.n	800269c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267e:	f7ff fbfd 	bl	8001e7c <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d907      	bls.n	800269c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e150      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
 8002690:	40023800 	.word	0x40023800
 8002694:	42470000 	.word	0x42470000
 8002698:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269c:	4b88      	ldr	r3, [pc, #544]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800269e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ea      	bne.n	800267e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8097 	beq.w	80027e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ba:	4b81      	ldr	r3, [pc, #516]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10f      	bne.n	80026e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	4b7d      	ldr	r3, [pc, #500]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	4a7c      	ldr	r2, [pc, #496]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d6:	4b7a      	ldr	r3, [pc, #488]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e2:	2301      	movs	r3, #1
 80026e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	4b77      	ldr	r3, [pc, #476]	@ (80028c4 <HAL_RCC_OscConfig+0x474>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d118      	bne.n	8002724 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f2:	4b74      	ldr	r3, [pc, #464]	@ (80028c4 <HAL_RCC_OscConfig+0x474>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a73      	ldr	r2, [pc, #460]	@ (80028c4 <HAL_RCC_OscConfig+0x474>)
 80026f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fe:	f7ff fbbd 	bl	8001e7c <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002706:	f7ff fbb9 	bl	8001e7c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e10c      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002718:	4b6a      	ldr	r3, [pc, #424]	@ (80028c4 <HAL_RCC_OscConfig+0x474>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d106      	bne.n	800273a <HAL_RCC_OscConfig+0x2ea>
 800272c:	4b64      	ldr	r3, [pc, #400]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	4a63      	ldr	r2, [pc, #396]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6713      	str	r3, [r2, #112]	@ 0x70
 8002738:	e01c      	b.n	8002774 <HAL_RCC_OscConfig+0x324>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b05      	cmp	r3, #5
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x30c>
 8002742:	4b5f      	ldr	r3, [pc, #380]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002746:	4a5e      	ldr	r2, [pc, #376]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6713      	str	r3, [r2, #112]	@ 0x70
 800274e:	4b5c      	ldr	r3, [pc, #368]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	4a5b      	ldr	r2, [pc, #364]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6713      	str	r3, [r2, #112]	@ 0x70
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0x324>
 800275c:	4b58      	ldr	r3, [pc, #352]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002760:	4a57      	ldr	r2, [pc, #348]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	6713      	str	r3, [r2, #112]	@ 0x70
 8002768:	4b55      	ldr	r3, [pc, #340]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276c:	4a54      	ldr	r2, [pc, #336]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800276e:	f023 0304 	bic.w	r3, r3, #4
 8002772:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d015      	beq.n	80027a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7ff fb7e 	bl	8001e7c <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7ff fb7a 	bl	8001e7c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e0cb      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ee      	beq.n	8002784 <HAL_RCC_OscConfig+0x334>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a8:	f7ff fb68 	bl	8001e7c <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ae:	e00a      	b.n	80027c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f7ff fb64 	bl	8001e7c <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027be:	4293      	cmp	r3, r2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0b5      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c6:	4b3e      	ldr	r3, [pc, #248]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ee      	bne.n	80027b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d8:	4b39      	ldr	r3, [pc, #228]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027dc:	4a38      	ldr	r2, [pc, #224]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 80a1 	beq.w	8002930 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ee:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d05c      	beq.n	80028b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d141      	bne.n	8002886 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002802:	4b31      	ldr	r3, [pc, #196]	@ (80028c8 <HAL_RCC_OscConfig+0x478>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7ff fb38 	bl	8001e7c <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002810:	f7ff fb34 	bl	8001e7c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e087      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002822:	4b27      	ldr	r3, [pc, #156]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002844:	085b      	lsrs	r3, r3, #1
 8002846:	3b01      	subs	r3, #1
 8002848:	041b      	lsls	r3, r3, #16
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	491b      	ldr	r1, [pc, #108]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002858:	4b1b      	ldr	r3, [pc, #108]	@ (80028c8 <HAL_RCC_OscConfig+0x478>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7ff fb0d 	bl	8001e7c <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002866:	f7ff fb09 	bl	8001e7c <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e05c      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002878:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x416>
 8002884:	e054      	b.n	8002930 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <HAL_RCC_OscConfig+0x478>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7ff faf6 	bl	8001e7c <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002894:	f7ff faf2 	bl	8001e7c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e045      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_RCC_OscConfig+0x470>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x444>
 80028b2:	e03d      	b.n	8002930 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e038      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40007000 	.word	0x40007000
 80028c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <HAL_RCC_OscConfig+0x4ec>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d028      	beq.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d121      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d11a      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028fc:	4013      	ands	r3, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002902:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002904:	4293      	cmp	r3, r2
 8002906:	d111      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	3b01      	subs	r3, #1
 8002916:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d107      	bne.n	800292c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002926:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d001      	beq.n	8002930 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0cc      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b68      	ldr	r3, [pc, #416]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d90c      	bls.n	800297c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b65      	ldr	r3, [pc, #404]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b63      	ldr	r3, [pc, #396]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0b8      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d020      	beq.n	80029ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002994:	4b59      	ldr	r3, [pc, #356]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a58      	ldr	r2, [pc, #352]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800299e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ac:	4b53      	ldr	r3, [pc, #332]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a52      	ldr	r2, [pc, #328]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b8:	4b50      	ldr	r3, [pc, #320]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	494d      	ldr	r1, [pc, #308]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d044      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029de:	4b47      	ldr	r3, [pc, #284]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d119      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e07f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d003      	beq.n	80029fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fe:	4b3f      	ldr	r3, [pc, #252]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e06f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e067      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1e:	4b37      	ldr	r3, [pc, #220]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f023 0203 	bic.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4934      	ldr	r1, [pc, #208]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a30:	f7ff fa24 	bl	8001e7c <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7ff fa20 	bl	8001e7c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e04f      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 020c 	and.w	r2, r3, #12
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d1eb      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a60:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d20c      	bcs.n	8002a88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b22      	ldr	r3, [pc, #136]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e032      	b.n	8002aee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4916      	ldr	r1, [pc, #88]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ab2:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	490e      	ldr	r1, [pc, #56]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ac6:	f000 f821 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
 8002aca:	4602      	mov	r2, r0
 8002acc:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	490a      	ldr	r1, [pc, #40]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	5ccb      	ldrb	r3, [r1, r3]
 8002ada:	fa22 f303 	lsr.w	r3, r2, r3
 8002ade:	4a09      	ldr	r2, [pc, #36]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff f824 	bl	8001b34 <HAL_InitTick>

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40023c00 	.word	0x40023c00
 8002afc:	40023800 	.word	0x40023800
 8002b00:	08008550 	.word	0x08008550
 8002b04:	20000050 	.word	0x20000050
 8002b08:	20000054 	.word	0x20000054

08002b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b10:	b090      	sub	sp, #64	@ 0x40
 8002b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b18:	2300      	movs	r3, #0
 8002b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b24:	4b59      	ldr	r3, [pc, #356]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d00d      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x40>
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	f200 80a1 	bhi.w	8002c78 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x34>
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b3e:	e09b      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b53      	ldr	r3, [pc, #332]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b42:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002b44:	e09b      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b46:	4b53      	ldr	r3, [pc, #332]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b48:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b4a:	e098      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b54:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b56:	4b4d      	ldr	r3, [pc, #308]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d028      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b62:	4b4a      	ldr	r3, [pc, #296]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	099b      	lsrs	r3, r3, #6
 8002b68:	2200      	movs	r2, #0
 8002b6a:	623b      	str	r3, [r7, #32]
 8002b6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b74:	2100      	movs	r1, #0
 8002b76:	4b47      	ldr	r3, [pc, #284]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b78:	fb03 f201 	mul.w	r2, r3, r1
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	fb00 f303 	mul.w	r3, r0, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	4a43      	ldr	r2, [pc, #268]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b86:	fba0 1202 	umull	r1, r2, r0, r2
 8002b8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b8c:	460a      	mov	r2, r1
 8002b8e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002b90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b92:	4413      	add	r3, r2
 8002b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b98:	2200      	movs	r2, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	61fa      	str	r2, [r7, #28]
 8002b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ba2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ba6:	f7fd fb73 	bl	8000290 <__aeabi_uldivmod>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4613      	mov	r3, r2
 8002bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bb2:	e053      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb4:	4b35      	ldr	r3, [pc, #212]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	099b      	lsrs	r3, r3, #6
 8002bba:	2200      	movs	r2, #0
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	617a      	str	r2, [r7, #20]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bc6:	f04f 0b00 	mov.w	fp, #0
 8002bca:	4652      	mov	r2, sl
 8002bcc:	465b      	mov	r3, fp
 8002bce:	f04f 0000 	mov.w	r0, #0
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	0159      	lsls	r1, r3, #5
 8002bd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bdc:	0150      	lsls	r0, r2, #5
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	ebb2 080a 	subs.w	r8, r2, sl
 8002be6:	eb63 090b 	sbc.w	r9, r3, fp
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002bf6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002bfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bfe:	ebb2 0408 	subs.w	r4, r2, r8
 8002c02:	eb63 0509 	sbc.w	r5, r3, r9
 8002c06:	f04f 0200 	mov.w	r2, #0
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	00eb      	lsls	r3, r5, #3
 8002c10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c14:	00e2      	lsls	r2, r4, #3
 8002c16:	4614      	mov	r4, r2
 8002c18:	461d      	mov	r5, r3
 8002c1a:	eb14 030a 	adds.w	r3, r4, sl
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	eb45 030b 	adc.w	r3, r5, fp
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c32:	4629      	mov	r1, r5
 8002c34:	028b      	lsls	r3, r1, #10
 8002c36:	4621      	mov	r1, r4
 8002c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	028a      	lsls	r2, r1, #10
 8002c40:	4610      	mov	r0, r2
 8002c42:	4619      	mov	r1, r3
 8002c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c46:	2200      	movs	r2, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	60fa      	str	r2, [r7, #12]
 8002c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c50:	f7fd fb1e 	bl	8000290 <__aeabi_uldivmod>
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4613      	mov	r3, r2
 8002c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	3301      	adds	r3, #1
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002c6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c76:	e002      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c78:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3740      	adds	r7, #64	@ 0x40
 8002c84:	46bd      	mov	sp, r7
 8002c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	00f42400 	.word	0x00f42400
 8002c94:	017d7840 	.word	0x017d7840

08002c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c9c:	4b03      	ldr	r3, [pc, #12]	@ (8002cac <HAL_RCC_GetHCLKFreq+0x14>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000050 	.word	0x20000050

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cb4:	f7ff fff0 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	0a9b      	lsrs	r3, r3, #10
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4903      	ldr	r1, [pc, #12]	@ (8002cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	08008560 	.word	0x08008560

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cdc:	f7ff ffdc 	bl	8002c98 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0b5b      	lsrs	r3, r3, #13
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	@ (8002cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	08008560 	.word	0x08008560

08002d00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d10:	4b12      	ldr	r3, [pc, #72]	@ (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0203 	and.w	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d28:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d34:	4b09      	ldr	r3, [pc, #36]	@ (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d42:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <HAL_RCC_GetClockConfig+0x60>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0207 	and.w	r2, r3, #7
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	601a      	str	r2, [r3, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40023c00 	.word	0x40023c00

08002d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e07b      	b.n	8002e6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d108      	bne.n	8002d90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d86:	d009      	beq.n	8002d9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	61da      	str	r2, [r3, #28]
 8002d8e:	e005      	b.n	8002d9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fe14 	bl	80019e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e20:	ea42 0103 	orr.w	r1, r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	f003 0104 	and.w	r1, r3, #4
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	f003 0210 	and.w	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	69da      	ldr	r2, [r3, #28]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b088      	sub	sp, #32
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	4613      	mov	r3, r2
 8002e84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_SPI_Transmit+0x22>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e12d      	b.n	80030f4 <HAL_SPI_Transmit+0x27e>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ea0:	f7fe ffec 	bl	8001e7c <HAL_GetTick>
 8002ea4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d002      	beq.n	8002ebc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002eba:	e116      	b.n	80030ea <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_SPI_Transmit+0x52>
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ecc:	e10d      	b.n	80030ea <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	88fa      	ldrh	r2, [r7, #6]
 8002ee6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f14:	d10f      	bne.n	8002f36 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f40:	2b40      	cmp	r3, #64	@ 0x40
 8002f42:	d007      	beq.n	8002f54 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f5c:	d14f      	bne.n	8002ffe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_SPI_Transmit+0xf6>
 8002f66:	8afb      	ldrh	r3, [r7, #22]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d142      	bne.n	8002ff2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f70:	881a      	ldrh	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7c:	1c9a      	adds	r2, r3, #2
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f90:	e02f      	b.n	8002ff2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d112      	bne.n	8002fc6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa4:	881a      	ldrh	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb0:	1c9a      	adds	r2, r3, #2
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fc4:	e015      	b.n	8002ff2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fc6:	f7fe ff59 	bl	8001e7c <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d803      	bhi.n	8002fde <HAL_SPI_Transmit+0x168>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fdc:	d102      	bne.n	8002fe4 <HAL_SPI_Transmit+0x16e>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d106      	bne.n	8002ff2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002ff0:	e07b      	b.n	80030ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1ca      	bne.n	8002f92 <HAL_SPI_Transmit+0x11c>
 8002ffc:	e050      	b.n	80030a0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_SPI_Transmit+0x196>
 8003006:	8afb      	ldrh	r3, [r7, #22]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d144      	bne.n	8003096 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	7812      	ldrb	r2, [r2, #0]
 8003018:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003032:	e030      	b.n	8003096 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b02      	cmp	r3, #2
 8003040:	d113      	bne.n	800306a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	330c      	adds	r3, #12
 800304c:	7812      	ldrb	r2, [r2, #0]
 800304e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003068:	e015      	b.n	8003096 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800306a:	f7fe ff07 	bl	8001e7c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d803      	bhi.n	8003082 <HAL_SPI_Transmit+0x20c>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d102      	bne.n	8003088 <HAL_SPI_Transmit+0x212>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003094:	e029      	b.n	80030ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1c9      	bne.n	8003034 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	6839      	ldr	r1, [r7, #0]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fbe3 	bl	8003870 <SPI_EndRxTxTransaction>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	77fb      	strb	r3, [r7, #31]
 80030e0:	e003      	b.n	80030ea <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80030f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	4613      	mov	r3, r2
 8003108:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_SPI_Transmit_IT+0x1e>
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d102      	bne.n	8003120 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800311e:	e06a      	b.n	80031f6 <HAL_SPI_Transmit_IT+0xfa>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d002      	beq.n	8003132 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 800312c:	2302      	movs	r3, #2
 800312e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003130:	e061      	b.n	80031f6 <HAL_SPI_Transmit_IT+0xfa>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003138:	2b01      	cmp	r3, #1
 800313a:	d101      	bne.n	8003140 <HAL_SPI_Transmit_IT+0x44>
 800313c:	2302      	movs	r3, #2
 800313e:	e05b      	b.n	80031f8 <HAL_SPI_Transmit_IT+0xfc>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2203      	movs	r2, #3
 800314c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	88fa      	ldrh	r2, [r7, #6]
 8003160:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a1e      	ldr	r2, [pc, #120]	@ (8003204 <HAL_SPI_Transmit_IT+0x108>)
 800318c:	645a      	str	r2, [r3, #68]	@ 0x44
 800318e:	e002      	b.n	8003196 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4a1d      	ldr	r2, [pc, #116]	@ (8003208 <HAL_SPI_Transmit_IT+0x10c>)
 8003194:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800319e:	d10f      	bne.n	80031c0 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031be:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ca:	2b40      	cmp	r3, #64	@ 0x40
 80031cc:	d007      	beq.n	80031de <HAL_SPI_Transmit_IT+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031dc:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 80031f4:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 80031f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	0800371d 	.word	0x0800371d
 8003208:	080036d7 	.word	0x080036d7

0800320c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
 8003218:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003224:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800322c:	7dbb      	ldrb	r3, [r7, #22]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d00d      	beq.n	800324e <HAL_SPI_TransmitReceive_IT+0x42>
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003238:	d106      	bne.n	8003248 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d102      	bne.n	8003248 <HAL_SPI_TransmitReceive_IT+0x3c>
 8003242:	7dbb      	ldrb	r3, [r7, #22]
 8003244:	2b04      	cmp	r3, #4
 8003246:	d002      	beq.n	800324e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8003248:	2302      	movs	r3, #2
 800324a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800324c:	e061      	b.n	8003312 <HAL_SPI_TransmitReceive_IT+0x106>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_SPI_TransmitReceive_IT+0x54>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_SPI_TransmitReceive_IT+0x54>
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003264:	e055      	b.n	8003312 <HAL_SPI_TransmitReceive_IT+0x106>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_SPI_TransmitReceive_IT+0x68>
 8003270:	2302      	movs	r3, #2
 8003272:	e04f      	b.n	8003314 <HAL_SPI_TransmitReceive_IT+0x108>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b04      	cmp	r3, #4
 8003286:	d003      	beq.n	8003290 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2205      	movs	r2, #5
 800328c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	887a      	ldrh	r2, [r7, #2]
 80032a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	887a      	ldrh	r2, [r7, #2]
 80032a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	887a      	ldrh	r2, [r7, #2]
 80032b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a16      	ldr	r2, [pc, #88]	@ (8003320 <HAL_SPI_TransmitReceive_IT+0x114>)
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a16      	ldr	r2, [pc, #88]	@ (8003324 <HAL_SPI_TransmitReceive_IT+0x118>)
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80032ce:	e005      	b.n	80032dc <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a15      	ldr	r2, [pc, #84]	@ (8003328 <HAL_SPI_TransmitReceive_IT+0x11c>)
 80032d4:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4a14      	ldr	r2, [pc, #80]	@ (800332c <HAL_SPI_TransmitReceive_IT+0x120>)
 80032da:	645a      	str	r2, [r3, #68]	@ 0x44
  }
#endif /* USE_SPI_CRC */


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e6:	2b40      	cmp	r3, #64	@ 0x40
 80032e8:	d007      	beq.n	80032fa <HAL_SPI_TransmitReceive_IT+0xee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032f8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 02e0 	orr.w	r2, r2, #224	@ 0xe0
 8003310:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8003312:	7dfb      	ldrb	r3, [r7, #23]
}
 8003314:	4618      	mov	r0, r3
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	08003619 	.word	0x08003619
 8003324:	08003679 	.word	0x08003679
 8003328:	08003555 	.word	0x08003555
 800332c:	080035b9 	.word	0x080035b9

08003330 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10e      	bne.n	8003370 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003358:	2b00      	cmp	r3, #0
 800335a:	d009      	beq.n	8003370 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d004      	beq.n	8003370 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	4798      	blx	r3
    return;
 800336e:	e0ce      	b.n	800350e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <HAL_SPI_IRQHandler+0x5e>
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003380:	2b00      	cmp	r3, #0
 8003382:	d004      	beq.n	800338e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
    return;
 800338c:	e0bf      	b.n	800350e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <HAL_SPI_IRQHandler+0x7e>
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d105      	bne.n	80033ae <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80b0 	beq.w	800350e <HAL_SPI_IRQHandler+0x1de>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80aa 	beq.w	800350e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d023      	beq.n	800340c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d011      	beq.n	80033f4 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d4:	f043 0204 	orr.w	r2, r3, #4
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	e00b      	b.n	800340c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033f4:	2300      	movs	r3, #0
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	693b      	ldr	r3, [r7, #16]
        return;
 800340a:	e080      	b.n	800350e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	2b00      	cmp	r3, #0
 8003414:	d014      	beq.n	8003440 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00c      	beq.n	8003464 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344e:	f043 0208 	orr.w	r2, r3, #8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	60bb      	str	r3, [r7, #8]
 8003462:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003468:	2b00      	cmp	r3, #0
 800346a:	d04f      	beq.n	800350c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800347a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d104      	bne.n	8003498 <HAL_SPI_IRQHandler+0x168>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d034      	beq.n	8003502 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0203 	bic.w	r2, r2, #3
 80034a6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d011      	beq.n	80034d4 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b4:	4a17      	ldr	r2, [pc, #92]	@ (8003514 <HAL_SPI_IRQHandler+0x1e4>)
 80034b6:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe fdef 	bl	80020a0 <HAL_DMA_Abort_IT>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d016      	beq.n	800350a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003514 <HAL_SPI_IRQHandler+0x1e4>)
 80034e2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fe fdd9 	bl	80020a0 <HAL_DMA_Abort_IT>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003500:	e003      	b.n	800350a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f808 	bl	8003518 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003508:	e000      	b.n	800350c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800350a:	bf00      	nop
    return;
 800350c:	bf00      	nop
  }
}
 800350e:	3720      	adds	r7, #32
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	0800352d 	.word	0x0800352d

08003518 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003538:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f7ff ffe6 	bl	8003518 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f103 020c 	add.w	r2, r3, #12
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	7812      	ldrb	r2, [r2, #0]
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10f      	bne.n	80035b0 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800359e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f9b4 	bl	8003918 <SPI_CloseRxTx_ISR>
    }
  }
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	330c      	adds	r3, #12
 80035ca:	7812      	ldrb	r2, [r2, #0]
 80035cc:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10f      	bne.n	8003610 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035fe:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d102      	bne.n	8003610 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f984 	bl	8003918 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800362a:	b292      	uxth	r2, r2
 800362c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003632:	1c9a      	adds	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount--;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->RxXferCount == 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800364a:	b29b      	uxth	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10f      	bne.n	8003670 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800365e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f954 	bl	8003918 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	881a      	ldrh	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003690:	1c9a      	adds	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10f      	bne.n	80036ce <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036bc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f925 	bl	8003918 <SPI_CloseRxTx_ISR>
    }
  }
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	330c      	adds	r3, #12
 80036e8:	7812      	ldrb	r2, [r2, #0]
 80036ea:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f976 	bl	8003a00 <SPI_CloseTx_ISR>
  }
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003728:	881a      	ldrh	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003734:	1c9a      	adds	r2, r3, #2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800374c:	b29b      	uxth	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f954 	bl	8003a00 <SPI_CloseTx_ISR>
  }
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003770:	f7fe fb84 	bl	8001e7c <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003778:	1a9b      	subs	r3, r3, r2
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	4413      	add	r3, r2
 800377e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003780:	f7fe fb7c 	bl	8001e7c <HAL_GetTick>
 8003784:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003786:	4b39      	ldr	r3, [pc, #228]	@ (800386c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	015b      	lsls	r3, r3, #5
 800378c:	0d1b      	lsrs	r3, r3, #20
 800378e:	69fa      	ldr	r2, [r7, #28]
 8003790:	fb02 f303 	mul.w	r3, r2, r3
 8003794:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003796:	e054      	b.n	8003842 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379e:	d050      	beq.n	8003842 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037a0:	f7fe fb6c 	bl	8001e7c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d902      	bls.n	80037b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d13d      	bne.n	8003832 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80037c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ce:	d111      	bne.n	80037f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037d8:	d004      	beq.n	80037e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037e2:	d107      	bne.n	80037f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037fc:	d10f      	bne.n	800381e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800381c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e017      	b.n	8003862 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	3b01      	subs	r3, #1
 8003840:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4013      	ands	r3, r2
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	429a      	cmp	r2, r3
 8003850:	bf0c      	ite	eq
 8003852:	2301      	moveq	r3, #1
 8003854:	2300      	movne	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	429a      	cmp	r2, r3
 800385e:	d19b      	bne.n	8003798 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	20000050 	.word	0x20000050

08003870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2201      	movs	r2, #1
 8003884:	2102      	movs	r1, #2
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f7ff ff6a 	bl	8003760 <SPI_WaitFlagStateUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003896:	f043 0220 	orr.w	r2, r3, #32
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e032      	b.n	8003908 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003910 <SPI_EndRxTxTransaction+0xa0>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003914 <SPI_EndRxTxTransaction+0xa4>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	0d5b      	lsrs	r3, r3, #21
 80038ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038c0:	d112      	bne.n	80038e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2180      	movs	r1, #128	@ 0x80
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff ff47 	bl	8003760 <SPI_WaitFlagStateUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d016      	beq.n	8003906 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e00f      	b.n	8003908 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038fe:	2b80      	cmp	r3, #128	@ 0x80
 8003900:	d0f2      	beq.n	80038e8 <SPI_EndRxTxTransaction+0x78>
 8003902:	e000      	b.n	8003906 <SPI_EndRxTxTransaction+0x96>
        break;
 8003904:	bf00      	nop
  }

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000050 	.word	0x20000050
 8003914:	165e9f81 	.word	0x165e9f81

08003918 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003920:	4b35      	ldr	r3, [pc, #212]	@ (80039f8 <SPI_CloseRxTx_ISR+0xe0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a35      	ldr	r2, [pc, #212]	@ (80039fc <SPI_CloseRxTx_ISR+0xe4>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	0a5b      	lsrs	r3, r3, #9
 800392c:	2264      	movs	r2, #100	@ 0x64
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003934:	f7fe faa2 	bl	8001e7c <HAL_GetTick>
 8003938:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0220 	bic.w	r2, r2, #32
 8003948:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003954:	f043 0220 	orr.w	r2, r3, #32
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800395c:	e009      	b.n	8003972 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	3b01      	subs	r3, #1
 8003962:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0eb      	beq.n	800394a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	2164      	movs	r1, #100	@ 0x64
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ff7a 	bl	8003870 <SPI_EndRxTxTransaction>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d005      	beq.n	800398e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d115      	bne.n	80039e0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d107      	bne.n	80039d0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7fc ff69 	bl	80008a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80039ce:	e00e      	b.n	80039ee <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fc ff75 	bl	80008c8 <HAL_SPI_TxRxCpltCallback>
}
 80039de:	e006      	b.n	80039ee <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      HAL_SPI_ErrorCallback(hspi);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff fd95 	bl	8003518 <HAL_SPI_ErrorCallback>
}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000050 	.word	0x20000050
 80039fc:	057619f1 	.word	0x057619f1

08003a00 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003a08:	4b2c      	ldr	r3, [pc, #176]	@ (8003abc <SPI_CloseTx_ISR+0xbc>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ac0 <SPI_CloseTx_ISR+0xc0>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	0a5b      	lsrs	r3, r3, #9
 8003a14:	2264      	movs	r2, #100	@ 0x64
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a1c:	f7fe fa2e 	bl	8001e7c <HAL_GetTick>
 8003a20:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d106      	bne.n	8003a36 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a34:	e009      	b.n	8003a4a <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0eb      	beq.n	8003a22 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a58:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	2164      	movs	r1, #100	@ 0x64
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ff06 	bl	8003870 <SPI_EndRxTxTransaction>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff fd37 	bl	8003518 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003aaa:	e002      	b.n	8003ab2 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fc fee3 	bl	8000878 <HAL_SPI_TxCpltCallback>
}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000050 	.word	0x20000050
 8003ac0:	057619f1 	.word	0x057619f1

08003ac4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e041      	b.n	8003b5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f839 	bl	8003b62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f000 f9b2 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d001      	beq.n	8003b90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e044      	b.n	8003c1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1e      	ldr	r2, [pc, #120]	@ (8003c28 <HAL_TIM_Base_Start_IT+0xb0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d018      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bba:	d013      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c2c <HAL_TIM_Base_Start_IT+0xb4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00e      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a19      	ldr	r2, [pc, #100]	@ (8003c30 <HAL_TIM_Base_Start_IT+0xb8>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d009      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	@ (8003c34 <HAL_TIM_Base_Start_IT+0xbc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x6c>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a16      	ldr	r2, [pc, #88]	@ (8003c38 <HAL_TIM_Base_Start_IT+0xc0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d111      	bne.n	8003c08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d010      	beq.n	8003c18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c06:	e007      	b.n	8003c18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800
 8003c34:	40000c00 	.word	0x40000c00
 8003c38:	40014000 	.word	0x40014000

08003c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d020      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0202 	mvn.w	r2, #2
 8003c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8d2 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003c8c:	e005      	b.n	8003c9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f8c4 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f8d5 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d020      	beq.n	8003cec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01b      	beq.n	8003cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0204 	mvn.w	r2, #4
 8003cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f8ac 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f89e 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f8af 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d020      	beq.n	8003d38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 0308 	and.w	r3, r3, #8
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01b      	beq.n	8003d38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0208 	mvn.w	r2, #8
 8003d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f886 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f878 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f889 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d020      	beq.n	8003d84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d01b      	beq.n	8003d84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0210 	mvn.w	r2, #16
 8003d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2208      	movs	r2, #8
 8003d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f860 	bl	8003e30 <HAL_TIM_IC_CaptureCallback>
 8003d70:	e005      	b.n	8003d7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f852 	bl	8003e1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f863 	bl	8003e44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00c      	beq.n	8003da8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d007      	beq.n	8003da8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0201 	mvn.w	r2, #1
 8003da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fc ffb2 	bl	8000d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00c      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f8e6 	bl	8003f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00c      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f834 	bl	8003e58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00c      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d007      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f06f 0220 	mvn.w	r2, #32
 8003e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8b8 	bl	8003f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e14:	bf00      	nop
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3a      	ldr	r2, [pc, #232]	@ (8003f68 <TIM_Base_SetConfig+0xfc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00f      	beq.n	8003ea4 <TIM_Base_SetConfig+0x38>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8a:	d00b      	beq.n	8003ea4 <TIM_Base_SetConfig+0x38>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a37      	ldr	r2, [pc, #220]	@ (8003f6c <TIM_Base_SetConfig+0x100>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d007      	beq.n	8003ea4 <TIM_Base_SetConfig+0x38>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a36      	ldr	r2, [pc, #216]	@ (8003f70 <TIM_Base_SetConfig+0x104>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d003      	beq.n	8003ea4 <TIM_Base_SetConfig+0x38>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a35      	ldr	r2, [pc, #212]	@ (8003f74 <TIM_Base_SetConfig+0x108>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d108      	bne.n	8003eb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003f68 <TIM_Base_SetConfig+0xfc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01b      	beq.n	8003ef6 <TIM_Base_SetConfig+0x8a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec4:	d017      	beq.n	8003ef6 <TIM_Base_SetConfig+0x8a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a28      	ldr	r2, [pc, #160]	@ (8003f6c <TIM_Base_SetConfig+0x100>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <TIM_Base_SetConfig+0x8a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a27      	ldr	r2, [pc, #156]	@ (8003f70 <TIM_Base_SetConfig+0x104>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00f      	beq.n	8003ef6 <TIM_Base_SetConfig+0x8a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a26      	ldr	r2, [pc, #152]	@ (8003f74 <TIM_Base_SetConfig+0x108>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00b      	beq.n	8003ef6 <TIM_Base_SetConfig+0x8a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a25      	ldr	r2, [pc, #148]	@ (8003f78 <TIM_Base_SetConfig+0x10c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <TIM_Base_SetConfig+0x8a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a24      	ldr	r2, [pc, #144]	@ (8003f7c <TIM_Base_SetConfig+0x110>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_Base_SetConfig+0x8a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a23      	ldr	r2, [pc, #140]	@ (8003f80 <TIM_Base_SetConfig+0x114>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d108      	bne.n	8003f08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f68 <TIM_Base_SetConfig+0xfc>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d103      	bne.n	8003f3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	691a      	ldr	r2, [r3, #16]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d105      	bne.n	8003f5a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f023 0201 	bic.w	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	611a      	str	r2, [r3, #16]
  }
}
 8003f5a:	bf00      	nop
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40000c00 	.word	0x40000c00
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800

08003f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e042      	b.n	8004044 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd fd66 	bl	8001aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2224      	movs	r2, #36	@ 0x24
 8003fdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f973 	bl	80042dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	@ 0x28
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b20      	cmp	r3, #32
 800406a:	d175      	bne.n	8004158 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_UART_Transmit+0x2c>
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e06e      	b.n	800415a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2221      	movs	r2, #33	@ 0x21
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800408a:	f7fd fef7 	bl	8001e7c <HAL_GetTick>
 800408e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	88fa      	ldrh	r2, [r7, #6]
 8004094:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	88fa      	ldrh	r2, [r7, #6]
 800409a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a4:	d108      	bne.n	80040b8 <HAL_UART_Transmit+0x6c>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	e003      	b.n	80040c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040c0:	e02e      	b.n	8004120 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2180      	movs	r1, #128	@ 0x80
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f848 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e03a      	b.n	800415a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	3302      	adds	r3, #2
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	e007      	b.n	8004112 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	3301      	adds	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1cb      	bne.n	80040c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2200      	movs	r2, #0
 8004132:	2140      	movs	r1, #64	@ 0x40
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f814 	bl	8004162 <UART_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e006      	b.n	800415a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	e000      	b.n	800415a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004158:	2302      	movs	r3, #2
  }
}
 800415a:	4618      	mov	r0, r3
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	603b      	str	r3, [r7, #0]
 800416e:	4613      	mov	r3, r2
 8004170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004172:	e03b      	b.n	80041ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d037      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800417c:	f7fd fe7e 	bl	8001e7c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	6a3a      	ldr	r2, [r7, #32]
 8004188:	429a      	cmp	r2, r3
 800418a:	d302      	bcc.n	8004192 <UART_WaitOnFlagUntilTimeout+0x30>
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e03a      	b.n	800420c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d023      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b80      	cmp	r3, #128	@ 0x80
 80041a8:	d020      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b40      	cmp	r3, #64	@ 0x40
 80041ae:	d01d      	beq.n	80041ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d116      	bne.n	80041ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	617b      	str	r3, [r7, #20]
 80041d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 f81d 	bl	8004214 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2208      	movs	r2, #8
 80041de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e00f      	b.n	800420c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4013      	ands	r3, r2
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	bf0c      	ite	eq
 80041fc:	2301      	moveq	r3, #1
 80041fe:	2300      	movne	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	461a      	mov	r2, r3
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	429a      	cmp	r2, r3
 8004208:	d0b4      	beq.n	8004174 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b095      	sub	sp, #84	@ 0x54
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	330c      	adds	r3, #12
 8004222:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800422c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	330c      	adds	r3, #12
 800423a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800423c:	643a      	str	r2, [r7, #64]	@ 0x40
 800423e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800424a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e5      	bne.n	800421c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3314      	adds	r3, #20
 8004256:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3314      	adds	r3, #20
 800426e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004270:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004272:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004278:	e841 2300 	strex	r3, r2, [r1]
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1e5      	bne.n	8004250 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004288:	2b01      	cmp	r3, #1
 800428a:	d119      	bne.n	80042c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	330c      	adds	r3, #12
 8004292:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	60bb      	str	r3, [r7, #8]
   return(result);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f023 0310 	bic.w	r3, r3, #16
 80042a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ac:	61ba      	str	r2, [r7, #24]
 80042ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6979      	ldr	r1, [r7, #20]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e5      	bne.n	800428c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80042ce:	bf00      	nop
 80042d0:	3754      	adds	r7, #84	@ 0x54
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e0:	b0c0      	sub	sp, #256	@ 0x100
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f8:	68d9      	ldr	r1, [r3, #12]
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	ea40 0301 	orr.w	r3, r0, r1
 8004304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	431a      	orrs	r2, r3
 8004314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	431a      	orrs	r2, r3
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004334:	f021 010c 	bic.w	r1, r1, #12
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004342:	430b      	orrs	r3, r1
 8004344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004356:	6999      	ldr	r1, [r3, #24]
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	ea40 0301 	orr.w	r3, r0, r1
 8004362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b8f      	ldr	r3, [pc, #572]	@ (80045a8 <UART_SetConfig+0x2cc>)
 800436c:	429a      	cmp	r2, r3
 800436e:	d005      	beq.n	800437c <UART_SetConfig+0xa0>
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	4b8d      	ldr	r3, [pc, #564]	@ (80045ac <UART_SetConfig+0x2d0>)
 8004378:	429a      	cmp	r2, r3
 800437a:	d104      	bne.n	8004386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800437c:	f7fe fcac 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 8004380:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004384:	e003      	b.n	800438e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004386:	f7fe fc93 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 800438a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004398:	f040 810c 	bne.w	80045b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800439c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043ae:	4622      	mov	r2, r4
 80043b0:	462b      	mov	r3, r5
 80043b2:	1891      	adds	r1, r2, r2
 80043b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043b6:	415b      	adcs	r3, r3
 80043b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043be:	4621      	mov	r1, r4
 80043c0:	eb12 0801 	adds.w	r8, r2, r1
 80043c4:	4629      	mov	r1, r5
 80043c6:	eb43 0901 	adc.w	r9, r3, r1
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043de:	4690      	mov	r8, r2
 80043e0:	4699      	mov	r9, r3
 80043e2:	4623      	mov	r3, r4
 80043e4:	eb18 0303 	adds.w	r3, r8, r3
 80043e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043ec:	462b      	mov	r3, r5
 80043ee:	eb49 0303 	adc.w	r3, r9, r3
 80043f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004402:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800440a:	460b      	mov	r3, r1
 800440c:	18db      	adds	r3, r3, r3
 800440e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004410:	4613      	mov	r3, r2
 8004412:	eb42 0303 	adc.w	r3, r2, r3
 8004416:	657b      	str	r3, [r7, #84]	@ 0x54
 8004418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800441c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004420:	f7fb ff36 	bl	8000290 <__aeabi_uldivmod>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4b61      	ldr	r3, [pc, #388]	@ (80045b0 <UART_SetConfig+0x2d4>)
 800442a:	fba3 2302 	umull	r2, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	011c      	lsls	r4, r3, #4
 8004432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800443c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004444:	4642      	mov	r2, r8
 8004446:	464b      	mov	r3, r9
 8004448:	1891      	adds	r1, r2, r2
 800444a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800444c:	415b      	adcs	r3, r3
 800444e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004454:	4641      	mov	r1, r8
 8004456:	eb12 0a01 	adds.w	sl, r2, r1
 800445a:	4649      	mov	r1, r9
 800445c:	eb43 0b01 	adc.w	fp, r3, r1
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800446c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004474:	4692      	mov	sl, r2
 8004476:	469b      	mov	fp, r3
 8004478:	4643      	mov	r3, r8
 800447a:	eb1a 0303 	adds.w	r3, sl, r3
 800447e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004482:	464b      	mov	r3, r9
 8004484:	eb4b 0303 	adc.w	r3, fp, r3
 8004488:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004498:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800449c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044a0:	460b      	mov	r3, r1
 80044a2:	18db      	adds	r3, r3, r3
 80044a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80044a6:	4613      	mov	r3, r2
 80044a8:	eb42 0303 	adc.w	r3, r2, r3
 80044ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044b6:	f7fb feeb 	bl	8000290 <__aeabi_uldivmod>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4611      	mov	r1, r2
 80044c0:	4b3b      	ldr	r3, [pc, #236]	@ (80045b0 <UART_SetConfig+0x2d4>)
 80044c2:	fba3 2301 	umull	r2, r3, r3, r1
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2264      	movs	r2, #100	@ 0x64
 80044ca:	fb02 f303 	mul.w	r3, r2, r3
 80044ce:	1acb      	subs	r3, r1, r3
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044d6:	4b36      	ldr	r3, [pc, #216]	@ (80045b0 <UART_SetConfig+0x2d4>)
 80044d8:	fba3 2302 	umull	r2, r3, r3, r2
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044e4:	441c      	add	r4, r3
 80044e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ea:	2200      	movs	r2, #0
 80044ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044f8:	4642      	mov	r2, r8
 80044fa:	464b      	mov	r3, r9
 80044fc:	1891      	adds	r1, r2, r2
 80044fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004500:	415b      	adcs	r3, r3
 8004502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004508:	4641      	mov	r1, r8
 800450a:	1851      	adds	r1, r2, r1
 800450c:	6339      	str	r1, [r7, #48]	@ 0x30
 800450e:	4649      	mov	r1, r9
 8004510:	414b      	adcs	r3, r1
 8004512:	637b      	str	r3, [r7, #52]	@ 0x34
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004520:	4659      	mov	r1, fp
 8004522:	00cb      	lsls	r3, r1, #3
 8004524:	4651      	mov	r1, sl
 8004526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800452a:	4651      	mov	r1, sl
 800452c:	00ca      	lsls	r2, r1, #3
 800452e:	4610      	mov	r0, r2
 8004530:	4619      	mov	r1, r3
 8004532:	4603      	mov	r3, r0
 8004534:	4642      	mov	r2, r8
 8004536:	189b      	adds	r3, r3, r2
 8004538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800453c:	464b      	mov	r3, r9
 800453e:	460a      	mov	r2, r1
 8004540:	eb42 0303 	adc.w	r3, r2, r3
 8004544:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004554:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800455c:	460b      	mov	r3, r1
 800455e:	18db      	adds	r3, r3, r3
 8004560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004562:	4613      	mov	r3, r2
 8004564:	eb42 0303 	adc.w	r3, r2, r3
 8004568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800456a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800456e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004572:	f7fb fe8d 	bl	8000290 <__aeabi_uldivmod>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4b0d      	ldr	r3, [pc, #52]	@ (80045b0 <UART_SetConfig+0x2d4>)
 800457c:	fba3 1302 	umull	r1, r3, r3, r2
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	2164      	movs	r1, #100	@ 0x64
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	3332      	adds	r3, #50	@ 0x32
 800458e:	4a08      	ldr	r2, [pc, #32]	@ (80045b0 <UART_SetConfig+0x2d4>)
 8004590:	fba2 2303 	umull	r2, r3, r2, r3
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	f003 0207 	and.w	r2, r3, #7
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4422      	add	r2, r4
 80045a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045a4:	e106      	b.n	80047b4 <UART_SetConfig+0x4d8>
 80045a6:	bf00      	nop
 80045a8:	40011000 	.word	0x40011000
 80045ac:	40011400 	.word	0x40011400
 80045b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045c6:	4642      	mov	r2, r8
 80045c8:	464b      	mov	r3, r9
 80045ca:	1891      	adds	r1, r2, r2
 80045cc:	6239      	str	r1, [r7, #32]
 80045ce:	415b      	adcs	r3, r3
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045d6:	4641      	mov	r1, r8
 80045d8:	1854      	adds	r4, r2, r1
 80045da:	4649      	mov	r1, r9
 80045dc:	eb43 0501 	adc.w	r5, r3, r1
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	00eb      	lsls	r3, r5, #3
 80045ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045ee:	00e2      	lsls	r2, r4, #3
 80045f0:	4614      	mov	r4, r2
 80045f2:	461d      	mov	r5, r3
 80045f4:	4643      	mov	r3, r8
 80045f6:	18e3      	adds	r3, r4, r3
 80045f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045fc:	464b      	mov	r3, r9
 80045fe:	eb45 0303 	adc.w	r3, r5, r3
 8004602:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004612:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004622:	4629      	mov	r1, r5
 8004624:	008b      	lsls	r3, r1, #2
 8004626:	4621      	mov	r1, r4
 8004628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800462c:	4621      	mov	r1, r4
 800462e:	008a      	lsls	r2, r1, #2
 8004630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004634:	f7fb fe2c 	bl	8000290 <__aeabi_uldivmod>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4b60      	ldr	r3, [pc, #384]	@ (80047c0 <UART_SetConfig+0x4e4>)
 800463e:	fba3 2302 	umull	r2, r3, r3, r2
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	011c      	lsls	r4, r3, #4
 8004646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800464a:	2200      	movs	r2, #0
 800464c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004650:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004658:	4642      	mov	r2, r8
 800465a:	464b      	mov	r3, r9
 800465c:	1891      	adds	r1, r2, r2
 800465e:	61b9      	str	r1, [r7, #24]
 8004660:	415b      	adcs	r3, r3
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004668:	4641      	mov	r1, r8
 800466a:	1851      	adds	r1, r2, r1
 800466c:	6139      	str	r1, [r7, #16]
 800466e:	4649      	mov	r1, r9
 8004670:	414b      	adcs	r3, r1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004680:	4659      	mov	r1, fp
 8004682:	00cb      	lsls	r3, r1, #3
 8004684:	4651      	mov	r1, sl
 8004686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800468a:	4651      	mov	r1, sl
 800468c:	00ca      	lsls	r2, r1, #3
 800468e:	4610      	mov	r0, r2
 8004690:	4619      	mov	r1, r3
 8004692:	4603      	mov	r3, r0
 8004694:	4642      	mov	r2, r8
 8004696:	189b      	adds	r3, r3, r2
 8004698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800469c:	464b      	mov	r3, r9
 800469e:	460a      	mov	r2, r1
 80046a0:	eb42 0303 	adc.w	r3, r2, r3
 80046a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046c0:	4649      	mov	r1, r9
 80046c2:	008b      	lsls	r3, r1, #2
 80046c4:	4641      	mov	r1, r8
 80046c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ca:	4641      	mov	r1, r8
 80046cc:	008a      	lsls	r2, r1, #2
 80046ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046d2:	f7fb fddd 	bl	8000290 <__aeabi_uldivmod>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	4b38      	ldr	r3, [pc, #224]	@ (80047c0 <UART_SetConfig+0x4e4>)
 80046de:	fba3 2301 	umull	r2, r3, r3, r1
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	2264      	movs	r2, #100	@ 0x64
 80046e6:	fb02 f303 	mul.w	r3, r2, r3
 80046ea:	1acb      	subs	r3, r1, r3
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	3332      	adds	r3, #50	@ 0x32
 80046f0:	4a33      	ldr	r2, [pc, #204]	@ (80047c0 <UART_SetConfig+0x4e4>)
 80046f2:	fba2 2303 	umull	r2, r3, r2, r3
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046fc:	441c      	add	r4, r3
 80046fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004702:	2200      	movs	r2, #0
 8004704:	673b      	str	r3, [r7, #112]	@ 0x70
 8004706:	677a      	str	r2, [r7, #116]	@ 0x74
 8004708:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800470c:	4642      	mov	r2, r8
 800470e:	464b      	mov	r3, r9
 8004710:	1891      	adds	r1, r2, r2
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	415b      	adcs	r3, r3
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800471c:	4641      	mov	r1, r8
 800471e:	1851      	adds	r1, r2, r1
 8004720:	6039      	str	r1, [r7, #0]
 8004722:	4649      	mov	r1, r9
 8004724:	414b      	adcs	r3, r1
 8004726:	607b      	str	r3, [r7, #4]
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004734:	4659      	mov	r1, fp
 8004736:	00cb      	lsls	r3, r1, #3
 8004738:	4651      	mov	r1, sl
 800473a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800473e:	4651      	mov	r1, sl
 8004740:	00ca      	lsls	r2, r1, #3
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	4603      	mov	r3, r0
 8004748:	4642      	mov	r2, r8
 800474a:	189b      	adds	r3, r3, r2
 800474c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800474e:	464b      	mov	r3, r9
 8004750:	460a      	mov	r2, r1
 8004752:	eb42 0303 	adc.w	r3, r2, r3
 8004756:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	663b      	str	r3, [r7, #96]	@ 0x60
 8004762:	667a      	str	r2, [r7, #100]	@ 0x64
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004770:	4649      	mov	r1, r9
 8004772:	008b      	lsls	r3, r1, #2
 8004774:	4641      	mov	r1, r8
 8004776:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800477a:	4641      	mov	r1, r8
 800477c:	008a      	lsls	r2, r1, #2
 800477e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004782:	f7fb fd85 	bl	8000290 <__aeabi_uldivmod>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <UART_SetConfig+0x4e4>)
 800478c:	fba3 1302 	umull	r1, r3, r3, r2
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	2164      	movs	r1, #100	@ 0x64
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	3332      	adds	r3, #50	@ 0x32
 800479e:	4a08      	ldr	r2, [pc, #32]	@ (80047c0 <UART_SetConfig+0x4e4>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	f003 020f 	and.w	r2, r3, #15
 80047aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4422      	add	r2, r4
 80047b2:	609a      	str	r2, [r3, #8]
}
 80047b4:	bf00      	nop
 80047b6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047ba:	46bd      	mov	sp, r7
 80047bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c0:	51eb851f 	.word	0x51eb851f

080047c4 <__NVIC_SetPriority>:
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	6039      	str	r1, [r7, #0]
 80047ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	db0a      	blt.n	80047ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	490c      	ldr	r1, [pc, #48]	@ (8004810 <__NVIC_SetPriority+0x4c>)
 80047de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e2:	0112      	lsls	r2, r2, #4
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	440b      	add	r3, r1
 80047e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80047ec:	e00a      	b.n	8004804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	4908      	ldr	r1, [pc, #32]	@ (8004814 <__NVIC_SetPriority+0x50>)
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	3b04      	subs	r3, #4
 80047fc:	0112      	lsls	r2, r2, #4
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	440b      	add	r3, r1
 8004802:	761a      	strb	r2, [r3, #24]
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	e000e100 	.word	0xe000e100
 8004814:	e000ed00 	.word	0xe000ed00

08004818 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800481c:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <SysTick_Handler+0x1c>)
 800481e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004820:	f001 fd74 	bl	800630c <xTaskGetSchedulerState>
 8004824:	4603      	mov	r3, r0
 8004826:	2b01      	cmp	r3, #1
 8004828:	d001      	beq.n	800482e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800482a:	f002 fb6d 	bl	8006f08 <xPortSysTickHandler>
  }
}
 800482e:	bf00      	nop
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	e000e010 	.word	0xe000e010

08004838 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800483c:	2100      	movs	r1, #0
 800483e:	f06f 0004 	mvn.w	r0, #4
 8004842:	f7ff ffbf 	bl	80047c4 <__NVIC_SetPriority>
#endif
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004852:	f3ef 8305 	mrs	r3, IPSR
 8004856:	603b      	str	r3, [r7, #0]
  return(result);
 8004858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800485e:	f06f 0305 	mvn.w	r3, #5
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	e00c      	b.n	8004880 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004866:	4b0a      	ldr	r3, [pc, #40]	@ (8004890 <osKernelInitialize+0x44>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800486e:	4b08      	ldr	r3, [pc, #32]	@ (8004890 <osKernelInitialize+0x44>)
 8004870:	2201      	movs	r2, #1
 8004872:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004874:	2300      	movs	r3, #0
 8004876:	607b      	str	r3, [r7, #4]
 8004878:	e002      	b.n	8004880 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800487a:	f04f 33ff 	mov.w	r3, #4294967295
 800487e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004880:	687b      	ldr	r3, [r7, #4]
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	200004e8 	.word	0x200004e8

08004894 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800489a:	f3ef 8305 	mrs	r3, IPSR
 800489e:	603b      	str	r3, [r7, #0]
  return(result);
 80048a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80048a6:	f06f 0305 	mvn.w	r3, #5
 80048aa:	607b      	str	r3, [r7, #4]
 80048ac:	e010      	b.n	80048d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80048ae:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <osKernelStart+0x48>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d109      	bne.n	80048ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80048b6:	f7ff ffbf 	bl	8004838 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80048ba:	4b08      	ldr	r3, [pc, #32]	@ (80048dc <osKernelStart+0x48>)
 80048bc:	2202      	movs	r2, #2
 80048be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80048c0:	f001 f8c0 	bl	8005a44 <vTaskStartScheduler>
      stat = osOK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	607b      	str	r3, [r7, #4]
 80048c8:	e002      	b.n	80048d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80048ca:	f04f 33ff 	mov.w	r3, #4294967295
 80048ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048d0:	687b      	ldr	r3, [r7, #4]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200004e8 	.word	0x200004e8

080048e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08e      	sub	sp, #56	@ 0x38
 80048e4:	af04      	add	r7, sp, #16
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048f0:	f3ef 8305 	mrs	r3, IPSR
 80048f4:	617b      	str	r3, [r7, #20]
  return(result);
 80048f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d17e      	bne.n	80049fa <osThreadNew+0x11a>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d07b      	beq.n	80049fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004902:	2380      	movs	r3, #128	@ 0x80
 8004904:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004906:	2318      	movs	r3, #24
 8004908:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800490e:	f04f 33ff 	mov.w	r3, #4294967295
 8004912:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d045      	beq.n	80049a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <osThreadNew+0x48>
        name = attr->name;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <osThreadNew+0x6e>
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b38      	cmp	r3, #56	@ 0x38
 8004940:	d805      	bhi.n	800494e <osThreadNew+0x6e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <osThreadNew+0x72>
        return (NULL);
 800494e:	2300      	movs	r3, #0
 8004950:	e054      	b.n	80049fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	089b      	lsrs	r3, r3, #2
 8004960:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00e      	beq.n	8004988 <osThreadNew+0xa8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004970:	d90a      	bls.n	8004988 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004976:	2b00      	cmp	r3, #0
 8004978:	d006      	beq.n	8004988 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <osThreadNew+0xa8>
        mem = 1;
 8004982:	2301      	movs	r3, #1
 8004984:	61bb      	str	r3, [r7, #24]
 8004986:	e010      	b.n	80049aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10c      	bne.n	80049aa <osThreadNew+0xca>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d108      	bne.n	80049aa <osThreadNew+0xca>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d104      	bne.n	80049aa <osThreadNew+0xca>
          mem = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61bb      	str	r3, [r7, #24]
 80049a4:	e001      	b.n	80049aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d110      	bne.n	80049d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049b8:	9202      	str	r2, [sp, #8]
 80049ba:	9301      	str	r3, [sp, #4]
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	6a3a      	ldr	r2, [r7, #32]
 80049c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 fdfe 	bl	80055c8 <xTaskCreateStatic>
 80049cc:	4603      	mov	r3, r0
 80049ce:	613b      	str	r3, [r7, #16]
 80049d0:	e013      	b.n	80049fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d110      	bne.n	80049fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	b29a      	uxth	r2, r3
 80049dc:	f107 0310 	add.w	r3, r7, #16
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 fe4c 	bl	8005688 <xTaskCreate>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d001      	beq.n	80049fa <osThreadNew+0x11a>
            hTask = NULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80049fa:	693b      	ldr	r3, [r7, #16]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3728      	adds	r7, #40	@ 0x28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a07      	ldr	r2, [pc, #28]	@ (8004a30 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4a06      	ldr	r2, [pc, #24]	@ (8004a34 <vApplicationGetIdleTaskMemory+0x30>)
 8004a1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2280      	movs	r2, #128	@ 0x80
 8004a20:	601a      	str	r2, [r3, #0]
}
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	200004ec 	.word	0x200004ec
 8004a34:	20000594 	.word	0x20000594

08004a38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4a07      	ldr	r2, [pc, #28]	@ (8004a64 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	4a06      	ldr	r2, [pc, #24]	@ (8004a68 <vApplicationGetTimerTaskMemory+0x30>)
 8004a4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a56:	601a      	str	r2, [r3, #0]
}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	20000794 	.word	0x20000794
 8004a68:	2000083c 	.word	0x2000083c

08004a6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f103 0208 	add.w	r2, r3, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f04f 32ff 	mov.w	r2, #4294967295
 8004a84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f103 0208 	add.w	r2, r3, #8
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f103 0208 	add.w	r2, r3, #8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	601a      	str	r2, [r3, #0]
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d103      	bne.n	8004b2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e00c      	b.n	8004b48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3308      	adds	r3, #8
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e002      	b.n	8004b3c <vListInsert+0x2e>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d2f6      	bcs.n	8004b36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	601a      	str	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6892      	ldr	r2, [r2, #8]
 8004b96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6852      	ldr	r2, [r2, #4]
 8004ba0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d103      	bne.n	8004bb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	1e5a      	subs	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10b      	bne.n	8004c00 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bfa:	bf00      	nop
 8004bfc:	bf00      	nop
 8004bfe:	e7fd      	b.n	8004bfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c00:	f002 f8f2 	bl	8006de8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0c:	68f9      	ldr	r1, [r7, #12]
 8004c0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c10:	fb01 f303 	mul.w	r3, r1, r3
 8004c14:	441a      	add	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c30:	3b01      	subs	r3, #1
 8004c32:	68f9      	ldr	r1, [r7, #12]
 8004c34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004c36:	fb01 f303 	mul.w	r3, r1, r3
 8004c3a:	441a      	add	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	22ff      	movs	r2, #255	@ 0xff
 8004c44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	22ff      	movs	r2, #255	@ 0xff
 8004c4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d114      	bne.n	8004c80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01a      	beq.n	8004c94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3310      	adds	r3, #16
 8004c62:	4618      	mov	r0, r3
 8004c64:	f001 f98c 	bl	8005f80 <xTaskRemoveFromEventList>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d012      	beq.n	8004c94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca4 <xQueueGenericReset+0xd0>)
 8004c70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	e009      	b.n	8004c94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3310      	adds	r3, #16
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff fef1 	bl	8004a6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3324      	adds	r3, #36	@ 0x24
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7ff feec 	bl	8004a6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c94:	f002 f8da 	bl	8006e4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c98:	2301      	movs	r3, #1
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08e      	sub	sp, #56	@ 0x38
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc0:	f383 8811 	msr	BASEPRI, r3
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cce:	bf00      	nop
 8004cd0:	bf00      	nop
 8004cd2:	e7fd      	b.n	8004cd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10b      	bne.n	8004cf2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	e7fd      	b.n	8004cee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <xQueueGenericCreateStatic+0x56>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <xQueueGenericCreateStatic+0x5a>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <xQueueGenericCreateStatic+0x5c>
 8004d02:	2300      	movs	r3, #0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10b      	bne.n	8004d20 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
 8004d18:	623b      	str	r3, [r7, #32]
}
 8004d1a:	bf00      	nop
 8004d1c:	bf00      	nop
 8004d1e:	e7fd      	b.n	8004d1c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <xQueueGenericCreateStatic+0x84>
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <xQueueGenericCreateStatic+0x88>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <xQueueGenericCreateStatic+0x8a>
 8004d30:	2300      	movs	r3, #0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10b      	bne.n	8004d4e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	61fb      	str	r3, [r7, #28]
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	e7fd      	b.n	8004d4a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d4e:	2350      	movs	r3, #80	@ 0x50
 8004d50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2b50      	cmp	r3, #80	@ 0x50
 8004d56:	d00b      	beq.n	8004d70 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	61bb      	str	r3, [r7, #24]
}
 8004d6a:	bf00      	nop
 8004d6c:	bf00      	nop
 8004d6e:	e7fd      	b.n	8004d6c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d84:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f805 	bl	8004da2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3730      	adds	r7, #48	@ 0x30
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d103      	bne.n	8004dbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	e002      	b.n	8004dc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	69b8      	ldr	r0, [r7, #24]
 8004dd4:	f7ff fefe 	bl	8004bd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08e      	sub	sp, #56	@ 0x38
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004df6:	2300      	movs	r3, #0
 8004df8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10b      	bne.n	8004e1c <xQueueGenericSend+0x34>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e16:	bf00      	nop
 8004e18:	bf00      	nop
 8004e1a:	e7fd      	b.n	8004e18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d103      	bne.n	8004e2a <xQueueGenericSend+0x42>
 8004e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <xQueueGenericSend+0x46>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <xQueueGenericSend+0x48>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10b      	bne.n	8004e4c <xQueueGenericSend+0x64>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	e7fd      	b.n	8004e48 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d103      	bne.n	8004e5a <xQueueGenericSend+0x72>
 8004e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <xQueueGenericSend+0x76>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <xQueueGenericSend+0x78>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <xQueueGenericSend+0x94>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	623b      	str	r3, [r7, #32]
}
 8004e76:	bf00      	nop
 8004e78:	bf00      	nop
 8004e7a:	e7fd      	b.n	8004e78 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e7c:	f001 fa46 	bl	800630c <xTaskGetSchedulerState>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d102      	bne.n	8004e8c <xQueueGenericSend+0xa4>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <xQueueGenericSend+0xa8>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <xQueueGenericSend+0xaa>
 8004e90:	2300      	movs	r3, #0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10b      	bne.n	8004eae <xQueueGenericSend+0xc6>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	61fb      	str	r3, [r7, #28]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004eae:	f001 ff9b 	bl	8006de8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d302      	bcc.n	8004ec4 <xQueueGenericSend+0xdc>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d129      	bne.n	8004f18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004eca:	f000 fa0f 	bl	80052ec <prvCopyDataToQueue>
 8004ece:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d010      	beq.n	8004efa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eda:	3324      	adds	r3, #36	@ 0x24
 8004edc:	4618      	mov	r0, r3
 8004ede:	f001 f84f 	bl	8005f80 <xTaskRemoveFromEventList>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d013      	beq.n	8004f10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8004fe8 <xQueueGenericSend+0x200>)
 8004eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	e00a      	b.n	8004f10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f00:	4b39      	ldr	r3, [pc, #228]	@ (8004fe8 <xQueueGenericSend+0x200>)
 8004f02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f10:	f001 ff9c 	bl	8006e4c <vPortExitCritical>
				return pdPASS;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e063      	b.n	8004fe0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d103      	bne.n	8004f26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f1e:	f001 ff95 	bl	8006e4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	e05c      	b.n	8004fe0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f2c:	f107 0314 	add.w	r3, r7, #20
 8004f30:	4618      	mov	r0, r3
 8004f32:	f001 f889 	bl	8006048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f36:	2301      	movs	r3, #1
 8004f38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f3a:	f001 ff87 	bl	8006e4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f3e:	f000 fdf1 	bl	8005b24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f42:	f001 ff51 	bl	8006de8 <vPortEnterCritical>
 8004f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f4c:	b25b      	sxtb	r3, r3
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d103      	bne.n	8004f5c <xQueueGenericSend+0x174>
 8004f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f62:	b25b      	sxtb	r3, r3
 8004f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f68:	d103      	bne.n	8004f72 <xQueueGenericSend+0x18a>
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f72:	f001 ff6b 	bl	8006e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f76:	1d3a      	adds	r2, r7, #4
 8004f78:	f107 0314 	add.w	r3, r7, #20
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f001 f878 	bl	8006074 <xTaskCheckForTimeOut>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d124      	bne.n	8004fd4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f8c:	f000 faa6 	bl	80054dc <prvIsQueueFull>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d018      	beq.n	8004fc8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	3310      	adds	r3, #16
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 ff9c 	bl	8005edc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fa6:	f000 fa31 	bl	800540c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004faa:	f000 fdc9 	bl	8005b40 <xTaskResumeAll>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f47f af7c 	bne.w	8004eae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <xQueueGenericSend+0x200>)
 8004fb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	e772      	b.n	8004eae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fca:	f000 fa1f 	bl	800540c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fce:	f000 fdb7 	bl	8005b40 <xTaskResumeAll>
 8004fd2:	e76c      	b.n	8004eae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004fd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fd6:	f000 fa19 	bl	800540c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fda:	f000 fdb1 	bl	8005b40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3738      	adds	r7, #56	@ 0x38
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b090      	sub	sp, #64	@ 0x40
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10b      	bne.n	800501c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005016:	bf00      	nop
 8005018:	bf00      	nop
 800501a:	e7fd      	b.n	8005018 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d103      	bne.n	800502a <xQueueGenericSendFromISR+0x3e>
 8005022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <xQueueGenericSendFromISR+0x42>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <xQueueGenericSendFromISR+0x44>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10b      	bne.n	800504c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005046:	bf00      	nop
 8005048:	bf00      	nop
 800504a:	e7fd      	b.n	8005048 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b02      	cmp	r3, #2
 8005050:	d103      	bne.n	800505a <xQueueGenericSendFromISR+0x6e>
 8005052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <xQueueGenericSendFromISR+0x72>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <xQueueGenericSendFromISR+0x74>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10b      	bne.n	800507c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	623b      	str	r3, [r7, #32]
}
 8005076:	bf00      	nop
 8005078:	bf00      	nop
 800507a:	e7fd      	b.n	8005078 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800507c:	f001 ff94 	bl	8006fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005080:	f3ef 8211 	mrs	r2, BASEPRI
 8005084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	61fa      	str	r2, [r7, #28]
 8005096:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005098:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800509a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800509c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d302      	bcc.n	80050ae <xQueueGenericSendFromISR+0xc2>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d12f      	bne.n	800510e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80050c4:	f000 f912 	bl	80052ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80050cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d0:	d112      	bne.n	80050f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d016      	beq.n	8005108 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050dc:	3324      	adds	r3, #36	@ 0x24
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 ff4e 	bl	8005f80 <xTaskRemoveFromEventList>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00e      	beq.n	8005108 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00b      	beq.n	8005108 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e007      	b.n	8005108 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80050fc:	3301      	adds	r3, #1
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	b25a      	sxtb	r2, r3
 8005102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005108:	2301      	movs	r3, #1
 800510a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800510c:	e001      	b.n	8005112 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800510e:	2300      	movs	r3, #0
 8005110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005114:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800511c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800511e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005120:	4618      	mov	r0, r3
 8005122:	3740      	adds	r7, #64	@ 0x40
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08c      	sub	sp, #48	@ 0x30
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005134:	2300      	movs	r3, #0
 8005136:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800513c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10b      	bne.n	800515a <xQueueReceive+0x32>
	__asm volatile
 8005142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	623b      	str	r3, [r7, #32]
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop
 8005158:	e7fd      	b.n	8005156 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d103      	bne.n	8005168 <xQueueReceive+0x40>
 8005160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <xQueueReceive+0x44>
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <xQueueReceive+0x46>
 800516c:	2300      	movs	r3, #0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10b      	bne.n	800518a <xQueueReceive+0x62>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	61fb      	str	r3, [r7, #28]
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop
 8005188:	e7fd      	b.n	8005186 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800518a:	f001 f8bf 	bl	800630c <xTaskGetSchedulerState>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <xQueueReceive+0x72>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <xQueueReceive+0x76>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <xQueueReceive+0x78>
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10b      	bne.n	80051bc <xQueueReceive+0x94>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	61bb      	str	r3, [r7, #24]
}
 80051b6:	bf00      	nop
 80051b8:	bf00      	nop
 80051ba:	e7fd      	b.n	80051b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051bc:	f001 fe14 	bl	8006de8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01f      	beq.n	800520c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051d0:	f000 f8f6 	bl	80053c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	1e5a      	subs	r2, r3, #1
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00f      	beq.n	8005204 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e6:	3310      	adds	r3, #16
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fec9 	bl	8005f80 <xTaskRemoveFromEventList>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051f4:	4b3c      	ldr	r3, [pc, #240]	@ (80052e8 <xQueueReceive+0x1c0>)
 80051f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005204:	f001 fe22 	bl	8006e4c <vPortExitCritical>
				return pdPASS;
 8005208:	2301      	movs	r3, #1
 800520a:	e069      	b.n	80052e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d103      	bne.n	800521a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005212:	f001 fe1b 	bl	8006e4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005216:	2300      	movs	r3, #0
 8005218:	e062      	b.n	80052e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800521a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005220:	f107 0310 	add.w	r3, r7, #16
 8005224:	4618      	mov	r0, r3
 8005226:	f000 ff0f 	bl	8006048 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800522a:	2301      	movs	r3, #1
 800522c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800522e:	f001 fe0d 	bl	8006e4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005232:	f000 fc77 	bl	8005b24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005236:	f001 fdd7 	bl	8006de8 <vPortEnterCritical>
 800523a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005240:	b25b      	sxtb	r3, r3
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	d103      	bne.n	8005250 <xQueueReceive+0x128>
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005256:	b25b      	sxtb	r3, r3
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d103      	bne.n	8005266 <xQueueReceive+0x13e>
 800525e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005266:	f001 fdf1 	bl	8006e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800526a:	1d3a      	adds	r2, r7, #4
 800526c:	f107 0310 	add.w	r3, r7, #16
 8005270:	4611      	mov	r1, r2
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fefe 	bl	8006074 <xTaskCheckForTimeOut>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d123      	bne.n	80052c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800527e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005280:	f000 f916 	bl	80054b0 <prvIsQueueEmpty>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d017      	beq.n	80052ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800528a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528c:	3324      	adds	r3, #36	@ 0x24
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fe22 	bl	8005edc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005298:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800529a:	f000 f8b7 	bl	800540c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800529e:	f000 fc4f 	bl	8005b40 <xTaskResumeAll>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d189      	bne.n	80051bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80052a8:	4b0f      	ldr	r3, [pc, #60]	@ (80052e8 <xQueueReceive+0x1c0>)
 80052aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	e780      	b.n	80051bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052bc:	f000 f8a6 	bl	800540c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052c0:	f000 fc3e 	bl	8005b40 <xTaskResumeAll>
 80052c4:	e77a      	b.n	80051bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052c8:	f000 f8a0 	bl	800540c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052cc:	f000 fc38 	bl	8005b40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80052d2:	f000 f8ed 	bl	80054b0 <prvIsQueueEmpty>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f43f af6f 	beq.w	80051bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3730      	adds	r7, #48	@ 0x30
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005300:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10d      	bne.n	8005326 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d14d      	bne.n	80053ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	4618      	mov	r0, r3
 8005318:	f001 f816 	bl	8006348 <xTaskPriorityDisinherit>
 800531c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	609a      	str	r2, [r3, #8]
 8005324:	e043      	b.n	80053ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d119      	bne.n	8005360 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6858      	ldr	r0, [r3, #4]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005334:	461a      	mov	r2, r3
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	f002 fa4f 	bl	80077da <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005344:	441a      	add	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	429a      	cmp	r2, r3
 8005354:	d32b      	bcc.n	80053ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	e026      	b.n	80053ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68d8      	ldr	r0, [r3, #12]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005368:	461a      	mov	r2, r3
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	f002 fa35 	bl	80077da <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005378:	425b      	negs	r3, r3
 800537a:	441a      	add	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d207      	bcs.n	800539c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005394:	425b      	negs	r3, r3
 8005396:	441a      	add	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d105      	bne.n	80053ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80053b6:	697b      	ldr	r3, [r7, #20]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d018      	beq.n	8005404 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	441a      	add	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d303      	bcc.n	80053f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68d9      	ldr	r1, [r3, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fc:	461a      	mov	r2, r3
 80053fe:	6838      	ldr	r0, [r7, #0]
 8005400:	f002 f9eb 	bl	80077da <memcpy>
	}
}
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005414:	f001 fce8 	bl	8006de8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800541e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005420:	e011      	b.n	8005446 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	d012      	beq.n	8005450 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3324      	adds	r3, #36	@ 0x24
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fda6 	bl	8005f80 <xTaskRemoveFromEventList>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800543a:	f000 fe7f 	bl	800613c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	3b01      	subs	r3, #1
 8005442:	b2db      	uxtb	r3, r3
 8005444:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800544a:	2b00      	cmp	r3, #0
 800544c:	dce9      	bgt.n	8005422 <prvUnlockQueue+0x16>
 800544e:	e000      	b.n	8005452 <prvUnlockQueue+0x46>
					break;
 8005450:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	22ff      	movs	r2, #255	@ 0xff
 8005456:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800545a:	f001 fcf7 	bl	8006e4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800545e:	f001 fcc3 	bl	8006de8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005468:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800546a:	e011      	b.n	8005490 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d012      	beq.n	800549a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3310      	adds	r3, #16
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fd81 	bl	8005f80 <xTaskRemoveFromEventList>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005484:	f000 fe5a 	bl	800613c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005488:	7bbb      	ldrb	r3, [r7, #14]
 800548a:	3b01      	subs	r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005494:	2b00      	cmp	r3, #0
 8005496:	dce9      	bgt.n	800546c <prvUnlockQueue+0x60>
 8005498:	e000      	b.n	800549c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800549a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	22ff      	movs	r2, #255	@ 0xff
 80054a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80054a4:	f001 fcd2 	bl	8006e4c <vPortExitCritical>
}
 80054a8:	bf00      	nop
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054b8:	f001 fc96 	bl	8006de8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80054c4:	2301      	movs	r3, #1
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e001      	b.n	80054ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054ce:	f001 fcbd 	bl	8006e4c <vPortExitCritical>

	return xReturn;
 80054d2:	68fb      	ldr	r3, [r7, #12]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054e4:	f001 fc80 	bl	8006de8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d102      	bne.n	80054fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054f4:	2301      	movs	r3, #1
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	e001      	b.n	80054fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054fe:	f001 fca5 	bl	8006e4c <vPortExitCritical>

	return xReturn;
 8005502:	68fb      	ldr	r3, [r7, #12]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	e014      	b.n	8005546 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800551c:	4a0f      	ldr	r2, [pc, #60]	@ (800555c <vQueueAddToRegistry+0x50>)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10b      	bne.n	8005540 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005528:	490c      	ldr	r1, [pc, #48]	@ (800555c <vQueueAddToRegistry+0x50>)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005532:	4a0a      	ldr	r2, [pc, #40]	@ (800555c <vQueueAddToRegistry+0x50>)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4413      	add	r3, r2
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800553e:	e006      	b.n	800554e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3301      	adds	r3, #1
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b07      	cmp	r3, #7
 800554a:	d9e7      	bls.n	800551c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800554c:	bf00      	nop
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000c3c 	.word	0x20000c3c

08005560 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005570:	f001 fc3a 	bl	8006de8 <vPortEnterCritical>
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800557a:	b25b      	sxtb	r3, r3
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005580:	d103      	bne.n	800558a <vQueueWaitForMessageRestricted+0x2a>
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005590:	b25b      	sxtb	r3, r3
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005596:	d103      	bne.n	80055a0 <vQueueWaitForMessageRestricted+0x40>
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055a0:	f001 fc54 	bl	8006e4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	3324      	adds	r3, #36	@ 0x24
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 fcb7 	bl	8005f28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80055ba:	6978      	ldr	r0, [r7, #20]
 80055bc:	f7ff ff26 	bl	800540c <prvUnlockQueue>
	}
 80055c0:	bf00      	nop
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08e      	sub	sp, #56	@ 0x38
 80055cc:	af04      	add	r7, sp, #16
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
 80055d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	623b      	str	r3, [r7, #32]
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	e7fd      	b.n	80055f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10b      	bne.n	8005612 <xTaskCreateStatic+0x4a>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	61fb      	str	r3, [r7, #28]
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	e7fd      	b.n	800560e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005612:	23a8      	movs	r3, #168	@ 0xa8
 8005614:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2ba8      	cmp	r3, #168	@ 0xa8
 800561a:	d00b      	beq.n	8005634 <xTaskCreateStatic+0x6c>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	61bb      	str	r3, [r7, #24]
}
 800562e:	bf00      	nop
 8005630:	bf00      	nop
 8005632:	e7fd      	b.n	8005630 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005634:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005638:	2b00      	cmp	r3, #0
 800563a:	d01e      	beq.n	800567a <xTaskCreateStatic+0xb2>
 800563c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01b      	beq.n	800567a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800564a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	2202      	movs	r2, #2
 8005650:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005654:	2300      	movs	r3, #0
 8005656:	9303      	str	r3, [sp, #12]
 8005658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565a:	9302      	str	r3, [sp, #8]
 800565c:	f107 0314 	add.w	r3, r7, #20
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f851 	bl	8005714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005672:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005674:	f000 f8f6 	bl	8005864 <prvAddNewTaskToReadyList>
 8005678:	e001      	b.n	800567e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800567e:	697b      	ldr	r3, [r7, #20]
	}
 8005680:	4618      	mov	r0, r3
 8005682:	3728      	adds	r7, #40	@ 0x28
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08c      	sub	sp, #48	@ 0x30
 800568c:	af04      	add	r7, sp, #16
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005698:	88fb      	ldrh	r3, [r7, #6]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4618      	mov	r0, r3
 800569e:	f001 fcc5 	bl	800702c <pvPortMalloc>
 80056a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00e      	beq.n	80056c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80056aa:	20a8      	movs	r0, #168	@ 0xa8
 80056ac:	f001 fcbe 	bl	800702c <pvPortMalloc>
 80056b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80056be:	e005      	b.n	80056cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056c0:	6978      	ldr	r0, [r7, #20]
 80056c2:	f001 fd81 	bl	80071c8 <vPortFree>
 80056c6:	e001      	b.n	80056cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d017      	beq.n	8005702 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056da:	88fa      	ldrh	r2, [r7, #6]
 80056dc:	2300      	movs	r3, #0
 80056de:	9303      	str	r3, [sp, #12]
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	9302      	str	r3, [sp, #8]
 80056e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f80f 	bl	8005714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056f6:	69f8      	ldr	r0, [r7, #28]
 80056f8:	f000 f8b4 	bl	8005864 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056fc:	2301      	movs	r3, #1
 80056fe:	61bb      	str	r3, [r7, #24]
 8005700:	e002      	b.n	8005708 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005708:	69bb      	ldr	r3, [r7, #24]
	}
 800570a:	4618      	mov	r0, r3
 800570c:	3720      	adds	r7, #32
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005724:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	461a      	mov	r2, r3
 800572c:	21a5      	movs	r1, #165	@ 0xa5
 800572e:	f001 ff82 	bl	8007636 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800573c:	3b01      	subs	r3, #1
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	f023 0307 	bic.w	r3, r3, #7
 800574a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00b      	beq.n	800576e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	617b      	str	r3, [r7, #20]
}
 8005768:	bf00      	nop
 800576a:	bf00      	nop
 800576c:	e7fd      	b.n	800576a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01f      	beq.n	80057b4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005774:	2300      	movs	r3, #0
 8005776:	61fb      	str	r3, [r7, #28]
 8005778:	e012      	b.n	80057a0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	7819      	ldrb	r1, [r3, #0]
 8005782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	3334      	adds	r3, #52	@ 0x34
 800578a:	460a      	mov	r2, r1
 800578c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	4413      	add	r3, r2
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d006      	beq.n	80057a8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3301      	adds	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	d9e9      	bls.n	800577a <prvInitialiseNewTask+0x66>
 80057a6:	e000      	b.n	80057aa <prvInitialiseNewTask+0x96>
			{
				break;
 80057a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057b2:	e003      	b.n	80057bc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80057b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057be:	2b37      	cmp	r3, #55	@ 0x37
 80057c0:	d901      	bls.n	80057c6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057c2:	2337      	movs	r3, #55	@ 0x37
 80057c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80057d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d4:	2200      	movs	r2, #0
 80057d6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	3304      	adds	r3, #4
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff f965 	bl	8004aac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e4:	3318      	adds	r3, #24
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff f960 	bl	8004aac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80057f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005800:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005804:	2200      	movs	r2, #0
 8005806:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800580a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580c:	2200      	movs	r2, #0
 800580e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	3354      	adds	r3, #84	@ 0x54
 8005816:	224c      	movs	r2, #76	@ 0x4c
 8005818:	2100      	movs	r1, #0
 800581a:	4618      	mov	r0, r3
 800581c:	f001 ff0b 	bl	8007636 <memset>
 8005820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005822:	4a0d      	ldr	r2, [pc, #52]	@ (8005858 <prvInitialiseNewTask+0x144>)
 8005824:	659a      	str	r2, [r3, #88]	@ 0x58
 8005826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005828:	4a0c      	ldr	r2, [pc, #48]	@ (800585c <prvInitialiseNewTask+0x148>)
 800582a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800582c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582e:	4a0c      	ldr	r2, [pc, #48]	@ (8005860 <prvInitialiseNewTask+0x14c>)
 8005830:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	68f9      	ldr	r1, [r7, #12]
 8005836:	69b8      	ldr	r0, [r7, #24]
 8005838:	f001 f9a4 	bl	8006b84 <pxPortInitialiseStack>
 800583c:	4602      	mov	r2, r0
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800584c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800584e:	bf00      	nop
 8005850:	3720      	adds	r7, #32
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20004ed0 	.word	0x20004ed0
 800585c:	20004f38 	.word	0x20004f38
 8005860:	20004fa0 	.word	0x20004fa0

08005864 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800586c:	f001 fabc 	bl	8006de8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005870:	4b2d      	ldr	r3, [pc, #180]	@ (8005928 <prvAddNewTaskToReadyList+0xc4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	4a2c      	ldr	r2, [pc, #176]	@ (8005928 <prvAddNewTaskToReadyList+0xc4>)
 8005878:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800587a:	4b2c      	ldr	r3, [pc, #176]	@ (800592c <prvAddNewTaskToReadyList+0xc8>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005882:	4a2a      	ldr	r2, [pc, #168]	@ (800592c <prvAddNewTaskToReadyList+0xc8>)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005888:	4b27      	ldr	r3, [pc, #156]	@ (8005928 <prvAddNewTaskToReadyList+0xc4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d110      	bne.n	80058b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005890:	f000 fc78 	bl	8006184 <prvInitialiseTaskLists>
 8005894:	e00d      	b.n	80058b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005896:	4b26      	ldr	r3, [pc, #152]	@ (8005930 <prvAddNewTaskToReadyList+0xcc>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d109      	bne.n	80058b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800589e:	4b23      	ldr	r3, [pc, #140]	@ (800592c <prvAddNewTaskToReadyList+0xc8>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d802      	bhi.n	80058b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058ac:	4a1f      	ldr	r2, [pc, #124]	@ (800592c <prvAddNewTaskToReadyList+0xc8>)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058b2:	4b20      	ldr	r3, [pc, #128]	@ (8005934 <prvAddNewTaskToReadyList+0xd0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3301      	adds	r3, #1
 80058b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005934 <prvAddNewTaskToReadyList+0xd0>)
 80058ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80058bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005934 <prvAddNewTaskToReadyList+0xd0>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005938 <prvAddNewTaskToReadyList+0xd4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d903      	bls.n	80058d8 <prvAddNewTaskToReadyList+0x74>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	4a18      	ldr	r2, [pc, #96]	@ (8005938 <prvAddNewTaskToReadyList+0xd4>)
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4a15      	ldr	r2, [pc, #84]	@ (800593c <prvAddNewTaskToReadyList+0xd8>)
 80058e6:	441a      	add	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f7ff f8e9 	bl	8004ac6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058f4:	f001 faaa 	bl	8006e4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058f8:	4b0d      	ldr	r3, [pc, #52]	@ (8005930 <prvAddNewTaskToReadyList+0xcc>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00e      	beq.n	800591e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005900:	4b0a      	ldr	r3, [pc, #40]	@ (800592c <prvAddNewTaskToReadyList+0xc8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590a:	429a      	cmp	r2, r3
 800590c:	d207      	bcs.n	800591e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800590e:	4b0c      	ldr	r3, [pc, #48]	@ (8005940 <prvAddNewTaskToReadyList+0xdc>)
 8005910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20001150 	.word	0x20001150
 800592c:	20000c7c 	.word	0x20000c7c
 8005930:	2000115c 	.word	0x2000115c
 8005934:	2000116c 	.word	0x2000116c
 8005938:	20001158 	.word	0x20001158
 800593c:	20000c80 	.word	0x20000c80
 8005940:	e000ed04 	.word	0xe000ed04

08005944 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	@ 0x28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800594e:	2300      	movs	r3, #0
 8005950:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10b      	bne.n	8005970 <vTaskDelayUntil+0x2c>
	__asm volatile
 8005958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	617b      	str	r3, [r7, #20]
}
 800596a:	bf00      	nop
 800596c:	bf00      	nop
 800596e:	e7fd      	b.n	800596c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10b      	bne.n	800598e <vTaskDelayUntil+0x4a>
	__asm volatile
 8005976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	613b      	str	r3, [r7, #16]
}
 8005988:	bf00      	nop
 800598a:	bf00      	nop
 800598c:	e7fd      	b.n	800598a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800598e:	4b2a      	ldr	r3, [pc, #168]	@ (8005a38 <vTaskDelayUntil+0xf4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00b      	beq.n	80059ae <vTaskDelayUntil+0x6a>
	__asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	60fb      	str	r3, [r7, #12]
}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	e7fd      	b.n	80059aa <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 80059ae:	f000 f8b9 	bl	8005b24 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80059b2:	4b22      	ldr	r3, [pc, #136]	@ (8005a3c <vTaskDelayUntil+0xf8>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	4413      	add	r3, r2
 80059c0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a3a      	ldr	r2, [r7, #32]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d20b      	bcs.n	80059e4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d211      	bcs.n	80059fa <vTaskDelayUntil+0xb6>
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d90d      	bls.n	80059fa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80059de:	2301      	movs	r3, #1
 80059e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80059e2:	e00a      	b.n	80059fa <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d303      	bcc.n	80059f6 <vTaskDelayUntil+0xb2>
 80059ee:	69fa      	ldr	r2, [r7, #28]
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d901      	bls.n	80059fa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80059f6:	2301      	movs	r3, #1
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d006      	beq.n	8005a14 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005a06:	69fa      	ldr	r2, [r7, #28]
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fd0a 	bl	8006428 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005a14:	f000 f894 	bl	8005b40 <xTaskResumeAll>
 8005a18:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d107      	bne.n	8005a30 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8005a20:	4b07      	ldr	r3, [pc, #28]	@ (8005a40 <vTaskDelayUntil+0xfc>)
 8005a22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a30:	bf00      	nop
 8005a32:	3728      	adds	r7, #40	@ 0x28
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20001178 	.word	0x20001178
 8005a3c:	20001154 	.word	0x20001154
 8005a40:	e000ed04 	.word	0xe000ed04

08005a44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08a      	sub	sp, #40	@ 0x28
 8005a48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a52:	463a      	mov	r2, r7
 8005a54:	1d39      	adds	r1, r7, #4
 8005a56:	f107 0308 	add.w	r3, r7, #8
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe ffd2 	bl	8004a04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	9202      	str	r2, [sp, #8]
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	460a      	mov	r2, r1
 8005a72:	4924      	ldr	r1, [pc, #144]	@ (8005b04 <vTaskStartScheduler+0xc0>)
 8005a74:	4824      	ldr	r0, [pc, #144]	@ (8005b08 <vTaskStartScheduler+0xc4>)
 8005a76:	f7ff fda7 	bl	80055c8 <xTaskCreateStatic>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	4a23      	ldr	r2, [pc, #140]	@ (8005b0c <vTaskStartScheduler+0xc8>)
 8005a7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a80:	4b22      	ldr	r3, [pc, #136]	@ (8005b0c <vTaskStartScheduler+0xc8>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	e001      	b.n	8005a92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d102      	bne.n	8005a9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005a98:	f000 fd1a 	bl	80064d0 <xTimerCreateTimerTask>
 8005a9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d11b      	bne.n	8005adc <vTaskStartScheduler+0x98>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	613b      	str	r3, [r7, #16]
}
 8005ab6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ab8:	4b15      	ldr	r3, [pc, #84]	@ (8005b10 <vTaskStartScheduler+0xcc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	3354      	adds	r3, #84	@ 0x54
 8005abe:	4a15      	ldr	r2, [pc, #84]	@ (8005b14 <vTaskStartScheduler+0xd0>)
 8005ac0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ac2:	4b15      	ldr	r3, [pc, #84]	@ (8005b18 <vTaskStartScheduler+0xd4>)
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005aca:	4b14      	ldr	r3, [pc, #80]	@ (8005b1c <vTaskStartScheduler+0xd8>)
 8005acc:	2201      	movs	r2, #1
 8005ace:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ad0:	4b13      	ldr	r3, [pc, #76]	@ (8005b20 <vTaskStartScheduler+0xdc>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ad6:	f001 f8e3 	bl	8006ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ada:	e00f      	b.n	8005afc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae2:	d10b      	bne.n	8005afc <vTaskStartScheduler+0xb8>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	60fb      	str	r3, [r7, #12]
}
 8005af6:	bf00      	nop
 8005af8:	bf00      	nop
 8005afa:	e7fd      	b.n	8005af8 <vTaskStartScheduler+0xb4>
}
 8005afc:	bf00      	nop
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	080084f0 	.word	0x080084f0
 8005b08:	08006155 	.word	0x08006155
 8005b0c:	20001174 	.word	0x20001174
 8005b10:	20000c7c 	.word	0x20000c7c
 8005b14:	2000006c 	.word	0x2000006c
 8005b18:	20001170 	.word	0x20001170
 8005b1c:	2000115c 	.word	0x2000115c
 8005b20:	20001154 	.word	0x20001154

08005b24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b28:	4b04      	ldr	r3, [pc, #16]	@ (8005b3c <vTaskSuspendAll+0x18>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	4a03      	ldr	r2, [pc, #12]	@ (8005b3c <vTaskSuspendAll+0x18>)
 8005b30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b32:	bf00      	nop
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	20001178 	.word	0x20001178

08005b40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b4e:	4b42      	ldr	r3, [pc, #264]	@ (8005c58 <xTaskResumeAll+0x118>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10b      	bne.n	8005b6e <xTaskResumeAll+0x2e>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	603b      	str	r3, [r7, #0]
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop
 8005b6c:	e7fd      	b.n	8005b6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b6e:	f001 f93b 	bl	8006de8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b72:	4b39      	ldr	r3, [pc, #228]	@ (8005c58 <xTaskResumeAll+0x118>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	4a37      	ldr	r2, [pc, #220]	@ (8005c58 <xTaskResumeAll+0x118>)
 8005b7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b7c:	4b36      	ldr	r3, [pc, #216]	@ (8005c58 <xTaskResumeAll+0x118>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d162      	bne.n	8005c4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b84:	4b35      	ldr	r3, [pc, #212]	@ (8005c5c <xTaskResumeAll+0x11c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d05e      	beq.n	8005c4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b8c:	e02f      	b.n	8005bee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b8e:	4b34      	ldr	r3, [pc, #208]	@ (8005c60 <xTaskResumeAll+0x120>)
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3318      	adds	r3, #24
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fe fff0 	bl	8004b80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe ffeb 	bl	8004b80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bae:	4b2d      	ldr	r3, [pc, #180]	@ (8005c64 <xTaskResumeAll+0x124>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d903      	bls.n	8005bbe <xTaskResumeAll+0x7e>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	4a2a      	ldr	r2, [pc, #168]	@ (8005c64 <xTaskResumeAll+0x124>)
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4a27      	ldr	r2, [pc, #156]	@ (8005c68 <xTaskResumeAll+0x128>)
 8005bcc:	441a      	add	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f7fe ff76 	bl	8004ac6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bde:	4b23      	ldr	r3, [pc, #140]	@ (8005c6c <xTaskResumeAll+0x12c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005be8:	4b21      	ldr	r3, [pc, #132]	@ (8005c70 <xTaskResumeAll+0x130>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bee:	4b1c      	ldr	r3, [pc, #112]	@ (8005c60 <xTaskResumeAll+0x120>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1cb      	bne.n	8005b8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005bfc:	f000 fb66 	bl	80062cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c00:	4b1c      	ldr	r3, [pc, #112]	@ (8005c74 <xTaskResumeAll+0x134>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d010      	beq.n	8005c2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c0c:	f000 f846 	bl	8005c9c <xTaskIncrementTick>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005c16:	4b16      	ldr	r3, [pc, #88]	@ (8005c70 <xTaskResumeAll+0x130>)
 8005c18:	2201      	movs	r2, #1
 8005c1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1f1      	bne.n	8005c0c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005c28:	4b12      	ldr	r3, [pc, #72]	@ (8005c74 <xTaskResumeAll+0x134>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c2e:	4b10      	ldr	r3, [pc, #64]	@ (8005c70 <xTaskResumeAll+0x130>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c36:	2301      	movs	r3, #1
 8005c38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c78 <xTaskResumeAll+0x138>)
 8005c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c4a:	f001 f8ff 	bl	8006e4c <vPortExitCritical>

	return xAlreadyYielded;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20001178 	.word	0x20001178
 8005c5c:	20001150 	.word	0x20001150
 8005c60:	20001110 	.word	0x20001110
 8005c64:	20001158 	.word	0x20001158
 8005c68:	20000c80 	.word	0x20000c80
 8005c6c:	20000c7c 	.word	0x20000c7c
 8005c70:	20001164 	.word	0x20001164
 8005c74:	20001160 	.word	0x20001160
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c82:	4b05      	ldr	r3, [pc, #20]	@ (8005c98 <xTaskGetTickCount+0x1c>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c88:	687b      	ldr	r3, [r7, #4]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20001154 	.word	0x20001154

08005c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8005de4 <xTaskIncrementTick+0x148>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f040 8090 	bne.w	8005dd0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8005de8 <xTaskIncrementTick+0x14c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8005de8 <xTaskIncrementTick+0x14c>)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d121      	bne.n	8005d08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cc4:	4b49      	ldr	r3, [pc, #292]	@ (8005dec <xTaskIncrementTick+0x150>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	603b      	str	r3, [r7, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	e7fd      	b.n	8005ce2 <xTaskIncrementTick+0x46>
 8005ce6:	4b41      	ldr	r3, [pc, #260]	@ (8005dec <xTaskIncrementTick+0x150>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	4b40      	ldr	r3, [pc, #256]	@ (8005df0 <xTaskIncrementTick+0x154>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a3e      	ldr	r2, [pc, #248]	@ (8005dec <xTaskIncrementTick+0x150>)
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	4a3e      	ldr	r2, [pc, #248]	@ (8005df0 <xTaskIncrementTick+0x154>)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8005df4 <xTaskIncrementTick+0x158>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	4a3c      	ldr	r2, [pc, #240]	@ (8005df4 <xTaskIncrementTick+0x158>)
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	f000 fae2 	bl	80062cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d08:	4b3b      	ldr	r3, [pc, #236]	@ (8005df8 <xTaskIncrementTick+0x15c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d349      	bcc.n	8005da6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d12:	4b36      	ldr	r3, [pc, #216]	@ (8005dec <xTaskIncrementTick+0x150>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d104      	bne.n	8005d26 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d1c:	4b36      	ldr	r3, [pc, #216]	@ (8005df8 <xTaskIncrementTick+0x15c>)
 8005d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d22:	601a      	str	r2, [r3, #0]
					break;
 8005d24:	e03f      	b.n	8005da6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d26:	4b31      	ldr	r3, [pc, #196]	@ (8005dec <xTaskIncrementTick+0x150>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d203      	bcs.n	8005d46 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8005df8 <xTaskIncrementTick+0x15c>)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d44:	e02f      	b.n	8005da6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe ff18 	bl	8004b80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	3318      	adds	r3, #24
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fe ff0f 	bl	8004b80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d66:	4b25      	ldr	r3, [pc, #148]	@ (8005dfc <xTaskIncrementTick+0x160>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d903      	bls.n	8005d76 <xTaskIncrementTick+0xda>
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d72:	4a22      	ldr	r2, [pc, #136]	@ (8005dfc <xTaskIncrementTick+0x160>)
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4a1f      	ldr	r2, [pc, #124]	@ (8005e00 <xTaskIncrementTick+0x164>)
 8005d84:	441a      	add	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f7fe fe9a 	bl	8004ac6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d96:	4b1b      	ldr	r3, [pc, #108]	@ (8005e04 <xTaskIncrementTick+0x168>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d3b8      	bcc.n	8005d12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005da4:	e7b5      	b.n	8005d12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005da6:	4b17      	ldr	r3, [pc, #92]	@ (8005e04 <xTaskIncrementTick+0x168>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dac:	4914      	ldr	r1, [pc, #80]	@ (8005e00 <xTaskIncrementTick+0x164>)
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d901      	bls.n	8005dc2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005dc2:	4b11      	ldr	r3, [pc, #68]	@ (8005e08 <xTaskIncrementTick+0x16c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d007      	beq.n	8005dda <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	e004      	b.n	8005dda <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8005e0c <xTaskIncrementTick+0x170>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8005e0c <xTaskIncrementTick+0x170>)
 8005dd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005dda:	697b      	ldr	r3, [r7, #20]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20001178 	.word	0x20001178
 8005de8:	20001154 	.word	0x20001154
 8005dec:	20001108 	.word	0x20001108
 8005df0:	2000110c 	.word	0x2000110c
 8005df4:	20001168 	.word	0x20001168
 8005df8:	20001170 	.word	0x20001170
 8005dfc:	20001158 	.word	0x20001158
 8005e00:	20000c80 	.word	0x20000c80
 8005e04:	20000c7c 	.word	0x20000c7c
 8005e08:	20001164 	.word	0x20001164
 8005e0c:	20001160 	.word	0x20001160

08005e10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e16:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec4 <vTaskSwitchContext+0xb4>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ec8 <vTaskSwitchContext+0xb8>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e24:	e047      	b.n	8005eb6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005e26:	4b28      	ldr	r3, [pc, #160]	@ (8005ec8 <vTaskSwitchContext+0xb8>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2c:	4b27      	ldr	r3, [pc, #156]	@ (8005ecc <vTaskSwitchContext+0xbc>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e011      	b.n	8005e58 <vTaskSwitchContext+0x48>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10b      	bne.n	8005e52 <vTaskSwitchContext+0x42>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	607b      	str	r3, [r7, #4]
}
 8005e4c:	bf00      	nop
 8005e4e:	bf00      	nop
 8005e50:	e7fd      	b.n	8005e4e <vTaskSwitchContext+0x3e>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	491d      	ldr	r1, [pc, #116]	@ (8005ed0 <vTaskSwitchContext+0xc0>)
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	440b      	add	r3, r1
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0e3      	beq.n	8005e34 <vTaskSwitchContext+0x24>
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4a16      	ldr	r2, [pc, #88]	@ (8005ed0 <vTaskSwitchContext+0xc0>)
 8005e78:	4413      	add	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	605a      	str	r2, [r3, #4]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	3308      	adds	r3, #8
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d104      	bne.n	8005e9c <vTaskSwitchContext+0x8c>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	605a      	str	r2, [r3, #4]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ed4 <vTaskSwitchContext+0xc4>)
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	4a09      	ldr	r2, [pc, #36]	@ (8005ecc <vTaskSwitchContext+0xbc>)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005eac:	4b09      	ldr	r3, [pc, #36]	@ (8005ed4 <vTaskSwitchContext+0xc4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3354      	adds	r3, #84	@ 0x54
 8005eb2:	4a09      	ldr	r2, [pc, #36]	@ (8005ed8 <vTaskSwitchContext+0xc8>)
 8005eb4:	6013      	str	r3, [r2, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20001178 	.word	0x20001178
 8005ec8:	20001164 	.word	0x20001164
 8005ecc:	20001158 	.word	0x20001158
 8005ed0:	20000c80 	.word	0x20000c80
 8005ed4:	20000c7c 	.word	0x20000c7c
 8005ed8:	2000006c 	.word	0x2000006c

08005edc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10b      	bne.n	8005f04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	60fb      	str	r3, [r7, #12]
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	e7fd      	b.n	8005f00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f04:	4b07      	ldr	r3, [pc, #28]	@ (8005f24 <vTaskPlaceOnEventList+0x48>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3318      	adds	r3, #24
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7fe fdfe 	bl	8004b0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f12:	2101      	movs	r1, #1
 8005f14:	6838      	ldr	r0, [r7, #0]
 8005f16:	f000 fa87 	bl	8006428 <prvAddCurrentTaskToDelayedList>
}
 8005f1a:	bf00      	nop
 8005f1c:	3710      	adds	r7, #16
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20000c7c 	.word	0x20000c7c

08005f28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d10b      	bne.n	8005f52 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	617b      	str	r3, [r7, #20]
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	e7fd      	b.n	8005f4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f52:	4b0a      	ldr	r3, [pc, #40]	@ (8005f7c <vTaskPlaceOnEventListRestricted+0x54>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3318      	adds	r3, #24
 8005f58:	4619      	mov	r1, r3
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f7fe fdb3 	bl	8004ac6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005f66:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	68b8      	ldr	r0, [r7, #8]
 8005f70:	f000 fa5a 	bl	8006428 <prvAddCurrentTaskToDelayedList>
	}
 8005f74:	bf00      	nop
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	20000c7c 	.word	0x20000c7c

08005f80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10b      	bne.n	8005fae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	60fb      	str	r3, [r7, #12]
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	e7fd      	b.n	8005faa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	3318      	adds	r3, #24
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fe fde4 	bl	8004b80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006030 <xTaskRemoveFromEventList+0xb0>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d11d      	bne.n	8005ffc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fe fddb 	bl	8004b80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fce:	4b19      	ldr	r3, [pc, #100]	@ (8006034 <xTaskRemoveFromEventList+0xb4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d903      	bls.n	8005fde <xTaskRemoveFromEventList+0x5e>
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fda:	4a16      	ldr	r2, [pc, #88]	@ (8006034 <xTaskRemoveFromEventList+0xb4>)
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4a13      	ldr	r2, [pc, #76]	@ (8006038 <xTaskRemoveFromEventList+0xb8>)
 8005fec:	441a      	add	r2, r3
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	f7fe fd66 	bl	8004ac6 <vListInsertEnd>
 8005ffa:	e005      	b.n	8006008 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	3318      	adds	r3, #24
 8006000:	4619      	mov	r1, r3
 8006002:	480e      	ldr	r0, [pc, #56]	@ (800603c <xTaskRemoveFromEventList+0xbc>)
 8006004:	f7fe fd5f 	bl	8004ac6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600c:	4b0c      	ldr	r3, [pc, #48]	@ (8006040 <xTaskRemoveFromEventList+0xc0>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006012:	429a      	cmp	r2, r3
 8006014:	d905      	bls.n	8006022 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006016:	2301      	movs	r3, #1
 8006018:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800601a:	4b0a      	ldr	r3, [pc, #40]	@ (8006044 <xTaskRemoveFromEventList+0xc4>)
 800601c:	2201      	movs	r2, #1
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	e001      	b.n	8006026 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006026:	697b      	ldr	r3, [r7, #20]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3718      	adds	r7, #24
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20001178 	.word	0x20001178
 8006034:	20001158 	.word	0x20001158
 8006038:	20000c80 	.word	0x20000c80
 800603c:	20001110 	.word	0x20001110
 8006040:	20000c7c 	.word	0x20000c7c
 8006044:	20001164 	.word	0x20001164

08006048 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006050:	4b06      	ldr	r3, [pc, #24]	@ (800606c <vTaskInternalSetTimeOutState+0x24>)
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006058:	4b05      	ldr	r3, [pc, #20]	@ (8006070 <vTaskInternalSetTimeOutState+0x28>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	605a      	str	r2, [r3, #4]
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20001168 	.word	0x20001168
 8006070:	20001154 	.word	0x20001154

08006074 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b088      	sub	sp, #32
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10b      	bne.n	800609c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	613b      	str	r3, [r7, #16]
}
 8006096:	bf00      	nop
 8006098:	bf00      	nop
 800609a:	e7fd      	b.n	8006098 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10b      	bne.n	80060ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	60fb      	str	r3, [r7, #12]
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	e7fd      	b.n	80060b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80060ba:	f000 fe95 	bl	8006de8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060be:	4b1d      	ldr	r3, [pc, #116]	@ (8006134 <xTaskCheckForTimeOut+0xc0>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d102      	bne.n	80060de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060d8:	2300      	movs	r3, #0
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	e023      	b.n	8006126 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b15      	ldr	r3, [pc, #84]	@ (8006138 <xTaskCheckForTimeOut+0xc4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d007      	beq.n	80060fa <xTaskCheckForTimeOut+0x86>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d302      	bcc.n	80060fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	e015      	b.n	8006126 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	429a      	cmp	r2, r3
 8006102:	d20b      	bcs.n	800611c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	1ad2      	subs	r2, r2, r3
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff ff99 	bl	8006048 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	e004      	b.n	8006126 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006122:	2301      	movs	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006126:	f000 fe91 	bl	8006e4c <vPortExitCritical>

	return xReturn;
 800612a:	69fb      	ldr	r3, [r7, #28]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20001154 	.word	0x20001154
 8006138:	20001168 	.word	0x20001168

0800613c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800613c:	b480      	push	{r7}
 800613e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006140:	4b03      	ldr	r3, [pc, #12]	@ (8006150 <vTaskMissedYield+0x14>)
 8006142:	2201      	movs	r2, #1
 8006144:	601a      	str	r2, [r3, #0]
}
 8006146:	bf00      	nop
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	20001164 	.word	0x20001164

08006154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800615c:	f000 f852 	bl	8006204 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006160:	4b06      	ldr	r3, [pc, #24]	@ (800617c <prvIdleTask+0x28>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d9f9      	bls.n	800615c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006168:	4b05      	ldr	r3, [pc, #20]	@ (8006180 <prvIdleTask+0x2c>)
 800616a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006178:	e7f0      	b.n	800615c <prvIdleTask+0x8>
 800617a:	bf00      	nop
 800617c:	20000c80 	.word	0x20000c80
 8006180:	e000ed04 	.word	0xe000ed04

08006184 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800618a:	2300      	movs	r3, #0
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	e00c      	b.n	80061aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	4613      	mov	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4a12      	ldr	r2, [pc, #72]	@ (80061e4 <prvInitialiseTaskLists+0x60>)
 800619c:	4413      	add	r3, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe fc64 	bl	8004a6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3301      	adds	r3, #1
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b37      	cmp	r3, #55	@ 0x37
 80061ae:	d9ef      	bls.n	8006190 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061b0:	480d      	ldr	r0, [pc, #52]	@ (80061e8 <prvInitialiseTaskLists+0x64>)
 80061b2:	f7fe fc5b 	bl	8004a6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061b6:	480d      	ldr	r0, [pc, #52]	@ (80061ec <prvInitialiseTaskLists+0x68>)
 80061b8:	f7fe fc58 	bl	8004a6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061bc:	480c      	ldr	r0, [pc, #48]	@ (80061f0 <prvInitialiseTaskLists+0x6c>)
 80061be:	f7fe fc55 	bl	8004a6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061c2:	480c      	ldr	r0, [pc, #48]	@ (80061f4 <prvInitialiseTaskLists+0x70>)
 80061c4:	f7fe fc52 	bl	8004a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061c8:	480b      	ldr	r0, [pc, #44]	@ (80061f8 <prvInitialiseTaskLists+0x74>)
 80061ca:	f7fe fc4f 	bl	8004a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ce:	4b0b      	ldr	r3, [pc, #44]	@ (80061fc <prvInitialiseTaskLists+0x78>)
 80061d0:	4a05      	ldr	r2, [pc, #20]	@ (80061e8 <prvInitialiseTaskLists+0x64>)
 80061d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006200 <prvInitialiseTaskLists+0x7c>)
 80061d6:	4a05      	ldr	r2, [pc, #20]	@ (80061ec <prvInitialiseTaskLists+0x68>)
 80061d8:	601a      	str	r2, [r3, #0]
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20000c80 	.word	0x20000c80
 80061e8:	200010e0 	.word	0x200010e0
 80061ec:	200010f4 	.word	0x200010f4
 80061f0:	20001110 	.word	0x20001110
 80061f4:	20001124 	.word	0x20001124
 80061f8:	2000113c 	.word	0x2000113c
 80061fc:	20001108 	.word	0x20001108
 8006200:	2000110c 	.word	0x2000110c

08006204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800620a:	e019      	b.n	8006240 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800620c:	f000 fdec 	bl	8006de8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006210:	4b10      	ldr	r3, [pc, #64]	@ (8006254 <prvCheckTasksWaitingTermination+0x50>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3304      	adds	r3, #4
 800621c:	4618      	mov	r0, r3
 800621e:	f7fe fcaf 	bl	8004b80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006222:	4b0d      	ldr	r3, [pc, #52]	@ (8006258 <prvCheckTasksWaitingTermination+0x54>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	3b01      	subs	r3, #1
 8006228:	4a0b      	ldr	r2, [pc, #44]	@ (8006258 <prvCheckTasksWaitingTermination+0x54>)
 800622a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800622c:	4b0b      	ldr	r3, [pc, #44]	@ (800625c <prvCheckTasksWaitingTermination+0x58>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3b01      	subs	r3, #1
 8006232:	4a0a      	ldr	r2, [pc, #40]	@ (800625c <prvCheckTasksWaitingTermination+0x58>)
 8006234:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006236:	f000 fe09 	bl	8006e4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f810 	bl	8006260 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006240:	4b06      	ldr	r3, [pc, #24]	@ (800625c <prvCheckTasksWaitingTermination+0x58>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e1      	bne.n	800620c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20001124 	.word	0x20001124
 8006258:	20001150 	.word	0x20001150
 800625c:	20001138 	.word	0x20001138

08006260 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	3354      	adds	r3, #84	@ 0x54
 800626c:	4618      	mov	r0, r3
 800626e:	f001 f9fb 	bl	8007668 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006278:	2b00      	cmp	r3, #0
 800627a:	d108      	bne.n	800628e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006280:	4618      	mov	r0, r3
 8006282:	f000 ffa1 	bl	80071c8 <vPortFree>
				vPortFree( pxTCB );
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 ff9e 	bl	80071c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800628c:	e019      	b.n	80062c2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006294:	2b01      	cmp	r3, #1
 8006296:	d103      	bne.n	80062a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 ff95 	bl	80071c8 <vPortFree>
	}
 800629e:	e010      	b.n	80062c2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d00b      	beq.n	80062c2 <prvDeleteTCB+0x62>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	60fb      	str	r3, [r7, #12]
}
 80062bc:	bf00      	nop
 80062be:	bf00      	nop
 80062c0:	e7fd      	b.n	80062be <prvDeleteTCB+0x5e>
	}
 80062c2:	bf00      	nop
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006304 <prvResetNextTaskUnblockTime+0x38>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d104      	bne.n	80062e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006308 <prvResetNextTaskUnblockTime+0x3c>)
 80062de:	f04f 32ff 	mov.w	r2, #4294967295
 80062e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80062e4:	e008      	b.n	80062f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062e6:	4b07      	ldr	r3, [pc, #28]	@ (8006304 <prvResetNextTaskUnblockTime+0x38>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	4a04      	ldr	r2, [pc, #16]	@ (8006308 <prvResetNextTaskUnblockTime+0x3c>)
 80062f6:	6013      	str	r3, [r2, #0]
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	20001108 	.word	0x20001108
 8006308:	20001170 	.word	0x20001170

0800630c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006312:	4b0b      	ldr	r3, [pc, #44]	@ (8006340 <xTaskGetSchedulerState+0x34>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d102      	bne.n	8006320 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800631a:	2301      	movs	r3, #1
 800631c:	607b      	str	r3, [r7, #4]
 800631e:	e008      	b.n	8006332 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006320:	4b08      	ldr	r3, [pc, #32]	@ (8006344 <xTaskGetSchedulerState+0x38>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006328:	2302      	movs	r3, #2
 800632a:	607b      	str	r3, [r7, #4]
 800632c:	e001      	b.n	8006332 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800632e:	2300      	movs	r3, #0
 8006330:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006332:	687b      	ldr	r3, [r7, #4]
	}
 8006334:	4618      	mov	r0, r3
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	2000115c 	.word	0x2000115c
 8006344:	20001178 	.word	0x20001178

08006348 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d058      	beq.n	8006410 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800635e:	4b2f      	ldr	r3, [pc, #188]	@ (800641c <xTaskPriorityDisinherit+0xd4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	429a      	cmp	r2, r3
 8006366:	d00b      	beq.n	8006380 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	60fb      	str	r3, [r7, #12]
}
 800637a:	bf00      	nop
 800637c:	bf00      	nop
 800637e:	e7fd      	b.n	800637c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10b      	bne.n	80063a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	60bb      	str	r3, [r7, #8]
}
 800639a:	bf00      	nop
 800639c:	bf00      	nop
 800639e:	e7fd      	b.n	800639c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063a4:	1e5a      	subs	r2, r3, #1
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d02c      	beq.n	8006410 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d128      	bne.n	8006410 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe fbdc 	bl	8004b80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006420 <xTaskPriorityDisinherit+0xd8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d903      	bls.n	80063f0 <xTaskPriorityDisinherit+0xa8>
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006420 <xTaskPriorityDisinherit+0xd8>)
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f4:	4613      	mov	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	4413      	add	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4a09      	ldr	r2, [pc, #36]	@ (8006424 <xTaskPriorityDisinherit+0xdc>)
 80063fe:	441a      	add	r2, r3
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f7fe fb5d 	bl	8004ac6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006410:	697b      	ldr	r3, [r7, #20]
	}
 8006412:	4618      	mov	r0, r3
 8006414:	3718      	adds	r7, #24
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	20000c7c 	.word	0x20000c7c
 8006420:	20001158 	.word	0x20001158
 8006424:	20000c80 	.word	0x20000c80

08006428 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006432:	4b21      	ldr	r3, [pc, #132]	@ (80064b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006438:	4b20      	ldr	r3, [pc, #128]	@ (80064bc <prvAddCurrentTaskToDelayedList+0x94>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3304      	adds	r3, #4
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe fb9e 	bl	8004b80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d10a      	bne.n	8006462 <prvAddCurrentTaskToDelayedList+0x3a>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006452:	4b1a      	ldr	r3, [pc, #104]	@ (80064bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	3304      	adds	r3, #4
 8006458:	4619      	mov	r1, r3
 800645a:	4819      	ldr	r0, [pc, #100]	@ (80064c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800645c:	f7fe fb33 	bl	8004ac6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006460:	e026      	b.n	80064b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4413      	add	r3, r2
 8006468:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800646a:	4b14      	ldr	r3, [pc, #80]	@ (80064bc <prvAddCurrentTaskToDelayedList+0x94>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	429a      	cmp	r2, r3
 8006478:	d209      	bcs.n	800648e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800647a:	4b12      	ldr	r3, [pc, #72]	@ (80064c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	4b0f      	ldr	r3, [pc, #60]	@ (80064bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3304      	adds	r3, #4
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f7fe fb41 	bl	8004b0e <vListInsert>
}
 800648c:	e010      	b.n	80064b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800648e:	4b0e      	ldr	r3, [pc, #56]	@ (80064c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	4b0a      	ldr	r3, [pc, #40]	@ (80064bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3304      	adds	r3, #4
 8006498:	4619      	mov	r1, r3
 800649a:	4610      	mov	r0, r2
 800649c:	f7fe fb37 	bl	8004b0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064a0:	4b0a      	ldr	r3, [pc, #40]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d202      	bcs.n	80064b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064aa:	4a08      	ldr	r2, [pc, #32]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	6013      	str	r3, [r2, #0]
}
 80064b0:	bf00      	nop
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	20001154 	.word	0x20001154
 80064bc:	20000c7c 	.word	0x20000c7c
 80064c0:	2000113c 	.word	0x2000113c
 80064c4:	2000110c 	.word	0x2000110c
 80064c8:	20001108 	.word	0x20001108
 80064cc:	20001170 	.word	0x20001170

080064d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	@ 0x28
 80064d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064da:	f000 fb13 	bl	8006b04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80064de:	4b1d      	ldr	r3, [pc, #116]	@ (8006554 <xTimerCreateTimerTask+0x84>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d021      	beq.n	800652a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80064ee:	1d3a      	adds	r2, r7, #4
 80064f0:	f107 0108 	add.w	r1, r7, #8
 80064f4:	f107 030c 	add.w	r3, r7, #12
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fe fa9d 	bl	8004a38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	9202      	str	r2, [sp, #8]
 8006506:	9301      	str	r3, [sp, #4]
 8006508:	2302      	movs	r3, #2
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	2300      	movs	r3, #0
 800650e:	460a      	mov	r2, r1
 8006510:	4911      	ldr	r1, [pc, #68]	@ (8006558 <xTimerCreateTimerTask+0x88>)
 8006512:	4812      	ldr	r0, [pc, #72]	@ (800655c <xTimerCreateTimerTask+0x8c>)
 8006514:	f7ff f858 	bl	80055c8 <xTaskCreateStatic>
 8006518:	4603      	mov	r3, r0
 800651a:	4a11      	ldr	r2, [pc, #68]	@ (8006560 <xTimerCreateTimerTask+0x90>)
 800651c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800651e:	4b10      	ldr	r3, [pc, #64]	@ (8006560 <xTimerCreateTimerTask+0x90>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006526:	2301      	movs	r3, #1
 8006528:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	613b      	str	r3, [r7, #16]
}
 8006542:	bf00      	nop
 8006544:	bf00      	nop
 8006546:	e7fd      	b.n	8006544 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006548:	697b      	ldr	r3, [r7, #20]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3718      	adds	r7, #24
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	200011ac 	.word	0x200011ac
 8006558:	080084f8 	.word	0x080084f8
 800655c:	0800669d 	.word	0x0800669d
 8006560:	200011b0 	.word	0x200011b0

08006564 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08a      	sub	sp, #40	@ 0x28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
 8006570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006572:	2300      	movs	r3, #0
 8006574:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10b      	bne.n	8006594 <xTimerGenericCommand+0x30>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	623b      	str	r3, [r7, #32]
}
 800658e:	bf00      	nop
 8006590:	bf00      	nop
 8006592:	e7fd      	b.n	8006590 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006594:	4b19      	ldr	r3, [pc, #100]	@ (80065fc <xTimerGenericCommand+0x98>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d02a      	beq.n	80065f2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	dc18      	bgt.n	80065e0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065ae:	f7ff fead 	bl	800630c <xTaskGetSchedulerState>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d109      	bne.n	80065cc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065b8:	4b10      	ldr	r3, [pc, #64]	@ (80065fc <xTimerGenericCommand+0x98>)
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	f107 0110 	add.w	r1, r7, #16
 80065c0:	2300      	movs	r3, #0
 80065c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065c4:	f7fe fc10 	bl	8004de8 <xQueueGenericSend>
 80065c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80065ca:	e012      	b.n	80065f2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065cc:	4b0b      	ldr	r3, [pc, #44]	@ (80065fc <xTimerGenericCommand+0x98>)
 80065ce:	6818      	ldr	r0, [r3, #0]
 80065d0:	f107 0110 	add.w	r1, r7, #16
 80065d4:	2300      	movs	r3, #0
 80065d6:	2200      	movs	r2, #0
 80065d8:	f7fe fc06 	bl	8004de8 <xQueueGenericSend>
 80065dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80065de:	e008      	b.n	80065f2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80065e0:	4b06      	ldr	r3, [pc, #24]	@ (80065fc <xTimerGenericCommand+0x98>)
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	f107 0110 	add.w	r1, r7, #16
 80065e8:	2300      	movs	r3, #0
 80065ea:	683a      	ldr	r2, [r7, #0]
 80065ec:	f7fe fcfe 	bl	8004fec <xQueueGenericSendFromISR>
 80065f0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80065f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3728      	adds	r7, #40	@ 0x28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	200011ac 	.word	0x200011ac

08006600 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af02      	add	r7, sp, #8
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800660a:	4b23      	ldr	r3, [pc, #140]	@ (8006698 <prvProcessExpiredTimer+0x98>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	3304      	adds	r3, #4
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe fab1 	bl	8004b80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d023      	beq.n	8006674 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	699a      	ldr	r2, [r3, #24]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	18d1      	adds	r1, r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	6978      	ldr	r0, [r7, #20]
 800663a:	f000 f8d5 	bl	80067e8 <prvInsertTimerInActiveList>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d020      	beq.n	8006686 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006644:	2300      	movs	r3, #0
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	2300      	movs	r3, #0
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	2100      	movs	r1, #0
 800664e:	6978      	ldr	r0, [r7, #20]
 8006650:	f7ff ff88 	bl	8006564 <xTimerGenericCommand>
 8006654:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d114      	bne.n	8006686 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800665c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006660:	f383 8811 	msr	BASEPRI, r3
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	f3bf 8f4f 	dsb	sy
 800666c:	60fb      	str	r3, [r7, #12]
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	e7fd      	b.n	8006670 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	b2da      	uxtb	r2, r3
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	6978      	ldr	r0, [r7, #20]
 800668c:	4798      	blx	r3
}
 800668e:	bf00      	nop
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	200011a4 	.word	0x200011a4

0800669c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066a4:	f107 0308 	add.w	r3, r7, #8
 80066a8:	4618      	mov	r0, r3
 80066aa:	f000 f859 	bl	8006760 <prvGetNextExpireTime>
 80066ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	4619      	mov	r1, r3
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f805 	bl	80066c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066ba:	f000 f8d7 	bl	800686c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066be:	bf00      	nop
 80066c0:	e7f0      	b.n	80066a4 <prvTimerTask+0x8>
	...

080066c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066ce:	f7ff fa29 	bl	8005b24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066d2:	f107 0308 	add.w	r3, r7, #8
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 f866 	bl	80067a8 <prvSampleTimeNow>
 80066dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d130      	bne.n	8006746 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10a      	bne.n	8006700 <prvProcessTimerOrBlockTask+0x3c>
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d806      	bhi.n	8006700 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80066f2:	f7ff fa25 	bl	8005b40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80066f6:	68f9      	ldr	r1, [r7, #12]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff ff81 	bl	8006600 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066fe:	e024      	b.n	800674a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006706:	4b13      	ldr	r3, [pc, #76]	@ (8006754 <prvProcessTimerOrBlockTask+0x90>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <prvProcessTimerOrBlockTask+0x50>
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <prvProcessTimerOrBlockTask+0x52>
 8006714:	2300      	movs	r3, #0
 8006716:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006718:	4b0f      	ldr	r3, [pc, #60]	@ (8006758 <prvProcessTimerOrBlockTask+0x94>)
 800671a:	6818      	ldr	r0, [r3, #0]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	4619      	mov	r1, r3
 8006726:	f7fe ff1b 	bl	8005560 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800672a:	f7ff fa09 	bl	8005b40 <xTaskResumeAll>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006734:	4b09      	ldr	r3, [pc, #36]	@ (800675c <prvProcessTimerOrBlockTask+0x98>)
 8006736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	f3bf 8f6f 	isb	sy
}
 8006744:	e001      	b.n	800674a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006746:	f7ff f9fb 	bl	8005b40 <xTaskResumeAll>
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	200011a8 	.word	0x200011a8
 8006758:	200011ac 	.word	0x200011ac
 800675c:	e000ed04 	.word	0xe000ed04

08006760 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006768:	4b0e      	ldr	r3, [pc, #56]	@ (80067a4 <prvGetNextExpireTime+0x44>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <prvGetNextExpireTime+0x16>
 8006772:	2201      	movs	r2, #1
 8006774:	e000      	b.n	8006778 <prvGetNextExpireTime+0x18>
 8006776:	2200      	movs	r2, #0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006784:	4b07      	ldr	r3, [pc, #28]	@ (80067a4 <prvGetNextExpireTime+0x44>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	e001      	b.n	8006794 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006794:	68fb      	ldr	r3, [r7, #12]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	200011a4 	.word	0x200011a4

080067a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067b0:	f7ff fa64 	bl	8005c7c <xTaskGetTickCount>
 80067b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067b6:	4b0b      	ldr	r3, [pc, #44]	@ (80067e4 <prvSampleTimeNow+0x3c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d205      	bcs.n	80067cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067c0:	f000 f93a 	bl	8006a38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e002      	b.n	80067d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067d2:	4a04      	ldr	r2, [pc, #16]	@ (80067e4 <prvSampleTimeNow+0x3c>)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80067d8:	68fb      	ldr	r3, [r7, #12]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	200011b4 	.word	0x200011b4

080067e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	d812      	bhi.n	8006834 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	1ad2      	subs	r2, r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	429a      	cmp	r2, r3
 800681a:	d302      	bcc.n	8006822 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800681c:	2301      	movs	r3, #1
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	e01b      	b.n	800685a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006822:	4b10      	ldr	r3, [pc, #64]	@ (8006864 <prvInsertTimerInActiveList+0x7c>)
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3304      	adds	r3, #4
 800682a:	4619      	mov	r1, r3
 800682c:	4610      	mov	r0, r2
 800682e:	f7fe f96e 	bl	8004b0e <vListInsert>
 8006832:	e012      	b.n	800685a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d206      	bcs.n	800684a <prvInsertTimerInActiveList+0x62>
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	429a      	cmp	r2, r3
 8006842:	d302      	bcc.n	800684a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	e007      	b.n	800685a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800684a:	4b07      	ldr	r3, [pc, #28]	@ (8006868 <prvInsertTimerInActiveList+0x80>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3304      	adds	r3, #4
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f7fe f95a 	bl	8004b0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800685a:	697b      	ldr	r3, [r7, #20]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	200011a8 	.word	0x200011a8
 8006868:	200011a4 	.word	0x200011a4

0800686c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08e      	sub	sp, #56	@ 0x38
 8006870:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006872:	e0ce      	b.n	8006a12 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	da19      	bge.n	80068ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800687a:	1d3b      	adds	r3, r7, #4
 800687c:	3304      	adds	r3, #4
 800687e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10b      	bne.n	800689e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	61fb      	str	r3, [r7, #28]
}
 8006898:	bf00      	nop
 800689a:	bf00      	nop
 800689c:	e7fd      	b.n	800689a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a4:	6850      	ldr	r0, [r2, #4]
 80068a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a8:	6892      	ldr	r2, [r2, #8]
 80068aa:	4611      	mov	r1, r2
 80068ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f2c0 80ae 	blt.w	8006a12 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d004      	beq.n	80068cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c4:	3304      	adds	r3, #4
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe f95a 	bl	8004b80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068cc:	463b      	mov	r3, r7
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff ff6a 	bl	80067a8 <prvSampleTimeNow>
 80068d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b09      	cmp	r3, #9
 80068da:	f200 8097 	bhi.w	8006a0c <prvProcessReceivedCommands+0x1a0>
 80068de:	a201      	add	r2, pc, #4	@ (adr r2, 80068e4 <prvProcessReceivedCommands+0x78>)
 80068e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e4:	0800690d 	.word	0x0800690d
 80068e8:	0800690d 	.word	0x0800690d
 80068ec:	0800690d 	.word	0x0800690d
 80068f0:	08006983 	.word	0x08006983
 80068f4:	08006997 	.word	0x08006997
 80068f8:	080069e3 	.word	0x080069e3
 80068fc:	0800690d 	.word	0x0800690d
 8006900:	0800690d 	.word	0x0800690d
 8006904:	08006983 	.word	0x08006983
 8006908:	08006997 	.word	0x08006997
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800690c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800690e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006912:	f043 0301 	orr.w	r3, r3, #1
 8006916:	b2da      	uxtb	r2, r3
 8006918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	18d1      	adds	r1, r2, r3
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800692a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800692c:	f7ff ff5c 	bl	80067e8 <prvInsertTimerInActiveList>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d06c      	beq.n	8006a10 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800693c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006940:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006944:	f003 0304 	and.w	r3, r3, #4
 8006948:	2b00      	cmp	r3, #0
 800694a:	d061      	beq.n	8006a10 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	441a      	add	r2, r3
 8006954:	2300      	movs	r3, #0
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	2300      	movs	r3, #0
 800695a:	2100      	movs	r1, #0
 800695c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800695e:	f7ff fe01 	bl	8006564 <xTimerGenericCommand>
 8006962:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d152      	bne.n	8006a10 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	61bb      	str	r3, [r7, #24]
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	e7fd      	b.n	800697e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006984:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	b2da      	uxtb	r2, r3
 800698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006990:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006994:	e03d      	b.n	8006a12 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800699c:	f043 0301 	orr.w	r3, r3, #1
 80069a0:	b2da      	uxtb	r2, r3
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10b      	bne.n	80069ce <prvProcessReceivedCommands+0x162>
	__asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	617b      	str	r3, [r7, #20]
}
 80069c8:	bf00      	nop
 80069ca:	bf00      	nop
 80069cc:	e7fd      	b.n	80069ca <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d0:	699a      	ldr	r2, [r3, #24]
 80069d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d4:	18d1      	adds	r1, r2, r3
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069dc:	f7ff ff04 	bl	80067e8 <prvInsertTimerInActiveList>
					break;
 80069e0:	e017      	b.n	8006a12 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80069e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80069f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069f2:	f000 fbe9 	bl	80071c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069f6:	e00c      	b.n	8006a12 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a0a:	e002      	b.n	8006a12 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006a0c:	bf00      	nop
 8006a0e:	e000      	b.n	8006a12 <prvProcessReceivedCommands+0x1a6>
					break;
 8006a10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a12:	4b08      	ldr	r3, [pc, #32]	@ (8006a34 <prvProcessReceivedCommands+0x1c8>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	1d39      	adds	r1, r7, #4
 8006a18:	2200      	movs	r2, #0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7fe fb84 	bl	8005128 <xQueueReceive>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f47f af26 	bne.w	8006874 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	3730      	adds	r7, #48	@ 0x30
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	200011ac 	.word	0x200011ac

08006a38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a3e:	e049      	b.n	8006ad4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a40:	4b2e      	ldr	r3, [pc, #184]	@ (8006afc <prvSwitchTimerLists+0xc4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8006afc <prvSwitchTimerLists+0xc4>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fe f891 	bl	8004b80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d02f      	beq.n	8006ad4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d90e      	bls.n	8006aa4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a92:	4b1a      	ldr	r3, [pc, #104]	@ (8006afc <prvSwitchTimerLists+0xc4>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	4610      	mov	r0, r2
 8006a9e:	f7fe f836 	bl	8004b0e <vListInsert>
 8006aa2:	e017      	b.n	8006ad4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	2100      	movs	r1, #0
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f7ff fd58 	bl	8006564 <xTimerGenericCommand>
 8006ab4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10b      	bne.n	8006ad4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	603b      	str	r3, [r7, #0]
}
 8006ace:	bf00      	nop
 8006ad0:	bf00      	nop
 8006ad2:	e7fd      	b.n	8006ad0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ad4:	4b09      	ldr	r3, [pc, #36]	@ (8006afc <prvSwitchTimerLists+0xc4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1b0      	bne.n	8006a40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ade:	4b07      	ldr	r3, [pc, #28]	@ (8006afc <prvSwitchTimerLists+0xc4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ae4:	4b06      	ldr	r3, [pc, #24]	@ (8006b00 <prvSwitchTimerLists+0xc8>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a04      	ldr	r2, [pc, #16]	@ (8006afc <prvSwitchTimerLists+0xc4>)
 8006aea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006aec:	4a04      	ldr	r2, [pc, #16]	@ (8006b00 <prvSwitchTimerLists+0xc8>)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	6013      	str	r3, [r2, #0]
}
 8006af2:	bf00      	nop
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	200011a4 	.word	0x200011a4
 8006b00:	200011a8 	.word	0x200011a8

08006b04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b0a:	f000 f96d 	bl	8006de8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b0e:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <prvCheckForValidListAndQueue+0x60>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d120      	bne.n	8006b58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b16:	4814      	ldr	r0, [pc, #80]	@ (8006b68 <prvCheckForValidListAndQueue+0x64>)
 8006b18:	f7fd ffa8 	bl	8004a6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b1c:	4813      	ldr	r0, [pc, #76]	@ (8006b6c <prvCheckForValidListAndQueue+0x68>)
 8006b1e:	f7fd ffa5 	bl	8004a6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b22:	4b13      	ldr	r3, [pc, #76]	@ (8006b70 <prvCheckForValidListAndQueue+0x6c>)
 8006b24:	4a10      	ldr	r2, [pc, #64]	@ (8006b68 <prvCheckForValidListAndQueue+0x64>)
 8006b26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b28:	4b12      	ldr	r3, [pc, #72]	@ (8006b74 <prvCheckForValidListAndQueue+0x70>)
 8006b2a:	4a10      	ldr	r2, [pc, #64]	@ (8006b6c <prvCheckForValidListAndQueue+0x68>)
 8006b2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b2e:	2300      	movs	r3, #0
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	4b11      	ldr	r3, [pc, #68]	@ (8006b78 <prvCheckForValidListAndQueue+0x74>)
 8006b34:	4a11      	ldr	r2, [pc, #68]	@ (8006b7c <prvCheckForValidListAndQueue+0x78>)
 8006b36:	2110      	movs	r1, #16
 8006b38:	200a      	movs	r0, #10
 8006b3a:	f7fe f8b5 	bl	8004ca8 <xQueueGenericCreateStatic>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4a08      	ldr	r2, [pc, #32]	@ (8006b64 <prvCheckForValidListAndQueue+0x60>)
 8006b42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b44:	4b07      	ldr	r3, [pc, #28]	@ (8006b64 <prvCheckForValidListAndQueue+0x60>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b4c:	4b05      	ldr	r3, [pc, #20]	@ (8006b64 <prvCheckForValidListAndQueue+0x60>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	490b      	ldr	r1, [pc, #44]	@ (8006b80 <prvCheckForValidListAndQueue+0x7c>)
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fcda 	bl	800550c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b58:	f000 f978 	bl	8006e4c <vPortExitCritical>
}
 8006b5c:	bf00      	nop
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	200011ac 	.word	0x200011ac
 8006b68:	2000117c 	.word	0x2000117c
 8006b6c:	20001190 	.word	0x20001190
 8006b70:	200011a4 	.word	0x200011a4
 8006b74:	200011a8 	.word	0x200011a8
 8006b78:	20001258 	.word	0x20001258
 8006b7c:	200011b8 	.word	0x200011b8
 8006b80:	08008500 	.word	0x08008500

08006b84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3b04      	subs	r3, #4
 8006b94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3b04      	subs	r3, #4
 8006ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f023 0201 	bic.w	r2, r3, #1
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3b04      	subs	r3, #4
 8006bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8006be8 <pxPortInitialiseStack+0x64>)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3b14      	subs	r3, #20
 8006bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3b04      	subs	r3, #4
 8006bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f06f 0202 	mvn.w	r2, #2
 8006bd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3b20      	subs	r3, #32
 8006bd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bda:	68fb      	ldr	r3, [r7, #12]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	08006bed 	.word	0x08006bed

08006bec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bf6:	4b13      	ldr	r3, [pc, #76]	@ (8006c44 <prvTaskExitError+0x58>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfe:	d00b      	beq.n	8006c18 <prvTaskExitError+0x2c>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	60fb      	str	r3, [r7, #12]
}
 8006c12:	bf00      	nop
 8006c14:	bf00      	nop
 8006c16:	e7fd      	b.n	8006c14 <prvTaskExitError+0x28>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	60bb      	str	r3, [r7, #8]
}
 8006c2a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c2c:	bf00      	nop
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0fc      	beq.n	8006c2e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop
 8006c38:	3714      	adds	r7, #20
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	2000005c 	.word	0x2000005c
	...

08006c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c50:	4b07      	ldr	r3, [pc, #28]	@ (8006c70 <pxCurrentTCBConst2>)
 8006c52:	6819      	ldr	r1, [r3, #0]
 8006c54:	6808      	ldr	r0, [r1, #0]
 8006c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5a:	f380 8809 	msr	PSP, r0
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f04f 0000 	mov.w	r0, #0
 8006c66:	f380 8811 	msr	BASEPRI, r0
 8006c6a:	4770      	bx	lr
 8006c6c:	f3af 8000 	nop.w

08006c70 <pxCurrentTCBConst2>:
 8006c70:	20000c7c 	.word	0x20000c7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop

08006c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c78:	4808      	ldr	r0, [pc, #32]	@ (8006c9c <prvPortStartFirstTask+0x24>)
 8006c7a:	6800      	ldr	r0, [r0, #0]
 8006c7c:	6800      	ldr	r0, [r0, #0]
 8006c7e:	f380 8808 	msr	MSP, r0
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f380 8814 	msr	CONTROL, r0
 8006c8a:	b662      	cpsie	i
 8006c8c:	b661      	cpsie	f
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	df00      	svc	0
 8006c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c9a:	bf00      	nop
 8006c9c:	e000ed08 	.word	0xe000ed08

08006ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ca6:	4b47      	ldr	r3, [pc, #284]	@ (8006dc4 <xPortStartScheduler+0x124>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a47      	ldr	r2, [pc, #284]	@ (8006dc8 <xPortStartScheduler+0x128>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d10b      	bne.n	8006cc8 <xPortStartScheduler+0x28>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	613b      	str	r3, [r7, #16]
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	e7fd      	b.n	8006cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8006dc4 <xPortStartScheduler+0x124>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a3f      	ldr	r2, [pc, #252]	@ (8006dcc <xPortStartScheduler+0x12c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d10b      	bne.n	8006cea <xPortStartScheduler+0x4a>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	60fb      	str	r3, [r7, #12]
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop
 8006ce8:	e7fd      	b.n	8006ce6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cea:	4b39      	ldr	r3, [pc, #228]	@ (8006dd0 <xPortStartScheduler+0x130>)
 8006cec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	22ff      	movs	r2, #255	@ 0xff
 8006cfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d04:	78fb      	ldrb	r3, [r7, #3]
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	4b31      	ldr	r3, [pc, #196]	@ (8006dd4 <xPortStartScheduler+0x134>)
 8006d10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d12:	4b31      	ldr	r3, [pc, #196]	@ (8006dd8 <xPortStartScheduler+0x138>)
 8006d14:	2207      	movs	r2, #7
 8006d16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d18:	e009      	b.n	8006d2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006dd8 <xPortStartScheduler+0x138>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	4a2d      	ldr	r2, [pc, #180]	@ (8006dd8 <xPortStartScheduler+0x138>)
 8006d22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d2e:	78fb      	ldrb	r3, [r7, #3]
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d36:	2b80      	cmp	r3, #128	@ 0x80
 8006d38:	d0ef      	beq.n	8006d1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d3a:	4b27      	ldr	r3, [pc, #156]	@ (8006dd8 <xPortStartScheduler+0x138>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f1c3 0307 	rsb	r3, r3, #7
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d00b      	beq.n	8006d5e <xPortStartScheduler+0xbe>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	60bb      	str	r3, [r7, #8]
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	e7fd      	b.n	8006d5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006dd8 <xPortStartScheduler+0x138>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	021b      	lsls	r3, r3, #8
 8006d64:	4a1c      	ldr	r2, [pc, #112]	@ (8006dd8 <xPortStartScheduler+0x138>)
 8006d66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d68:	4b1b      	ldr	r3, [pc, #108]	@ (8006dd8 <xPortStartScheduler+0x138>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d70:	4a19      	ldr	r2, [pc, #100]	@ (8006dd8 <xPortStartScheduler+0x138>)
 8006d72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d7c:	4b17      	ldr	r3, [pc, #92]	@ (8006ddc <xPortStartScheduler+0x13c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a16      	ldr	r2, [pc, #88]	@ (8006ddc <xPortStartScheduler+0x13c>)
 8006d82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006d86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d88:	4b14      	ldr	r3, [pc, #80]	@ (8006ddc <xPortStartScheduler+0x13c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a13      	ldr	r2, [pc, #76]	@ (8006ddc <xPortStartScheduler+0x13c>)
 8006d8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006d92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d94:	f000 f8da 	bl	8006f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d98:	4b11      	ldr	r3, [pc, #68]	@ (8006de0 <xPortStartScheduler+0x140>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d9e:	f000 f8f9 	bl	8006f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006da2:	4b10      	ldr	r3, [pc, #64]	@ (8006de4 <xPortStartScheduler+0x144>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a0f      	ldr	r2, [pc, #60]	@ (8006de4 <xPortStartScheduler+0x144>)
 8006da8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006dac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006dae:	f7ff ff63 	bl	8006c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006db2:	f7ff f82d 	bl	8005e10 <vTaskSwitchContext>
	prvTaskExitError();
 8006db6:	f7ff ff19 	bl	8006bec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3718      	adds	r7, #24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	e000ed00 	.word	0xe000ed00
 8006dc8:	410fc271 	.word	0x410fc271
 8006dcc:	410fc270 	.word	0x410fc270
 8006dd0:	e000e400 	.word	0xe000e400
 8006dd4:	200012a8 	.word	0x200012a8
 8006dd8:	200012ac 	.word	0x200012ac
 8006ddc:	e000ed20 	.word	0xe000ed20
 8006de0:	2000005c 	.word	0x2000005c
 8006de4:	e000ef34 	.word	0xe000ef34

08006de8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	607b      	str	r3, [r7, #4]
}
 8006e00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e02:	4b10      	ldr	r3, [pc, #64]	@ (8006e44 <vPortEnterCritical+0x5c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3301      	adds	r3, #1
 8006e08:	4a0e      	ldr	r2, [pc, #56]	@ (8006e44 <vPortEnterCritical+0x5c>)
 8006e0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006e44 <vPortEnterCritical+0x5c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d110      	bne.n	8006e36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e14:	4b0c      	ldr	r3, [pc, #48]	@ (8006e48 <vPortEnterCritical+0x60>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00b      	beq.n	8006e36 <vPortEnterCritical+0x4e>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	603b      	str	r3, [r7, #0]
}
 8006e30:	bf00      	nop
 8006e32:	bf00      	nop
 8006e34:	e7fd      	b.n	8006e32 <vPortEnterCritical+0x4a>
	}
}
 8006e36:	bf00      	nop
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	2000005c 	.word	0x2000005c
 8006e48:	e000ed04 	.word	0xe000ed04

08006e4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e52:	4b12      	ldr	r3, [pc, #72]	@ (8006e9c <vPortExitCritical+0x50>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10b      	bne.n	8006e72 <vPortExitCritical+0x26>
	__asm volatile
 8006e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	607b      	str	r3, [r7, #4]
}
 8006e6c:	bf00      	nop
 8006e6e:	bf00      	nop
 8006e70:	e7fd      	b.n	8006e6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e72:	4b0a      	ldr	r3, [pc, #40]	@ (8006e9c <vPortExitCritical+0x50>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	4a08      	ldr	r2, [pc, #32]	@ (8006e9c <vPortExitCritical+0x50>)
 8006e7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e7c:	4b07      	ldr	r3, [pc, #28]	@ (8006e9c <vPortExitCritical+0x50>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <vPortExitCritical+0x44>
 8006e84:	2300      	movs	r3, #0
 8006e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f383 8811 	msr	BASEPRI, r3
}
 8006e8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	2000005c 	.word	0x2000005c

08006ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ea0:	f3ef 8009 	mrs	r0, PSP
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	4b15      	ldr	r3, [pc, #84]	@ (8006f00 <pxCurrentTCBConst>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	f01e 0f10 	tst.w	lr, #16
 8006eb0:	bf08      	it	eq
 8006eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eba:	6010      	str	r0, [r2, #0]
 8006ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ec0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006ec4:	f380 8811 	msr	BASEPRI, r0
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f7fe ff9e 	bl	8005e10 <vTaskSwitchContext>
 8006ed4:	f04f 0000 	mov.w	r0, #0
 8006ed8:	f380 8811 	msr	BASEPRI, r0
 8006edc:	bc09      	pop	{r0, r3}
 8006ede:	6819      	ldr	r1, [r3, #0]
 8006ee0:	6808      	ldr	r0, [r1, #0]
 8006ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee6:	f01e 0f10 	tst.w	lr, #16
 8006eea:	bf08      	it	eq
 8006eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ef0:	f380 8809 	msr	PSP, r0
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	f3af 8000 	nop.w

08006f00 <pxCurrentTCBConst>:
 8006f00:	20000c7c 	.word	0x20000c7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f04:	bf00      	nop
 8006f06:	bf00      	nop

08006f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	607b      	str	r3, [r7, #4]
}
 8006f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f22:	f7fe febb 	bl	8005c9c <xTaskIncrementTick>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f2c:	4b06      	ldr	r3, [pc, #24]	@ (8006f48 <xPortSysTickHandler+0x40>)
 8006f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	2300      	movs	r3, #0
 8006f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	f383 8811 	msr	BASEPRI, r3
}
 8006f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	e000ed04 	.word	0xe000ed04

08006f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f50:	4b0b      	ldr	r3, [pc, #44]	@ (8006f80 <vPortSetupTimerInterrupt+0x34>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f56:	4b0b      	ldr	r3, [pc, #44]	@ (8006f84 <vPortSetupTimerInterrupt+0x38>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f88 <vPortSetupTimerInterrupt+0x3c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a0a      	ldr	r2, [pc, #40]	@ (8006f8c <vPortSetupTimerInterrupt+0x40>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	099b      	lsrs	r3, r3, #6
 8006f68:	4a09      	ldr	r2, [pc, #36]	@ (8006f90 <vPortSetupTimerInterrupt+0x44>)
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f6e:	4b04      	ldr	r3, [pc, #16]	@ (8006f80 <vPortSetupTimerInterrupt+0x34>)
 8006f70:	2207      	movs	r2, #7
 8006f72:	601a      	str	r2, [r3, #0]
}
 8006f74:	bf00      	nop
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	e000e010 	.word	0xe000e010
 8006f84:	e000e018 	.word	0xe000e018
 8006f88:	20000050 	.word	0x20000050
 8006f8c:	10624dd3 	.word	0x10624dd3
 8006f90:	e000e014 	.word	0xe000e014

08006f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006fa4 <vPortEnableVFP+0x10>
 8006f98:	6801      	ldr	r1, [r0, #0]
 8006f9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006f9e:	6001      	str	r1, [r0, #0]
 8006fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fa2:	bf00      	nop
 8006fa4:	e000ed88 	.word	0xe000ed88

08006fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fae:	f3ef 8305 	mrs	r3, IPSR
 8006fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b0f      	cmp	r3, #15
 8006fb8:	d915      	bls.n	8006fe6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fba:	4a18      	ldr	r2, [pc, #96]	@ (800701c <vPortValidateInterruptPriority+0x74>)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fc4:	4b16      	ldr	r3, [pc, #88]	@ (8007020 <vPortValidateInterruptPriority+0x78>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	7afa      	ldrb	r2, [r7, #11]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d20b      	bcs.n	8006fe6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	607b      	str	r3, [r7, #4]
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	e7fd      	b.n	8006fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8007024 <vPortValidateInterruptPriority+0x7c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006fee:	4b0e      	ldr	r3, [pc, #56]	@ (8007028 <vPortValidateInterruptPriority+0x80>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d90b      	bls.n	800700e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffa:	f383 8811 	msr	BASEPRI, r3
 8006ffe:	f3bf 8f6f 	isb	sy
 8007002:	f3bf 8f4f 	dsb	sy
 8007006:	603b      	str	r3, [r7, #0]
}
 8007008:	bf00      	nop
 800700a:	bf00      	nop
 800700c:	e7fd      	b.n	800700a <vPortValidateInterruptPriority+0x62>
	}
 800700e:	bf00      	nop
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	e000e3f0 	.word	0xe000e3f0
 8007020:	200012a8 	.word	0x200012a8
 8007024:	e000ed0c 	.word	0xe000ed0c
 8007028:	200012ac 	.word	0x200012ac

0800702c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08a      	sub	sp, #40	@ 0x28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007034:	2300      	movs	r3, #0
 8007036:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007038:	f7fe fd74 	bl	8005b24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800703c:	4b5c      	ldr	r3, [pc, #368]	@ (80071b0 <pvPortMalloc+0x184>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007044:	f000 f924 	bl	8007290 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007048:	4b5a      	ldr	r3, [pc, #360]	@ (80071b4 <pvPortMalloc+0x188>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4013      	ands	r3, r2
 8007050:	2b00      	cmp	r3, #0
 8007052:	f040 8095 	bne.w	8007180 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01e      	beq.n	800709a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800705c:	2208      	movs	r2, #8
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4413      	add	r3, r2
 8007062:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	2b00      	cmp	r3, #0
 800706c:	d015      	beq.n	800709a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f023 0307 	bic.w	r3, r3, #7
 8007074:	3308      	adds	r3, #8
 8007076:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00b      	beq.n	800709a <pvPortMalloc+0x6e>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	617b      	str	r3, [r7, #20]
}
 8007094:	bf00      	nop
 8007096:	bf00      	nop
 8007098:	e7fd      	b.n	8007096 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d06f      	beq.n	8007180 <pvPortMalloc+0x154>
 80070a0:	4b45      	ldr	r3, [pc, #276]	@ (80071b8 <pvPortMalloc+0x18c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d86a      	bhi.n	8007180 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070aa:	4b44      	ldr	r3, [pc, #272]	@ (80071bc <pvPortMalloc+0x190>)
 80070ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070ae:	4b43      	ldr	r3, [pc, #268]	@ (80071bc <pvPortMalloc+0x190>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070b4:	e004      	b.n	80070c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d903      	bls.n	80070d2 <pvPortMalloc+0xa6>
 80070ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1f1      	bne.n	80070b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070d2:	4b37      	ldr	r3, [pc, #220]	@ (80071b0 <pvPortMalloc+0x184>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d8:	429a      	cmp	r2, r3
 80070da:	d051      	beq.n	8007180 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2208      	movs	r2, #8
 80070e2:	4413      	add	r3, r2
 80070e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	1ad2      	subs	r2, r2, r3
 80070f6:	2308      	movs	r3, #8
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d920      	bls.n	8007140 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4413      	add	r3, r2
 8007104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <pvPortMalloc+0xfc>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	613b      	str	r3, [r7, #16]
}
 8007122:	bf00      	nop
 8007124:	bf00      	nop
 8007126:	e7fd      	b.n	8007124 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	1ad2      	subs	r2, r2, r3
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800713a:	69b8      	ldr	r0, [r7, #24]
 800713c:	f000 f90a 	bl	8007354 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007140:	4b1d      	ldr	r3, [pc, #116]	@ (80071b8 <pvPortMalloc+0x18c>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	4a1b      	ldr	r2, [pc, #108]	@ (80071b8 <pvPortMalloc+0x18c>)
 800714c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800714e:	4b1a      	ldr	r3, [pc, #104]	@ (80071b8 <pvPortMalloc+0x18c>)
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	4b1b      	ldr	r3, [pc, #108]	@ (80071c0 <pvPortMalloc+0x194>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d203      	bcs.n	8007162 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800715a:	4b17      	ldr	r3, [pc, #92]	@ (80071b8 <pvPortMalloc+0x18c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a18      	ldr	r2, [pc, #96]	@ (80071c0 <pvPortMalloc+0x194>)
 8007160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	4b13      	ldr	r3, [pc, #76]	@ (80071b4 <pvPortMalloc+0x188>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	431a      	orrs	r2, r3
 800716c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007176:	4b13      	ldr	r3, [pc, #76]	@ (80071c4 <pvPortMalloc+0x198>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3301      	adds	r3, #1
 800717c:	4a11      	ldr	r2, [pc, #68]	@ (80071c4 <pvPortMalloc+0x198>)
 800717e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007180:	f7fe fcde 	bl	8005b40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00b      	beq.n	80071a6 <pvPortMalloc+0x17a>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	60fb      	str	r3, [r7, #12]
}
 80071a0:	bf00      	nop
 80071a2:	bf00      	nop
 80071a4:	e7fd      	b.n	80071a2 <pvPortMalloc+0x176>
	return pvReturn;
 80071a6:	69fb      	ldr	r3, [r7, #28]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3728      	adds	r7, #40	@ 0x28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	20004eb8 	.word	0x20004eb8
 80071b4:	20004ecc 	.word	0x20004ecc
 80071b8:	20004ebc 	.word	0x20004ebc
 80071bc:	20004eb0 	.word	0x20004eb0
 80071c0:	20004ec0 	.word	0x20004ec0
 80071c4:	20004ec4 	.word	0x20004ec4

080071c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d04f      	beq.n	800727a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071da:	2308      	movs	r3, #8
 80071dc:	425b      	negs	r3, r3
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	4413      	add	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	4b25      	ldr	r3, [pc, #148]	@ (8007284 <vPortFree+0xbc>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4013      	ands	r3, r2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10b      	bne.n	800720e <vPortFree+0x46>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	60fb      	str	r3, [r7, #12]
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	e7fd      	b.n	800720a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00b      	beq.n	800722e <vPortFree+0x66>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60bb      	str	r3, [r7, #8]
}
 8007228:	bf00      	nop
 800722a:	bf00      	nop
 800722c:	e7fd      	b.n	800722a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	4b14      	ldr	r3, [pc, #80]	@ (8007284 <vPortFree+0xbc>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4013      	ands	r3, r2
 8007238:	2b00      	cmp	r3, #0
 800723a:	d01e      	beq.n	800727a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d11a      	bne.n	800727a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	4b0e      	ldr	r3, [pc, #56]	@ (8007284 <vPortFree+0xbc>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	43db      	mvns	r3, r3
 800724e:	401a      	ands	r2, r3
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007254:	f7fe fc66 	bl	8005b24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4b0a      	ldr	r3, [pc, #40]	@ (8007288 <vPortFree+0xc0>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4413      	add	r3, r2
 8007262:	4a09      	ldr	r2, [pc, #36]	@ (8007288 <vPortFree+0xc0>)
 8007264:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007266:	6938      	ldr	r0, [r7, #16]
 8007268:	f000 f874 	bl	8007354 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800726c:	4b07      	ldr	r3, [pc, #28]	@ (800728c <vPortFree+0xc4>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	4a06      	ldr	r2, [pc, #24]	@ (800728c <vPortFree+0xc4>)
 8007274:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007276:	f7fe fc63 	bl	8005b40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800727a:	bf00      	nop
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20004ecc 	.word	0x20004ecc
 8007288:	20004ebc 	.word	0x20004ebc
 800728c:	20004ec8 	.word	0x20004ec8

08007290 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007296:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800729a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800729c:	4b27      	ldr	r3, [pc, #156]	@ (800733c <prvHeapInit+0xac>)
 800729e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f003 0307 	and.w	r3, r3, #7
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00c      	beq.n	80072c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3307      	adds	r3, #7
 80072ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f023 0307 	bic.w	r3, r3, #7
 80072b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	4a1f      	ldr	r2, [pc, #124]	@ (800733c <prvHeapInit+0xac>)
 80072c0:	4413      	add	r3, r2
 80072c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007340 <prvHeapInit+0xb0>)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007340 <prvHeapInit+0xb0>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	4413      	add	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072dc:	2208      	movs	r2, #8
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	1a9b      	subs	r3, r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0307 	bic.w	r3, r3, #7
 80072ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4a15      	ldr	r2, [pc, #84]	@ (8007344 <prvHeapInit+0xb4>)
 80072f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072f2:	4b14      	ldr	r3, [pc, #80]	@ (8007344 <prvHeapInit+0xb4>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2200      	movs	r2, #0
 80072f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072fa:	4b12      	ldr	r3, [pc, #72]	@ (8007344 <prvHeapInit+0xb4>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	1ad2      	subs	r2, r2, r3
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007310:	4b0c      	ldr	r3, [pc, #48]	@ (8007344 <prvHeapInit+0xb4>)
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	4a0a      	ldr	r2, [pc, #40]	@ (8007348 <prvHeapInit+0xb8>)
 800731e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4a09      	ldr	r2, [pc, #36]	@ (800734c <prvHeapInit+0xbc>)
 8007326:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007328:	4b09      	ldr	r3, [pc, #36]	@ (8007350 <prvHeapInit+0xc0>)
 800732a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800732e:	601a      	str	r2, [r3, #0]
}
 8007330:	bf00      	nop
 8007332:	3714      	adds	r7, #20
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	200012b0 	.word	0x200012b0
 8007340:	20004eb0 	.word	0x20004eb0
 8007344:	20004eb8 	.word	0x20004eb8
 8007348:	20004ec0 	.word	0x20004ec0
 800734c:	20004ebc 	.word	0x20004ebc
 8007350:	20004ecc 	.word	0x20004ecc

08007354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800735c:	4b28      	ldr	r3, [pc, #160]	@ (8007400 <prvInsertBlockIntoFreeList+0xac>)
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e002      	b.n	8007368 <prvInsertBlockIntoFreeList+0x14>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	429a      	cmp	r2, r3
 8007370:	d8f7      	bhi.n	8007362 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	4413      	add	r3, r2
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d108      	bne.n	8007396 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	441a      	add	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	68ba      	ldr	r2, [r7, #8]
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d118      	bne.n	80073dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	4b15      	ldr	r3, [pc, #84]	@ (8007404 <prvInsertBlockIntoFreeList+0xb0>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d00d      	beq.n	80073d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	441a      	add	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	e008      	b.n	80073e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007404 <prvInsertBlockIntoFreeList+0xb0>)
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	e003      	b.n	80073e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d002      	beq.n	80073f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	20004eb0 	.word	0x20004eb0
 8007404:	20004eb8 	.word	0x20004eb8

08007408 <std>:
 8007408:	2300      	movs	r3, #0
 800740a:	b510      	push	{r4, lr}
 800740c:	4604      	mov	r4, r0
 800740e:	e9c0 3300 	strd	r3, r3, [r0]
 8007412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007416:	6083      	str	r3, [r0, #8]
 8007418:	8181      	strh	r1, [r0, #12]
 800741a:	6643      	str	r3, [r0, #100]	@ 0x64
 800741c:	81c2      	strh	r2, [r0, #14]
 800741e:	6183      	str	r3, [r0, #24]
 8007420:	4619      	mov	r1, r3
 8007422:	2208      	movs	r2, #8
 8007424:	305c      	adds	r0, #92	@ 0x5c
 8007426:	f000 f906 	bl	8007636 <memset>
 800742a:	4b0d      	ldr	r3, [pc, #52]	@ (8007460 <std+0x58>)
 800742c:	6263      	str	r3, [r4, #36]	@ 0x24
 800742e:	4b0d      	ldr	r3, [pc, #52]	@ (8007464 <std+0x5c>)
 8007430:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007432:	4b0d      	ldr	r3, [pc, #52]	@ (8007468 <std+0x60>)
 8007434:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007436:	4b0d      	ldr	r3, [pc, #52]	@ (800746c <std+0x64>)
 8007438:	6323      	str	r3, [r4, #48]	@ 0x30
 800743a:	4b0d      	ldr	r3, [pc, #52]	@ (8007470 <std+0x68>)
 800743c:	6224      	str	r4, [r4, #32]
 800743e:	429c      	cmp	r4, r3
 8007440:	d006      	beq.n	8007450 <std+0x48>
 8007442:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007446:	4294      	cmp	r4, r2
 8007448:	d002      	beq.n	8007450 <std+0x48>
 800744a:	33d0      	adds	r3, #208	@ 0xd0
 800744c:	429c      	cmp	r4, r3
 800744e:	d105      	bne.n	800745c <std+0x54>
 8007450:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007458:	f000 b9bc 	b.w	80077d4 <__retarget_lock_init_recursive>
 800745c:	bd10      	pop	{r4, pc}
 800745e:	bf00      	nop
 8007460:	080075b1 	.word	0x080075b1
 8007464:	080075d3 	.word	0x080075d3
 8007468:	0800760b 	.word	0x0800760b
 800746c:	0800762f 	.word	0x0800762f
 8007470:	20004ed0 	.word	0x20004ed0

08007474 <stdio_exit_handler>:
 8007474:	4a02      	ldr	r2, [pc, #8]	@ (8007480 <stdio_exit_handler+0xc>)
 8007476:	4903      	ldr	r1, [pc, #12]	@ (8007484 <stdio_exit_handler+0x10>)
 8007478:	4803      	ldr	r0, [pc, #12]	@ (8007488 <stdio_exit_handler+0x14>)
 800747a:	f000 b869 	b.w	8007550 <_fwalk_sglue>
 800747e:	bf00      	nop
 8007480:	20000060 	.word	0x20000060
 8007484:	08008091 	.word	0x08008091
 8007488:	20000070 	.word	0x20000070

0800748c <cleanup_stdio>:
 800748c:	6841      	ldr	r1, [r0, #4]
 800748e:	4b0c      	ldr	r3, [pc, #48]	@ (80074c0 <cleanup_stdio+0x34>)
 8007490:	4299      	cmp	r1, r3
 8007492:	b510      	push	{r4, lr}
 8007494:	4604      	mov	r4, r0
 8007496:	d001      	beq.n	800749c <cleanup_stdio+0x10>
 8007498:	f000 fdfa 	bl	8008090 <_fflush_r>
 800749c:	68a1      	ldr	r1, [r4, #8]
 800749e:	4b09      	ldr	r3, [pc, #36]	@ (80074c4 <cleanup_stdio+0x38>)
 80074a0:	4299      	cmp	r1, r3
 80074a2:	d002      	beq.n	80074aa <cleanup_stdio+0x1e>
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 fdf3 	bl	8008090 <_fflush_r>
 80074aa:	68e1      	ldr	r1, [r4, #12]
 80074ac:	4b06      	ldr	r3, [pc, #24]	@ (80074c8 <cleanup_stdio+0x3c>)
 80074ae:	4299      	cmp	r1, r3
 80074b0:	d004      	beq.n	80074bc <cleanup_stdio+0x30>
 80074b2:	4620      	mov	r0, r4
 80074b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074b8:	f000 bdea 	b.w	8008090 <_fflush_r>
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	bf00      	nop
 80074c0:	20004ed0 	.word	0x20004ed0
 80074c4:	20004f38 	.word	0x20004f38
 80074c8:	20004fa0 	.word	0x20004fa0

080074cc <global_stdio_init.part.0>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4b0b      	ldr	r3, [pc, #44]	@ (80074fc <global_stdio_init.part.0+0x30>)
 80074d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007500 <global_stdio_init.part.0+0x34>)
 80074d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007504 <global_stdio_init.part.0+0x38>)
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	4620      	mov	r0, r4
 80074d8:	2200      	movs	r2, #0
 80074da:	2104      	movs	r1, #4
 80074dc:	f7ff ff94 	bl	8007408 <std>
 80074e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074e4:	2201      	movs	r2, #1
 80074e6:	2109      	movs	r1, #9
 80074e8:	f7ff ff8e 	bl	8007408 <std>
 80074ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074f0:	2202      	movs	r2, #2
 80074f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f6:	2112      	movs	r1, #18
 80074f8:	f7ff bf86 	b.w	8007408 <std>
 80074fc:	20005008 	.word	0x20005008
 8007500:	20004ed0 	.word	0x20004ed0
 8007504:	08007475 	.word	0x08007475

08007508 <__sfp_lock_acquire>:
 8007508:	4801      	ldr	r0, [pc, #4]	@ (8007510 <__sfp_lock_acquire+0x8>)
 800750a:	f000 b964 	b.w	80077d6 <__retarget_lock_acquire_recursive>
 800750e:	bf00      	nop
 8007510:	20005011 	.word	0x20005011

08007514 <__sfp_lock_release>:
 8007514:	4801      	ldr	r0, [pc, #4]	@ (800751c <__sfp_lock_release+0x8>)
 8007516:	f000 b95f 	b.w	80077d8 <__retarget_lock_release_recursive>
 800751a:	bf00      	nop
 800751c:	20005011 	.word	0x20005011

08007520 <__sinit>:
 8007520:	b510      	push	{r4, lr}
 8007522:	4604      	mov	r4, r0
 8007524:	f7ff fff0 	bl	8007508 <__sfp_lock_acquire>
 8007528:	6a23      	ldr	r3, [r4, #32]
 800752a:	b11b      	cbz	r3, 8007534 <__sinit+0x14>
 800752c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007530:	f7ff bff0 	b.w	8007514 <__sfp_lock_release>
 8007534:	4b04      	ldr	r3, [pc, #16]	@ (8007548 <__sinit+0x28>)
 8007536:	6223      	str	r3, [r4, #32]
 8007538:	4b04      	ldr	r3, [pc, #16]	@ (800754c <__sinit+0x2c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1f5      	bne.n	800752c <__sinit+0xc>
 8007540:	f7ff ffc4 	bl	80074cc <global_stdio_init.part.0>
 8007544:	e7f2      	b.n	800752c <__sinit+0xc>
 8007546:	bf00      	nop
 8007548:	0800748d 	.word	0x0800748d
 800754c:	20005008 	.word	0x20005008

08007550 <_fwalk_sglue>:
 8007550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007554:	4607      	mov	r7, r0
 8007556:	4688      	mov	r8, r1
 8007558:	4614      	mov	r4, r2
 800755a:	2600      	movs	r6, #0
 800755c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007560:	f1b9 0901 	subs.w	r9, r9, #1
 8007564:	d505      	bpl.n	8007572 <_fwalk_sglue+0x22>
 8007566:	6824      	ldr	r4, [r4, #0]
 8007568:	2c00      	cmp	r4, #0
 800756a:	d1f7      	bne.n	800755c <_fwalk_sglue+0xc>
 800756c:	4630      	mov	r0, r6
 800756e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007572:	89ab      	ldrh	r3, [r5, #12]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d907      	bls.n	8007588 <_fwalk_sglue+0x38>
 8007578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800757c:	3301      	adds	r3, #1
 800757e:	d003      	beq.n	8007588 <_fwalk_sglue+0x38>
 8007580:	4629      	mov	r1, r5
 8007582:	4638      	mov	r0, r7
 8007584:	47c0      	blx	r8
 8007586:	4306      	orrs	r6, r0
 8007588:	3568      	adds	r5, #104	@ 0x68
 800758a:	e7e9      	b.n	8007560 <_fwalk_sglue+0x10>

0800758c <iprintf>:
 800758c:	b40f      	push	{r0, r1, r2, r3}
 800758e:	b507      	push	{r0, r1, r2, lr}
 8007590:	4906      	ldr	r1, [pc, #24]	@ (80075ac <iprintf+0x20>)
 8007592:	ab04      	add	r3, sp, #16
 8007594:	6808      	ldr	r0, [r1, #0]
 8007596:	f853 2b04 	ldr.w	r2, [r3], #4
 800759a:	6881      	ldr	r1, [r0, #8]
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	f000 fa4d 	bl	8007a3c <_vfiprintf_r>
 80075a2:	b003      	add	sp, #12
 80075a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a8:	b004      	add	sp, #16
 80075aa:	4770      	bx	lr
 80075ac:	2000006c 	.word	0x2000006c

080075b0 <__sread>:
 80075b0:	b510      	push	{r4, lr}
 80075b2:	460c      	mov	r4, r1
 80075b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b8:	f000 f8be 	bl	8007738 <_read_r>
 80075bc:	2800      	cmp	r0, #0
 80075be:	bfab      	itete	ge
 80075c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80075c2:	89a3      	ldrhlt	r3, [r4, #12]
 80075c4:	181b      	addge	r3, r3, r0
 80075c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80075ca:	bfac      	ite	ge
 80075cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80075ce:	81a3      	strhlt	r3, [r4, #12]
 80075d0:	bd10      	pop	{r4, pc}

080075d2 <__swrite>:
 80075d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d6:	461f      	mov	r7, r3
 80075d8:	898b      	ldrh	r3, [r1, #12]
 80075da:	05db      	lsls	r3, r3, #23
 80075dc:	4605      	mov	r5, r0
 80075de:	460c      	mov	r4, r1
 80075e0:	4616      	mov	r6, r2
 80075e2:	d505      	bpl.n	80075f0 <__swrite+0x1e>
 80075e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e8:	2302      	movs	r3, #2
 80075ea:	2200      	movs	r2, #0
 80075ec:	f000 f892 	bl	8007714 <_lseek_r>
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	4632      	mov	r2, r6
 80075fe:	463b      	mov	r3, r7
 8007600:	4628      	mov	r0, r5
 8007602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007606:	f000 b8a9 	b.w	800775c <_write_r>

0800760a <__sseek>:
 800760a:	b510      	push	{r4, lr}
 800760c:	460c      	mov	r4, r1
 800760e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007612:	f000 f87f 	bl	8007714 <_lseek_r>
 8007616:	1c43      	adds	r3, r0, #1
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	bf15      	itete	ne
 800761c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800761e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007622:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007626:	81a3      	strheq	r3, [r4, #12]
 8007628:	bf18      	it	ne
 800762a:	81a3      	strhne	r3, [r4, #12]
 800762c:	bd10      	pop	{r4, pc}

0800762e <__sclose>:
 800762e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007632:	f000 b809 	b.w	8007648 <_close_r>

08007636 <memset>:
 8007636:	4402      	add	r2, r0
 8007638:	4603      	mov	r3, r0
 800763a:	4293      	cmp	r3, r2
 800763c:	d100      	bne.n	8007640 <memset+0xa>
 800763e:	4770      	bx	lr
 8007640:	f803 1b01 	strb.w	r1, [r3], #1
 8007644:	e7f9      	b.n	800763a <memset+0x4>
	...

08007648 <_close_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d06      	ldr	r5, [pc, #24]	@ (8007664 <_close_r+0x1c>)
 800764c:	2300      	movs	r3, #0
 800764e:	4604      	mov	r4, r0
 8007650:	4608      	mov	r0, r1
 8007652:	602b      	str	r3, [r5, #0]
 8007654:	f7fa fb35 	bl	8001cc2 <_close>
 8007658:	1c43      	adds	r3, r0, #1
 800765a:	d102      	bne.n	8007662 <_close_r+0x1a>
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	b103      	cbz	r3, 8007662 <_close_r+0x1a>
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	bd38      	pop	{r3, r4, r5, pc}
 8007664:	2000500c 	.word	0x2000500c

08007668 <_reclaim_reent>:
 8007668:	4b29      	ldr	r3, [pc, #164]	@ (8007710 <_reclaim_reent+0xa8>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4283      	cmp	r3, r0
 800766e:	b570      	push	{r4, r5, r6, lr}
 8007670:	4604      	mov	r4, r0
 8007672:	d04b      	beq.n	800770c <_reclaim_reent+0xa4>
 8007674:	69c3      	ldr	r3, [r0, #28]
 8007676:	b1ab      	cbz	r3, 80076a4 <_reclaim_reent+0x3c>
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	b16b      	cbz	r3, 8007698 <_reclaim_reent+0x30>
 800767c:	2500      	movs	r5, #0
 800767e:	69e3      	ldr	r3, [r4, #28]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	5959      	ldr	r1, [r3, r5]
 8007684:	2900      	cmp	r1, #0
 8007686:	d13b      	bne.n	8007700 <_reclaim_reent+0x98>
 8007688:	3504      	adds	r5, #4
 800768a:	2d80      	cmp	r5, #128	@ 0x80
 800768c:	d1f7      	bne.n	800767e <_reclaim_reent+0x16>
 800768e:	69e3      	ldr	r3, [r4, #28]
 8007690:	4620      	mov	r0, r4
 8007692:	68d9      	ldr	r1, [r3, #12]
 8007694:	f000 f8b0 	bl	80077f8 <_free_r>
 8007698:	69e3      	ldr	r3, [r4, #28]
 800769a:	6819      	ldr	r1, [r3, #0]
 800769c:	b111      	cbz	r1, 80076a4 <_reclaim_reent+0x3c>
 800769e:	4620      	mov	r0, r4
 80076a0:	f000 f8aa 	bl	80077f8 <_free_r>
 80076a4:	6961      	ldr	r1, [r4, #20]
 80076a6:	b111      	cbz	r1, 80076ae <_reclaim_reent+0x46>
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 f8a5 	bl	80077f8 <_free_r>
 80076ae:	69e1      	ldr	r1, [r4, #28]
 80076b0:	b111      	cbz	r1, 80076b8 <_reclaim_reent+0x50>
 80076b2:	4620      	mov	r0, r4
 80076b4:	f000 f8a0 	bl	80077f8 <_free_r>
 80076b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80076ba:	b111      	cbz	r1, 80076c2 <_reclaim_reent+0x5a>
 80076bc:	4620      	mov	r0, r4
 80076be:	f000 f89b 	bl	80077f8 <_free_r>
 80076c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076c4:	b111      	cbz	r1, 80076cc <_reclaim_reent+0x64>
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 f896 	bl	80077f8 <_free_r>
 80076cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80076ce:	b111      	cbz	r1, 80076d6 <_reclaim_reent+0x6e>
 80076d0:	4620      	mov	r0, r4
 80076d2:	f000 f891 	bl	80077f8 <_free_r>
 80076d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80076d8:	b111      	cbz	r1, 80076e0 <_reclaim_reent+0x78>
 80076da:	4620      	mov	r0, r4
 80076dc:	f000 f88c 	bl	80077f8 <_free_r>
 80076e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80076e2:	b111      	cbz	r1, 80076ea <_reclaim_reent+0x82>
 80076e4:	4620      	mov	r0, r4
 80076e6:	f000 f887 	bl	80077f8 <_free_r>
 80076ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80076ec:	b111      	cbz	r1, 80076f4 <_reclaim_reent+0x8c>
 80076ee:	4620      	mov	r0, r4
 80076f0:	f000 f882 	bl	80077f8 <_free_r>
 80076f4:	6a23      	ldr	r3, [r4, #32]
 80076f6:	b14b      	cbz	r3, 800770c <_reclaim_reent+0xa4>
 80076f8:	4620      	mov	r0, r4
 80076fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80076fe:	4718      	bx	r3
 8007700:	680e      	ldr	r6, [r1, #0]
 8007702:	4620      	mov	r0, r4
 8007704:	f000 f878 	bl	80077f8 <_free_r>
 8007708:	4631      	mov	r1, r6
 800770a:	e7bb      	b.n	8007684 <_reclaim_reent+0x1c>
 800770c:	bd70      	pop	{r4, r5, r6, pc}
 800770e:	bf00      	nop
 8007710:	2000006c 	.word	0x2000006c

08007714 <_lseek_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4d07      	ldr	r5, [pc, #28]	@ (8007734 <_lseek_r+0x20>)
 8007718:	4604      	mov	r4, r0
 800771a:	4608      	mov	r0, r1
 800771c:	4611      	mov	r1, r2
 800771e:	2200      	movs	r2, #0
 8007720:	602a      	str	r2, [r5, #0]
 8007722:	461a      	mov	r2, r3
 8007724:	f7fa faf4 	bl	8001d10 <_lseek>
 8007728:	1c43      	adds	r3, r0, #1
 800772a:	d102      	bne.n	8007732 <_lseek_r+0x1e>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	b103      	cbz	r3, 8007732 <_lseek_r+0x1e>
 8007730:	6023      	str	r3, [r4, #0]
 8007732:	bd38      	pop	{r3, r4, r5, pc}
 8007734:	2000500c 	.word	0x2000500c

08007738 <_read_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4d07      	ldr	r5, [pc, #28]	@ (8007758 <_read_r+0x20>)
 800773c:	4604      	mov	r4, r0
 800773e:	4608      	mov	r0, r1
 8007740:	4611      	mov	r1, r2
 8007742:	2200      	movs	r2, #0
 8007744:	602a      	str	r2, [r5, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	f7fa fa9e 	bl	8001c88 <_read>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d102      	bne.n	8007756 <_read_r+0x1e>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	b103      	cbz	r3, 8007756 <_read_r+0x1e>
 8007754:	6023      	str	r3, [r4, #0]
 8007756:	bd38      	pop	{r3, r4, r5, pc}
 8007758:	2000500c 	.word	0x2000500c

0800775c <_write_r>:
 800775c:	b538      	push	{r3, r4, r5, lr}
 800775e:	4d07      	ldr	r5, [pc, #28]	@ (800777c <_write_r+0x20>)
 8007760:	4604      	mov	r4, r0
 8007762:	4608      	mov	r0, r1
 8007764:	4611      	mov	r1, r2
 8007766:	2200      	movs	r2, #0
 8007768:	602a      	str	r2, [r5, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	f7f9 f8e6 	bl	800093c <_write>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d102      	bne.n	800777a <_write_r+0x1e>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	b103      	cbz	r3, 800777a <_write_r+0x1e>
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	bd38      	pop	{r3, r4, r5, pc}
 800777c:	2000500c 	.word	0x2000500c

08007780 <__errno>:
 8007780:	4b01      	ldr	r3, [pc, #4]	@ (8007788 <__errno+0x8>)
 8007782:	6818      	ldr	r0, [r3, #0]
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	2000006c 	.word	0x2000006c

0800778c <__libc_init_array>:
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	4d0d      	ldr	r5, [pc, #52]	@ (80077c4 <__libc_init_array+0x38>)
 8007790:	4c0d      	ldr	r4, [pc, #52]	@ (80077c8 <__libc_init_array+0x3c>)
 8007792:	1b64      	subs	r4, r4, r5
 8007794:	10a4      	asrs	r4, r4, #2
 8007796:	2600      	movs	r6, #0
 8007798:	42a6      	cmp	r6, r4
 800779a:	d109      	bne.n	80077b0 <__libc_init_array+0x24>
 800779c:	4d0b      	ldr	r5, [pc, #44]	@ (80077cc <__libc_init_array+0x40>)
 800779e:	4c0c      	ldr	r4, [pc, #48]	@ (80077d0 <__libc_init_array+0x44>)
 80077a0:	f000 fdc6 	bl	8008330 <_init>
 80077a4:	1b64      	subs	r4, r4, r5
 80077a6:	10a4      	asrs	r4, r4, #2
 80077a8:	2600      	movs	r6, #0
 80077aa:	42a6      	cmp	r6, r4
 80077ac:	d105      	bne.n	80077ba <__libc_init_array+0x2e>
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
 80077b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077b4:	4798      	blx	r3
 80077b6:	3601      	adds	r6, #1
 80077b8:	e7ee      	b.n	8007798 <__libc_init_array+0xc>
 80077ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80077be:	4798      	blx	r3
 80077c0:	3601      	adds	r6, #1
 80077c2:	e7f2      	b.n	80077aa <__libc_init_array+0x1e>
 80077c4:	080085a4 	.word	0x080085a4
 80077c8:	080085a4 	.word	0x080085a4
 80077cc:	080085a4 	.word	0x080085a4
 80077d0:	080085a8 	.word	0x080085a8

080077d4 <__retarget_lock_init_recursive>:
 80077d4:	4770      	bx	lr

080077d6 <__retarget_lock_acquire_recursive>:
 80077d6:	4770      	bx	lr

080077d8 <__retarget_lock_release_recursive>:
 80077d8:	4770      	bx	lr

080077da <memcpy>:
 80077da:	440a      	add	r2, r1
 80077dc:	4291      	cmp	r1, r2
 80077de:	f100 33ff 	add.w	r3, r0, #4294967295
 80077e2:	d100      	bne.n	80077e6 <memcpy+0xc>
 80077e4:	4770      	bx	lr
 80077e6:	b510      	push	{r4, lr}
 80077e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077f0:	4291      	cmp	r1, r2
 80077f2:	d1f9      	bne.n	80077e8 <memcpy+0xe>
 80077f4:	bd10      	pop	{r4, pc}
	...

080077f8 <_free_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4605      	mov	r5, r0
 80077fc:	2900      	cmp	r1, #0
 80077fe:	d041      	beq.n	8007884 <_free_r+0x8c>
 8007800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007804:	1f0c      	subs	r4, r1, #4
 8007806:	2b00      	cmp	r3, #0
 8007808:	bfb8      	it	lt
 800780a:	18e4      	addlt	r4, r4, r3
 800780c:	f000 f8e0 	bl	80079d0 <__malloc_lock>
 8007810:	4a1d      	ldr	r2, [pc, #116]	@ (8007888 <_free_r+0x90>)
 8007812:	6813      	ldr	r3, [r2, #0]
 8007814:	b933      	cbnz	r3, 8007824 <_free_r+0x2c>
 8007816:	6063      	str	r3, [r4, #4]
 8007818:	6014      	str	r4, [r2, #0]
 800781a:	4628      	mov	r0, r5
 800781c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007820:	f000 b8dc 	b.w	80079dc <__malloc_unlock>
 8007824:	42a3      	cmp	r3, r4
 8007826:	d908      	bls.n	800783a <_free_r+0x42>
 8007828:	6820      	ldr	r0, [r4, #0]
 800782a:	1821      	adds	r1, r4, r0
 800782c:	428b      	cmp	r3, r1
 800782e:	bf01      	itttt	eq
 8007830:	6819      	ldreq	r1, [r3, #0]
 8007832:	685b      	ldreq	r3, [r3, #4]
 8007834:	1809      	addeq	r1, r1, r0
 8007836:	6021      	streq	r1, [r4, #0]
 8007838:	e7ed      	b.n	8007816 <_free_r+0x1e>
 800783a:	461a      	mov	r2, r3
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	b10b      	cbz	r3, 8007844 <_free_r+0x4c>
 8007840:	42a3      	cmp	r3, r4
 8007842:	d9fa      	bls.n	800783a <_free_r+0x42>
 8007844:	6811      	ldr	r1, [r2, #0]
 8007846:	1850      	adds	r0, r2, r1
 8007848:	42a0      	cmp	r0, r4
 800784a:	d10b      	bne.n	8007864 <_free_r+0x6c>
 800784c:	6820      	ldr	r0, [r4, #0]
 800784e:	4401      	add	r1, r0
 8007850:	1850      	adds	r0, r2, r1
 8007852:	4283      	cmp	r3, r0
 8007854:	6011      	str	r1, [r2, #0]
 8007856:	d1e0      	bne.n	800781a <_free_r+0x22>
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	6053      	str	r3, [r2, #4]
 800785e:	4408      	add	r0, r1
 8007860:	6010      	str	r0, [r2, #0]
 8007862:	e7da      	b.n	800781a <_free_r+0x22>
 8007864:	d902      	bls.n	800786c <_free_r+0x74>
 8007866:	230c      	movs	r3, #12
 8007868:	602b      	str	r3, [r5, #0]
 800786a:	e7d6      	b.n	800781a <_free_r+0x22>
 800786c:	6820      	ldr	r0, [r4, #0]
 800786e:	1821      	adds	r1, r4, r0
 8007870:	428b      	cmp	r3, r1
 8007872:	bf04      	itt	eq
 8007874:	6819      	ldreq	r1, [r3, #0]
 8007876:	685b      	ldreq	r3, [r3, #4]
 8007878:	6063      	str	r3, [r4, #4]
 800787a:	bf04      	itt	eq
 800787c:	1809      	addeq	r1, r1, r0
 800787e:	6021      	streq	r1, [r4, #0]
 8007880:	6054      	str	r4, [r2, #4]
 8007882:	e7ca      	b.n	800781a <_free_r+0x22>
 8007884:	bd38      	pop	{r3, r4, r5, pc}
 8007886:	bf00      	nop
 8007888:	20005018 	.word	0x20005018

0800788c <sbrk_aligned>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	4e0f      	ldr	r6, [pc, #60]	@ (80078cc <sbrk_aligned+0x40>)
 8007890:	460c      	mov	r4, r1
 8007892:	6831      	ldr	r1, [r6, #0]
 8007894:	4605      	mov	r5, r0
 8007896:	b911      	cbnz	r1, 800789e <sbrk_aligned+0x12>
 8007898:	f000 fcb6 	bl	8008208 <_sbrk_r>
 800789c:	6030      	str	r0, [r6, #0]
 800789e:	4621      	mov	r1, r4
 80078a0:	4628      	mov	r0, r5
 80078a2:	f000 fcb1 	bl	8008208 <_sbrk_r>
 80078a6:	1c43      	adds	r3, r0, #1
 80078a8:	d103      	bne.n	80078b2 <sbrk_aligned+0x26>
 80078aa:	f04f 34ff 	mov.w	r4, #4294967295
 80078ae:	4620      	mov	r0, r4
 80078b0:	bd70      	pop	{r4, r5, r6, pc}
 80078b2:	1cc4      	adds	r4, r0, #3
 80078b4:	f024 0403 	bic.w	r4, r4, #3
 80078b8:	42a0      	cmp	r0, r4
 80078ba:	d0f8      	beq.n	80078ae <sbrk_aligned+0x22>
 80078bc:	1a21      	subs	r1, r4, r0
 80078be:	4628      	mov	r0, r5
 80078c0:	f000 fca2 	bl	8008208 <_sbrk_r>
 80078c4:	3001      	adds	r0, #1
 80078c6:	d1f2      	bne.n	80078ae <sbrk_aligned+0x22>
 80078c8:	e7ef      	b.n	80078aa <sbrk_aligned+0x1e>
 80078ca:	bf00      	nop
 80078cc:	20005014 	.word	0x20005014

080078d0 <_malloc_r>:
 80078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	1ccd      	adds	r5, r1, #3
 80078d6:	f025 0503 	bic.w	r5, r5, #3
 80078da:	3508      	adds	r5, #8
 80078dc:	2d0c      	cmp	r5, #12
 80078de:	bf38      	it	cc
 80078e0:	250c      	movcc	r5, #12
 80078e2:	2d00      	cmp	r5, #0
 80078e4:	4606      	mov	r6, r0
 80078e6:	db01      	blt.n	80078ec <_malloc_r+0x1c>
 80078e8:	42a9      	cmp	r1, r5
 80078ea:	d904      	bls.n	80078f6 <_malloc_r+0x26>
 80078ec:	230c      	movs	r3, #12
 80078ee:	6033      	str	r3, [r6, #0]
 80078f0:	2000      	movs	r0, #0
 80078f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079cc <_malloc_r+0xfc>
 80078fa:	f000 f869 	bl	80079d0 <__malloc_lock>
 80078fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007902:	461c      	mov	r4, r3
 8007904:	bb44      	cbnz	r4, 8007958 <_malloc_r+0x88>
 8007906:	4629      	mov	r1, r5
 8007908:	4630      	mov	r0, r6
 800790a:	f7ff ffbf 	bl	800788c <sbrk_aligned>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	4604      	mov	r4, r0
 8007912:	d158      	bne.n	80079c6 <_malloc_r+0xf6>
 8007914:	f8d8 4000 	ldr.w	r4, [r8]
 8007918:	4627      	mov	r7, r4
 800791a:	2f00      	cmp	r7, #0
 800791c:	d143      	bne.n	80079a6 <_malloc_r+0xd6>
 800791e:	2c00      	cmp	r4, #0
 8007920:	d04b      	beq.n	80079ba <_malloc_r+0xea>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	4639      	mov	r1, r7
 8007926:	4630      	mov	r0, r6
 8007928:	eb04 0903 	add.w	r9, r4, r3
 800792c:	f000 fc6c 	bl	8008208 <_sbrk_r>
 8007930:	4581      	cmp	r9, r0
 8007932:	d142      	bne.n	80079ba <_malloc_r+0xea>
 8007934:	6821      	ldr	r1, [r4, #0]
 8007936:	1a6d      	subs	r5, r5, r1
 8007938:	4629      	mov	r1, r5
 800793a:	4630      	mov	r0, r6
 800793c:	f7ff ffa6 	bl	800788c <sbrk_aligned>
 8007940:	3001      	adds	r0, #1
 8007942:	d03a      	beq.n	80079ba <_malloc_r+0xea>
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	442b      	add	r3, r5
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	f8d8 3000 	ldr.w	r3, [r8]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	bb62      	cbnz	r2, 80079ac <_malloc_r+0xdc>
 8007952:	f8c8 7000 	str.w	r7, [r8]
 8007956:	e00f      	b.n	8007978 <_malloc_r+0xa8>
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	1b52      	subs	r2, r2, r5
 800795c:	d420      	bmi.n	80079a0 <_malloc_r+0xd0>
 800795e:	2a0b      	cmp	r2, #11
 8007960:	d917      	bls.n	8007992 <_malloc_r+0xc2>
 8007962:	1961      	adds	r1, r4, r5
 8007964:	42a3      	cmp	r3, r4
 8007966:	6025      	str	r5, [r4, #0]
 8007968:	bf18      	it	ne
 800796a:	6059      	strne	r1, [r3, #4]
 800796c:	6863      	ldr	r3, [r4, #4]
 800796e:	bf08      	it	eq
 8007970:	f8c8 1000 	streq.w	r1, [r8]
 8007974:	5162      	str	r2, [r4, r5]
 8007976:	604b      	str	r3, [r1, #4]
 8007978:	4630      	mov	r0, r6
 800797a:	f000 f82f 	bl	80079dc <__malloc_unlock>
 800797e:	f104 000b 	add.w	r0, r4, #11
 8007982:	1d23      	adds	r3, r4, #4
 8007984:	f020 0007 	bic.w	r0, r0, #7
 8007988:	1ac2      	subs	r2, r0, r3
 800798a:	bf1c      	itt	ne
 800798c:	1a1b      	subne	r3, r3, r0
 800798e:	50a3      	strne	r3, [r4, r2]
 8007990:	e7af      	b.n	80078f2 <_malloc_r+0x22>
 8007992:	6862      	ldr	r2, [r4, #4]
 8007994:	42a3      	cmp	r3, r4
 8007996:	bf0c      	ite	eq
 8007998:	f8c8 2000 	streq.w	r2, [r8]
 800799c:	605a      	strne	r2, [r3, #4]
 800799e:	e7eb      	b.n	8007978 <_malloc_r+0xa8>
 80079a0:	4623      	mov	r3, r4
 80079a2:	6864      	ldr	r4, [r4, #4]
 80079a4:	e7ae      	b.n	8007904 <_malloc_r+0x34>
 80079a6:	463c      	mov	r4, r7
 80079a8:	687f      	ldr	r7, [r7, #4]
 80079aa:	e7b6      	b.n	800791a <_malloc_r+0x4a>
 80079ac:	461a      	mov	r2, r3
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	42a3      	cmp	r3, r4
 80079b2:	d1fb      	bne.n	80079ac <_malloc_r+0xdc>
 80079b4:	2300      	movs	r3, #0
 80079b6:	6053      	str	r3, [r2, #4]
 80079b8:	e7de      	b.n	8007978 <_malloc_r+0xa8>
 80079ba:	230c      	movs	r3, #12
 80079bc:	6033      	str	r3, [r6, #0]
 80079be:	4630      	mov	r0, r6
 80079c0:	f000 f80c 	bl	80079dc <__malloc_unlock>
 80079c4:	e794      	b.n	80078f0 <_malloc_r+0x20>
 80079c6:	6005      	str	r5, [r0, #0]
 80079c8:	e7d6      	b.n	8007978 <_malloc_r+0xa8>
 80079ca:	bf00      	nop
 80079cc:	20005018 	.word	0x20005018

080079d0 <__malloc_lock>:
 80079d0:	4801      	ldr	r0, [pc, #4]	@ (80079d8 <__malloc_lock+0x8>)
 80079d2:	f7ff bf00 	b.w	80077d6 <__retarget_lock_acquire_recursive>
 80079d6:	bf00      	nop
 80079d8:	20005010 	.word	0x20005010

080079dc <__malloc_unlock>:
 80079dc:	4801      	ldr	r0, [pc, #4]	@ (80079e4 <__malloc_unlock+0x8>)
 80079de:	f7ff befb 	b.w	80077d8 <__retarget_lock_release_recursive>
 80079e2:	bf00      	nop
 80079e4:	20005010 	.word	0x20005010

080079e8 <__sfputc_r>:
 80079e8:	6893      	ldr	r3, [r2, #8]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	b410      	push	{r4}
 80079f0:	6093      	str	r3, [r2, #8]
 80079f2:	da08      	bge.n	8007a06 <__sfputc_r+0x1e>
 80079f4:	6994      	ldr	r4, [r2, #24]
 80079f6:	42a3      	cmp	r3, r4
 80079f8:	db01      	blt.n	80079fe <__sfputc_r+0x16>
 80079fa:	290a      	cmp	r1, #10
 80079fc:	d103      	bne.n	8007a06 <__sfputc_r+0x1e>
 80079fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a02:	f000 bb6d 	b.w	80080e0 <__swbuf_r>
 8007a06:	6813      	ldr	r3, [r2, #0]
 8007a08:	1c58      	adds	r0, r3, #1
 8007a0a:	6010      	str	r0, [r2, #0]
 8007a0c:	7019      	strb	r1, [r3, #0]
 8007a0e:	4608      	mov	r0, r1
 8007a10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <__sfputs_r>:
 8007a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a18:	4606      	mov	r6, r0
 8007a1a:	460f      	mov	r7, r1
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	18d5      	adds	r5, r2, r3
 8007a20:	42ac      	cmp	r4, r5
 8007a22:	d101      	bne.n	8007a28 <__sfputs_r+0x12>
 8007a24:	2000      	movs	r0, #0
 8007a26:	e007      	b.n	8007a38 <__sfputs_r+0x22>
 8007a28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2c:	463a      	mov	r2, r7
 8007a2e:	4630      	mov	r0, r6
 8007a30:	f7ff ffda 	bl	80079e8 <__sfputc_r>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d1f3      	bne.n	8007a20 <__sfputs_r+0xa>
 8007a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a3c <_vfiprintf_r>:
 8007a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a40:	460d      	mov	r5, r1
 8007a42:	b09d      	sub	sp, #116	@ 0x74
 8007a44:	4614      	mov	r4, r2
 8007a46:	4698      	mov	r8, r3
 8007a48:	4606      	mov	r6, r0
 8007a4a:	b118      	cbz	r0, 8007a54 <_vfiprintf_r+0x18>
 8007a4c:	6a03      	ldr	r3, [r0, #32]
 8007a4e:	b90b      	cbnz	r3, 8007a54 <_vfiprintf_r+0x18>
 8007a50:	f7ff fd66 	bl	8007520 <__sinit>
 8007a54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a56:	07d9      	lsls	r1, r3, #31
 8007a58:	d405      	bmi.n	8007a66 <_vfiprintf_r+0x2a>
 8007a5a:	89ab      	ldrh	r3, [r5, #12]
 8007a5c:	059a      	lsls	r2, r3, #22
 8007a5e:	d402      	bmi.n	8007a66 <_vfiprintf_r+0x2a>
 8007a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a62:	f7ff feb8 	bl	80077d6 <__retarget_lock_acquire_recursive>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	071b      	lsls	r3, r3, #28
 8007a6a:	d501      	bpl.n	8007a70 <_vfiprintf_r+0x34>
 8007a6c:	692b      	ldr	r3, [r5, #16]
 8007a6e:	b99b      	cbnz	r3, 8007a98 <_vfiprintf_r+0x5c>
 8007a70:	4629      	mov	r1, r5
 8007a72:	4630      	mov	r0, r6
 8007a74:	f000 fb72 	bl	800815c <__swsetup_r>
 8007a78:	b170      	cbz	r0, 8007a98 <_vfiprintf_r+0x5c>
 8007a7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a7c:	07dc      	lsls	r4, r3, #31
 8007a7e:	d504      	bpl.n	8007a8a <_vfiprintf_r+0x4e>
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	b01d      	add	sp, #116	@ 0x74
 8007a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	0598      	lsls	r0, r3, #22
 8007a8e:	d4f7      	bmi.n	8007a80 <_vfiprintf_r+0x44>
 8007a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a92:	f7ff fea1 	bl	80077d8 <__retarget_lock_release_recursive>
 8007a96:	e7f3      	b.n	8007a80 <_vfiprintf_r+0x44>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a9c:	2320      	movs	r3, #32
 8007a9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aa6:	2330      	movs	r3, #48	@ 0x30
 8007aa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007c58 <_vfiprintf_r+0x21c>
 8007aac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ab0:	f04f 0901 	mov.w	r9, #1
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	469a      	mov	sl, r3
 8007ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007abc:	b10a      	cbz	r2, 8007ac2 <_vfiprintf_r+0x86>
 8007abe:	2a25      	cmp	r2, #37	@ 0x25
 8007ac0:	d1f9      	bne.n	8007ab6 <_vfiprintf_r+0x7a>
 8007ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ac6:	d00b      	beq.n	8007ae0 <_vfiprintf_r+0xa4>
 8007ac8:	465b      	mov	r3, fp
 8007aca:	4622      	mov	r2, r4
 8007acc:	4629      	mov	r1, r5
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f7ff ffa1 	bl	8007a16 <__sfputs_r>
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	f000 80a7 	beq.w	8007c28 <_vfiprintf_r+0x1ec>
 8007ada:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007adc:	445a      	add	r2, fp
 8007ade:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 809f 	beq.w	8007c28 <_vfiprintf_r+0x1ec>
 8007aea:	2300      	movs	r3, #0
 8007aec:	f04f 32ff 	mov.w	r2, #4294967295
 8007af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007af4:	f10a 0a01 	add.w	sl, sl, #1
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	9307      	str	r3, [sp, #28]
 8007afc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b00:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b02:	4654      	mov	r4, sl
 8007b04:	2205      	movs	r2, #5
 8007b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0a:	4853      	ldr	r0, [pc, #332]	@ (8007c58 <_vfiprintf_r+0x21c>)
 8007b0c:	f7f8 fb70 	bl	80001f0 <memchr>
 8007b10:	9a04      	ldr	r2, [sp, #16]
 8007b12:	b9d8      	cbnz	r0, 8007b4c <_vfiprintf_r+0x110>
 8007b14:	06d1      	lsls	r1, r2, #27
 8007b16:	bf44      	itt	mi
 8007b18:	2320      	movmi	r3, #32
 8007b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b1e:	0713      	lsls	r3, r2, #28
 8007b20:	bf44      	itt	mi
 8007b22:	232b      	movmi	r3, #43	@ 0x2b
 8007b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b28:	f89a 3000 	ldrb.w	r3, [sl]
 8007b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b2e:	d015      	beq.n	8007b5c <_vfiprintf_r+0x120>
 8007b30:	9a07      	ldr	r2, [sp, #28]
 8007b32:	4654      	mov	r4, sl
 8007b34:	2000      	movs	r0, #0
 8007b36:	f04f 0c0a 	mov.w	ip, #10
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b40:	3b30      	subs	r3, #48	@ 0x30
 8007b42:	2b09      	cmp	r3, #9
 8007b44:	d94b      	bls.n	8007bde <_vfiprintf_r+0x1a2>
 8007b46:	b1b0      	cbz	r0, 8007b76 <_vfiprintf_r+0x13a>
 8007b48:	9207      	str	r2, [sp, #28]
 8007b4a:	e014      	b.n	8007b76 <_vfiprintf_r+0x13a>
 8007b4c:	eba0 0308 	sub.w	r3, r0, r8
 8007b50:	fa09 f303 	lsl.w	r3, r9, r3
 8007b54:	4313      	orrs	r3, r2
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	46a2      	mov	sl, r4
 8007b5a:	e7d2      	b.n	8007b02 <_vfiprintf_r+0xc6>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	1d19      	adds	r1, r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	9103      	str	r1, [sp, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bfbb      	ittet	lt
 8007b68:	425b      	neglt	r3, r3
 8007b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8007b6e:	9307      	strge	r3, [sp, #28]
 8007b70:	9307      	strlt	r3, [sp, #28]
 8007b72:	bfb8      	it	lt
 8007b74:	9204      	strlt	r2, [sp, #16]
 8007b76:	7823      	ldrb	r3, [r4, #0]
 8007b78:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b7a:	d10a      	bne.n	8007b92 <_vfiprintf_r+0x156>
 8007b7c:	7863      	ldrb	r3, [r4, #1]
 8007b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b80:	d132      	bne.n	8007be8 <_vfiprintf_r+0x1ac>
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	1d1a      	adds	r2, r3, #4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	9203      	str	r2, [sp, #12]
 8007b8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b8e:	3402      	adds	r4, #2
 8007b90:	9305      	str	r3, [sp, #20]
 8007b92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c68 <_vfiprintf_r+0x22c>
 8007b96:	7821      	ldrb	r1, [r4, #0]
 8007b98:	2203      	movs	r2, #3
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	f7f8 fb28 	bl	80001f0 <memchr>
 8007ba0:	b138      	cbz	r0, 8007bb2 <_vfiprintf_r+0x176>
 8007ba2:	9b04      	ldr	r3, [sp, #16]
 8007ba4:	eba0 000a 	sub.w	r0, r0, sl
 8007ba8:	2240      	movs	r2, #64	@ 0x40
 8007baa:	4082      	lsls	r2, r0
 8007bac:	4313      	orrs	r3, r2
 8007bae:	3401      	adds	r4, #1
 8007bb0:	9304      	str	r3, [sp, #16]
 8007bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb6:	4829      	ldr	r0, [pc, #164]	@ (8007c5c <_vfiprintf_r+0x220>)
 8007bb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bbc:	2206      	movs	r2, #6
 8007bbe:	f7f8 fb17 	bl	80001f0 <memchr>
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d03f      	beq.n	8007c46 <_vfiprintf_r+0x20a>
 8007bc6:	4b26      	ldr	r3, [pc, #152]	@ (8007c60 <_vfiprintf_r+0x224>)
 8007bc8:	bb1b      	cbnz	r3, 8007c12 <_vfiprintf_r+0x1d6>
 8007bca:	9b03      	ldr	r3, [sp, #12]
 8007bcc:	3307      	adds	r3, #7
 8007bce:	f023 0307 	bic.w	r3, r3, #7
 8007bd2:	3308      	adds	r3, #8
 8007bd4:	9303      	str	r3, [sp, #12]
 8007bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd8:	443b      	add	r3, r7
 8007bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bdc:	e76a      	b.n	8007ab4 <_vfiprintf_r+0x78>
 8007bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8007be2:	460c      	mov	r4, r1
 8007be4:	2001      	movs	r0, #1
 8007be6:	e7a8      	b.n	8007b3a <_vfiprintf_r+0xfe>
 8007be8:	2300      	movs	r3, #0
 8007bea:	3401      	adds	r4, #1
 8007bec:	9305      	str	r3, [sp, #20]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	f04f 0c0a 	mov.w	ip, #10
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bfa:	3a30      	subs	r2, #48	@ 0x30
 8007bfc:	2a09      	cmp	r2, #9
 8007bfe:	d903      	bls.n	8007c08 <_vfiprintf_r+0x1cc>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0c6      	beq.n	8007b92 <_vfiprintf_r+0x156>
 8007c04:	9105      	str	r1, [sp, #20]
 8007c06:	e7c4      	b.n	8007b92 <_vfiprintf_r+0x156>
 8007c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e7f0      	b.n	8007bf4 <_vfiprintf_r+0x1b8>
 8007c12:	ab03      	add	r3, sp, #12
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	462a      	mov	r2, r5
 8007c18:	4b12      	ldr	r3, [pc, #72]	@ (8007c64 <_vfiprintf_r+0x228>)
 8007c1a:	a904      	add	r1, sp, #16
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f3af 8000 	nop.w
 8007c22:	4607      	mov	r7, r0
 8007c24:	1c78      	adds	r0, r7, #1
 8007c26:	d1d6      	bne.n	8007bd6 <_vfiprintf_r+0x19a>
 8007c28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c2a:	07d9      	lsls	r1, r3, #31
 8007c2c:	d405      	bmi.n	8007c3a <_vfiprintf_r+0x1fe>
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	059a      	lsls	r2, r3, #22
 8007c32:	d402      	bmi.n	8007c3a <_vfiprintf_r+0x1fe>
 8007c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c36:	f7ff fdcf 	bl	80077d8 <__retarget_lock_release_recursive>
 8007c3a:	89ab      	ldrh	r3, [r5, #12]
 8007c3c:	065b      	lsls	r3, r3, #25
 8007c3e:	f53f af1f 	bmi.w	8007a80 <_vfiprintf_r+0x44>
 8007c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c44:	e71e      	b.n	8007a84 <_vfiprintf_r+0x48>
 8007c46:	ab03      	add	r3, sp, #12
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	462a      	mov	r2, r5
 8007c4c:	4b05      	ldr	r3, [pc, #20]	@ (8007c64 <_vfiprintf_r+0x228>)
 8007c4e:	a904      	add	r1, sp, #16
 8007c50:	4630      	mov	r0, r6
 8007c52:	f000 f879 	bl	8007d48 <_printf_i>
 8007c56:	e7e4      	b.n	8007c22 <_vfiprintf_r+0x1e6>
 8007c58:	08008568 	.word	0x08008568
 8007c5c:	08008572 	.word	0x08008572
 8007c60:	00000000 	.word	0x00000000
 8007c64:	08007a17 	.word	0x08007a17
 8007c68:	0800856e 	.word	0x0800856e

08007c6c <_printf_common>:
 8007c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c70:	4616      	mov	r6, r2
 8007c72:	4698      	mov	r8, r3
 8007c74:	688a      	ldr	r2, [r1, #8]
 8007c76:	690b      	ldr	r3, [r1, #16]
 8007c78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	bfb8      	it	lt
 8007c80:	4613      	movlt	r3, r2
 8007c82:	6033      	str	r3, [r6, #0]
 8007c84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c88:	4607      	mov	r7, r0
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	b10a      	cbz	r2, 8007c92 <_printf_common+0x26>
 8007c8e:	3301      	adds	r3, #1
 8007c90:	6033      	str	r3, [r6, #0]
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	0699      	lsls	r1, r3, #26
 8007c96:	bf42      	ittt	mi
 8007c98:	6833      	ldrmi	r3, [r6, #0]
 8007c9a:	3302      	addmi	r3, #2
 8007c9c:	6033      	strmi	r3, [r6, #0]
 8007c9e:	6825      	ldr	r5, [r4, #0]
 8007ca0:	f015 0506 	ands.w	r5, r5, #6
 8007ca4:	d106      	bne.n	8007cb4 <_printf_common+0x48>
 8007ca6:	f104 0a19 	add.w	sl, r4, #25
 8007caa:	68e3      	ldr	r3, [r4, #12]
 8007cac:	6832      	ldr	r2, [r6, #0]
 8007cae:	1a9b      	subs	r3, r3, r2
 8007cb0:	42ab      	cmp	r3, r5
 8007cb2:	dc26      	bgt.n	8007d02 <_printf_common+0x96>
 8007cb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cb8:	6822      	ldr	r2, [r4, #0]
 8007cba:	3b00      	subs	r3, #0
 8007cbc:	bf18      	it	ne
 8007cbe:	2301      	movne	r3, #1
 8007cc0:	0692      	lsls	r2, r2, #26
 8007cc2:	d42b      	bmi.n	8007d1c <_printf_common+0xb0>
 8007cc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cc8:	4641      	mov	r1, r8
 8007cca:	4638      	mov	r0, r7
 8007ccc:	47c8      	blx	r9
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d01e      	beq.n	8007d10 <_printf_common+0xa4>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	6922      	ldr	r2, [r4, #16]
 8007cd6:	f003 0306 	and.w	r3, r3, #6
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	bf02      	ittt	eq
 8007cde:	68e5      	ldreq	r5, [r4, #12]
 8007ce0:	6833      	ldreq	r3, [r6, #0]
 8007ce2:	1aed      	subeq	r5, r5, r3
 8007ce4:	68a3      	ldr	r3, [r4, #8]
 8007ce6:	bf0c      	ite	eq
 8007ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cec:	2500      	movne	r5, #0
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	bfc4      	itt	gt
 8007cf2:	1a9b      	subgt	r3, r3, r2
 8007cf4:	18ed      	addgt	r5, r5, r3
 8007cf6:	2600      	movs	r6, #0
 8007cf8:	341a      	adds	r4, #26
 8007cfa:	42b5      	cmp	r5, r6
 8007cfc:	d11a      	bne.n	8007d34 <_printf_common+0xc8>
 8007cfe:	2000      	movs	r0, #0
 8007d00:	e008      	b.n	8007d14 <_printf_common+0xa8>
 8007d02:	2301      	movs	r3, #1
 8007d04:	4652      	mov	r2, sl
 8007d06:	4641      	mov	r1, r8
 8007d08:	4638      	mov	r0, r7
 8007d0a:	47c8      	blx	r9
 8007d0c:	3001      	adds	r0, #1
 8007d0e:	d103      	bne.n	8007d18 <_printf_common+0xac>
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d18:	3501      	adds	r5, #1
 8007d1a:	e7c6      	b.n	8007caa <_printf_common+0x3e>
 8007d1c:	18e1      	adds	r1, r4, r3
 8007d1e:	1c5a      	adds	r2, r3, #1
 8007d20:	2030      	movs	r0, #48	@ 0x30
 8007d22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d26:	4422      	add	r2, r4
 8007d28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d30:	3302      	adds	r3, #2
 8007d32:	e7c7      	b.n	8007cc4 <_printf_common+0x58>
 8007d34:	2301      	movs	r3, #1
 8007d36:	4622      	mov	r2, r4
 8007d38:	4641      	mov	r1, r8
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	47c8      	blx	r9
 8007d3e:	3001      	adds	r0, #1
 8007d40:	d0e6      	beq.n	8007d10 <_printf_common+0xa4>
 8007d42:	3601      	adds	r6, #1
 8007d44:	e7d9      	b.n	8007cfa <_printf_common+0x8e>
	...

08007d48 <_printf_i>:
 8007d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d4c:	7e0f      	ldrb	r7, [r1, #24]
 8007d4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d50:	2f78      	cmp	r7, #120	@ 0x78
 8007d52:	4691      	mov	r9, r2
 8007d54:	4680      	mov	r8, r0
 8007d56:	460c      	mov	r4, r1
 8007d58:	469a      	mov	sl, r3
 8007d5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d5e:	d807      	bhi.n	8007d70 <_printf_i+0x28>
 8007d60:	2f62      	cmp	r7, #98	@ 0x62
 8007d62:	d80a      	bhi.n	8007d7a <_printf_i+0x32>
 8007d64:	2f00      	cmp	r7, #0
 8007d66:	f000 80d2 	beq.w	8007f0e <_printf_i+0x1c6>
 8007d6a:	2f58      	cmp	r7, #88	@ 0x58
 8007d6c:	f000 80b9 	beq.w	8007ee2 <_printf_i+0x19a>
 8007d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d78:	e03a      	b.n	8007df0 <_printf_i+0xa8>
 8007d7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d7e:	2b15      	cmp	r3, #21
 8007d80:	d8f6      	bhi.n	8007d70 <_printf_i+0x28>
 8007d82:	a101      	add	r1, pc, #4	@ (adr r1, 8007d88 <_printf_i+0x40>)
 8007d84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d88:	08007de1 	.word	0x08007de1
 8007d8c:	08007df5 	.word	0x08007df5
 8007d90:	08007d71 	.word	0x08007d71
 8007d94:	08007d71 	.word	0x08007d71
 8007d98:	08007d71 	.word	0x08007d71
 8007d9c:	08007d71 	.word	0x08007d71
 8007da0:	08007df5 	.word	0x08007df5
 8007da4:	08007d71 	.word	0x08007d71
 8007da8:	08007d71 	.word	0x08007d71
 8007dac:	08007d71 	.word	0x08007d71
 8007db0:	08007d71 	.word	0x08007d71
 8007db4:	08007ef5 	.word	0x08007ef5
 8007db8:	08007e1f 	.word	0x08007e1f
 8007dbc:	08007eaf 	.word	0x08007eaf
 8007dc0:	08007d71 	.word	0x08007d71
 8007dc4:	08007d71 	.word	0x08007d71
 8007dc8:	08007f17 	.word	0x08007f17
 8007dcc:	08007d71 	.word	0x08007d71
 8007dd0:	08007e1f 	.word	0x08007e1f
 8007dd4:	08007d71 	.word	0x08007d71
 8007dd8:	08007d71 	.word	0x08007d71
 8007ddc:	08007eb7 	.word	0x08007eb7
 8007de0:	6833      	ldr	r3, [r6, #0]
 8007de2:	1d1a      	adds	r2, r3, #4
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6032      	str	r2, [r6, #0]
 8007de8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007df0:	2301      	movs	r3, #1
 8007df2:	e09d      	b.n	8007f30 <_printf_i+0x1e8>
 8007df4:	6833      	ldr	r3, [r6, #0]
 8007df6:	6820      	ldr	r0, [r4, #0]
 8007df8:	1d19      	adds	r1, r3, #4
 8007dfa:	6031      	str	r1, [r6, #0]
 8007dfc:	0606      	lsls	r6, r0, #24
 8007dfe:	d501      	bpl.n	8007e04 <_printf_i+0xbc>
 8007e00:	681d      	ldr	r5, [r3, #0]
 8007e02:	e003      	b.n	8007e0c <_printf_i+0xc4>
 8007e04:	0645      	lsls	r5, r0, #25
 8007e06:	d5fb      	bpl.n	8007e00 <_printf_i+0xb8>
 8007e08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e0c:	2d00      	cmp	r5, #0
 8007e0e:	da03      	bge.n	8007e18 <_printf_i+0xd0>
 8007e10:	232d      	movs	r3, #45	@ 0x2d
 8007e12:	426d      	negs	r5, r5
 8007e14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e18:	4859      	ldr	r0, [pc, #356]	@ (8007f80 <_printf_i+0x238>)
 8007e1a:	230a      	movs	r3, #10
 8007e1c:	e011      	b.n	8007e42 <_printf_i+0xfa>
 8007e1e:	6821      	ldr	r1, [r4, #0]
 8007e20:	6833      	ldr	r3, [r6, #0]
 8007e22:	0608      	lsls	r0, r1, #24
 8007e24:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e28:	d402      	bmi.n	8007e30 <_printf_i+0xe8>
 8007e2a:	0649      	lsls	r1, r1, #25
 8007e2c:	bf48      	it	mi
 8007e2e:	b2ad      	uxthmi	r5, r5
 8007e30:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e32:	4853      	ldr	r0, [pc, #332]	@ (8007f80 <_printf_i+0x238>)
 8007e34:	6033      	str	r3, [r6, #0]
 8007e36:	bf14      	ite	ne
 8007e38:	230a      	movne	r3, #10
 8007e3a:	2308      	moveq	r3, #8
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e42:	6866      	ldr	r6, [r4, #4]
 8007e44:	60a6      	str	r6, [r4, #8]
 8007e46:	2e00      	cmp	r6, #0
 8007e48:	bfa2      	ittt	ge
 8007e4a:	6821      	ldrge	r1, [r4, #0]
 8007e4c:	f021 0104 	bicge.w	r1, r1, #4
 8007e50:	6021      	strge	r1, [r4, #0]
 8007e52:	b90d      	cbnz	r5, 8007e58 <_printf_i+0x110>
 8007e54:	2e00      	cmp	r6, #0
 8007e56:	d04b      	beq.n	8007ef0 <_printf_i+0x1a8>
 8007e58:	4616      	mov	r6, r2
 8007e5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e5e:	fb03 5711 	mls	r7, r3, r1, r5
 8007e62:	5dc7      	ldrb	r7, [r0, r7]
 8007e64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e68:	462f      	mov	r7, r5
 8007e6a:	42bb      	cmp	r3, r7
 8007e6c:	460d      	mov	r5, r1
 8007e6e:	d9f4      	bls.n	8007e5a <_printf_i+0x112>
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d10b      	bne.n	8007e8c <_printf_i+0x144>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	07df      	lsls	r7, r3, #31
 8007e78:	d508      	bpl.n	8007e8c <_printf_i+0x144>
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	6861      	ldr	r1, [r4, #4]
 8007e7e:	4299      	cmp	r1, r3
 8007e80:	bfde      	ittt	le
 8007e82:	2330      	movle	r3, #48	@ 0x30
 8007e84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e8c:	1b92      	subs	r2, r2, r6
 8007e8e:	6122      	str	r2, [r4, #16]
 8007e90:	f8cd a000 	str.w	sl, [sp]
 8007e94:	464b      	mov	r3, r9
 8007e96:	aa03      	add	r2, sp, #12
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	f7ff fee6 	bl	8007c6c <_printf_common>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d14a      	bne.n	8007f3a <_printf_i+0x1f2>
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	b004      	add	sp, #16
 8007eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eae:	6823      	ldr	r3, [r4, #0]
 8007eb0:	f043 0320 	orr.w	r3, r3, #32
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	4833      	ldr	r0, [pc, #204]	@ (8007f84 <_printf_i+0x23c>)
 8007eb8:	2778      	movs	r7, #120	@ 0x78
 8007eba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	6831      	ldr	r1, [r6, #0]
 8007ec2:	061f      	lsls	r7, r3, #24
 8007ec4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ec8:	d402      	bmi.n	8007ed0 <_printf_i+0x188>
 8007eca:	065f      	lsls	r7, r3, #25
 8007ecc:	bf48      	it	mi
 8007ece:	b2ad      	uxthmi	r5, r5
 8007ed0:	6031      	str	r1, [r6, #0]
 8007ed2:	07d9      	lsls	r1, r3, #31
 8007ed4:	bf44      	itt	mi
 8007ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8007eda:	6023      	strmi	r3, [r4, #0]
 8007edc:	b11d      	cbz	r5, 8007ee6 <_printf_i+0x19e>
 8007ede:	2310      	movs	r3, #16
 8007ee0:	e7ac      	b.n	8007e3c <_printf_i+0xf4>
 8007ee2:	4827      	ldr	r0, [pc, #156]	@ (8007f80 <_printf_i+0x238>)
 8007ee4:	e7e9      	b.n	8007eba <_printf_i+0x172>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	f023 0320 	bic.w	r3, r3, #32
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	e7f6      	b.n	8007ede <_printf_i+0x196>
 8007ef0:	4616      	mov	r6, r2
 8007ef2:	e7bd      	b.n	8007e70 <_printf_i+0x128>
 8007ef4:	6833      	ldr	r3, [r6, #0]
 8007ef6:	6825      	ldr	r5, [r4, #0]
 8007ef8:	6961      	ldr	r1, [r4, #20]
 8007efa:	1d18      	adds	r0, r3, #4
 8007efc:	6030      	str	r0, [r6, #0]
 8007efe:	062e      	lsls	r6, r5, #24
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	d501      	bpl.n	8007f08 <_printf_i+0x1c0>
 8007f04:	6019      	str	r1, [r3, #0]
 8007f06:	e002      	b.n	8007f0e <_printf_i+0x1c6>
 8007f08:	0668      	lsls	r0, r5, #25
 8007f0a:	d5fb      	bpl.n	8007f04 <_printf_i+0x1bc>
 8007f0c:	8019      	strh	r1, [r3, #0]
 8007f0e:	2300      	movs	r3, #0
 8007f10:	6123      	str	r3, [r4, #16]
 8007f12:	4616      	mov	r6, r2
 8007f14:	e7bc      	b.n	8007e90 <_printf_i+0x148>
 8007f16:	6833      	ldr	r3, [r6, #0]
 8007f18:	1d1a      	adds	r2, r3, #4
 8007f1a:	6032      	str	r2, [r6, #0]
 8007f1c:	681e      	ldr	r6, [r3, #0]
 8007f1e:	6862      	ldr	r2, [r4, #4]
 8007f20:	2100      	movs	r1, #0
 8007f22:	4630      	mov	r0, r6
 8007f24:	f7f8 f964 	bl	80001f0 <memchr>
 8007f28:	b108      	cbz	r0, 8007f2e <_printf_i+0x1e6>
 8007f2a:	1b80      	subs	r0, r0, r6
 8007f2c:	6060      	str	r0, [r4, #4]
 8007f2e:	6863      	ldr	r3, [r4, #4]
 8007f30:	6123      	str	r3, [r4, #16]
 8007f32:	2300      	movs	r3, #0
 8007f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f38:	e7aa      	b.n	8007e90 <_printf_i+0x148>
 8007f3a:	6923      	ldr	r3, [r4, #16]
 8007f3c:	4632      	mov	r2, r6
 8007f3e:	4649      	mov	r1, r9
 8007f40:	4640      	mov	r0, r8
 8007f42:	47d0      	blx	sl
 8007f44:	3001      	adds	r0, #1
 8007f46:	d0ad      	beq.n	8007ea4 <_printf_i+0x15c>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	079b      	lsls	r3, r3, #30
 8007f4c:	d413      	bmi.n	8007f76 <_printf_i+0x22e>
 8007f4e:	68e0      	ldr	r0, [r4, #12]
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	4298      	cmp	r0, r3
 8007f54:	bfb8      	it	lt
 8007f56:	4618      	movlt	r0, r3
 8007f58:	e7a6      	b.n	8007ea8 <_printf_i+0x160>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	4649      	mov	r1, r9
 8007f60:	4640      	mov	r0, r8
 8007f62:	47d0      	blx	sl
 8007f64:	3001      	adds	r0, #1
 8007f66:	d09d      	beq.n	8007ea4 <_printf_i+0x15c>
 8007f68:	3501      	adds	r5, #1
 8007f6a:	68e3      	ldr	r3, [r4, #12]
 8007f6c:	9903      	ldr	r1, [sp, #12]
 8007f6e:	1a5b      	subs	r3, r3, r1
 8007f70:	42ab      	cmp	r3, r5
 8007f72:	dcf2      	bgt.n	8007f5a <_printf_i+0x212>
 8007f74:	e7eb      	b.n	8007f4e <_printf_i+0x206>
 8007f76:	2500      	movs	r5, #0
 8007f78:	f104 0619 	add.w	r6, r4, #25
 8007f7c:	e7f5      	b.n	8007f6a <_printf_i+0x222>
 8007f7e:	bf00      	nop
 8007f80:	08008579 	.word	0x08008579
 8007f84:	0800858a 	.word	0x0800858a

08007f88 <__sflush_r>:
 8007f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f90:	0716      	lsls	r6, r2, #28
 8007f92:	4605      	mov	r5, r0
 8007f94:	460c      	mov	r4, r1
 8007f96:	d454      	bmi.n	8008042 <__sflush_r+0xba>
 8007f98:	684b      	ldr	r3, [r1, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	dc02      	bgt.n	8007fa4 <__sflush_r+0x1c>
 8007f9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	dd48      	ble.n	8008036 <__sflush_r+0xae>
 8007fa4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fa6:	2e00      	cmp	r6, #0
 8007fa8:	d045      	beq.n	8008036 <__sflush_r+0xae>
 8007faa:	2300      	movs	r3, #0
 8007fac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fb0:	682f      	ldr	r7, [r5, #0]
 8007fb2:	6a21      	ldr	r1, [r4, #32]
 8007fb4:	602b      	str	r3, [r5, #0]
 8007fb6:	d030      	beq.n	800801a <__sflush_r+0x92>
 8007fb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	0759      	lsls	r1, r3, #29
 8007fbe:	d505      	bpl.n	8007fcc <__sflush_r+0x44>
 8007fc0:	6863      	ldr	r3, [r4, #4]
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fc6:	b10b      	cbz	r3, 8007fcc <__sflush_r+0x44>
 8007fc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fca:	1ad2      	subs	r2, r2, r3
 8007fcc:	2300      	movs	r3, #0
 8007fce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fd0:	6a21      	ldr	r1, [r4, #32]
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b0      	blx	r6
 8007fd6:	1c43      	adds	r3, r0, #1
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	d106      	bne.n	8007fea <__sflush_r+0x62>
 8007fdc:	6829      	ldr	r1, [r5, #0]
 8007fde:	291d      	cmp	r1, #29
 8007fe0:	d82b      	bhi.n	800803a <__sflush_r+0xb2>
 8007fe2:	4a2a      	ldr	r2, [pc, #168]	@ (800808c <__sflush_r+0x104>)
 8007fe4:	410a      	asrs	r2, r1
 8007fe6:	07d6      	lsls	r6, r2, #31
 8007fe8:	d427      	bmi.n	800803a <__sflush_r+0xb2>
 8007fea:	2200      	movs	r2, #0
 8007fec:	6062      	str	r2, [r4, #4]
 8007fee:	04d9      	lsls	r1, r3, #19
 8007ff0:	6922      	ldr	r2, [r4, #16]
 8007ff2:	6022      	str	r2, [r4, #0]
 8007ff4:	d504      	bpl.n	8008000 <__sflush_r+0x78>
 8007ff6:	1c42      	adds	r2, r0, #1
 8007ff8:	d101      	bne.n	8007ffe <__sflush_r+0x76>
 8007ffa:	682b      	ldr	r3, [r5, #0]
 8007ffc:	b903      	cbnz	r3, 8008000 <__sflush_r+0x78>
 8007ffe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008002:	602f      	str	r7, [r5, #0]
 8008004:	b1b9      	cbz	r1, 8008036 <__sflush_r+0xae>
 8008006:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800800a:	4299      	cmp	r1, r3
 800800c:	d002      	beq.n	8008014 <__sflush_r+0x8c>
 800800e:	4628      	mov	r0, r5
 8008010:	f7ff fbf2 	bl	80077f8 <_free_r>
 8008014:	2300      	movs	r3, #0
 8008016:	6363      	str	r3, [r4, #52]	@ 0x34
 8008018:	e00d      	b.n	8008036 <__sflush_r+0xae>
 800801a:	2301      	movs	r3, #1
 800801c:	4628      	mov	r0, r5
 800801e:	47b0      	blx	r6
 8008020:	4602      	mov	r2, r0
 8008022:	1c50      	adds	r0, r2, #1
 8008024:	d1c9      	bne.n	8007fba <__sflush_r+0x32>
 8008026:	682b      	ldr	r3, [r5, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d0c6      	beq.n	8007fba <__sflush_r+0x32>
 800802c:	2b1d      	cmp	r3, #29
 800802e:	d001      	beq.n	8008034 <__sflush_r+0xac>
 8008030:	2b16      	cmp	r3, #22
 8008032:	d11e      	bne.n	8008072 <__sflush_r+0xea>
 8008034:	602f      	str	r7, [r5, #0]
 8008036:	2000      	movs	r0, #0
 8008038:	e022      	b.n	8008080 <__sflush_r+0xf8>
 800803a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800803e:	b21b      	sxth	r3, r3
 8008040:	e01b      	b.n	800807a <__sflush_r+0xf2>
 8008042:	690f      	ldr	r7, [r1, #16]
 8008044:	2f00      	cmp	r7, #0
 8008046:	d0f6      	beq.n	8008036 <__sflush_r+0xae>
 8008048:	0793      	lsls	r3, r2, #30
 800804a:	680e      	ldr	r6, [r1, #0]
 800804c:	bf08      	it	eq
 800804e:	694b      	ldreq	r3, [r1, #20]
 8008050:	600f      	str	r7, [r1, #0]
 8008052:	bf18      	it	ne
 8008054:	2300      	movne	r3, #0
 8008056:	eba6 0807 	sub.w	r8, r6, r7
 800805a:	608b      	str	r3, [r1, #8]
 800805c:	f1b8 0f00 	cmp.w	r8, #0
 8008060:	dde9      	ble.n	8008036 <__sflush_r+0xae>
 8008062:	6a21      	ldr	r1, [r4, #32]
 8008064:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008066:	4643      	mov	r3, r8
 8008068:	463a      	mov	r2, r7
 800806a:	4628      	mov	r0, r5
 800806c:	47b0      	blx	r6
 800806e:	2800      	cmp	r0, #0
 8008070:	dc08      	bgt.n	8008084 <__sflush_r+0xfc>
 8008072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800807a:	81a3      	strh	r3, [r4, #12]
 800807c:	f04f 30ff 	mov.w	r0, #4294967295
 8008080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008084:	4407      	add	r7, r0
 8008086:	eba8 0800 	sub.w	r8, r8, r0
 800808a:	e7e7      	b.n	800805c <__sflush_r+0xd4>
 800808c:	dfbffffe 	.word	0xdfbffffe

08008090 <_fflush_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	690b      	ldr	r3, [r1, #16]
 8008094:	4605      	mov	r5, r0
 8008096:	460c      	mov	r4, r1
 8008098:	b913      	cbnz	r3, 80080a0 <_fflush_r+0x10>
 800809a:	2500      	movs	r5, #0
 800809c:	4628      	mov	r0, r5
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	b118      	cbz	r0, 80080aa <_fflush_r+0x1a>
 80080a2:	6a03      	ldr	r3, [r0, #32]
 80080a4:	b90b      	cbnz	r3, 80080aa <_fflush_r+0x1a>
 80080a6:	f7ff fa3b 	bl	8007520 <__sinit>
 80080aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0f3      	beq.n	800809a <_fflush_r+0xa>
 80080b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080b4:	07d0      	lsls	r0, r2, #31
 80080b6:	d404      	bmi.n	80080c2 <_fflush_r+0x32>
 80080b8:	0599      	lsls	r1, r3, #22
 80080ba:	d402      	bmi.n	80080c2 <_fflush_r+0x32>
 80080bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080be:	f7ff fb8a 	bl	80077d6 <__retarget_lock_acquire_recursive>
 80080c2:	4628      	mov	r0, r5
 80080c4:	4621      	mov	r1, r4
 80080c6:	f7ff ff5f 	bl	8007f88 <__sflush_r>
 80080ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080cc:	07da      	lsls	r2, r3, #31
 80080ce:	4605      	mov	r5, r0
 80080d0:	d4e4      	bmi.n	800809c <_fflush_r+0xc>
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	059b      	lsls	r3, r3, #22
 80080d6:	d4e1      	bmi.n	800809c <_fflush_r+0xc>
 80080d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080da:	f7ff fb7d 	bl	80077d8 <__retarget_lock_release_recursive>
 80080de:	e7dd      	b.n	800809c <_fflush_r+0xc>

080080e0 <__swbuf_r>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	460e      	mov	r6, r1
 80080e4:	4614      	mov	r4, r2
 80080e6:	4605      	mov	r5, r0
 80080e8:	b118      	cbz	r0, 80080f2 <__swbuf_r+0x12>
 80080ea:	6a03      	ldr	r3, [r0, #32]
 80080ec:	b90b      	cbnz	r3, 80080f2 <__swbuf_r+0x12>
 80080ee:	f7ff fa17 	bl	8007520 <__sinit>
 80080f2:	69a3      	ldr	r3, [r4, #24]
 80080f4:	60a3      	str	r3, [r4, #8]
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	071a      	lsls	r2, r3, #28
 80080fa:	d501      	bpl.n	8008100 <__swbuf_r+0x20>
 80080fc:	6923      	ldr	r3, [r4, #16]
 80080fe:	b943      	cbnz	r3, 8008112 <__swbuf_r+0x32>
 8008100:	4621      	mov	r1, r4
 8008102:	4628      	mov	r0, r5
 8008104:	f000 f82a 	bl	800815c <__swsetup_r>
 8008108:	b118      	cbz	r0, 8008112 <__swbuf_r+0x32>
 800810a:	f04f 37ff 	mov.w	r7, #4294967295
 800810e:	4638      	mov	r0, r7
 8008110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008112:	6823      	ldr	r3, [r4, #0]
 8008114:	6922      	ldr	r2, [r4, #16]
 8008116:	1a98      	subs	r0, r3, r2
 8008118:	6963      	ldr	r3, [r4, #20]
 800811a:	b2f6      	uxtb	r6, r6
 800811c:	4283      	cmp	r3, r0
 800811e:	4637      	mov	r7, r6
 8008120:	dc05      	bgt.n	800812e <__swbuf_r+0x4e>
 8008122:	4621      	mov	r1, r4
 8008124:	4628      	mov	r0, r5
 8008126:	f7ff ffb3 	bl	8008090 <_fflush_r>
 800812a:	2800      	cmp	r0, #0
 800812c:	d1ed      	bne.n	800810a <__swbuf_r+0x2a>
 800812e:	68a3      	ldr	r3, [r4, #8]
 8008130:	3b01      	subs	r3, #1
 8008132:	60a3      	str	r3, [r4, #8]
 8008134:	6823      	ldr	r3, [r4, #0]
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	6022      	str	r2, [r4, #0]
 800813a:	701e      	strb	r6, [r3, #0]
 800813c:	6962      	ldr	r2, [r4, #20]
 800813e:	1c43      	adds	r3, r0, #1
 8008140:	429a      	cmp	r2, r3
 8008142:	d004      	beq.n	800814e <__swbuf_r+0x6e>
 8008144:	89a3      	ldrh	r3, [r4, #12]
 8008146:	07db      	lsls	r3, r3, #31
 8008148:	d5e1      	bpl.n	800810e <__swbuf_r+0x2e>
 800814a:	2e0a      	cmp	r6, #10
 800814c:	d1df      	bne.n	800810e <__swbuf_r+0x2e>
 800814e:	4621      	mov	r1, r4
 8008150:	4628      	mov	r0, r5
 8008152:	f7ff ff9d 	bl	8008090 <_fflush_r>
 8008156:	2800      	cmp	r0, #0
 8008158:	d0d9      	beq.n	800810e <__swbuf_r+0x2e>
 800815a:	e7d6      	b.n	800810a <__swbuf_r+0x2a>

0800815c <__swsetup_r>:
 800815c:	b538      	push	{r3, r4, r5, lr}
 800815e:	4b29      	ldr	r3, [pc, #164]	@ (8008204 <__swsetup_r+0xa8>)
 8008160:	4605      	mov	r5, r0
 8008162:	6818      	ldr	r0, [r3, #0]
 8008164:	460c      	mov	r4, r1
 8008166:	b118      	cbz	r0, 8008170 <__swsetup_r+0x14>
 8008168:	6a03      	ldr	r3, [r0, #32]
 800816a:	b90b      	cbnz	r3, 8008170 <__swsetup_r+0x14>
 800816c:	f7ff f9d8 	bl	8007520 <__sinit>
 8008170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008174:	0719      	lsls	r1, r3, #28
 8008176:	d422      	bmi.n	80081be <__swsetup_r+0x62>
 8008178:	06da      	lsls	r2, r3, #27
 800817a:	d407      	bmi.n	800818c <__swsetup_r+0x30>
 800817c:	2209      	movs	r2, #9
 800817e:	602a      	str	r2, [r5, #0]
 8008180:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	f04f 30ff 	mov.w	r0, #4294967295
 800818a:	e033      	b.n	80081f4 <__swsetup_r+0x98>
 800818c:	0758      	lsls	r0, r3, #29
 800818e:	d512      	bpl.n	80081b6 <__swsetup_r+0x5a>
 8008190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008192:	b141      	cbz	r1, 80081a6 <__swsetup_r+0x4a>
 8008194:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008198:	4299      	cmp	r1, r3
 800819a:	d002      	beq.n	80081a2 <__swsetup_r+0x46>
 800819c:	4628      	mov	r0, r5
 800819e:	f7ff fb2b 	bl	80077f8 <_free_r>
 80081a2:	2300      	movs	r3, #0
 80081a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	2300      	movs	r3, #0
 80081b0:	6063      	str	r3, [r4, #4]
 80081b2:	6923      	ldr	r3, [r4, #16]
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	f043 0308 	orr.w	r3, r3, #8
 80081bc:	81a3      	strh	r3, [r4, #12]
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	b94b      	cbnz	r3, 80081d6 <__swsetup_r+0x7a>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081cc:	d003      	beq.n	80081d6 <__swsetup_r+0x7a>
 80081ce:	4621      	mov	r1, r4
 80081d0:	4628      	mov	r0, r5
 80081d2:	f000 f84f 	bl	8008274 <__smakebuf_r>
 80081d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081da:	f013 0201 	ands.w	r2, r3, #1
 80081de:	d00a      	beq.n	80081f6 <__swsetup_r+0x9a>
 80081e0:	2200      	movs	r2, #0
 80081e2:	60a2      	str	r2, [r4, #8]
 80081e4:	6962      	ldr	r2, [r4, #20]
 80081e6:	4252      	negs	r2, r2
 80081e8:	61a2      	str	r2, [r4, #24]
 80081ea:	6922      	ldr	r2, [r4, #16]
 80081ec:	b942      	cbnz	r2, 8008200 <__swsetup_r+0xa4>
 80081ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081f2:	d1c5      	bne.n	8008180 <__swsetup_r+0x24>
 80081f4:	bd38      	pop	{r3, r4, r5, pc}
 80081f6:	0799      	lsls	r1, r3, #30
 80081f8:	bf58      	it	pl
 80081fa:	6962      	ldrpl	r2, [r4, #20]
 80081fc:	60a2      	str	r2, [r4, #8]
 80081fe:	e7f4      	b.n	80081ea <__swsetup_r+0x8e>
 8008200:	2000      	movs	r0, #0
 8008202:	e7f7      	b.n	80081f4 <__swsetup_r+0x98>
 8008204:	2000006c 	.word	0x2000006c

08008208 <_sbrk_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4d06      	ldr	r5, [pc, #24]	@ (8008224 <_sbrk_r+0x1c>)
 800820c:	2300      	movs	r3, #0
 800820e:	4604      	mov	r4, r0
 8008210:	4608      	mov	r0, r1
 8008212:	602b      	str	r3, [r5, #0]
 8008214:	f7f9 fd8a 	bl	8001d2c <_sbrk>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d102      	bne.n	8008222 <_sbrk_r+0x1a>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	b103      	cbz	r3, 8008222 <_sbrk_r+0x1a>
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	2000500c 	.word	0x2000500c

08008228 <__swhatbuf_r>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	460c      	mov	r4, r1
 800822c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008230:	2900      	cmp	r1, #0
 8008232:	b096      	sub	sp, #88	@ 0x58
 8008234:	4615      	mov	r5, r2
 8008236:	461e      	mov	r6, r3
 8008238:	da0d      	bge.n	8008256 <__swhatbuf_r+0x2e>
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008240:	f04f 0100 	mov.w	r1, #0
 8008244:	bf14      	ite	ne
 8008246:	2340      	movne	r3, #64	@ 0x40
 8008248:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800824c:	2000      	movs	r0, #0
 800824e:	6031      	str	r1, [r6, #0]
 8008250:	602b      	str	r3, [r5, #0]
 8008252:	b016      	add	sp, #88	@ 0x58
 8008254:	bd70      	pop	{r4, r5, r6, pc}
 8008256:	466a      	mov	r2, sp
 8008258:	f000 f848 	bl	80082ec <_fstat_r>
 800825c:	2800      	cmp	r0, #0
 800825e:	dbec      	blt.n	800823a <__swhatbuf_r+0x12>
 8008260:	9901      	ldr	r1, [sp, #4]
 8008262:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008266:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800826a:	4259      	negs	r1, r3
 800826c:	4159      	adcs	r1, r3
 800826e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008272:	e7eb      	b.n	800824c <__swhatbuf_r+0x24>

08008274 <__smakebuf_r>:
 8008274:	898b      	ldrh	r3, [r1, #12]
 8008276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008278:	079d      	lsls	r5, r3, #30
 800827a:	4606      	mov	r6, r0
 800827c:	460c      	mov	r4, r1
 800827e:	d507      	bpl.n	8008290 <__smakebuf_r+0x1c>
 8008280:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	6123      	str	r3, [r4, #16]
 8008288:	2301      	movs	r3, #1
 800828a:	6163      	str	r3, [r4, #20]
 800828c:	b003      	add	sp, #12
 800828e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008290:	ab01      	add	r3, sp, #4
 8008292:	466a      	mov	r2, sp
 8008294:	f7ff ffc8 	bl	8008228 <__swhatbuf_r>
 8008298:	9f00      	ldr	r7, [sp, #0]
 800829a:	4605      	mov	r5, r0
 800829c:	4639      	mov	r1, r7
 800829e:	4630      	mov	r0, r6
 80082a0:	f7ff fb16 	bl	80078d0 <_malloc_r>
 80082a4:	b948      	cbnz	r0, 80082ba <__smakebuf_r+0x46>
 80082a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082aa:	059a      	lsls	r2, r3, #22
 80082ac:	d4ee      	bmi.n	800828c <__smakebuf_r+0x18>
 80082ae:	f023 0303 	bic.w	r3, r3, #3
 80082b2:	f043 0302 	orr.w	r3, r3, #2
 80082b6:	81a3      	strh	r3, [r4, #12]
 80082b8:	e7e2      	b.n	8008280 <__smakebuf_r+0xc>
 80082ba:	89a3      	ldrh	r3, [r4, #12]
 80082bc:	6020      	str	r0, [r4, #0]
 80082be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	9b01      	ldr	r3, [sp, #4]
 80082c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80082ca:	b15b      	cbz	r3, 80082e4 <__smakebuf_r+0x70>
 80082cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082d0:	4630      	mov	r0, r6
 80082d2:	f000 f81d 	bl	8008310 <_isatty_r>
 80082d6:	b128      	cbz	r0, 80082e4 <__smakebuf_r+0x70>
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	f023 0303 	bic.w	r3, r3, #3
 80082de:	f043 0301 	orr.w	r3, r3, #1
 80082e2:	81a3      	strh	r3, [r4, #12]
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	431d      	orrs	r5, r3
 80082e8:	81a5      	strh	r5, [r4, #12]
 80082ea:	e7cf      	b.n	800828c <__smakebuf_r+0x18>

080082ec <_fstat_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d07      	ldr	r5, [pc, #28]	@ (800830c <_fstat_r+0x20>)
 80082f0:	2300      	movs	r3, #0
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	4611      	mov	r1, r2
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	f7f9 fcee 	bl	8001cda <_fstat>
 80082fe:	1c43      	adds	r3, r0, #1
 8008300:	d102      	bne.n	8008308 <_fstat_r+0x1c>
 8008302:	682b      	ldr	r3, [r5, #0]
 8008304:	b103      	cbz	r3, 8008308 <_fstat_r+0x1c>
 8008306:	6023      	str	r3, [r4, #0]
 8008308:	bd38      	pop	{r3, r4, r5, pc}
 800830a:	bf00      	nop
 800830c:	2000500c 	.word	0x2000500c

08008310 <_isatty_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d06      	ldr	r5, [pc, #24]	@ (800832c <_isatty_r+0x1c>)
 8008314:	2300      	movs	r3, #0
 8008316:	4604      	mov	r4, r0
 8008318:	4608      	mov	r0, r1
 800831a:	602b      	str	r3, [r5, #0]
 800831c:	f7f9 fced 	bl	8001cfa <_isatty>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_isatty_r+0x1a>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_isatty_r+0x1a>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	2000500c 	.word	0x2000500c

08008330 <_init>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	bf00      	nop
 8008334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008336:	bc08      	pop	{r3}
 8008338:	469e      	mov	lr, r3
 800833a:	4770      	bx	lr

0800833c <_fini>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	bf00      	nop
 8008340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008342:	bc08      	pop	{r3}
 8008344:	469e      	mov	lr, r3
 8008346:	4770      	bx	lr
